[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "scripts/.external-ecmascript.js",
    "static": true,
    "longname": "scripts/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "scripts/experiment-properties/balancing/balancing_controller.js",
    "content": "import {initialize_latin_square} from \"/scripts/experiment-properties/balancing/generators/latin_square_generator.js\";\r\nimport {initialize_random_order} from \"/scripts/experiment-properties/balancing/generators/random_generator.js\";\r\nimport {initialize_blocked_latin_square} from \"/scripts/experiment-properties/balancing/generators/blocked_latin_square_generator.js\";\r\nimport {innitialize_custom_order} from \"/scripts/experiment-properties/balancing/generators/custom_order_generator.js\";\r\nimport { BALANCING_TYPES } from \"/config/balancing-config.js\";\r\nimport { EXPERIMENTS } from \"/config/experiments-config.js\";\r\n\r\nexport {balance_subconditions};\r\n\r\n/**\r\n * Returns the balanced order of the subconditions given balancing type,\r\n * experiment, and number of subconditions.\r\n *\r\n * @param {string}     \t\tbalancing_type\r\n * @param {experiment_name} name of experiment\r\n * @param {dataset_length}  length of dataset AKA number of subconditions\r\n * @param {dataset} \t\tarray of subconditions\r\n * @param {block_attribute} attribute we wish to block by\r\n *\r\n * @return {[]}\t\t  \t\tarray of indices, representing each subcondition in the dataset.\r\n */\r\nfunction balance_subconditions(balancing_type, experiment_name, dataset_length, dataset=null, block_attribute=\"block\", custom_order_string=null){\r\n\r\n\t// BALANCING_TYPES constant from /config/balancing-config.js\r\n\tif (BALANCING_TYPES[balancing_type] === undefined) {\r\n\t\tthrow Error(balancing_type + \" balancing type is not supported.\");\r\n\t}\r\n\r\n\t// EXPERIMENTS constant from /config/experiments-config.js\r\n\tif (EXPERIMENTS[experiment_name][\"balancing_type\"].includes(balancing_type)){\r\n\t\tlet balanced_order = []\r\n\t\tswitch (balancing_type) {\r\n\t\t\tcase \"latin_square\":\r\n\t\t\t\tbalanced_order = initialize_latin_square(dataset_length);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"random\":\r\n\t\t\t\tbalanced_order = initialize_random_order(dataset_length);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"blocked_latin_square\":\r\n\t\t\t\tbalanced_order = initialize_blocked_latin_square(dataset_length, dataset, block_attribute);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"custom\": innitialize_custom_order(balanced_order, dataset, block_attribute, custom_order_string)\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"none\":\r\n\t\t\t\tbalanced_order = Array.apply(null, {length: dataset_length}).map(Number.call, Number);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(balancing_type + \" has not been defined.\");\r\n\t\t}\r\n\t\treturn innitialize_custom_order(balanced_order, dataset, block_attribute, custom_order_string); //only applies if custom order is present in the URL\r\n\t}\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/balancing/balancing_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "balance_subconditions",
    "memberof": "scripts/experiment-properties/balancing/balancing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/balancing_controller.js~balance_subconditions",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/balancing_controller.js",
    "importStyle": "{balance_subconditions}",
    "description": "Returns the balanced order of the subconditions given balancing type,\nexperiment, and number of subconditions.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "balancing_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "experiment_name"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "of experiment"
      },
      {
        "nullable": null,
        "types": [
          "dataset_length"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "of dataset AKA number of subconditions"
      },
      {
        "nullable": null,
        "types": [
          "dataset"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "of subconditions"
      },
      {
        "nullable": null,
        "types": [
          "block_attribute"
        ],
        "spread": false,
        "optional": false,
        "name": "attribute",
        "description": "we wish to block by"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[]"
      ],
      "spread": false,
      "description": "array of indices, representing each subcondition in the dataset."
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "content": "export {shuffle, reorder}\r\n\r\n// modified from https://github.com/sindresorhus/array-shuffle\r\n// shuffle array in place\r\nfunction shuffle(arr) {\r\n\tvar len = arr.length\r\n\twhile (len) {\r\n\t\tvar rnd = Math.floor(Math.random() * len--)\r\n\t\tvar tmp = arr[len]\r\n\t\tarr[len] = arr[rnd]\r\n\t\tarr[rnd] = tmp\r\n\t}\r\n\treturn arr\r\n}\r\n\r\n/**\r\n * \r\n * @param {Array} arr we are reording\r\n * @param {Array} index for the reordered array\r\n * @returns {Array}\r\n */\r\nfunction reorder(arr, index){\r\n\tlet reordered_array = new Array(index.length);\r\n\tfor(let i = 0; i < index.length; i++){\r\n\t\tlet new_index = index[i];\r\n\t\treordered_array[i] = arr[new_index]\r\n\t}\r\n\treturn reordered_array;\r\n}\r\n\r\n/**\r\n * Gets the remaining indices of the array from a given array of indices\r\n * It is assumed indices in curr_indices are within range of the array\r\n * \r\n * @param {Array} curr_indices  array of current indices\r\n * @param {number} n \t\t\tsize of the array\r\n * @returns {Array}\r\n */\r\nexport function get_remaining_elements(curr_indices, n){\r\n\tlet remaining_indices = []\r\n\tfor(let i = 0; i < n; i++){\r\n\t\tif(!curr_indices.includes(i)){\r\n\t\t\tremaining_indices.push(i);\r\n\t\t}\r\n\t}\r\n\treturn remaining_indices;\r\n}\r\n\r\n/**\r\n * \r\n * @param {Array} array Array of indices and * for any index \r\n * @returns {Array} \r\n */\r\nexport function get_any_array(a){\r\n\tlet n = a.length;\r\n\tlet generated_array = new Array(n);\r\n\tlet curr_indices = [];\r\n\tlet number_indices = new Set();\r\n\tfor (let i = 0; i < a.length; i++){\r\n\t\tif(a[i] != '*'){\r\n\t\t\tcurr_indices.push(a[i]);\r\n\t\t\t// Assign fixed indices to their final position in the generated array\r\n\t\t\tgenerated_array[i] = a[i];\r\n\t\t\tnumber_indices.add(i)\r\n\t\t}\r\n\t}\r\n\r\n\t// Shuffle indices so remaining indices are in 'any' order\r\n\tlet remaining_indices = shuffle(get_remaining_elements(curr_indices, n));\r\n\r\n\t// Place the remaining indices into the available spots in the generated array\r\n\tlet j = 0;\r\n\tfor (let i = 0; i < n; i++){\r\n\t\tif(!number_indices.has(i)){\r\n\t\t\tgenerated_array[i] = remaining_indices[j];\r\n\t\t\tj++;\r\n\t\t}\r\n\t}\r\n\r\n\treturn generated_array;\r\n}\r\n\r\n/**\r\n * Gets any array of indices and '*' and fills the '*' with any valid index in the array\r\n * @param {Array} a \r\n * @returns \r\n */\r\nexport function get_any_array_repeated(a){\r\n\tlet n = a.length;\r\n\tlet generated_array = new Array(n);\r\n\tlet curr_indices = [];\r\n\tlet number_indices = new Set();\r\n\tfor (let i = 0; i < a.length; i++){\r\n\t\tif(a[i] != '*'){\r\n\t\t\tcurr_indices.push(a[i]);\r\n\t\t\t// Assign fixed indices to their final position in the generated array\r\n\t\t\tgenerated_array[i] = a[i];\r\n\t\t\tnumber_indices.add(i)\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor (let i = 0; i < n; i++){\r\n\t\tif(!number_indices.has(i)){\r\n\t\t\tgenerated_array[i] = getRandomInt(0, n)\r\n\t\t}\r\n\t}\r\n\r\n\treturn generated_array;\r\n}\r\n \r\n/**\r\n * https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\r\n * Returns a random integer between min (inclusive) and max (inclusive).\r\n * The value is no lower than min (or the next integer greater than min\r\n * if min isn't an integer) and no greater than max (or the next integer\r\n * lower than max if max isn't an integer).\r\n * Using Math.round() will give you a non-uniform distribution!\r\n */\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n// Generating all permutations of array\r\n// https://stackoverflow.com/questions/40654895/javascript-generating-all-permutations-of-an-array\r\nexport function get_permutation(array) {\r\n    function p(array, temp) {\r\n        var i, x;\r\n        if (!array.length) {\r\n            result.push(temp);\r\n        }\r\n        for (i = 0; i < array.length; i++) {\r\n            x = array.splice(i, 1)[0];\r\n            p(array, temp.concat(x));\r\n            array.splice(i, 0, x);\r\n        }\r\n    }\r\n\r\n    var result = [];\r\n    p(array, []);\r\n    return result;\r\n}\r\n\r\nexport function generate_index_array(n){\r\n\tlet array = [];\r\n\tfor(let i = 0; i < n; i++){\r\n\t\tarray.push(i);\r\n\t}\r\n\treturn array;\r\n}\r\n\r\n\r\n/**\r\n * https://stackoverflow.com/questions/54775455/heaps-algorithm-javascript\r\n * Heaps algorithm to permute an array\r\n * @param {*} array array to get permutations \r\n * @param {*} n size of array\r\n * @param {*} results \r\n * @returns \r\n */\r\nexport function heapsPermute(array, n, results = []) {\r\n\tn = n || array.length;\r\n\tif (n === 1) {\r\n\t\tresults.push(array.slice());\r\n\t} else {\r\n\t\tfor (var i = 1; i <= n; i += 1) {\r\n\t\theapsPermute(array, n - 1, results);\r\n\t\tif (n % 2) {\r\n\t\t\tvar j = 1;\r\n\t\t} else {\r\n\t\t\tvar j = i;\r\n\t\t}\r\n\t\tfunction swap(array, pos1, pos2) {\r\n\t\t\tvar temp = array[pos1];\r\n\t\t\tarray[pos1] = array[pos2];\r\n\t\t\tarray[pos2] = temp;\r\n\t\t};\r\n\t\tswap(array, j - 1, n - 1);\r\n\t\t}\r\n\t}\r\n\treturn results;\r\n}\r\n  \r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "get_remaining_elements",
    "memberof": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js~get_remaining_elements",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "importStyle": "{get_remaining_elements}",
    "description": "Gets the remaining indices of the array from a given array of indices\nIt is assumed indices in curr_indices are within range of the array",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "curr_indices",
        "description": "array of current indices"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "size of the array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "get_any_array",
    "memberof": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js~get_any_array",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "importStyle": "{get_any_array}",
    "description": "",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "Array of indices and * for any index"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "get_any_array_repeated",
    "memberof": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js~get_any_array_repeated",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "importStyle": "{get_any_array_repeated}",
    "description": "Gets any array of indices and '*' and fills the '*' with any valid index in the array",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "getRandomInt",
    "memberof": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js~getRandomInt",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "importStyle": null,
    "description": "https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\nReturns a random integer between min (inclusive) and max (inclusive).\nThe value is no lower than min (or the next integer greater than min\nif min isn't an integer) and no greater than max (or the next integer\nlower than max if max isn't an integer).\nUsing Math.round() will give you a non-uniform distribution!",
    "lineNumber": 119,
    "params": [
      {
        "name": "min",
        "types": [
          "*"
        ]
      },
      {
        "name": "max",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "get_permutation",
    "memberof": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js~get_permutation",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "importStyle": "{get_permutation}",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "generate_index_array",
    "memberof": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js~generate_index_array",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "importStyle": "{generate_index_array}",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "heapsPermute",
    "memberof": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js~heapsPermute",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "importStyle": "{heapsPermute}",
    "description": "https://stackoverflow.com/questions/54775455/heaps-algorithm-javascript\nHeaps algorithm to permute an array",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "array to get permutations"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "size of array"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "results",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "shuffle",
    "memberof": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js~shuffle",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "importStyle": "{shuffle}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "reorder",
    "memberof": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js~reorder",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/balancing_helpers/balancing_helper.js",
    "importStyle": "{reorder}",
    "description": "",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "we are reording"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "for the reordered array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "scripts/experiment-properties/balancing/generators/blocked_latin_square_generator.js",
    "content": "import { shuffle, reorder } from \"../balancing_helpers/balancing_helper.js\"\r\nexport {initialize_blocked_latin_square, innitialize_custom_latin_square}\r\n\r\n/**\r\n * Returns the balanced order of the subconditions in latin square order by block attribute,\r\n *\r\n * @param {dataset_length}  length of dataset AKA number of subconditions\r\n * @param {dataset} \t\tarray of subconditions\r\n * @param {block_attribute} attribute we wish to block by\r\n *\r\n * @return {[]}\t\t  \t\tarray of indices, representing each subcondition in the dataset.\r\n */\r\nfunction initialize_blocked_latin_square(dataset_length, dataset, block_attribute) {\r\n\r\n    // initialize an accumulator with the first subcondition's block_attribute\r\n    let attribute_accumulator = [dataset[0][block_attribute]];\r\n\r\n    // check other subconditions, find other values for the block_attribute\r\n    for (let i = 0; i < dataset_length; i++) {\r\n        if (!attribute_accumulator.includes(dataset[i][block_attribute])) {\r\n            attribute_accumulator.push(dataset[i][block_attribute])\r\n        }\r\n    }\r\n\r\n    // add subcondition numbers as attributes\r\n    for (let i = 0; i < dataset_length; i++) {\r\n        dataset[i].subcondition_number = i;\r\n    }\r\n\r\n    // shuffle the attributes and the dataset\r\n    shuffle(attribute_accumulator);\r\n    shuffle(dataset);\r\n\r\n    return order_latin_square(attribute_accumulator, dataset, block_attribute);\r\n}\r\n\r\n/**\r\n * Returns the balanced order of the subconditions in latin square order by block attribute\r\n *\r\n * @param {array}     \t\tblock_order we wish the block attribute to be\r\n * @param {assoc} \t\t    array of subconditions\r\n * @param {string}          attribute we wish to block by\r\n * @param {boolean}         flag to determine if we allow repeating or insuficient blocks\r\n * @return {[]}\t\t  \t\tarray of indices, representing each subcondition in the dataset.\r\n */ \r\nfunction innitialize_custom_latin_square(block_order, dataset, block_attribute, repeating_blocks){\r\n    //console.log(\"Entered innitialize_custom_latin_square\")\r\n    // initialize an accumulator with the first subcondition's block_attribute\r\n    let attribute_accumulator = [dataset[0][block_attribute]];\r\n    let dataset_length = dataset.length;\r\n    // check other subconditions, find other values for the block_attribute\r\n    for (let i = 0; i < dataset_length; i++) {\r\n        if (!attribute_accumulator.includes(dataset[i][block_attribute])) {\r\n            attribute_accumulator.push(dataset[i][block_attribute])\r\n        }\r\n    }\r\n    if (!repeating_blocks && block_order.length != attribute_accumulator.length) throw \"Parsed Order Length does not match block attribute\";\r\n\r\n    // add subcondition numbers as attributes\r\n    for (let i = 0; i < dataset_length; i++) {\r\n        dataset[i].subcondition_number = i;\r\n    }\r\n    // set attribute order according to block order\r\n    attribute_accumulator = reorder(attribute_accumulator, block_order, dataset_length);\r\n    console.log(attribute_accumulator)\r\n    // shuffle the  dataset\r\n    shuffle(dataset);\r\n\r\n    return order_latin_square(attribute_accumulator, dataset, block_attribute);\r\n}\r\n\r\nfunction order_latin_square(attribute_accumulator, dataset, block_attribute){\r\n    // create a new multidimensional array based on groups of subconditions, \r\n    // with the size of the attribute accumulator to be the variant\r\n    var reordered_dataset_grid = [...Array(attribute_accumulator.length)].map(e => Array(attribute_accumulator.length));\r\n\r\n\r\n    for (let i = 0; i < dataset.length; i++) {\r\n        // loop through dataset\r\n\r\n        for (let j = 0; j < attribute_accumulator.length; j++) {\r\n            // loop through shuffled attributes\r\n            // if there is a match to the shuffled attributes, collect them one by one\r\n            if (dataset[i][block_attribute] === attribute_accumulator[j]) {\r\n                reordered_dataset_grid[j][i] = dataset[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    // log them & collect them in a new array\r\n    let reordered_dataset = [];\r\n    for (let i = 0; i < reordered_dataset_grid.length; i++) {\r\n        // get size of inner array\r\n        var innerArrayLength = reordered_dataset_grid[i].length;\r\n    \r\n        // loop that inner array\r\n        for (let j = 0; j < innerArrayLength; j++) {\r\n            if (typeof reordered_dataset_grid[i][j] === 'object' && reordered_dataset_grid[i][j] !== null) {\r\n                reordered_dataset.push(reordered_dataset_grid[i][j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // double check that the order works\r\n    // reordered_dataset.forEach((e) => {\r\n    //     console.log(JSON.stringify(e));\r\n    // });\r\n\r\n    // add the subcondition numbers.\r\n    let new_order = []\r\n    reordered_dataset.forEach((e) => {\r\n        new_order.push(e[\"subcondition_number\"]);\r\n    });\r\n\r\n    console.log(\"blocked latin square: \", new_order);\r\n\r\n\r\n    // resort the dataset according to subcondition numbers, as it has been shuffled by previous functions.\r\n    dataset.sort((a,b) => {\r\n           return a.subcondition_number - b.subcondition_number;\r\n    });\r\n\r\n\treturn new_order;\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/balancing/generators/blocked_latin_square_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "order_latin_square",
    "memberof": "scripts/experiment-properties/balancing/generators/blocked_latin_square_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/blocked_latin_square_generator.js~order_latin_square",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/blocked_latin_square_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "attribute_accumulator",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataset",
        "types": [
          "*"
        ]
      },
      {
        "name": "block_attribute",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "initialize_blocked_latin_square",
    "memberof": "scripts/experiment-properties/balancing/generators/blocked_latin_square_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/blocked_latin_square_generator.js~initialize_blocked_latin_square",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/blocked_latin_square_generator.js",
    "importStyle": "{initialize_blocked_latin_square}",
    "description": "Returns the balanced order of the subconditions in latin square order by block attribute,",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "dataset_length"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "of dataset AKA number of subconditions"
      },
      {
        "nullable": null,
        "types": [
          "dataset"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "of subconditions"
      },
      {
        "nullable": null,
        "types": [
          "block_attribute"
        ],
        "spread": false,
        "optional": false,
        "name": "attribute",
        "description": "we wish to block by"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[]"
      ],
      "spread": false,
      "description": "array of indices, representing each subcondition in the dataset."
    }
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "innitialize_custom_latin_square",
    "memberof": "scripts/experiment-properties/balancing/generators/blocked_latin_square_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/blocked_latin_square_generator.js~innitialize_custom_latin_square",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/blocked_latin_square_generator.js",
    "importStyle": "{innitialize_custom_latin_square}",
    "description": "Returns the balanced order of the subconditions in latin square order by block attribute",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "block_order",
        "description": "we wish the block attribute to be"
      },
      {
        "nullable": null,
        "types": [
          "assoc"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "of subconditions"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "attribute",
        "description": "we wish to block by"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "to determine if we allow repeating or insuficient blocks"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[]"
      ],
      "spread": false,
      "description": "array of indices, representing each subcondition in the dataset."
    }
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "scripts/experiment-properties/balancing/generators/counter_balanced_order_generator.js",
    "content": "\r\nimport { get_permutation, heapsPermute, generate_index_array, reorder} from \"../balancing_helpers/balancing_helper\";\r\n\r\n/**\r\n * Counter Balances a given Blocked Latin Square Order by ordering the subconditions within the blocks\r\n * according to a given Counter Balance Order. We can \r\n * \r\n * @param {number[]} blocked_order      Blocked Latin Square Order\r\n * @param {number} block_size           Number of Subconditions Per Block\r\n * @param {number} balance_order_type   Which Counter Balanced Order we want to Counter Balance by.\r\n *                                      The number of types is equal to the number of permutations a block can have\r\n * @param {number} num_blocks           Number of Blocks in the Blocked Order we want to Counter Balance\r\n * @returns {number[]}\r\n */\r\nexport function generate_counter_balanced_order(blocked_order, block_size, balance_order_type, num_blocks_to_cb){\r\n    let num_blocks = blocked_order.length / block_size;\r\n    if(num_blocks_to_cb > num_blocks) throw Error(\"Number of Blocks to Counter Balance larger than Number of Blocks in Condition\");\r\n    if(balance_order_type > math.factorial(num_blocks)) throw Error(\"Invalid Balanced Order Type\");\r\n    if(num_blocks_to_cb == null){\r\n        num_blocks_to_cb = num_blocks;\r\n    }\r\n    let block_size_array = generate_index_array(block_size)\r\n    //let permutations = get_permutation(block_size_array); \r\n    // We use heaps permute to get a specific order of permutations where the first element changes before the next elements\r\n    let permutations = heapsPermute(block_size_array, block_size)\r\n    //console.log(permutations)\r\n    let counter_balanced_order = counter_balance_blocks(blocked_order, block_size, permutations, balance_order_type, num_blocks_to_cb)\r\n    return counter_balanced_order;\r\n}\r\n\r\n/**\r\n * \r\n * @param {number[]} blocked_order      blocked order generated by blocked latin square\r\n * @param {number} block_size           block size of the condition\r\n * @param {number[]} permutations       array of all permutations for a blocl\r\n * @param {number} balance_order_type   which permutation to start with\r\n * @param {number} num_blocks_to_cb     number of blocks to counter balance, rest of blocks are left in original blocked order (random)\r\n * @returns {number[]}\r\n */\r\nfunction counter_balance_blocks(blocked_order, block_size, permutations, balance_order_type, num_blocks_to_cb){\r\n    let balanced_order = [];\r\n    let num_blocks = blocked_order.length / block_size;\r\n    for(let curr_block_num = 0; curr_block_num < num_blocks; curr_block_num++){\r\n        let curr_block_start_index = block_size * curr_block_num;\r\n        let curr_block_end_index = curr_block_start_index + block_size;\r\n        let curr_block = blocked_order.slice(curr_block_start_index, curr_block_end_index)\r\n        if(curr_block_num < num_blocks_to_cb){\r\n            let sorted_block = curr_block.sort(function(a, b) {return a - b;});\r\n            let permutation_index = (balance_order_type + curr_block_num) % permutations.length;\r\n            //console.log(permutations[permutation_index])\r\n            let balanced_block = reorder(sorted_block, permutations[permutation_index])\r\n            //console.log(balanced_block)\r\n            balanced_order = balanced_order.concat(balanced_block)\r\n        }\r\n        else{\r\n            balanced_order = balanced_order.concat(curr_block)\r\n        }\r\n    }\r\n    //console.log(balanced_order)\r\n    return balanced_order;\r\n}\r\n\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/balancing/generators/counter_balanced_order_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "generate_counter_balanced_order",
    "memberof": "scripts/experiment-properties/balancing/generators/counter_balanced_order_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/counter_balanced_order_generator.js~generate_counter_balanced_order",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/counter_balanced_order_generator.js",
    "importStyle": "{generate_counter_balanced_order}",
    "description": "Counter Balances a given Blocked Latin Square Order by ordering the subconditions within the blocks\naccording to a given Counter Balance Order. We can ",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "blocked_order",
        "description": "Blocked Latin Square Order"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "block_size",
        "description": "Number of Subconditions Per Block"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "balance_order_type",
        "description": "Which Counter Balanced Order we want to Counter Balance by.\n                                     The number of types is equal to the number of permutations a block can have"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num_blocks",
        "description": "Number of Blocks in the Blocked Order we want to Counter Balance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "counter_balance_blocks",
    "memberof": "scripts/experiment-properties/balancing/generators/counter_balanced_order_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/counter_balanced_order_generator.js~counter_balance_blocks",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/counter_balanced_order_generator.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "blocked_order",
        "description": "blocked order generated by blocked latin square"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "block_size",
        "description": "block size of the condition"
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "permutations",
        "description": "array of all permutations for a blocl"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "balance_order_type",
        "description": "which permutation to start with"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "num_blocks_to_cb",
        "description": "number of blocks to counter balance, rest of blocks are left in original blocked order (random)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "content": "import { innitialize_custom_latin_square } from \"./blocked_latin_square_generator.js\";\r\nimport { get_any_array, get_any_array_repeated } from \"../balancing_helpers/balancing_helper.js\";\r\nexport { innitialize_custom_order }\r\n\r\nconst BLOCK_DIGIT = 'b';\r\nconst ANY_NUMBER_DIGIT = '*';\r\nconst TWO_DIGIT_MODE_DIGIT_0 = '2';\r\nconst TWO_DIGIT_MODE_DIGIT_1 = 'd';\r\nconst REPEAT_MODE_DIGIT = 'r';\r\nconst COUNTER_BALANCE_DIGIT = 'c';\r\n\r\n/**\r\n * Documentation: https://docs.google.com/document/d/1EQb3qFepxX-nbXKM2CqBSqxrDCj5sYL8z61RnrXry88/edit#heading=h.7mwcmrbuwnzo\r\n * \r\n * Reads from the URL directly to avoid having to route the parameters for each experiment (can be changed in the future for consistency)\r\n * \r\n * \r\n * @param {number[]}          balanced_order given by experiment's order in balancing_controller.js\r\n * @param {dataset} \t\t      array conditiond dataset\r\n * @param {string}            block_attribute we wish to block by in custom blocked latin square\r\n * @param {string}            custom_order_string custom order string routed to params\r\n * @return  {number[]}        new subcondition order or original balanced order if custom subcondition order fails\r\n * @author Jose Navarro\r\n**/\r\nfunction innitialize_custom_order(balanced_order, dataset=null, block_attribute=null, custom_order_string=null){\r\n    // Check for custom subcondition order in URL\r\n    // const PARAMS = new URLSearchParams(location.search);\r\n    // let custom_order_string = PARAMS.get('order');\r\n    if(custom_order_string == null) return balanced_order; // default case\r\n    // Flag checking\r\n    let digit_mode = \"single_digit_mode\";    // default single-digit mode\r\n    let blocking_mode = \"none\";              // default blocking mode. Subcondition order input is manual\r\n    let conuter_balance = false;             // flag for counter balancing\r\n    let allow_repeats = false;               // flag to exlude repeated subconditions by default\r\n    let num_blocks_to_cb;                    // number of counter balanaced blocks for \r\n    // order c (blocks to counter balance) b 2d r\r\n    try{\r\n      if(custom_order_string[0] == COUNTER_BALANCE_DIGIT){\r\n        conuter_balance = true;\r\n        custom_order_string = custom_order_string.slice(1);\r\n        // Check if we only counter balance certain conditions\r\n        if(!isNaN(Number(custom_order_string[0]))){\r\n          counter_balance_blocks_n = Number(custom_order_string[0]);\r\n        }\r\n      }\r\n      if(custom_order_string[0] == BLOCK_DIGIT){\r\n        blocking_mode = \"latin_square\";\r\n        custom_order_string = custom_order_string.slice(1);\r\n      }\r\n      if (custom_order_string[0] == TWO_DIGIT_MODE_DIGIT_0 && custom_order_string[1] == TWO_DIGIT_MODE_DIGIT_1){\r\n        digit_mode = \"two_digit_mode\";\r\n        custom_order_string = custom_order_string.slice(2);\r\n      }\r\n      if(custom_order_string[0] == 'r'){\r\n        allow_repeats = true;\r\n        custom_order_string = custom_order_string.slice(1);\r\n      }\r\n      if (custom_order_string.length == 0) throw \"Custom Order Not Found.\";\r\n    }\r\n    catch(err){\r\n      console.log(\"Custom Subcondition Order Flag Parsing Error: \" + err);+\r\n      console.log(\"Defaulting to balanced order\");\r\n      return balanced_order;\r\n    }\r\n    // Digit parsing\r\n    let parsed_digits = [];\r\n    try{\r\n      switch(digit_mode){\r\n        case \"single_digit_mode\":\r\n          parsed_digits = single_digit_parsing(custom_order_string, balanced_order, allow_repeats);\r\n          break;\r\n        case \"two_digit_mode\":\r\n          parsed_digits = two_digit_parsing(custom_order_string, balanced_order, allow_repeats);\r\n          break;\r\n        default:\r\n          throw \"Digit Mode error\";\r\n      }\r\n    }\r\n    catch(err){\r\n      console.log(\"Custom Subcondition Order Digit Parsing Error: \"+ err);\r\n      console.log(\"Defaulting to balanced order\");\r\n      return balanced_order;\r\n    }\r\n    console.log(\"Parsed Digits \" + parsed_digits);\r\n    if(parsed_digits.includes(ANY_NUMBER_DIGIT) && !allow_repeats){\r\n      parsed_digits = get_any_array(parsed_digits);\r\n    }\r\n    else if(parsed_digits.includes(ANY_NUMBER_DIGIT) && allow_repeats){\r\n      parsed_digits = get_any_array_repeated(parsed_digits);\r\n    }\r\n    // Blocking\r\n    try{\r\n      let custom_order = [];\r\n      switch(blocking_mode){\r\n        case \"none\":\r\n          if(!allow_repeats && parsed_digits.length != balanced_order.length) throw \"Length does not Match, was given \" + parsed_digits.length + \" instead of \" +  balanced_order.length;\r\n            custom_order = parsed_digits;  \r\n          break;\r\n        case \"latin_square\":\r\n          custom_order = innitialize_custom_latin_square(parsed_digits, dataset, block_attribute, allow_repeats);\r\n      }\r\n\r\n      if(conuter_balance){\r\n        custom_order = generate_counter_balanced_order(custom_order, block_size, balance_order_type, num_blocks_to_cb);\r\n      }\r\n\r\n      console.log(\"!!Custom Subcondition Order!!\");\r\n      return custom_order;\r\n    }\r\n    catch(err){\r\n      console.log(\"Custom Subcondition Order Blocking Error: \"+ err);\r\n      console.log(\"Defaulting to balanced order\");\r\n      return balanced_order;\r\n    }\r\n  }\r\n  \r\n\r\n  /**\r\n   * \r\n   * @param {*} custom_order_string \r\n   * @param {*} balanced_order \r\n   * @param {*} allow_repeats \r\n   * @returns \r\n   */\r\n  function single_digit_parsing(custom_order_string, balanced_order, allow_repeats){\r\n    let parsed_digits = [];\r\n    let seen = new Set();\r\n    let total_length = custom_order_string.length;\r\n    let normal_length = balanced_order.length;\r\n    for (let i = 0; i < custom_order_string.length; i++){\r\n      let char = custom_order_string[i];\r\n      if(char == ANY_NUMBER_DIGIT){\r\n        parsed_digits.push(char);\r\n      }\r\n      else{\r\n        let index = Number(custom_order_string[i]);\r\n        if(isNaN(index)) throw \"Index is NaN\";\r\n        if(index < 0 || index >= normal_length) throw \"Index \" + index +  \" out of bounds\";\r\n        if(!allow_repeats) if(seen.has(index)) throw \"Repeated Index\";\r\n        seen.add(index);\r\n        parsed_digits.push(index);\r\n      }\r\n    }\r\n    return parsed_digits;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {*} custom_order_string \r\n   * @param {*} balanced_order \r\n   * @param {*} allow_repeats \r\n   * @returns \r\n   */\r\n  function two_digit_parsing(custom_order_string, balanced_order, allow_repeats){\r\n    let parsed_digits = [];\r\n    let seen = new Set();\r\n    let total_length = custom_order_string.length;\r\n    let normal_length = balanced_order.length\r\n    console.log(custom_order_string)\r\n    if(total_length % 2 != 0) throw \"Two Digit Mode was given non pair number of digits.\" \r\n    total_length = Math.floor(total_length / 2);\r\n    for (let i = 0; i < custom_order_string.length-1; i+=2){\r\n      let digit_1 = custom_order_string[i];\r\n      let digit_2 = custom_order_string[i+1];\r\n\r\n      if(digit_1 == ANY_NUMBER_DIGIT && digit_2 == ANY_NUMBER_DIGIT){\r\n        parsed_digits.push(ANY_NUMBER_DIGIT);\r\n      }\r\n      else{\r\n        let index = Number(digit_1+digit_2);\r\n        if(isNaN(index)) throw \"Index is NaN\";\r\n        if(index < 0 || index >= normal_length) throw \"Index \" + index +  \" out of bounds\";\r\n        if(!allow_repeats) if(seen.has(index)) throw \"Repeated Index\";\r\n        seen.add(index);\r\n        parsed_digits.push(index);\r\n  \r\n      }\r\n    }\r\n    return parsed_digits;\r\n  }",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "BLOCK_DIGIT",
    "memberof": "scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/custom_order_generator.js~BLOCK_DIGIT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "ANY_NUMBER_DIGIT",
    "memberof": "scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/custom_order_generator.js~ANY_NUMBER_DIGIT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "TWO_DIGIT_MODE_DIGIT_0",
    "memberof": "scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/custom_order_generator.js~TWO_DIGIT_MODE_DIGIT_0",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "TWO_DIGIT_MODE_DIGIT_1",
    "memberof": "scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/custom_order_generator.js~TWO_DIGIT_MODE_DIGIT_1",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "REPEAT_MODE_DIGIT",
    "memberof": "scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/custom_order_generator.js~REPEAT_MODE_DIGIT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "COUNTER_BALANCE_DIGIT",
    "memberof": "scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/custom_order_generator.js~COUNTER_BALANCE_DIGIT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "single_digit_parsing",
    "memberof": "scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/custom_order_generator.js~single_digit_parsing",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "custom_order_string",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "balanced_order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "allow_repeats",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "two_digit_parsing",
    "memberof": "scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/custom_order_generator.js~two_digit_parsing",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "custom_order_string",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "balanced_order",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "allow_repeats",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "innitialize_custom_order",
    "memberof": "scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/custom_order_generator.js~innitialize_custom_order",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/custom_order_generator.js",
    "importStyle": "{innitialize_custom_order}",
    "description": "Documentation: https://docs.google.com/document/d/1EQb3qFepxX-nbXKM2CqBSqxrDCj5sYL8z61RnrXry88/edit#heading=h.7mwcmrbuwnzo\n\nReads from the URL directly to avoid having to route the parameters for each experiment (can be changed in the future for consistency)",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@author",
        "tagValue": "Jose Navarro"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "balanced_order",
        "description": "given by experiment's order in balancing_controller.js"
      },
      {
        "nullable": null,
        "types": [
          "dataset"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "conditiond dataset"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_attribute",
        "description": "we wish to block by in custom blocked latin square"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "custom_order_string",
        "description": "custom order string routed to params"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "new subcondition order or original balanced order if custom subcondition order fails"
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "content": "import { shuffle } from \"../balancing_helpers/balancing_helper.js\"\r\n\r\nexport { initialize_latin_square }\r\n\r\n/**\r\n * Creates a random row generating function meeting the lating square restriction\r\n * usage:\r\n *\t\t sampler = latinCube(someRow)\r\n *\t\t newRow = sampler() | newRow = sampler(row)\r\n * @param\t {Array}\t\trow samples to be randomized\r\n * @returns {Function} row generating function\r\n */\r\nfunction latin_square (row) {\r\n\tvar sN = row.length,\r\n\t\t\trowCount = 0\r\n\r\n\t// prepare array of row and col indices for pre-sorting\r\n\tvar hSort = shuffle(sequence(sN)),\r\n\t\t\tvSort = shuffle(hSort.slice())\r\n\r\n\treturn function nextRow (countORtarget) {\r\n\t\tif (rowCount === sN) return countORtarget = null\r\n\t\tvar target = Array.isArray(countORtarget) ? countORtarget\r\n\t\t\t: (countORtarget >= 0) ? Array(countORtarget)\r\n\t\t\t: Array(sN)\r\n\t\tif (target.length > sN) target.length = sN\r\n\r\n\t\tfor (var i = 0; i < target.length; ++i) {\r\n\t\t\tvar idx = hSort[i] + vSort[rowCount]\r\n\t\t\tif (idx >= sN) idx -= sN\r\n\t\t\ttarget[i] = row[idx]\r\n\t\t}\r\n\t\trowCount++\r\n\r\n\t\treturn target\r\n\t}\r\n}\r\nfunction sequence(n) {\r\n\tfor (var i = 0, a=Array(n); i < n; ++i) a[i] = i\r\n\treturn a\r\n}\r\n\r\nfunction initialize_latin_square(size){\r\n    var array = Array.apply(null, {length: size}).map(Number.call, Number);\r\n    var sampler = latin_square(array);\r\n    var row = sampler();\r\n\r\n   \tconsole.log(\"Latin square: \" + row);\r\n    return row; \r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "latin_square",
    "memberof": "scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/latin_square_generator.js~latin_square",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "importStyle": null,
    "description": "Creates a random row generating function meeting the lating square restriction\nusage:\n\t sampler = latinCube(someRow)\n\t newRow = sampler() | newRow = sampler(row)",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} row generating function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "samples to be randomized"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "row generating function"
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "sequence",
    "memberof": "scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/latin_square_generator.js~sequence",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "initialize_latin_square",
    "memberof": "scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/latin_square_generator.js~initialize_latin_square",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/latin_square_generator.js",
    "importStyle": "{initialize_latin_square}",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "scripts/experiment-properties/balancing/generators/random_generator.js",
    "content": "export {initialize_random_order}\r\n\r\nfunction initialize_random_order(length) {\r\n\r\n\tlet order = [];\r\n\r\n\tfor (let i = 0; i < length; i++) {\r\n\t\torder.push(i);\r\n\t}\r\n\r\n\treturn order.sort( () => Math.random() - 0.5);\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/balancing/generators/random_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "initialize_random_order",
    "memberof": "scripts/experiment-properties/balancing/generators/random_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/balancing/generators/random_generator.js~initialize_random_order",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/balancing/generators/random_generator.js",
    "importStyle": "{initialize_random_order}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "scripts/experiment-properties/counter/counter_controller.js",
    "content": "import { correlation_dependencies } from \"../../helpers/correlation_dependencies.js\"\r\nexport {print_curr_trial};\r\n\r\n// position and font of counter message\r\nconst width = 800;\r\nconst x_cor_prac = '20%';\r\nconst x_cor_test = '0%';\r\nconst y_cor = '50%'; \r\nconst font = '28px times';\r\n\r\n// @param {object}   experiment\r\nfunction print_curr_trial(experiment,type){\r\n    let counter = d3.select('#counter')\r\n                    .append('svg')\r\n                    .attr('width',width)\r\n                    .append('text');\r\n\r\n    switch (type) {\r\n        case 'jnd':\r\n            if (!experiment.practice_end) {\r\n                let cur_prac_condition_index = correlation_dependencies.get_subcondition_index(experiment, \"practice\");\r\n                let total_practice = experiment.MAX_PRACTICE_TRIALS - 1;\r\n                let number_practice_trial_complete = correlation_dependencies.get_adjusted_quantity_matrix(experiment,\"practice\")[cur_prac_condition_index].length;\r\n                \r\n                counter.attr(\"x\", x_cor_prac).attr(\"y\", y_cor).style(\"font\", font)\r\n                    .text('You have completed ' + number_practice_trial_complete + ' trials, ' + (total_practice - cur_prac_condition_index + 1) + ' remaining.');\r\n            } else {\r\n                let cur_sub_condition_index = correlation_dependencies.get_subcondition_index(experiment, \"test\");\r\n                let total_sub_condi = experiment.sub_conditions_constants.length - 1;\r\n                let num_trial_complete = correlation_dependencies.get_adjusted_quantity_matrix(experiment,\"test\")[cur_sub_condition_index].length;\r\n                console.log()\r\n                counter.attr(\"x\", x_cor_test).attr(\"y\", y_cor).style(\"font\", font)\r\n                    .text('You\\'re now doing trial ' + (num_trial_complete) + ' under condition ' + (cur_sub_condition_index + 1) + ', ' + (total_sub_condi - cur_sub_condition_index ) + ' conditions remaining.');\r\n            }\r\n            break;\r\n        case 'stevens':\r\n            if(experiment.display_mode === \"sample\"){\r\n                counter.attr(\"x\", x_cor_test).attr(\"y\", y_cor).style(\"font\", font)\r\n                .text(`Middle Correlation Value: ${experiment.sample_mid_correlation}.`, );\r\n                return;\r\n            }\r\n            let block_type\r\n            let total_sub_condi\r\n            if(experiment.practice_end){\r\n                block_type = 'test'\r\n                total_sub_condi = experiment.sub_conditions_constants.length\r\n            }\r\n            else{\r\n                block_type = 'practice'\r\n                total_sub_condi = experiment.practice_conditions_constants.length\r\n            }\r\n            let cur_sub_condition_index = experiment.getIndex(block_type)\r\n            let constants = experiment.getConstants(block_type,cur_sub_condition_index)\r\n            let num_trial = experiment.num_trial_complete + 1 ;\r\n            let num_conditions_remaining = total_sub_condi - cur_sub_condition_index;\r\n            let trials_per_round = constants.trials_per_round\r\n            counter.attr(\"x\", x_cor_test).attr(\"y\", y_cor).style(\"font\", font)\r\n                .text('You\\'re now doing trial ' + (num_trial) + ' of ' + trials_per_round + ' under condition ' + (cur_sub_condition_index + 1) + ', ' + num_conditions_remaining + ' conditions remaining.');\r\n    }\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/counter/counter_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "width",
    "memberof": "scripts/experiment-properties/counter/counter_controller.js",
    "static": true,
    "longname": "scripts/experiment-properties/counter/counter_controller.js~width",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/counter/counter_controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "x_cor_prac",
    "memberof": "scripts/experiment-properties/counter/counter_controller.js",
    "static": true,
    "longname": "scripts/experiment-properties/counter/counter_controller.js~x_cor_prac",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/counter/counter_controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "x_cor_test",
    "memberof": "scripts/experiment-properties/counter/counter_controller.js",
    "static": true,
    "longname": "scripts/experiment-properties/counter/counter_controller.js~x_cor_test",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/counter/counter_controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "y_cor",
    "memberof": "scripts/experiment-properties/counter/counter_controller.js",
    "static": true,
    "longname": "scripts/experiment-properties/counter/counter_controller.js~y_cor",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/counter/counter_controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "font",
    "memberof": "scripts/experiment-properties/counter/counter_controller.js",
    "static": true,
    "longname": "scripts/experiment-properties/counter/counter_controller.js~font",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/counter/counter_controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "print_curr_trial",
    "memberof": "scripts/experiment-properties/counter/counter_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/counter/counter_controller.js~print_curr_trial",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/counter/counter_controller.js",
    "importStyle": "{print_curr_trial}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "experiment",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/ensemble_average_data.js",
    "content": "export { ENSEMBLE_AVERAGE_BASE, ENSEMBLE_AVERAGE_CONDITIONS };\r\n\r\n// TODO_ensemble_average: create data file\r\n\r\nconst ENSEMBLE_AVERAGE_BASE = {\r\n\r\n    foundational:\r\n        [\r\n            \r\n            {\r\n                axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.1, dist_base: 0.3, error: 0.0001, dist_error: 0.0001, num_points: 100, dist_num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle'\r\n            }\r\n        ]\r\n\r\n}\r\n\r\n// NOTE: mix_by_target/mix_by_distractor arrays found here - https://docs.google.com/document/d/1y_aTdd0lI4DOnJMnputPD4pAk77TAL9edJ-6GOYracU/edit?usp=sharing\r\n\r\nconst ENSEMBLE_AVERAGE_CONDITIONS = {\r\n    distractor_ensemble_average_trial_test:\r\n    [\r\n        {\r\n            // target correlation: 0.3, distractor correlation: 0.7, target mean size: 12, distractor mean size: 24, cue: less correlated, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.3, dist_base: 0.7, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 6, distractor_mean_size: 12, cue: \"less correlated\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 17.77704822, point_color: 'BLUE'}, {point_size: 15.78443128, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 12.4052259, point_color: 'BLUE'}, {point_size: 23.26530134, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 19.31203244, point_color: 'BLUE'}, {point_size: 11.98931005, point_color: 'BLUE'}, {point_size: 16.13317613, point_color: 'BLUE'}, {point_size: 8.960070324, point_color: 'BLUE'}, {point_size: 15.00461697, point_color: 'BLUE'}, {point_size: 10.23127123, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 7.4290205, point_color: 'BLUE'}, {point_size: 26.32973959, point_color: 'BLUE'}, {point_size: 11.67741876, point_color: 'BLUE'}, {point_size: 22.48261559, point_color: 'BLUE'}, {point_size: 11.31463583, point_color: 'BLUE'}, {point_size: 12.01050293, point_color: 'BLUE'}, {point_size: 5.352731538, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 16.71838152, point_color: 'BLUE'}, {point_size: 10.66016077, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 29.09972609, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 4.02086063, point_color: 'BLUE'}, {point_size: 21.08797097, point_color: 'BLUE'}, {point_size: 14.2130893, point_color: 'BLUE'}, {point_size: 11.39301084, point_color: 'BLUE'}] ,\r\n            mix_by_distractor_array: [{point_size: 31.34800692, point_color: 'ORANGE'}, {point_size: 24.35622067, point_color: 'ORANGE'}, {point_size: 30.02303042, point_color: 'ORANGE'}, {point_size: 22.39714022, point_color: 'ORANGE'}, {point_size: 28.98599378, point_color: 'ORANGE'}, {point_size: 14.88302401, point_color: 'ORANGE'}, {point_size: 30.51823724, point_color: 'ORANGE'}, {point_size: 32.83421606, point_color: 'ORANGE'}, {point_size: 36.56929775, point_color: 'ORANGE'}, {point_size: 17.89400063, point_color: 'ORANGE'}, {point_size: 18.43109365, point_color: 'ORANGE'}, {point_size: 32.54351161, point_color: 'ORANGE'}, {point_size: 33.51614629, point_color: 'ORANGE'}, {point_size: 25.53295652, point_color: 'ORANGE'}, {point_size: 26.72465774, point_color: 'ORANGE'}, {point_size: 26.73240637, point_color: 'ORANGE'}, {point_size: 37.20986328, point_color: 'ORANGE'}, {point_size: 21.03127848, point_color: 'ORANGE'}, {point_size: 23.07439857, point_color: 'ORANGE'}, {point_size: 8.248059106, point_color: 'ORANGE'}, {point_size: 27.60261793, point_color: 'ORANGE'}, {point_size: 25.57190938, point_color: 'ORANGE'}, {point_size: 2.826310111, point_color: 'ORANGE'}, {point_size: 19.20956728, point_color: 'ORANGE'}, {point_size: 16.34398901, point_color: 'ORANGE'}, {point_size: 17.89930805, point_color: 'ORANGE'}, {point_size: 23.47344533, point_color: 'ORANGE'}, {point_size: 17.36566809, point_color: 'ORANGE'}, {point_size: 17.61076147, point_color: 'ORANGE'}, {point_size: 29.24288404, point_color: 'ORANGE'}] \r\n        }    \r\n    ],\r\n\r\n    distractor_ensemble_average_trial_1:\r\n    [\r\n        {\r\n            // target correlation: 0.3, distractor correlation: 0.7, target mean size: 12, distractor mean size: 24, cue: less correlated, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.3, dist_base: 0.7, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 6, distractor_mean_size: 12, cue: \"less correlated\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 17.77704822, point_color: 'BLUE'}, {point_size: 15.78443128, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 12.4052259, point_color: 'BLUE'}, {point_size: 23.26530134, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 19.31203244, point_color: 'BLUE'}, {point_size: 11.98931005, point_color: 'BLUE'}, {point_size: 16.13317613, point_color: 'BLUE'}, {point_size: 8.960070324, point_color: 'BLUE'}, {point_size: 15.00461697, point_color: 'BLUE'}, {point_size: 10.23127123, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 7.4290205, point_color: 'BLUE'}, {point_size: 26.32973959, point_color: 'BLUE'}, {point_size: 11.67741876, point_color: 'BLUE'}, {point_size: 22.48261559, point_color: 'BLUE'}, {point_size: 11.31463583, point_color: 'BLUE'}, {point_size: 12.01050293, point_color: 'BLUE'}, {point_size: 5.352731538, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 16.71838152, point_color: 'BLUE'}, {point_size: 10.66016077, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 29.09972609, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 4.02086063, point_color: 'BLUE'}, {point_size: 21.08797097, point_color: 'BLUE'}, {point_size: 14.2130893, point_color: 'BLUE'}, {point_size: 11.39301084, point_color: 'BLUE'}] ,\r\n            mix_by_distractor_array: [{point_size: 31.34800692, point_color: 'ORANGE'}, {point_size: 24.35622067, point_color: 'ORANGE'}, {point_size: 30.02303042, point_color: 'ORANGE'}, {point_size: 22.39714022, point_color: 'ORANGE'}, {point_size: 28.98599378, point_color: 'ORANGE'}, {point_size: 14.88302401, point_color: 'ORANGE'}, {point_size: 30.51823724, point_color: 'ORANGE'}, {point_size: 32.83421606, point_color: 'ORANGE'}, {point_size: 36.56929775, point_color: 'ORANGE'}, {point_size: 17.89400063, point_color: 'ORANGE'}, {point_size: 18.43109365, point_color: 'ORANGE'}, {point_size: 32.54351161, point_color: 'ORANGE'}, {point_size: 33.51614629, point_color: 'ORANGE'}, {point_size: 25.53295652, point_color: 'ORANGE'}, {point_size: 26.72465774, point_color: 'ORANGE'}, {point_size: 26.73240637, point_color: 'ORANGE'}, {point_size: 37.20986328, point_color: 'ORANGE'}, {point_size: 21.03127848, point_color: 'ORANGE'}, {point_size: 23.07439857, point_color: 'ORANGE'}, {point_size: 8.248059106, point_color: 'ORANGE'}, {point_size: 27.60261793, point_color: 'ORANGE'}, {point_size: 25.57190938, point_color: 'ORANGE'}, {point_size: 2.826310111, point_color: 'ORANGE'}, {point_size: 19.20956728, point_color: 'ORANGE'}, {point_size: 16.34398901, point_color: 'ORANGE'}, {point_size: 17.89930805, point_color: 'ORANGE'}, {point_size: 23.47344533, point_color: 'ORANGE'}, {point_size: 17.36566809, point_color: 'ORANGE'}, {point_size: 17.61076147, point_color: 'ORANGE'}, {point_size: 29.24288404, point_color: 'ORANGE'}] \r\n        }    \r\n    ],\r\n\r\n    distractor_ensemble_average_trial_2:\r\n    [\r\n        {\r\n            // target correlation: 0.3, distractor correlation: 0.7, target mean size: 12, distractor mean size: 24, cue: blue, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.3, dist_base: 0.7, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 6, distractor_mean_size: 12, cue: \"blue\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 17.77704822, point_color: 'BLUE'}, {point_size: 15.78443128, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 12.4052259, point_color: 'BLUE'}, {point_size: 23.26530134, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 19.31203244, point_color: 'BLUE'}, {point_size: 11.98931005, point_color: 'BLUE'}, {point_size: 16.13317613, point_color: 'BLUE'}, {point_size: 8.960070324, point_color: 'BLUE'}, {point_size: 15.00461697, point_color: 'BLUE'}, {point_size: 10.23127123, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 7.4290205, point_color: 'BLUE'}, {point_size: 26.32973959, point_color: 'BLUE'}, {point_size: 11.67741876, point_color: 'BLUE'}, {point_size: 22.48261559, point_color: 'BLUE'}, {point_size: 11.31463583, point_color: 'BLUE'}, {point_size: 12.01050293, point_color: 'BLUE'}, {point_size: 5.352731538, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 16.71838152, point_color: 'BLUE'}, {point_size: 10.66016077, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 29.09972609, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 4.02086063, point_color: 'BLUE'}, {point_size: 21.08797097, point_color: 'BLUE'}, {point_size: 14.2130893, point_color: 'BLUE'}, {point_size: 11.39301084, point_color: 'BLUE'}] ,\r\n            mix_by_distractor_array: [{point_size: 31.34800692, point_color: 'ORANGE'}, {point_size: 24.35622067, point_color: 'ORANGE'}, {point_size: 30.02303042, point_color: 'ORANGE'}, {point_size: 22.39714022, point_color: 'ORANGE'}, {point_size: 28.98599378, point_color: 'ORANGE'}, {point_size: 14.88302401, point_color: 'ORANGE'}, {point_size: 30.51823724, point_color: 'ORANGE'}, {point_size: 32.83421606, point_color: 'ORANGE'}, {point_size: 36.56929775, point_color: 'ORANGE'}, {point_size: 17.89400063, point_color: 'ORANGE'}, {point_size: 18.43109365, point_color: 'ORANGE'}, {point_size: 32.54351161, point_color: 'ORANGE'}, {point_size: 33.51614629, point_color: 'ORANGE'}, {point_size: 25.53295652, point_color: 'ORANGE'}, {point_size: 26.72465774, point_color: 'ORANGE'}, {point_size: 26.73240637, point_color: 'ORANGE'}, {point_size: 37.20986328, point_color: 'ORANGE'}, {point_size: 21.03127848, point_color: 'ORANGE'}, {point_size: 23.07439857, point_color: 'ORANGE'}, {point_size: 8.248059106, point_color: 'ORANGE'}, {point_size: 27.60261793, point_color: 'ORANGE'}, {point_size: 25.57190938, point_color: 'ORANGE'}, {point_size: 2.826310111, point_color: 'ORANGE'}, {point_size: 19.20956728, point_color: 'ORANGE'}, {point_size: 16.34398901, point_color: 'ORANGE'}, {point_size: 17.89930805, point_color: 'ORANGE'}, {point_size: 23.47344533, point_color: 'ORANGE'}, {point_size: 17.36566809, point_color: 'ORANGE'}, {point_size: 17.61076147, point_color: 'ORANGE'}, {point_size: 29.24288404, point_color: 'ORANGE'}]  \r\n        },\r\n    ],\r\n\r\n    distractor_ensemble_average_trial_3:\r\n    [\r\n        {\r\n            // target correlation: 0.3, distractor correlation: 0.7, target mean size: 24, distractor mean size: 12, cue: less correlated, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.3, dist_base: 0.7, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 12, distractor_mean_size: 6, cue: \"less correlated\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 31.34800692, point_color: 'BLUE'}, {point_size: 24.35622067, point_color: 'BLUE'}, {point_size: 30.02303042, point_color: 'BLUE'}, {point_size: 22.39714022, point_color: 'BLUE'}, {point_size: 28.98599378, point_color: 'BLUE'}, {point_size: 14.88302401, point_color: 'BLUE'}, {point_size: 30.51823724, point_color: 'BLUE'}, {point_size: 32.83421606, point_color: 'BLUE'}, {point_size: 36.56929775, point_color: 'BLUE'}, {point_size: 17.89400063, point_color: 'BLUE'}, {point_size: 18.43109365, point_color: 'BLUE'}, {point_size: 32.54351161, point_color: 'BLUE'}, {point_size: 33.51614629, point_color: 'BLUE'}, {point_size: 25.53295652, point_color: 'BLUE'}, {point_size: 26.72465774, point_color: 'BLUE'}, {point_size: 26.73240637, point_color: 'BLUE'}, {point_size: 37.20986328, point_color: 'BLUE'}, {point_size: 21.03127848, point_color: 'BLUE'}, {point_size: 23.07439857, point_color: 'BLUE'}, {point_size: 8.248059106, point_color: 'BLUE'}, {point_size: 27.60261793, point_color: 'BLUE'}, {point_size: 25.57190938, point_color: 'BLUE'}, {point_size: 2.826310111, point_color: 'BLUE'}, {point_size: 19.20956728, point_color: 'BLUE'}, {point_size: 16.34398901, point_color: 'BLUE'}, {point_size: 17.89930805, point_color: 'BLUE'}, {point_size: 23.47344533, point_color: 'BLUE'}, {point_size: 17.36566809, point_color: 'BLUE'}, {point_size: 17.61076147, point_color: 'BLUE'}, {point_size: 29.24288404, point_color: 'BLUE'}] ,\r\n            mix_by_distractor_array: [{point_size: 17.77704822, point_color: 'ORANGE'}, {point_size: 15.78443128, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 12.4052259, point_color: 'ORANGE'}, {point_size: 23.26530134, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 19.31203244, point_color: 'ORANGE'}, {point_size: 11.98931005, point_color: 'ORANGE'}, {point_size: 16.13317613, point_color: 'ORANGE'}, {point_size: 8.960070324, point_color: 'ORANGE'}, {point_size: 15.00461697, point_color: 'ORANGE'}, {point_size: 10.23127123, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 7.4290205, point_color: 'ORANGE'}, {point_size: 26.32973959, point_color: 'ORANGE'}, {point_size: 11.67741876, point_color: 'ORANGE'}, {point_size: 22.48261559, point_color: 'ORANGE'}, {point_size: 11.31463583, point_color: 'ORANGE'}, {point_size: 12.01050293, point_color: 'ORANGE'}, {point_size: 5.352731538, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 16.71838152, point_color: 'ORANGE'}, {point_size: 10.66016077, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 29.09972609, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 4.02086063, point_color: 'ORANGE'}, {point_size: 21.08797097, point_color: 'ORANGE'}, {point_size: 14.2130893, point_color: 'ORANGE'}, {point_size: 11.39301084, point_color: 'ORANGE'}]\r\n        },\r\n    ],\r\n    \r\n    distractor_ensemble_average_trial_4:\r\n    [\r\n        {\r\n            // target correlation: 0.3, distractor correlation: 0.7, target mean size: 24, distractor mean size: 12, cue: blue, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.3, dist_base: 0.7, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 12, distractor_mean_size: 6, cue: \"blue\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 31.34800692, point_color: 'BLUE'}, {point_size: 24.35622067, point_color: 'BLUE'}, {point_size: 30.02303042, point_color: 'BLUE'}, {point_size: 22.39714022, point_color: 'BLUE'}, {point_size: 28.98599378, point_color: 'BLUE'}, {point_size: 14.88302401, point_color: 'BLUE'}, {point_size: 30.51823724, point_color: 'BLUE'}, {point_size: 32.83421606, point_color: 'BLUE'}, {point_size: 36.56929775, point_color: 'BLUE'}, {point_size: 17.89400063, point_color: 'BLUE'}, {point_size: 18.43109365, point_color: 'BLUE'}, {point_size: 32.54351161, point_color: 'BLUE'}, {point_size: 33.51614629, point_color: 'BLUE'}, {point_size: 25.53295652, point_color: 'BLUE'}, {point_size: 26.72465774, point_color: 'BLUE'}, {point_size: 26.73240637, point_color: 'BLUE'}, {point_size: 37.20986328, point_color: 'BLUE'}, {point_size: 21.03127848, point_color: 'BLUE'}, {point_size: 23.07439857, point_color: 'BLUE'}, {point_size: 8.248059106, point_color: 'BLUE'}, {point_size: 27.60261793, point_color: 'BLUE'}, {point_size: 25.57190938, point_color: 'BLUE'}, {point_size: 2.826310111, point_color: 'BLUE'}, {point_size: 19.20956728, point_color: 'BLUE'}, {point_size: 16.34398901, point_color: 'BLUE'}, {point_size: 17.89930805, point_color: 'BLUE'}, {point_size: 23.47344533, point_color: 'BLUE'}, {point_size: 17.36566809, point_color: 'BLUE'}, {point_size: 17.61076147, point_color: 'BLUE'}, {point_size: 29.24288404, point_color: 'BLUE'}] ,\r\n            mix_by_distractor_array: [{point_size: 17.77704822, point_color: 'ORANGE'}, {point_size: 15.78443128, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 12.4052259, point_color: 'ORANGE'}, {point_size: 23.26530134, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 19.31203244, point_color: 'ORANGE'}, {point_size: 11.98931005, point_color: 'ORANGE'}, {point_size: 16.13317613, point_color: 'ORANGE'}, {point_size: 8.960070324, point_color: 'ORANGE'}, {point_size: 15.00461697, point_color: 'ORANGE'}, {point_size: 10.23127123, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 7.4290205, point_color: 'ORANGE'}, {point_size: 26.32973959, point_color: 'ORANGE'}, {point_size: 11.67741876, point_color: 'ORANGE'}, {point_size: 22.48261559, point_color: 'ORANGE'}, {point_size: 11.31463583, point_color: 'ORANGE'}, {point_size: 12.01050293, point_color: 'ORANGE'}, {point_size: 5.352731538, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 16.71838152, point_color: 'ORANGE'}, {point_size: 10.66016077, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 29.09972609, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 4.02086063, point_color: 'ORANGE'}, {point_size: 21.08797097, point_color: 'ORANGE'}, {point_size: 14.2130893, point_color: 'ORANGE'}, {point_size: 11.39301084, point_color: 'ORANGE'}]\r\n        },\r\n    ],\r\n    \r\n    distractor_ensemble_average_trial_5:\r\n    [\r\n        {\r\n            // target correlation: 0.7, distractor correlation: 0.3, target mean size: 12, distractor mean size: 24, cue: more correlated, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.7, dist_base: 0.3, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 6, distractor_mean_size: 12, cue: \"more correlated\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 17.77704822, point_color: 'BLUE'}, {point_size: 15.78443128, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 12.4052259, point_color: 'BLUE'}, {point_size: 23.26530134, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 19.31203244, point_color: 'BLUE'}, {point_size: 11.98931005, point_color: 'BLUE'}, {point_size: 16.13317613, point_color: 'BLUE'}, {point_size: 8.960070324, point_color: 'BLUE'}, {point_size: 15.00461697, point_color: 'BLUE'}, {point_size: 10.23127123, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 7.4290205, point_color: 'BLUE'}, {point_size: 26.32973959, point_color: 'BLUE'}, {point_size: 11.67741876, point_color: 'BLUE'}, {point_size: 22.48261559, point_color: 'BLUE'}, {point_size: 11.31463583, point_color: 'BLUE'}, {point_size: 12.01050293, point_color: 'BLUE'}, {point_size: 5.352731538, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 16.71838152, point_color: 'BLUE'}, {point_size: 10.66016077, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 29.09972609, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 4.02086063, point_color: 'BLUE'}, {point_size: 21.08797097, point_color: 'BLUE'}, {point_size: 14.2130893, point_color: 'BLUE'}, {point_size: 11.39301084, point_color: 'BLUE'}] , \r\n            mix_by_distractor_array: [{point_size: 31.34800692, point_color: 'ORANGE'}, {point_size: 24.35622067, point_color: 'ORANGE'}, {point_size: 30.02303042, point_color: 'ORANGE'}, {point_size: 22.39714022, point_color: 'ORANGE'}, {point_size: 28.98599378, point_color: 'ORANGE'}, {point_size: 14.88302401, point_color: 'ORANGE'}, {point_size: 30.51823724, point_color: 'ORANGE'}, {point_size: 32.83421606, point_color: 'ORANGE'}, {point_size: 36.56929775, point_color: 'ORANGE'}, {point_size: 17.89400063, point_color: 'ORANGE'}, {point_size: 18.43109365, point_color: 'ORANGE'}, {point_size: 32.54351161, point_color: 'ORANGE'}, {point_size: 33.51614629, point_color: 'ORANGE'}, {point_size: 25.53295652, point_color: 'ORANGE'}, {point_size: 26.72465774, point_color: 'ORANGE'}, {point_size: 26.73240637, point_color: 'ORANGE'}, {point_size: 37.20986328, point_color: 'ORANGE'}, {point_size: 21.03127848, point_color: 'ORANGE'}, {point_size: 23.07439857, point_color: 'ORANGE'}, {point_size: 8.248059106, point_color: 'ORANGE'}, {point_size: 27.60261793, point_color: 'ORANGE'}, {point_size: 25.57190938, point_color: 'ORANGE'}, {point_size: 2.826310111, point_color: 'ORANGE'}, {point_size: 19.20956728, point_color: 'ORANGE'}, {point_size: 16.34398901, point_color: 'ORANGE'}, {point_size: 17.89930805, point_color: 'ORANGE'}, {point_size: 23.47344533, point_color: 'ORANGE'}, {point_size: 17.36566809, point_color: 'ORANGE'}, {point_size: 17.61076147, point_color: 'ORANGE'}, {point_size: 29.24288404, point_color: 'ORANGE'}] \r\n        },\r\n    ],\r\n    \r\n    distractor_ensemble_average_trial_6:\r\n    [\r\n        {\r\n            // target correlation: 0.7, distractor correlation: 0.3, target mean size: 12, distractor mean size: 24, cue: blue, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.7, dist_base: 0.3, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 6, distractor_mean_size: 12, cue: \"blue\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 17.77704822, point_color: 'BLUE'}, {point_size: 15.78443128, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 12.4052259, point_color: 'BLUE'}, {point_size: 23.26530134, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 19.31203244, point_color: 'BLUE'}, {point_size: 11.98931005, point_color: 'BLUE'}, {point_size: 16.13317613, point_color: 'BLUE'}, {point_size: 8.960070324, point_color: 'BLUE'}, {point_size: 15.00461697, point_color: 'BLUE'}, {point_size: 10.23127123, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 7.4290205, point_color: 'BLUE'}, {point_size: 26.32973959, point_color: 'BLUE'}, {point_size: 11.67741876, point_color: 'BLUE'}, {point_size: 22.48261559, point_color: 'BLUE'}, {point_size: 11.31463583, point_color: 'BLUE'}, {point_size: 12.01050293, point_color: 'BLUE'}, {point_size: 5.352731538, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 16.71838152, point_color: 'BLUE'}, {point_size: 10.66016077, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 29.09972609, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 4.02086063, point_color: 'BLUE'}, {point_size: 21.08797097, point_color: 'BLUE'}, {point_size: 14.2130893, point_color: 'BLUE'}, {point_size: 11.39301084, point_color: 'BLUE'}] ,\r\n            mix_by_distractor_array: [{point_size: 31.34800692, point_color: 'ORANGE'}, {point_size: 24.35622067, point_color: 'ORANGE'}, {point_size: 30.02303042, point_color: 'ORANGE'}, {point_size: 22.39714022, point_color: 'ORANGE'}, {point_size: 28.98599378, point_color: 'ORANGE'}, {point_size: 14.88302401, point_color: 'ORANGE'}, {point_size: 30.51823724, point_color: 'ORANGE'}, {point_size: 32.83421606, point_color: 'ORANGE'}, {point_size: 36.56929775, point_color: 'ORANGE'}, {point_size: 17.89400063, point_color: 'ORANGE'}, {point_size: 18.43109365, point_color: 'ORANGE'}, {point_size: 32.54351161, point_color: 'ORANGE'}, {point_size: 33.51614629, point_color: 'ORANGE'}, {point_size: 25.53295652, point_color: 'ORANGE'}, {point_size: 26.72465774, point_color: 'ORANGE'}, {point_size: 26.73240637, point_color: 'ORANGE'}, {point_size: 37.20986328, point_color: 'ORANGE'}, {point_size: 21.03127848, point_color: 'ORANGE'}, {point_size: 23.07439857, point_color: 'ORANGE'}, {point_size: 8.248059106, point_color: 'ORANGE'}, {point_size: 27.60261793, point_color: 'ORANGE'}, {point_size: 25.57190938, point_color: 'ORANGE'}, {point_size: 2.826310111, point_color: 'ORANGE'}, {point_size: 19.20956728, point_color: 'ORANGE'}, {point_size: 16.34398901, point_color: 'ORANGE'}, {point_size: 17.89930805, point_color: 'ORANGE'}, {point_size: 23.47344533, point_color: 'ORANGE'}, {point_size: 17.36566809, point_color: 'ORANGE'}, {point_size: 17.61076147, point_color: 'ORANGE'}, {point_size: 29.24288404, point_color: 'ORANGE'}]  \r\n        },\r\n    ],\r\n    \r\n    distractor_ensemble_average_trial_7:\r\n    [\r\n        {\r\n            // target correlation: 0.7, distractor correlation: 0.3, target mean size: 24, distractor mean size: 12, cue: more correlated, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.7, dist_base: 0.3, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 12, distractor_mean_size: 6, cue: \"more correlated\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 31.34800692, point_color: 'BLUE'}, {point_size: 24.35622067, point_color: 'BLUE'}, {point_size: 30.02303042, point_color: 'BLUE'}, {point_size: 22.39714022, point_color: 'BLUE'}, {point_size: 28.98599378, point_color: 'BLUE'}, {point_size: 14.88302401, point_color: 'BLUE'}, {point_size: 30.51823724, point_color: 'BLUE'}, {point_size: 32.83421606, point_color: 'BLUE'}, {point_size: 36.56929775, point_color: 'BLUE'}, {point_size: 17.89400063, point_color: 'BLUE'}, {point_size: 18.43109365, point_color: 'BLUE'}, {point_size: 32.54351161, point_color: 'BLUE'}, {point_size: 33.51614629, point_color: 'BLUE'}, {point_size: 25.53295652, point_color: 'BLUE'}, {point_size: 26.72465774, point_color: 'BLUE'}, {point_size: 26.73240637, point_color: 'BLUE'}, {point_size: 37.20986328, point_color: 'BLUE'}, {point_size: 21.03127848, point_color: 'BLUE'}, {point_size: 23.07439857, point_color: 'BLUE'}, {point_size: 8.248059106, point_color: 'BLUE'}, {point_size: 27.60261793, point_color: 'BLUE'}, {point_size: 25.57190938, point_color: 'BLUE'}, {point_size: 2.826310111, point_color: 'BLUE'}, {point_size: 19.20956728, point_color: 'BLUE'}, {point_size: 16.34398901, point_color: 'BLUE'}, {point_size: 17.89930805, point_color: 'BLUE'}, {point_size: 23.47344533, point_color: 'BLUE'}, {point_size: 17.36566809, point_color: 'BLUE'}, {point_size: 17.61076147, point_color: 'BLUE'}, {point_size: 29.24288404, point_color: 'BLUE'}] , \r\n            mix_by_distractor_array: [{point_size: 17.77704822, point_color: 'ORANGE'}, {point_size: 15.78443128, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 12.4052259, point_color: 'ORANGE'}, {point_size: 23.26530134, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 19.31203244, point_color: 'ORANGE'}, {point_size: 11.98931005, point_color: 'ORANGE'}, {point_size: 16.13317613, point_color: 'ORANGE'}, {point_size: 8.960070324, point_color: 'ORANGE'}, {point_size: 15.00461697, point_color: 'ORANGE'}, {point_size: 10.23127123, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 7.4290205, point_color: 'ORANGE'}, {point_size: 26.32973959, point_color: 'ORANGE'}, {point_size: 11.67741876, point_color: 'ORANGE'}, {point_size: 22.48261559, point_color: 'ORANGE'}, {point_size: 11.31463583, point_color: 'ORANGE'}, {point_size: 12.01050293, point_color: 'ORANGE'}, {point_size: 5.352731538, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 16.71838152, point_color: 'ORANGE'}, {point_size: 10.66016077, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 29.09972609, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 4.02086063, point_color: 'ORANGE'}, {point_size: 21.08797097, point_color: 'ORANGE'}, {point_size: 14.2130893, point_color: 'ORANGE'}, {point_size: 11.39301084, point_color: 'ORANGE'}]\r\n        },\r\n    ],\r\n    \r\n    distractor_ensemble_average_trial_8:\r\n    [\r\n        {\r\n            // target correlation: 0.7, distractor correlation: 0.3, target mean size: 24, distractor mean size: 12, cue: blue, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.7, dist_base: 0.3, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 12, distractor_mean_size: 6, cue: \"blue\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 31.34800692, point_color: 'BLUE'}, {point_size: 24.35622067, point_color: 'BLUE'}, {point_size: 30.02303042, point_color: 'BLUE'}, {point_size: 22.39714022, point_color: 'BLUE'}, {point_size: 28.98599378, point_color: 'BLUE'}, {point_size: 14.88302401, point_color: 'BLUE'}, {point_size: 30.51823724, point_color: 'BLUE'}, {point_size: 32.83421606, point_color: 'BLUE'}, {point_size: 36.56929775, point_color: 'BLUE'}, {point_size: 17.89400063, point_color: 'BLUE'}, {point_size: 18.43109365, point_color: 'BLUE'}, {point_size: 32.54351161, point_color: 'BLUE'}, {point_size: 33.51614629, point_color: 'BLUE'}, {point_size: 25.53295652, point_color: 'BLUE'}, {point_size: 26.72465774, point_color: 'BLUE'}, {point_size: 26.73240637, point_color: 'BLUE'}, {point_size: 37.20986328, point_color: 'BLUE'}, {point_size: 21.03127848, point_color: 'BLUE'}, {point_size: 23.07439857, point_color: 'BLUE'}, {point_size: 8.248059106, point_color: 'BLUE'}, {point_size: 27.60261793, point_color: 'BLUE'}, {point_size: 25.57190938, point_color: 'BLUE'}, {point_size: 2.826310111, point_color: 'BLUE'}, {point_size: 19.20956728, point_color: 'BLUE'}, {point_size: 16.34398901, point_color: 'BLUE'}, {point_size: 17.89930805, point_color: 'BLUE'}, {point_size: 23.47344533, point_color: 'BLUE'}, {point_size: 17.36566809, point_color: 'BLUE'}, {point_size: 17.61076147, point_color: 'BLUE'}, {point_size: 29.24288404, point_color: 'BLUE'}] ,\r\n            mix_by_distractor_array: [{point_size: 17.77704822, point_color: 'ORANGE'}, {point_size: 15.78443128, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 12.4052259, point_color: 'ORANGE'}, {point_size: 23.26530134, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 19.31203244, point_color: 'ORANGE'}, {point_size: 11.98931005, point_color: 'ORANGE'}, {point_size: 16.13317613, point_color: 'ORANGE'}, {point_size: 8.960070324, point_color: 'ORANGE'}, {point_size: 15.00461697, point_color: 'ORANGE'}, {point_size: 10.23127123, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 7.4290205, point_color: 'ORANGE'}, {point_size: 26.32973959, point_color: 'ORANGE'}, {point_size: 11.67741876, point_color: 'ORANGE'}, {point_size: 22.48261559, point_color: 'ORANGE'}, {point_size: 11.31463583, point_color: 'ORANGE'}, {point_size: 12.01050293, point_color: 'ORANGE'}, {point_size: 5.352731538, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 16.71838152, point_color: 'ORANGE'}, {point_size: 10.66016077, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 29.09972609, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 4.02086063, point_color: 'ORANGE'}, {point_size: 21.08797097, point_color: 'ORANGE'}, {point_size: 14.2130893, point_color: 'ORANGE'}, {point_size: 11.39301084, point_color: 'ORANGE'}]\r\n        },\r\n    ],\r\n    \r\n    distractor_ensemble_average_trial_9:\r\n    [\r\n        {\r\n            // target correlation: 0.3, distractor correlation: 0.7, target mean size: 12, distractor mean size: 24, cue: None, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.3, dist_base: 0.7, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 6, distractor_mean_size: 12, cue: \"None\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 17.77704822, point_color: 'BLUE'}, {point_size: 15.78443128, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 12.4052259, point_color: 'BLUE'}, {point_size: 23.26530134, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 19.31203244, point_color: 'BLUE'}, {point_size: 11.98931005, point_color: 'BLUE'}, {point_size: 16.13317613, point_color: 'BLUE'}, {point_size: 8.960070324, point_color: 'BLUE'}, {point_size: 15.00461697, point_color: 'BLUE'}, {point_size: 10.23127123, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 7.4290205, point_color: 'BLUE'}, {point_size: 26.32973959, point_color: 'BLUE'}, {point_size: 11.67741876, point_color: 'BLUE'}, {point_size: 22.48261559, point_color: 'BLUE'}, {point_size: 11.31463583, point_color: 'BLUE'}, {point_size: 12.01050293, point_color: 'BLUE'}, {point_size: 5.352731538, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 16.71838152, point_color: 'BLUE'}, {point_size: 10.66016077, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 29.09972609, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 4.02086063, point_color: 'BLUE'}, {point_size: 21.08797097, point_color: 'BLUE'}, {point_size: 14.2130893, point_color: 'BLUE'}, {point_size: 11.39301084, point_color: 'BLUE'}] ,\r\n            mix_by_distractor_array: [{point_size: 31.34800692, point_color: 'ORANGE'}, {point_size: 24.35622067, point_color: 'ORANGE'}, {point_size: 30.02303042, point_color: 'ORANGE'}, {point_size: 22.39714022, point_color: 'ORANGE'}, {point_size: 28.98599378, point_color: 'ORANGE'}, {point_size: 14.88302401, point_color: 'ORANGE'}, {point_size: 30.51823724, point_color: 'ORANGE'}, {point_size: 32.83421606, point_color: 'ORANGE'}, {point_size: 36.56929775, point_color: 'ORANGE'}, {point_size: 17.89400063, point_color: 'ORANGE'}, {point_size: 18.43109365, point_color: 'ORANGE'}, {point_size: 32.54351161, point_color: 'ORANGE'}, {point_size: 33.51614629, point_color: 'ORANGE'}, {point_size: 25.53295652, point_color: 'ORANGE'}, {point_size: 26.72465774, point_color: 'ORANGE'}, {point_size: 26.73240637, point_color: 'ORANGE'}, {point_size: 37.20986328, point_color: 'ORANGE'}, {point_size: 21.03127848, point_color: 'ORANGE'}, {point_size: 23.07439857, point_color: 'ORANGE'}, {point_size: 8.248059106, point_color: 'ORANGE'}, {point_size: 27.60261793, point_color: 'ORANGE'}, {point_size: 25.57190938, point_color: 'ORANGE'}, {point_size: 2.826310111, point_color: 'ORANGE'}, {point_size: 19.20956728, point_color: 'ORANGE'}, {point_size: 16.34398901, point_color: 'ORANGE'}, {point_size: 17.89930805, point_color: 'ORANGE'}, {point_size: 23.47344533, point_color: 'ORANGE'}, {point_size: 17.36566809, point_color: 'ORANGE'}, {point_size: 17.61076147, point_color: 'ORANGE'}, {point_size: 29.24288404, point_color: 'ORANGE'}] \r\n        },\r\n    ],\r\n    \r\n    distractor_ensemble_average_trial_10:\r\n    [\r\n        {\r\n            // target correlation: 0.7, distractor correlation: 0.3, target mean size: 12, distractor mean size: 24, cue: None, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.7, dist_base: 0.3, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 6, distractor_mean_size: 12, cue: \"None\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 17.77704822, point_color: 'BLUE'}, {point_size: 15.78443128, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 12.4052259, point_color: 'BLUE'}, {point_size: 23.26530134, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 19.31203244, point_color: 'BLUE'}, {point_size: 11.98931005, point_color: 'BLUE'}, {point_size: 16.13317613, point_color: 'BLUE'}, {point_size: 8.960070324, point_color: 'BLUE'}, {point_size: 15.00461697, point_color: 'BLUE'}, {point_size: 10.23127123, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 7.4290205, point_color: 'BLUE'}, {point_size: 26.32973959, point_color: 'BLUE'}, {point_size: 11.67741876, point_color: 'BLUE'}, {point_size: 22.48261559, point_color: 'BLUE'}, {point_size: 11.31463583, point_color: 'BLUE'}, {point_size: 12.01050293, point_color: 'BLUE'}, {point_size: 5.352731538, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 16.71838152, point_color: 'BLUE'}, {point_size: 10.66016077, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 29.09972609, point_color: 'BLUE'}, {point_size: 0.8912752103, point_color: 'BLUE'}, {point_size: 4.02086063, point_color: 'BLUE'}, {point_size: 21.08797097, point_color: 'BLUE'}, {point_size: 14.2130893, point_color: 'BLUE'}, {point_size: 11.39301084, point_color: 'BLUE'}] ,\r\n            mix_by_distractor_array: [{point_size: 31.34800692, point_color: 'ORANGE'}, {point_size: 24.35622067, point_color: 'ORANGE'}, {point_size: 30.02303042, point_color: 'ORANGE'}, {point_size: 22.39714022, point_color: 'ORANGE'}, {point_size: 28.98599378, point_color: 'ORANGE'}, {point_size: 14.88302401, point_color: 'ORANGE'}, {point_size: 30.51823724, point_color: 'ORANGE'}, {point_size: 32.83421606, point_color: 'ORANGE'}, {point_size: 36.56929775, point_color: 'ORANGE'}, {point_size: 17.89400063, point_color: 'ORANGE'}, {point_size: 18.43109365, point_color: 'ORANGE'}, {point_size: 32.54351161, point_color: 'ORANGE'}, {point_size: 33.51614629, point_color: 'ORANGE'}, {point_size: 25.53295652, point_color: 'ORANGE'}, {point_size: 26.72465774, point_color: 'ORANGE'}, {point_size: 26.73240637, point_color: 'ORANGE'}, {point_size: 37.20986328, point_color: 'ORANGE'}, {point_size: 21.03127848, point_color: 'ORANGE'}, {point_size: 23.07439857, point_color: 'ORANGE'}, {point_size: 8.248059106, point_color: 'ORANGE'}, {point_size: 27.60261793, point_color: 'ORANGE'}, {point_size: 25.57190938, point_color: 'ORANGE'}, {point_size: 2.826310111, point_color: 'ORANGE'}, {point_size: 19.20956728, point_color: 'ORANGE'}, {point_size: 16.34398901, point_color: 'ORANGE'}, {point_size: 17.89930805, point_color: 'ORANGE'}, {point_size: 23.47344533, point_color: 'ORANGE'}, {point_size: 17.36566809, point_color: 'ORANGE'}, {point_size: 17.61076147, point_color: 'ORANGE'}, {point_size: 29.24288404, point_color: 'ORANGE'}]  \r\n        },\r\n    ],\r\n    \r\n    distractor_ensemble_average_trial_11:\r\n    [\r\n        {\r\n            // target correlation: 0.3, distractor correlation: 0.7, target mean size: 24, distractor mean size: 12, cue: None, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.3, dist_base: 0.7, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 12, distractor_mean_size: 6, cue: \"None\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 31.34800692, point_color: 'BLUE'}, {point_size: 24.35622067, point_color: 'BLUE'}, {point_size: 30.02303042, point_color: 'BLUE'}, {point_size: 22.39714022, point_color: 'BLUE'}, {point_size: 28.98599378, point_color: 'BLUE'}, {point_size: 14.88302401, point_color: 'BLUE'}, {point_size: 30.51823724, point_color: 'BLUE'}, {point_size: 32.83421606, point_color: 'BLUE'}, {point_size: 36.56929775, point_color: 'BLUE'}, {point_size: 17.89400063, point_color: 'BLUE'}, {point_size: 18.43109365, point_color: 'BLUE'}, {point_size: 32.54351161, point_color: 'BLUE'}, {point_size: 33.51614629, point_color: 'BLUE'}, {point_size: 25.53295652, point_color: 'BLUE'}, {point_size: 26.72465774, point_color: 'BLUE'}, {point_size: 26.73240637, point_color: 'BLUE'}, {point_size: 37.20986328, point_color: 'BLUE'}, {point_size: 21.03127848, point_color: 'BLUE'}, {point_size: 23.07439857, point_color: 'BLUE'}, {point_size: 8.248059106, point_color: 'BLUE'}, {point_size: 27.60261793, point_color: 'BLUE'}, {point_size: 25.57190938, point_color: 'BLUE'}, {point_size: 2.826310111, point_color: 'BLUE'}, {point_size: 19.20956728, point_color: 'BLUE'}, {point_size: 16.34398901, point_color: 'BLUE'}, {point_size: 17.89930805, point_color: 'BLUE'}, {point_size: 23.47344533, point_color: 'BLUE'}, {point_size: 17.36566809, point_color: 'BLUE'}, {point_size: 17.61076147, point_color: 'BLUE'}, {point_size: 29.24288404, point_color: 'BLUE'}] ,\r\n            mix_by_distractor_array: [{point_size: 17.77704822, point_color: 'ORANGE'}, {point_size: 15.78443128, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 12.4052259, point_color: 'ORANGE'}, {point_size: 23.26530134, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 19.31203244, point_color: 'ORANGE'}, {point_size: 11.98931005, point_color: 'ORANGE'}, {point_size: 16.13317613, point_color: 'ORANGE'}, {point_size: 8.960070324, point_color: 'ORANGE'}, {point_size: 15.00461697, point_color: 'ORANGE'}, {point_size: 10.23127123, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 7.4290205, point_color: 'ORANGE'}, {point_size: 26.32973959, point_color: 'ORANGE'}, {point_size: 11.67741876, point_color: 'ORANGE'}, {point_size: 22.48261559, point_color: 'ORANGE'}, {point_size: 11.31463583, point_color: 'ORANGE'}, {point_size: 12.01050293, point_color: 'ORANGE'}, {point_size: 5.352731538, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 16.71838152, point_color: 'ORANGE'}, {point_size: 10.66016077, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 29.09972609, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 4.02086063, point_color: 'ORANGE'}, {point_size: 21.08797097, point_color: 'ORANGE'}, {point_size: 14.2130893, point_color: 'ORANGE'}, {point_size: 11.39301084, point_color: 'ORANGE'}]\r\n        },\r\n    ],\r\n    \r\n    distractor_ensemble_average_trial_12:\r\n    [\r\n        {\r\n            // target correlation: 0.3, distractor correlation: 0.7, target mean size: 24, distractor mean size: 12, cue: None, \r\n            axis_length: 10, distribution_type: \"gaussian\", base_correlation: 0.7, dist_base: 0.3, error: 0.0001, dist_error: 0.0001, num_points: 30, dist_num_points: 30, mean: 0.5, SD: 0.2, num_SD: 2.5, axis_color: 'BLACK', feedback_background_color: 'WHITE', background_color: \"WHITE\", target_shape: 'circle', dist_shape: 'circle', target_mean_size: 12, distractor_mean_size: 6, cue: \"None\", size_average_probe: \"blue\", \r\n            mix_by_target_array: [{point_size: 31.34800692, point_color: 'BLUE'}, {point_size: 24.35622067, point_color: 'BLUE'}, {point_size: 30.02303042, point_color: 'BLUE'}, {point_size: 22.39714022, point_color: 'BLUE'}, {point_size: 28.98599378, point_color: 'BLUE'}, {point_size: 14.88302401, point_color: 'BLUE'}, {point_size: 30.51823724, point_color: 'BLUE'}, {point_size: 32.83421606, point_color: 'BLUE'}, {point_size: 36.56929775, point_color: 'BLUE'}, {point_size: 17.89400063, point_color: 'BLUE'}, {point_size: 18.43109365, point_color: 'BLUE'}, {point_size: 32.54351161, point_color: 'BLUE'}, {point_size: 33.51614629, point_color: 'BLUE'}, {point_size: 25.53295652, point_color: 'BLUE'}, {point_size: 26.72465774, point_color: 'BLUE'}, {point_size: 26.73240637, point_color: 'BLUE'}, {point_size: 37.20986328, point_color: 'BLUE'}, {point_size: 21.03127848, point_color: 'BLUE'}, {point_size: 23.07439857, point_color: 'BLUE'}, {point_size: 8.248059106, point_color: 'BLUE'}, {point_size: 27.60261793, point_color: 'BLUE'}, {point_size: 25.57190938, point_color: 'BLUE'}, {point_size: 2.826310111, point_color: 'BLUE'}, {point_size: 19.20956728, point_color: 'BLUE'}, {point_size: 16.34398901, point_color: 'BLUE'}, {point_size: 17.89930805, point_color: 'BLUE'}, {point_size: 23.47344533, point_color: 'BLUE'}, {point_size: 17.36566809, point_color: 'BLUE'}, {point_size: 17.61076147, point_color: 'BLUE'}, {point_size: 29.24288404, point_color: 'BLUE'}] ,\r\n            mix_by_distractor_array: [{point_size: 17.77704822, point_color: 'ORANGE'}, {point_size: 15.78443128, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 12.4052259, point_color: 'ORANGE'}, {point_size: 23.26530134, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 19.31203244, point_color: 'ORANGE'}, {point_size: 11.98931005, point_color: 'ORANGE'}, {point_size: 16.13317613, point_color: 'ORANGE'}, {point_size: 8.960070324, point_color: 'ORANGE'}, {point_size: 15.00461697, point_color: 'ORANGE'}, {point_size: 10.23127123, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 7.4290205, point_color: 'ORANGE'}, {point_size: 26.32973959, point_color: 'ORANGE'}, {point_size: 11.67741876, point_color: 'ORANGE'}, {point_size: 22.48261559, point_color: 'ORANGE'}, {point_size: 11.31463583, point_color: 'ORANGE'}, {point_size: 12.01050293, point_color: 'ORANGE'}, {point_size: 5.352731538, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 16.71838152, point_color: 'ORANGE'}, {point_size: 10.66016077, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 29.09972609, point_color: 'ORANGE'}, {point_size: 0.8912752103, point_color: 'ORANGE'}, {point_size: 4.02086063, point_color: 'ORANGE'}, {point_size: 21.08797097, point_color: 'ORANGE'}, {point_size: 14.2130893, point_color: 'ORANGE'}, {point_size: 11.39301084, point_color: 'ORANGE'}]\r\n        },\r\n    ]\r\n\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/constants/ensemble_average_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "ENSEMBLE_AVERAGE_BASE",
    "memberof": "scripts/experiment-properties/data/constants/ensemble_average_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/ensemble_average_data.js~ENSEMBLE_AVERAGE_BASE",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/ensemble_average_data.js",
    "importStyle": "{ENSEMBLE_AVERAGE_BASE}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *}"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "ENSEMBLE_AVERAGE_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/ensemble_average_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/ensemble_average_data.js~ENSEMBLE_AVERAGE_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/ensemble_average_data.js",
    "importStyle": "{ENSEMBLE_AVERAGE_CONDITIONS}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"distractor_ensemble_average_trial_test\": *, \"distractor_ensemble_average_trial_1\": *, \"distractor_ensemble_average_trial_2\": *, \"distractor_ensemble_average_trial_3\": *, \"distractor_ensemble_average_trial_4\": *, \"distractor_ensemble_average_trial_5\": *, \"distractor_ensemble_average_trial_6\": *, \"distractor_ensemble_average_trial_7\": *, \"distractor_ensemble_average_trial_8\": *, \"distractor_ensemble_average_trial_9\": *, \"distractor_ensemble_average_trial_10\": *, \"distractor_ensemble_average_trial_11\": *, \"distractor_ensemble_average_trial_12\": *}"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/estimation_data.js",
    "content": "export {ESTIMATION_CONDITIONS};\r\n\r\nconst TRIALS_PER_ROUND = 4;\r\nconst MAX_STEP_SIZE = 0.05;\r\nconst FILL_COLOR = '#0000FF';\r\nconst OUTLINE_COLOR = '#0000FF';\r\n\r\nconst ESTIMATION_CONDITIONS = {\r\n    shape_estimation: [\r\n        {\"ref_shape\":\"triangle\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"triangle\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"triangle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"triangle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"triangle\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"triangle\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"}\r\n    ],\r\n    line_length: [\r\n        {\"ref_shape\":\"line\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"line\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"line\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"line\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"line\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"line\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"}\r\n    ],\r\n    rectangle_square: [\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":90,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":90,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":90,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2}\r\n    ],\r\n    rectangle_rotated_square_solid: [\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":45,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":45,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":45,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":45,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":45,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":45,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":45,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":45,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":45,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2}\r\n    ],\r\n    rectangle_rotated_square_outline: [\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":45,\"ref_fill\":\"#FFFFFF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":45,\"mod_fill\":\"#FFFFFF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":45,\"ref_fill\":\"#FFFFFF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#FFFFFF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":45,\"ref_fill\":\"#FFFFFF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":45,\"mod_fill\":\"#FFFFFF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":45,\"ref_fill\":\"#FFFFFF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#FFFFFF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":45,\"ref_fill\":\"#FFFFFF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":45,\"mod_fill\":\"#FFFFFF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":45,\"ref_fill\":\"#FFFFFF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"rectangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#FFFFFF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2}\r\n    ],\r\n    triangle: [\r\n        {\"ref_shape\":\"triangle\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"triangle\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":90,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"triangle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"triangle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":90,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"triangle\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2},\r\n        {\"ref_shape\":\"triangle\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":90,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"width_height_ratio\":2}\r\n    ],\r\n    square_circle_interference: [\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"circle\",\"interf_ratio\":1.3,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"square\",\"interf_ratio\":1.3,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"circle\",\"interf_ratio\":1.3,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"square\",\"interf_ratio\":1.3,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"circle\",\"interf_ratio\":1.3,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"square\",\"interf_ratio\":1.3,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"}\r\n    ],\r\n    circle_interference: [\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"circle\",\"interf_ratio\":0.5773502691896258,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"circle\",\"interf_ratio\":1.1,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"circle\",\"interf_ratio\":1.3,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"circle\",\"interf_ratio\":0.5773502691896258,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"circle\",\"interf_ratio\":1.1,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"circle\",\"interf_ratio\":1.3,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"circle\",\"interf_ratio\":0.5773502691896258,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"circle\",\"interf_ratio\":1.1,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":6,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":5,\"mod_max_size\":6.5,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"interf_shape\":\"circle\",\"interf_ratio\":1.3,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\"}\r\n    ],\r\n    multi_square_interference: [\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.25,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.5,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.75,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":2,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.25,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":2,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.5,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":2,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.75,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.25,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.5,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.75,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":2,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.25,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":2,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.5,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":2,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.75,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.25,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.5,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.75,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":2,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.25,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":2,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.5,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":2,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.75,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.25,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.5,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.75,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":2,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.25,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":2,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.5,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":2,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.75,\"interf_fill\":\"GREY\",\"interf_outline\":\"GREY\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}}\r\n    ],\r\n    multi_shape_interference: [\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"triangle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"triangle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.8,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"triangle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"overlapping-bottom\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"triangle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"overlapping-bottom\",\"ref_ratio\":0.8,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"circle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"circle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.8,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"circle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"overlapping-bottom\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"circle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"overlapping-bottom\",\"ref_ratio\":0.8,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.8,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"overlapping-bottom\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"overlapping-bottom\",\"ref_ratio\":0.8,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"triangle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"triangle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.8,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"triangle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"overlapping-bottom\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"triangle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"overlapping-bottom\",\"ref_ratio\":0.8,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"circle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"circle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.8,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"circle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"overlapping-bottom\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"triangle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"circle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"overlapping-bottom\",\"ref_ratio\":0.8,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.8,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"overlapping-bottom\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_shapes\":{\"mod\":\"circle\",\"ref\":\"triangle\"},\"mod_side_alignment\":\"diagonal\",\"mod_ratio\":0.5,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"overlapping-bottom\",\"ref_ratio\":0.8,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\"}\r\n    ],\r\n    multi_fan_interference: [\r\n        {\"ref_shape\":\"circle\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.25,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.25,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.25,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.25,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"#0000FF\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"#0000FF\",\"mod_side_alignment\":\"overlapping-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}}\r\n    ],\r\n    absolute_area_ratio: [\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/2\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/3\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/4\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/2\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/3\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/4\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/2\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/3\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/4\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/2\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/3\"},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/4\"}\r\n    ],\r\n    absolute_area_ratio_bisection_variant_A: [\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.8284271247461903,2],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":2,\"mod_max_size\":2,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.8284271247461903,2.449489742783178],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":2.23606797749979,\"mod_max_size\":2.23606797749979,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.449489742783178,2],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.7320508075688772,\"mod_max_size\":1.7320508075688772,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.8284271247461903,2.6457513110645907],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":2.345207879911715,\"mod_max_size\":2.345207879911715,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.449489742783178,2.23606797749979],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.8708286933869707,\"mod_max_size\":1.8708286933869707,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.6457513110645907,2.449489742783178],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":2.1213203435596424,\"mod_max_size\":2.1213203435596424,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.23606797749979,2],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.5811388300841898,\"mod_max_size\":1.5811388300841898,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"}\r\n    ],\r\n    absolute_area_ratio_bisection_variant_B: [\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.8284271247461903,2],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":2,\"mod_max_size\":2,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.449489742783178,2],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.7320508075688772,\"mod_max_size\":1.7320508075688772,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.8284271247461903,2.449489742783178],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":2.23606797749979,\"mod_max_size\":2.23606797749979,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.8284271247461903,2.6457513110645907],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":2.345207879911715,\"mod_max_size\":2.345207879911715,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.6457513110645907,2.449489742783178],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":2.1213203435596424,\"mod_max_size\":2.1213203435596424,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.23606797749979,2],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.5811388300841898,\"mod_max_size\":1.5811388300841898,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.449489742783178,2.23606797749979],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.8708286933869707,\"mod_max_size\":1.8708286933869707,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\"}\r\n    ],\r\n    multi_fan_interference_B: [\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.2,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.2,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-bottom-edge\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.2,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-bottom-edge\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-bottom-edge\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"slice-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.2,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"slice-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"slice-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"}}\r\n    ],\r\n    multi_square_cutout_interference: [\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left-cutout\",\"ref_ratio\":0.25,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left-cutout\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.25,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left-cutout\",\"ref_ratio\":0.25,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left-cutout\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.25,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"}}\r\n    ],\r\n    absolute_area_ratio_flicker: [\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/2\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/3\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/4\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/2\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/3\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/4\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/2\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/3\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/4\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/2\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/3\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"#0000FF\",\"mod_outline\":\"#0000FF\",\"target_area_ratio\":\"1:1/4\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}}\r\n    ],\r\n    absolute_area_ratio_bisection_variant_A_flicker: [\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.8284271247461903,2],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":2,\"mod_max_size\":2,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.8284271247461903,2.449489742783178],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":2.23606797749979,\"mod_max_size\":2.23606797749979,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.449489742783178,2],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.7320508075688772,\"mod_max_size\":1.7320508075688772,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.8284271247461903,2.6457513110645907],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":2.345207879911715,\"mod_max_size\":2.345207879911715,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.6457513110645907,2.449489742783178],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":2.1213203435596424,\"mod_max_size\":2.1213203435596424,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.449489742783178,2.23606797749979],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.8708286933869707,\"mod_max_size\":1.8708286933869707,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":[\"square\",\"square\"],\"ref_size\":[2.23606797749979,2],\"ref_rotate_by\":0,\"ref_fill\":\"#0000FF\",\"ref_outline\":\"#0000FF\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.5811388300841898,\"mod_max_size\":1.5811388300841898,\"mod_rotate_by\":0,\"mod_fill\":\"WHITE\",\"mod_outline\":\"#0000FF\",\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}}\r\n    ],\r\n    multi_fan_interference_B_flicker: [\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.2,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-center\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.2,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-bottom-edge\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.2,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-bottom-edge\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-bottom-edge\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"slice-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.2,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"slice-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"circle\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":2,\"trials_per_round\":4,\"mod_shape\":\"circle\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"slice-bottom\",\"mod_ratio\":0.125,\"ref_side_shapes\":{\"main\":\"circle\",\"sub\":\"fan\"},\"ref_side_alignment\":\"vertical-centered\",\"ref_ratio\":0.6,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"fan\",\"ref\":\"circle\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}}\r\n    ],\r\n    multi_square_cutout_interference_flicker: [\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left-cutout\",\"ref_ratio\":0.25,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left-cutout\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.25,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":2,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":1.2,\"mod_max_size\":3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left-cutout\",\"ref_ratio\":0.25,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left-cutout\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.25,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}},\r\n        {\"ref_shape\":\"square\",\"ref_size\":4,\"ref_rotate_by\":0,\"ref_fill\":\"BLUE\",\"ref_outline\":\"WHITE\",\"max_step_size\":0.05,\"trials_per_round\":4,\"mod_shape\":\"square\",\"mod_min_size\":3.1,\"mod_max_size\":5.3,\"mod_rotate_by\":0,\"mod_fill\":\"BLUE\",\"mod_outline\":\"WHITE\",\"mod_side_alignment\":\"overlapping-top-left-corner\",\"mod_ratio\":8,\"ref_side_shapes\":{\"main\":\"square\",\"sub\":\"square\"},\"ref_side_alignment\":\"vertical-left\",\"ref_ratio\":0.4,\"interf_fill\":\"WHITE\",\"interf_outline\":\"BLUE\",\"mod_side_shapes\":{\"mod\":\"square\",\"ref\":\"square\"},\"flicker_ref_durations\":{\"on\":1000,\"off\":1000}}\r\n    ],\r\n};\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/constants/estimation_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "TRIALS_PER_ROUND",
    "memberof": "scripts/experiment-properties/data/constants/estimation_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/estimation_data.js~TRIALS_PER_ROUND",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/estimation_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "MAX_STEP_SIZE",
    "memberof": "scripts/experiment-properties/data/constants/estimation_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/estimation_data.js~MAX_STEP_SIZE",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/estimation_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "FILL_COLOR",
    "memberof": "scripts/experiment-properties/data/constants/estimation_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/estimation_data.js~FILL_COLOR",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/estimation_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "OUTLINE_COLOR",
    "memberof": "scripts/experiment-properties/data/constants/estimation_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/estimation_data.js~OUTLINE_COLOR",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/estimation_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "ESTIMATION_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/estimation_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/estimation_data.js~ESTIMATION_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/estimation_data.js",
    "importStyle": "{ESTIMATION_CONDITIONS}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"shape_estimation\": *, \"line_length\": *, \"rectangle_square\": *, \"rectangle_rotated_square_solid\": *, \"rectangle_rotated_square_outline\": *, \"triangle\": *, \"square_circle_interference\": *, \"circle_interference\": *, \"multi_square_interference\": *, \"multi_shape_interference\": *, \"multi_fan_interference\": *, \"absolute_area_ratio\": *, \"absolute_area_ratio_bisection_variant_A\": *, \"absolute_area_ratio_bisection_variant_B\": *, \"multi_fan_interference_B\": *, \"multi_square_cutout_interference\": *, \"absolute_area_ratio_flicker\": *, \"absolute_area_ratio_bisection_variant_A_flicker\": *, \"multi_fan_interference_B_flicker\": *, \"multi_square_cutout_interference_flicker\": *}"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/hybrid_data.js",
    "content": "export { HYBRID_BASE, HYBRID_CONDITIONS };\r\n\r\nconst HYBRID_BASE = {\r\n  design: [{}],\r\n};\r\n\r\nconst HYBRID_CONDITIONS = {\r\n  multi_size_scatter_combined: [\r\n    { block: \"0.5\" },\r\n    { block: \"1.0\" },\r\n    { block: \"2.0\" },\r\n    { block: \"4.0\" },\r\n    { block: \"mixed\" },\r\n  ],\r\n\r\n  multi_opacity_scatter_combined: [\r\n    { block: \"#000000\" },\r\n    { block: \"#000000BF\" },\r\n    { block: \"#00000080\" },\r\n    { block: \"#00000040\" },\r\n    { block: \"mix_by_attribute\" },\r\n  ],\r\n\r\n  decreasing_number_of_dots: [\r\n    { block: \"100\" },\r\n    { block: \"48\" },\r\n    { block: \"24\" },\r\n    { block: \"12\" },\r\n    { block: \"6\" },\r\n  ],\r\n\r\n  increasing_number_of_dots: [\r\n    { block: \"100\" },\r\n    { block: \"150\" },\r\n    { block: \"200\" },\r\n    { block: \"250\" },\r\n    { block: \"300\" },\r\n  ],\r\n\r\n  multi_luminance_scatter_combined: [\r\n    { block: \"#000000\" },\r\n\r\n    { block: \"808080\" },\r\n\r\n    { block: \"404040\" },\r\n\r\n    { block: \"bfbfbf\" },\r\n\r\n    { block: \"mix_by_attribute\" },\r\n  ],\r\n\r\n  hybrid_multi_luminance_scatter: [\r\n    { block: \"#000000\" },\r\n    { block: \"#747474\" },\r\n    { block: \"#a3a3a3\" },\r\n    { block: \"#d7d7d7\" },\r\n    { block: \"mix_by_attribute\" },\r\n  ],\r\n\r\n  multi_color_scatter_combined:\r\n  [\r\n    { block: \"GREY\" },\r\n    { block: \"BLUE\" },\r\n    { block: \"RED\" },\r\n    { block: \"GREEN\" },\r\n    { block: \"MIX\" },\r\n  ],\r\n\r\n};\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/constants/hybrid_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "HYBRID_BASE",
    "memberof": "scripts/experiment-properties/data/constants/hybrid_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/hybrid_data.js~HYBRID_BASE",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/hybrid_data.js",
    "importStyle": "{HYBRID_BASE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"design\": *}"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "HYBRID_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/hybrid_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/hybrid_data.js~HYBRID_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/hybrid_data.js",
    "importStyle": "{HYBRID_CONDITIONS}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"multi_size_scatter_combined\": *, \"multi_opacity_scatter_combined\": *, \"decreasing_number_of_dots\": *, \"increasing_number_of_dots\": *, \"multi_luminance_scatter_combined\": *, \"hybrid_multi_luminance_scatter\": *, \"multi_color_scatter_combined\": *}"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/jnd_data.js",
    "content": "export { JND_BASE, JND_CONDITIONS };\r\n\r\nconst JND_BASE = {\r\n\r\n  foundational:\r\n    [\r\n      { distribution_type: \"gaussian\", base_correlation: 0.9, error: 0.0001, max_step_size: 0.01, direction: \"below\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.8, error: 0.0001, max_step_size: 0.01, direction: \"below\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.7, error: 0.0001, max_step_size: 0.01, direction: \"below\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.6, error: 0.0001, max_step_size: 0.01, direction: \"below\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.5, error: 0.0001, max_step_size: 0.01, direction: \"below\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.4, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.3, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.2, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.1, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.0, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.9, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.8, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.7, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.6, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.5, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.4, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.3, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 }\r\n    ],\r\n\r\n  design:\r\n    [\r\n      { distribution_type: \"gaussian\", base_correlation: 0.3, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.6, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.9, error: 0.0001, max_step_size: 0.01, direction: \"above\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n    ],\r\n\r\n  custom:\r\n    [\r\n      { distribution_type: \"gaussian\", error: 0.0001, max_step_size: 0.01, direction: \"below\", initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6 },\r\n\r\n    ]\r\n}\r\n\r\nconst JND_CONDITIONS = {\r\n  // Foundational\r\n  symmetric_jnd:\r\n    [\r\n      { base_correlation: 0.3, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0, adjusted_correlation_high: 0.3, adjusted_correlation_low: 0.3 },\r\n      { base_correlation: 0.6, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0, adjusted_correlation_high: 0.6, adjusted_correlation_low: 0.6 },\r\n      { base_correlation: 0.85, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0, adjusted_correlation_high: 0.85, adjusted_correlation_low: 0.85 },\r\n\r\n      { base_correlation: 0.3, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.05, adjusted_correlation_high: 0.35, adjusted_correlation_low: 0.25 },\r\n      { base_correlation: 0.6, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.05, adjusted_correlation_high: 0.65, adjusted_correlation_low: 0.55 },\r\n      { base_correlation: 0.85, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.05, adjusted_correlation_high: 0.9, adjusted_correlation_low: 0.85 },\r\n\r\n      { base_correlation: 0.3, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.1, adjusted_correlation_high: 0.4, adjusted_correlation_low: 0.2 },\r\n      { base_correlation: 0.6, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.1, adjusted_correlation_high: 0.7, adjusted_correlation_low: 0.5 },\r\n      { base_correlation: 0.85, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.1, adjusted_correlation_high: 0.95, adjusted_correlation_low: 0.85 },\r\n\r\n      { base_correlation: 0.3, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.15, adjusted_correlation_high: 0.45, adjusted_correlation_low: 0.25 },\r\n      { base_correlation: 0.6, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.15, adjusted_correlation_high: 0.75, adjusted_correlation_low: 0.45 },\r\n      { base_correlation: 0.85, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.15, adjusted_correlation_high: 1, adjusted_correlation_low: 0.7 },\r\n\r\n      { base_correlation: 0.3, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.15, adjusted_correlation_high: 0.45, adjusted_correlation_low: 0.25 },\r\n      { base_correlation: 0.6, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.15, adjusted_correlation_high: 0.75, adjusted_correlation_low: 0.45 },\r\n      { base_correlation: 0.85, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.15, adjusted_correlation_high: 1, adjusted_correlation_low: 0.7 },\r\n      { base_correlation: 0.3, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.15, adjusted_correlation_high: 0.45, adjusted_correlation_low: 0.25 },\r\n      { base_correlation: 0.6, error: 0.0001, max_step_size: 0.005, direction: \"symmetric\", initial_difference: 0.15, adjusted_correlation_high: 1, adjusted_correlation_low: 0.7 }\r\n    ],\r\n\r\n  strip_ring_size:\r\n    [\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 }\r\n    ],\r\n\r\n  line_length_strip:\r\n    [\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" },\r\n\r\n      { strip_width: 1, y_value_representation: \"height\" }\r\n    ],\r\n\r\n  stable_line_length_strip:\r\n    [\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true }\r\n    ],\r\n\r\n  // Design Conditions\r\n  multi_size_scatter:\r\n    [\r\n      { num_points: 50, point_size: 6.25 },\r\n\r\n      { num_points: 50, point_size: 12.5 },//mix_by_attribute: {point_size: [0.125, 0.25, 0.5, 1]}},\r\n\r\n      { num_points: 50, point_size: 25},//mix_by_attribute: {point_size: [0.125, 0.25, 0.5, 1]}},\r\n\r\n      { num_points: 50, point_size: 50},//mix_by_attribute: {point_size: [0.125, 0.25, 0.5, 1]}},\r\n\r\n      { num_points: 50, mix_type: \"targeted\", mix_data: { point_size: [6.25, 12.5, 25, 50], num_target: 11 } },//mix_by_attribute: {point_size: [0.125, 0.25, 0.5, 1]}},\r\n    ],\r\n\r\n  distractor_multi:\r\n    [\r\n      { dist_attributes: {dist_base: 0.2, dist_error: 0.0001, num_points: 100, point_color: '#cd4c32', point_size: 6 }, point_color: 'BLACK', },\r\n\r\n      { dist_attributes: {dist_base: 0.2, dist_error: 0.0001, num_points: 100, point_color: '#007ebc', point_size: 6 }, point_color: 'BLACK', },\r\n\r\n      { dist_attributes: {dist_base: 0.2, dist_error: 0.0001, num_points: 100, point_color: '#20874a', point_size: 6 }, point_color: 'BLACK', },\r\n\r\n      { dist_attributes: {dist_base: 0.2, dist_error: 0.0001, num_points: 100, point_color: '#dbc667', point_size: 6 }, point_color: 'BLACK', },\r\n\r\n    ],\r\n\r\n  // TODO: Check if these are foundational or custom, otherwise they are repeating the same 3 correlations 5 times instead of having a distinct correlation per subcondition\r\n  hollow_scatter:\r\n    [\r\n      { point_shape: \"hollow_circle\" },\r\n\r\n      { point_shape: \"hollow_circle\" },\r\n\r\n      { point_shape: \"hollow_circle\" },\r\n\r\n      { point_shape: \"hollow_circle\" },\r\n\r\n      { point_shape: \"hollow_circle\" },\r\n    ],\r\n\r\n  thin_hollow_scatter:\r\n    [\r\n      { point_shape: \"thin_hollow_circle\" },\r\n\r\n      { point_shape: \"thin_hollow_circle\" },\r\n\r\n      { point_shape: \"thin_hollow_circle\" },\r\n\r\n      { point_shape: \"thin_hollow_circle\" },\r\n\r\n      { point_shape: \"thin_hollow_circle\" },\r\n    ],\r\n\r\n  bullseye_scatter:\r\n    [\r\n      { point_shape: \"bullseye_circle\" },\r\n\r\n      { point_shape: \"bullseye_circle\" },\r\n\r\n      { point_shape: \"bullseye_circle\" },\r\n\r\n      { point_shape: \"bullseye_circle\" },\r\n\r\n      { point_shape: \"bullseye_circle\" },\r\n    ],\r\n  //\r\n\r\n  large_dot_sizes:\r\n    [\r\n      { point_size: 24 },\r\n\r\n      { point_size: 35.5 },\r\n\r\n      { point_size: 50},\r\n\r\n      { point_size: 71 },\r\n\r\n      { mix_type: \"attribute\", mix_data: { point_size: [24, 35.5, 50, 71] } },\r\n    ],\r\n\r\n    multi_color_scatter_combined:\r\n    [\r\n      { num_points: 48, point_size: 20, point_color: \"#808080\", block: \"GREY\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"BLUE\", block: \"BLUE\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"RED\", block: \"RED\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"GREEN\", block: \"GREEN\" },\r\n\r\n      { num_points: 48, point_size: 20, mix_type: \"attribute\", mix_data: { point_color: [\"#808080\", \"BLUE\", \"RED\", \"GREEN\"] }, block: \"MIX\" },\r\n    ],\r\n\r\n  multi_shape_scatter_combined:\r\n    [\r\n      { num_points: 48, point_size: 10, point_shape: \"hollow_circle\", block: \"hollow_circle\" },\r\n\r\n      { num_points: 48, point_size: 10, point_shape: \"hollow_triangle\", block: \"hollow_triangle\" },\r\n\r\n      { num_points: 48, point_size: 10, point_shape: \"plus\", block: \"plus\" },\r\n\r\n      { num_points: 48, point_size: 10, point_shape: \"cross\", block: \"cross\" },\r\n\r\n      { num_points: 48, mix_type: \"attribute\", mix_data: { point_shape: [\"hollow_circle\", \"hollow_triangle\", \"plus\", \"cross\"] }, point_size: 10, block: \"mix\" },\r\n    ],\r\n\r\n  multi_border_combined:\r\n    [\r\n      { num_points: 48, point_size: 20, borders: \"0\", block: \"0\" },\r\n\r\n      { num_points: 48, point_size: 20, borders: \"2\", block: \"2\" },\r\n\r\n      { num_points: 48, point_size: 20, borders: \"3U\", block: \"3U\" },\r\n\r\n      { num_points: 48, point_size: 20, borders: \"3C\", block: \"3C\" },\r\n\r\n      { num_points: 48, point_size: 20, borders: \"4\", block: \"4\" },\r\n\r\n    ],\r\n\r\n  multi_luminance_scatter_combined:\r\n    [\r\n      { num_points: 48,  point_size: 20, point_color: \"#000000\", block: \"#000000\" },\r\n\r\n      { num_points: 48,  point_size: 20, point_color: \"#808080\", block: \"808080\" },\r\n\r\n      { num_points: 48,  point_size: 20, point_color: \"#404040\", block: \"404040\" },\r\n\r\n      { num_points: 48,  point_size: 20, point_color: \"#bfbfbf\", block: \"bfbfbf\" },\r\n\r\n      { num_points: 48,  point_size: 20, mix_type: \"attribute\", mix_data: { point_color: [\"#000000\", \"#808080\", \"#404040\", \"#bfbfbf\"] }, block: \"mix_by_attribute\" },\r\n\r\n    ],\r\n\r\n  multi_opacity_scatter_combined:\r\n    [\r\n      { num_points: 48, point_size: 20, point_color: \"#000000\", block: \"#000000\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#000000BF\", block: \"#000000BF\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#00000080\", block: \"#00000080\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#00000040\", block: \"#00000040\" },\r\n\r\n      { num_points: 48, point_size: 20, mix_type: \"attribute\", mix_data: { point_color: [\"#000000\", \"#000000BF\", \"#00000080\", \"#00000040\"] }, block: \"mix_by_attribute\" },\r\n\r\n    ],\r\n\r\n  multi_size_scatter_combined:\r\n    [\r\n      { num_points: 48, point_size: 2.5, block: \"0.5\" },\r\n\r\n      { num_points: 48, point_size: 5, block: \"1.0\" },\r\n\r\n      { num_points: 48, point_size: 10, block: \"2.0\" },\r\n\r\n      { num_points: 48, point_size: 20, block: \"4.0\" },\r\n\r\n      { num_points: 48, mix_type: \"attribute\", mix_data: { point_size: [2.5, 5, 10, 20] }, block: \"mixed_size\" },\r\n    ],\r\n\r\n  //TODO: Double Check intenteded Design\r\n  mix_point_styles:\r\n    [\r\n      { mix_type: \"attribute\", mix_data: { point_shape: [\"hollow_circle\", \"thin_hollow_circle\", \"bullseye_circle\", \"circle\"] } },\r\n\r\n      { mix_type: \"attribute\", mix_data: { point_shape: [\"hollow_circle\", \"thin_hollow_circle\", \"bullseye_circle\", \"circle\"] } },\r\n\r\n      { mix_type: \"attribute\", mix_data: { point_shape: [\"hollow_circle\", \"thin_hollow_circle\", \"bullseye_circle\", \"circle\"] } },\r\n\r\n      { mix_type: \"attribute\", mix_data: { point_shape: [\"hollow_circle\", \"thin_hollow_circle\", \"bullseye_circle\", \"circle\"] } },\r\n\r\n      { mix_type: \"attribute\", mix_data: { point_shape: [\"hollow_circle\", \"thin_hollow_circle\", \"bullseye_circle\", \"circle\"] } },\r\n\r\n    ],\r\n\r\n  point_styles_combined:\r\n    [\r\n      { point_shape: \"hollow_circle\", block: \"hollow_circle\" },\r\n\r\n      { point_shape: \"thin_hollow_circle\", block: \"thin_hollow_circle\" },\r\n\r\n      { point_shape: \"bullseye_circle\", block: \"bullseye_circle\" },\r\n\r\n      { point_shape: \"circle\", block: \"circle\" },\r\n\r\n      { mix_type: \"attribute\", mix_data: { point_shape: [\"hollow_circle\", \"thin_hollow_circle\", \"bullseye_circle\", \"circle\"] }, block: \"mix_by_attribute\" },\r\n\r\n    ],\r\n\r\n  decreasing_number_of_dots:\r\n    [\r\n      { block: \"100\" },\r\n\r\n      { num_points: 48, block: \"48\" },\r\n\r\n      { num_points: 24, block: \"24\" },\r\n\r\n      { num_points: 12, block: \"12\" },\r\n\r\n      { num_points: 6, block: \"6\" }\r\n\r\n    ],\r\n\r\n  increasing_number_of_dots:\r\n    [\r\n      { block: \"100\" },\r\n\r\n      { num_points: 150, block: \"150\" },\r\n\r\n      { num_points: 200, block: \"200\" },\r\n\r\n      { num_points: 250, block: \"250\" },\r\n\r\n      { num_points: 300, block: \"300\" }\r\n\r\n    ],\r\n\r\n  // Custom\r\n  multi_size_scatter_alternate:\r\n    [\r\n      { base_correlation: 0.3, num_points: 50, point_size: 6.25 },\r\n\r\n      { base_correlation: 0.55, num_points: 50, point_size: 6.25 },\r\n\r\n      { base_correlation: 0.8, num_points: 50, point_size: 6.25 },\r\n\r\n\r\n      { base_correlation: 0.3, num_points: 50, point_size: 12.5 },//mix_by_attribute: {point_size: [0.125, 0.25, 0.5, 1]}},\r\n\r\n      { base_correlation: 0.55, num_points: 50, point_size: 12.5 },\r\n\r\n      { base_correlation: 0.8, num_points: 50, point_size: 12.5 },\r\n\r\n\r\n      { base_correlation: 0.3, num_points: 50, point_size: 25},//mix_by_attribute: {point_size: [0.125, 0.25, 0.5, 1]}},\r\n\r\n      { base_correlation: 0.55, num_points: 50, point_size: 25},\r\n\r\n      { base_correlation: 0.8, num_points: 50, point_size: 25},\r\n\r\n\r\n      { base_correlation: 0.3, num_points: 50, point_size: 50},//mix_by_attribute: {point_size: [0.125, 0.25, 0.5, 1]}},\r\n\r\n      { base_correlation: 0.55, num_points: 50, point_size: 50},\r\n\r\n      { base_correlation: 0.8, num_points: 50, point_size: 50},\r\n\r\n\r\n      { base_correlation: 0.3, num_points: 50,  mix_type: \"targeted\", mix_data: { point_size: [6.25, 12.25, 25, 50], num_target: 11 } },//mix_by_attribute: {point_size: [0.125, 0.25, 0.5, 1]}},\r\n\r\n      { base_correlation: 0.55, num_points: 50,  mix_type: \"targeted\", mix_data: { point_size: [6.25, 12.25, 25, 50], num_target: 11 } },\r\n\r\n      { base_correlation: 0.8, num_points: 50,  mix_type: \"targeted\", mix_data: { point_size: [6.25, 12.25, 25, 50], num_target: 11 } }\r\n    ],\r\n\r\n  // TODO: Check if Visual Masking should be combined into design\r\n  visual_masking: [\r\n    { base_correlation: 0.3, num_points: 48,  visual_masking_type: \"borderless\", visual_masking_pos: \"middle\" },\r\n\r\n    { base_correlation: 0.6, num_points: 48,  visual_masking_type: \"borderless\", visual_masking_pos: \"middle\" },\r\n\r\n    { base_correlation: 0.9, num_points: 48,  visual_masking_type: \"borderless\", visual_masking_pos: \"middle\" },\r\n  ],\r\n\r\n  visual_masking_multi_size_half: [\r\n    { base_correlation: 0.3, num_points: 64,  visual_masking_type: \"borderless\", visual_masking_pos: \"middle\", visual_masking_ratio: 0.5 },\r\n\r\n    { base_correlation: 0.6, num_points: 64,  visual_masking_type: \"borderless\", visual_masking_pos: \"middle\", visual_masking_ratio: 0.5 },\r\n\r\n    { base_correlation: 0.9, num_points: 64,  visual_masking_type: \"borderless\", visual_masking_pos: \"middle\", visual_masking_ratio: 0.5 },\r\n  ],\r\n\r\n  visual_masking_multi_size_half_border: [\r\n    { base_correlation: 0.3, num_points: 64,  visual_masking_type: \"border\", visual_masking_pos: \"middle\", visual_masking_ratio: 0.5 },\r\n\r\n    { base_correlation: 0.6, num_points: 64,  visual_masking_type: \"border\", visual_masking_pos: \"middle\", visual_masking_ratio: 0.5 },\r\n\r\n    { base_correlation: 0.9, num_points: 64,  visual_masking_type: \"border\", visual_masking_pos: \"middle\", visual_masking_ratio: 0.5 },\r\n  ],\r\n\r\n  visual_masking_border: [\r\n    { base_correlation: 0.3, num_points: 48,  visual_masking_type: \"border\", visual_masking_pos: \"middle\" },\r\n\r\n    { base_correlation: 0.6, num_points: 48,  visual_masking_type: \"border\", visual_masking_pos: \"middle\" },\r\n\r\n    { base_correlation: 0.9, num_points: 48,  visual_masking_type: \"border\", visual_masking_pos: \"middle\" },\r\n  ],\r\n\r\n  visual_masking_sides: [\r\n    { base_correlation: 0.3, num_points: 48,  visual_masking_type: \"borderless\", visual_masking_pos: \"sides\" },\r\n\r\n    { base_correlation: 0.6, num_points: 48,  visual_masking_type: \"borderless\", visual_masking_pos: \"sides\" },\r\n\r\n    { base_correlation: 0.9, num_points: 48,  visual_masking_type: \"borderless\", visual_masking_pos: \"sides\" },\r\n  ],\r\n\r\n  visual_masking_sides_border: [\r\n    { base_correlation: 0.3, num_points: 48,  visual_masking_type: \"border\", visual_masking_pos: \"sides\" },\r\n\r\n    { base_correlation: 0.6, num_points: 48,  visual_masking_type: \"border\", visual_masking_pos: \"sides\" },\r\n\r\n    { base_correlation: 0.9, num_points: 48,  visual_masking_type: \"border\", visual_masking_pos: \"sides\" },\r\n  ],\r\n\r\n  visual_masking_sides_multi_size_half_border: [\r\n    { base_correlation: 0.3, num_points: 64,  visual_masking_type: \"border\", visual_masking_pos: \"sides\", visual_masking_ratio: 0.5 },\r\n\r\n    { base_correlation: 0.6, num_points: 64,  visual_masking_type: \"border\", visual_masking_pos: \"sides\", visual_masking_ratio: 0.5 },\r\n\r\n    { base_correlation: 0.9, num_points: 64,  visual_masking_type: \"border\", visual_masking_pos: \"sides\", visual_masking_ratio: 0.5 },\r\n  ],\r\n\r\n  visual_masking_sides_multi_size_half: [\r\n    { base_correlation: 0.3, num_points: 64,  visual_masking_type: \"borderless\", visual_masking_pos: \"sides\", visual_masking_ratio: 0.5 },\r\n\r\n    { base_correlation: 0.6, num_points: 64,  visual_masking_type: \"borderless\", visual_masking_pos: \"sides\", visual_masking_ratio: 0.5 },\r\n\r\n    { base_correlation: 0.9, num_points: 64,  visual_masking_type: \"borderless\", visual_masking_pos: \"sides\", visual_masking_ratio: 0.5 },\r\n  ],\r\n\r\n  visual_masking_fence: [\r\n    { base_correlation: 0.3, num_points: 48,  visual_masking_type: \"borderless\", visual_masking_pos: \"fence\" },\r\n\r\n    { base_correlation: 0.6, num_points: 48,  visual_masking_type: \"borderless\", visual_masking_pos: \"fence\" },\r\n\r\n    { base_correlation: 0.9, num_points: 48,  visual_masking_type: \"borderless\", visual_masking_pos: \"fence\" },\r\n  ],\r\n\r\n  visual_masking_fence_border: [\r\n    { base_correlation: 0.3, num_points: 48,  visual_masking_type: \"border\", visual_masking_pos: \"fence\" },\r\n\r\n    { base_correlation: 0.6, num_points: 48,  visual_masking_type: \"border\", visual_masking_pos: \"fence\" },\r\n\r\n    { base_correlation: 0.9, num_points: 48,  visual_masking_type: \"border\", visual_masking_pos: \"fence\" },\r\n  ],\r\n\r\n  visual_masking_fence_multi_size_half_border: [\r\n    { base_correlation: 0.3, num_points: 64,  visual_masking_type: \"border\", visual_masking_pos: \"fence\", visual_masking_ratio: 0.5 },\r\n\r\n    { base_correlation: 0.6, num_points: 64,  visual_masking_type: \"border\", visual_masking_pos: \"fence\", visual_masking_ratio: 0.5 },\r\n\r\n    { base_correlation: 0.9, num_points: 64,  visual_masking_type: \"border\", visual_masking_pos: \"fence\", visual_masking_ratio: 0.5 },\r\n  ],\r\n\r\n  visual_masking_fence_multi_size_half: [\r\n    { base_correlation: 0.3, num_points: 64,  visual_masking_type: \"borderless\", visual_masking_pos: \"fence\", visual_masking_ratio: 0.5 },\r\n\r\n    { base_correlation: 0.6, num_points: 64,  visual_masking_type: \"borderless\", visual_masking_pos: \"fence\", visual_masking_ratio: 0.5 },\r\n\r\n    { base_correlation: 0.9, num_points: 64,  visual_masking_type: \"borderless\", visual_masking_pos: \"fence\", visual_masking_ratio: 0.5 },\r\n  ],\r\n\r\n  distractor_rainbow:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'RED', point_size: 6},  block: 'RED' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'GREEN', point_size: 6},  block: 'GREEN' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'BLUE', point_size: 6}, block: 'BLUE' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'YELLOW', point_size: 6},  block: 'YELLOW' },\r\n\r\n    //{ dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'RED', point_size: 6}, block: 'RED' }, // there were two Red blocks in original data\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_size: 6, mix_type: \"attribute\", mix_data: {point_color: ['RED', 'GREEN', 'BLUE', 'YELLOW']}}, block: 'MIX' }\r\n  ],\r\n\r\ndistractor_square_red_hue:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#d83862', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#d83862' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#d54049', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#d54049' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#c05819', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#c05819' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#ae6500', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#ae6500' },\r\n\r\n    {  dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#WHITE' },\r\n\r\n  ],\r\n\r\ndistractor_square_red_lum:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#9e210f', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'lum', block: '#d83862' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#b63821', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'lum', block: '#d54049' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#e45f43', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'lum', block: '#c05819' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#fe7657', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#ae6500' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#WHITE' },\r\n\r\n  ],\r\n\r\ndistractor_square_red_chrom:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#aa6453', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'chro', block: '#aa6453' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#bc5942', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'chro', block: '#bc5942' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#dc391f', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'chro', block: '#dc391f' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#eb1607', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'chro', block: '#eb1607' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square'}, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'chro', block: '#WHITE' },\r\n\r\n  ],\r\n\r\ndistractor_square_yellow_hue:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#ffaf7d', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#ffaf7d' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#f4bc6a', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#f4bc6a' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#bfce6d', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#bfce6d' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#9fd57d', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#9fd57d' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#WHITE' },\r\n  ],\r\n\r\ndistractor_square_yellow_lum:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#b19e41', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#c6b254', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#f1da7a', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#fff08e', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n  ],\r\n\r\ndistractor_square_yellow_chrom:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#d1c6a3', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'chro', block: 'd1c6a3' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#d7c685', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'chro', block: 'd7c685' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#dec644', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'chro', block: 'dec644' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#dfc602', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'chro', block: 'd7c685' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square'}, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'chro', block: 'd7c685' },\r\n\r\n  ],\r\n\r\ndistractor_square_blue_hue:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#008897', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#0085ad', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#5575bc', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#816ab1', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n  ],\r\n\r\ndistractor_square_blue_lum:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#005a95', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#006ca9', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#006ca9', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#43a4e6', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n  ],\r\n\r\ndistractor_square_blue_chrom:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#6a7887', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#4d7ba1', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#0081d9', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#0085f7', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square'}, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n  ],\r\n\r\ndistractor_square_green_hue:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#6b7e21', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#4d8433', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#008a67', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#008a67', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n  ],\r\n\r\ndistractor_square_green_lum:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#006228', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#007438', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#399b5c', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#4eaf6e', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n  ],\r\n\r\ndistractor_square_green_chrom:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#5e7e66', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#468358', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#008d33', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#00920c', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square'}, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n  ],\r\n\r\ndistractor_blue_shades:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#004078', point_size: 6} , point_color: '#699938'},\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#2c6fad', point_size: 6} , point_color: '#699938'},\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#69a3e5', point_size: 6} , point_color: '#699938'},\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#a2d9ff', point_size: 6} , point_color: '#699938'},\r\n\r\n  ],\r\n\r\ndistractor_red_shades:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#9f2b2a', point_size: 6} , point_color: '#699938'},\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#bc4740', point_size: 6} , point_color: '#699938'},\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#db6158', point_size: 6} , point_color: '#699938'},\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#ff988a', point_size: 6} , point_color: '#699938'},\r\n  ],\r\n\r\ndistractor_yellow_shades:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#d3c86a', point_size: 6} , point_color: '#699938'},\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#9b9236', point_size: 6} , point_color: '#699938'},\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#80781b', point_size: 6} , point_color: '#699938'},\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#f0e484', point_size: 6} , point_color: '#699938'},\r\n  ],\r\n\r\ndistractor_control_shades:\r\n  [\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_size: 6} , point_color: '#699938'},\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_size: 6} , point_color: '#699938'},\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_size: 6} , point_color: '#699938'},\r\n\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_size: 6} , point_color: '#699938'},\r\n  ],\r\n\r\ndistractor_ratio_pilot:\r\n  [\r\n    // 1:1 ratio\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 75, point_color: '#dbc667'}, num_points: 75, point_color: '#007ebc', point_size: 4 },\r\n\r\n    // 1:5 ratio\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 150, point_color: '#dbc667'}, num_points: 30, point_color: '#007ebc', point_size: 4 },\r\n\r\n    // 5:1 ratio\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 30, point_color: '#dbc667'}, num_points: 150,  point_color: '#007ebc', point_size: 4 },\r\n\r\n    // 3:1 ratio\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 50, point_color: '#dbc667'}, num_points: 150,  point_color: '#007ebc', point_size: 4 },\r\n\r\n    // 1:3 ratio\r\n    { dist_attributes: {correlation: 0.3, error: 0.0001,num_points: 150, point_color: '#dbc667'}, num_points: 50,  point_color: '#007ebc', point_size: 4 },\r\n  ],\r\n\r\n  distractor_black_high_target:\r\n    [\r\n      { base_correlation: 0.5, dist_attributes: {dist_base: 0, dist_error: 0.0001, num_points: 0, point_color: 'WHITE'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.7, dist_attributes: {dist_base: 0, dist_error: 0.0001, num_points: 0, point_color: 'WHITE'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.9, dist_attributes: {dist_base: 0, dist_error: 0.0001, num_points: 0, point_color: 'WHITE'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.5, dist_attributes: {dist_base: 0.1, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.7, dist_attributes: {dist_base: 0.1, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.9, dist_attributes: {dist_base: 0.1, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.5, dist_attributes: {dist_base: 0.2, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.7, dist_attributes: {dist_base: 0.2, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.9, dist_attributes: {dist_base: 0.2, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.5, dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.7, dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.9, dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.5, dist_attributes: {dist_base: 0.4, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.7, dist_attributes: {dist_base: 0.4, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.9, dist_attributes: {dist_base: 0.4, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 }\r\n    ],\r\n\r\n  distractor_black_low_target:\r\n    [\r\n      { base_correlation: 0.1, dist_attributes: {dist_base: 0, dist_error: 0.0001, num_points: 0, point_color: 'WHITE'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.3, dist_attributes: {dist_base: 0, dist_error: 0.0001, num_points: 0, point_color: 'WHITE'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.5, dist_attributes: {dist_base: 0, dist_error: 0.0001, num_points: 0, point_color: 'WHITE'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.1, dist_attributes: {dist_base: 0.6, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.3, dist_attributes: {dist_base: 0.6, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.5, dist_attributes: {dist_base: 0.6, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.1, dist_attributes: {dist_base: 0.7, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.3, dist_attributes: {dist_base: 0.7, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.5, dist_attributes: {dist_base: 0.7, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.1, dist_attributes: {dist_base: 0.8, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.3, dist_attributes: {dist_base: 0.8, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.5, dist_attributes: {dist_base: 0.8, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.1, dist_attributes: {dist_base: 0.9, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.3, dist_attributes: {dist_base: 0.9, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 },\r\n\r\n      { base_correlation: 0.5, dist_attributes: {dist_base: 0.9, dist_error: 0.0001, num_points: 100, point_color: 'BLACK'}, point_color: 'BLACK', dist_point_size: 6 }\r\n    ],\r\n\r\n  devon_attribute_array_test:\r\n    [\r\n      { mix_type: \"attribute_array\", mix_data: [{ point_size: 9, point_color: 'RED' }, { point_size: 5, point_color: 'BLUE' }, { point_size: 7, point_color: \"YELLOW\" }] },\r\n\r\n      { mix_type: \"attribute_array\", mix_data: [{ point_size: 9, point_color: 'RED' }, { point_size: 5, point_color: 'BLUE' }, { point_size: 7, point_color: \"YELLOW\" }] },\r\n\r\n      { mix_type: \"attribute_array\", mix_data: [{ point_size: 9, point_color: 'RED' }, { point_size: 5, point_color: 'BLUE' }, { point_size: 7, point_color: \"YELLOW\" }] },\r\n\r\n      { mix_type: \"attribute_array\", mix_data: [{ point_size: 9, point_color: 'RED' }, { point_size: 5, point_color: 'BLUE' }, { point_size: 7, point_color: \"YELLOW\" }] },\r\n\r\n      { mix_type: \"attribute_array\", mix_data: [{ point_size: 9, point_color: 'RED' }, { point_size: 5, point_color: 'BLUE' }, { point_size: 7, point_color: \"YELLOW\" }] },\r\n\r\n    ],\r\n\r\n  distractor_array_devon_test:\r\n    [\r\n      {\r\n        // TARGET CORRELATION: 0.1, DISTRACTOR CORRELATION: 0.3, TARGET MEAN SIZE: 6, DISTRACTOR MEAN SIZE: 13, CUE: color, PROBE: target - color\r\n        distribution_type: \"gaussian\", base_correlation: 0.4, dist_base: 0.95, dist_error: 0.0001, num_points: 100, point_color: 'BLACK', axis_color: 'BLACK', feedback_background_color: 'WHITE', point_size: 6,\r\n        mix_by_target_array: [{ point_size: 2.053772973, point_color: 'BLUE' }, { point_size: 3.421114072, point_color: 'BLUE' }, { point_size: 7.861190731, point_color: 'BLUE' }, { point_size: 9.893156312, point_color: 'BLUE' }, { point_size: 3.585041759, point_color: 'BLUE' }, { point_size: 3.335761252, point_color: 'BLUE' }, { point_size: 2.880014644, point_color: 'BLUE' }, { point_size: 4.577566474, point_color: 'BLUE' }, { point_size: 10.18637813, point_color: 'BLUE' }, { point_size: 5.334771186, point_color: 'BLUE' }, { point_size: 9.270336586, point_color: 'BLUE' }, { point_size: 11.56160563, point_color: 'BLUE' }, { point_size: 3.430461747, point_color: 'BLUE' }, { point_size: 3.824469792, point_color: 'BLUE' }, { point_size: 1.564354613, point_color: 'BLUE' }, { point_size: 3.417827757, point_color: 'BLUE' }, { point_size: 6.745500644, point_color: 'BLUE' }, { point_size: 2.451859684, point_color: 'BLUE' }, { point_size: 6.892546258, point_color: 'BLUE' }, { point_size: 3.60083425, point_color: 'BLUE' }, { point_size: 6.033845866, point_color: 'BLUE' }, { point_size: 6.523961198, point_color: 'BLUE' }, { point_size: 7.80402273, point_color: 'BLUE' }, { point_size: 3.948736395, point_color: 'BLUE' }, { point_size: 1.234043284, point_color: 'BLUE' }, { point_size: 17.20935663, point_color: 'BLUE' }, { point_size: 2.081685208, point_color: 'BLUE' }, { point_size: 3.8618955, point_color: 'BLUE' }, { point_size: 4.629587094, point_color: 'BLUE' }, { point_size: 3.840658293, point_color: 'BLUE' }, { point_size: 6.535240975, point_color: 'BLUE' }, { point_size: 2.029575736, point_color: 'BLUE' }, { point_size: 2.656565568, point_color: 'BLUE' }, { point_size: 3.774488132, point_color: 'BLUE' }, { point_size: 4.952586906, point_color: 'BLUE' }, { point_size: 4.558317905, point_color: 'BLUE' }, { point_size: 14.16559231, point_color: 'BLUE' }, { point_size: 1.77392573, point_color: 'BLUE' }, { point_size: 15.48015925, point_color: 'BLUE' }, { point_size: 8.175623918, point_color: 'BLUE' }, { point_size: 10.10988668, point_color: 'BLUE' }, { point_size: 8.341480233, point_color: 'BLUE' }, { point_size: 9.980943976, point_color: 'BLUE' }, { point_size: 13.96323627, point_color: 'BLUE' }, { point_size: 0.812934712, point_color: 'BLUE' }, { point_size: 5.528621049, point_color: 'BLUE' }, { point_size: 1.760072093, point_color: 'BLUE' }, { point_size: 5.103195282, point_color: 'BLUE' }, { point_size: 3.975697912, point_color: 'BLUE' }, { point_size: 13.26549867, point_color: 'BLUE' }],\r\n        mix_by_distractor_array: [{ point_size: 3.917471736, point_color: 'ORANGE' }, { point_size: 11.10545762, point_color: 'ORANGE' }, { point_size: 16.83844198, point_color: 'ORANGE' }, { point_size: 11.83051231, point_color: 'ORANGE' }, { point_size: 20.52879959, point_color: 'ORANGE' }, { point_size: 11.67736852, point_color: 'ORANGE' }, { point_size: 11.27896325, point_color: 'ORANGE' }, { point_size: 16.07439418, point_color: 'ORANGE' }, { point_size: 14.22288807, point_color: 'ORANGE' }, { point_size: 16.29414516, point_color: 'ORANGE' }, { point_size: 15.83145066, point_color: 'ORANGE' }, { point_size: 11.26879575, point_color: 'ORANGE' }, { point_size: 14.73172047, point_color: 'ORANGE' }, { point_size: 24.3540536, point_color: 'ORANGE' }, { point_size: 14.56586823, point_color: 'ORANGE' }, { point_size: 15.77838224, point_color: 'ORANGE' }, { point_size: 11.21544198, point_color: 'ORANGE' }, { point_size: 10.04750919, point_color: 'ORANGE' }, { point_size: 12.09213714, point_color: 'ORANGE' }, { point_size: 16.13186259, point_color: 'ORANGE' }, { point_size: 17.64482009, point_color: 'ORANGE' }, { point_size: 20.11973222, point_color: 'ORANGE' }, { point_size: 12.46862065, point_color: 'ORANGE' }, { point_size: 8.773662149, point_color: 'ORANGE' }, { point_size: 10.10645803, point_color: 'ORANGE' }, { point_size: 13.64724832, point_color: 'ORANGE' }, { point_size: 13.48420708, point_color: 'ORANGE' }, { point_size: 10.58651221, point_color: 'ORANGE' }, { point_size: 12.18157651, point_color: 'ORANGE' }, { point_size: 8.468899343, point_color: 'ORANGE' }, { point_size: 12.98945071, point_color: 'ORANGE' }, { point_size: 10.08112956, point_color: 'ORANGE' }, { point_size: 15.55825003, point_color: 'ORANGE' }, { point_size: 13.48582199, point_color: 'ORANGE' }, { point_size: 10.87251639, point_color: 'ORANGE' }, { point_size: 11.61961167, point_color: 'ORANGE' }, { point_size: 15.89752811, point_color: 'ORANGE' }, { point_size: 15.19474873, point_color: 'ORANGE' }, { point_size: 10.74675586, point_color: 'ORANGE' }, { point_size: 12.76371249, point_color: 'ORANGE' }, { point_size: 8.488336441, point_color: 'ORANGE' }, { point_size: 16.2864987, point_color: 'ORANGE' }, { point_size: 18.63837664, point_color: 'ORANGE' }, { point_size: 9.280755553, point_color: 'ORANGE' }, { point_size: 9.89227944, point_color: 'ORANGE' }, { point_size: 18.37818925, point_color: 'ORANGE' }, { point_size: 5.356308326, point_color: 'ORANGE' }, { point_size: 11.65915114, point_color: 'ORANGE' }, { point_size: 4.152717877, point_color: 'ORANGE' }, { point_size: 11.39046022, point_color: 'ORANGE' }]\r\n      },\r\n      {\r\n        // TARGET CORRELATION: 0.1, DISTRACTOR CORRELATION: 0.3, TARGET MEAN SIZE: 6, DISTRACTOR MEAN SIZE: 13, CUE: color, PROBE: target - color\r\n        distribution_type: \"gaussian\", base_correlation: 0.4, dist_base: 0.95, dist_error: 0.0001, num_points: 100, point_color: 'BLACK', axis_color: 'BLACK', feedback_background_color: 'WHITE', point_size: 6,\r\n        mix_by_target_array: [{ point_size: 2.053772973, point_color: 'BLUE' }, { point_size: 3.421114072, point_color: 'BLUE' }, { point_size: 7.861190731, point_color: 'BLUE' }, { point_size: 9.893156312, point_color: 'BLUE' }, { point_size: 3.585041759, point_color: 'BLUE' }, { point_size: 3.335761252, point_color: 'BLUE' }, { point_size: 2.880014644, point_color: 'BLUE' }, { point_size: 4.577566474, point_color: 'BLUE' }, { point_size: 10.18637813, point_color: 'BLUE' }, { point_size: 5.334771186, point_color: 'BLUE' }, { point_size: 9.270336586, point_color: 'BLUE' }, { point_size: 11.56160563, point_color: 'BLUE' }, { point_size: 3.430461747, point_color: 'BLUE' }, { point_size: 3.824469792, point_color: 'BLUE' }, { point_size: 1.564354613, point_color: 'BLUE' }, { point_size: 3.417827757, point_color: 'BLUE' }, { point_size: 6.745500644, point_color: 'BLUE' }, { point_size: 2.451859684, point_color: 'BLUE' }, { point_size: 6.892546258, point_color: 'BLUE' }, { point_size: 3.60083425, point_color: 'BLUE' }, { point_size: 6.033845866, point_color: 'BLUE' }, { point_size: 6.523961198, point_color: 'BLUE' }, { point_size: 7.80402273, point_color: 'BLUE' }, { point_size: 3.948736395, point_color: 'BLUE' }, { point_size: 1.234043284, point_color: 'BLUE' }, { point_size: 17.20935663, point_color: 'BLUE' }, { point_size: 2.081685208, point_color: 'BLUE' }, { point_size: 3.8618955, point_color: 'BLUE' }, { point_size: 4.629587094, point_color: 'BLUE' }, { point_size: 3.840658293, point_color: 'BLUE' }, { point_size: 6.535240975, point_color: 'BLUE' }, { point_size: 2.029575736, point_color: 'BLUE' }, { point_size: 2.656565568, point_color: 'BLUE' }, { point_size: 3.774488132, point_color: 'BLUE' }, { point_size: 4.952586906, point_color: 'BLUE' }, { point_size: 4.558317905, point_color: 'BLUE' }, { point_size: 14.16559231, point_color: 'BLUE' }, { point_size: 1.77392573, point_color: 'BLUE' }, { point_size: 15.48015925, point_color: 'BLUE' }, { point_size: 8.175623918, point_color: 'BLUE' }, { point_size: 10.10988668, point_color: 'BLUE' }, { point_size: 8.341480233, point_color: 'BLUE' }, { point_size: 9.980943976, point_color: 'BLUE' }, { point_size: 13.96323627, point_color: 'BLUE' }, { point_size: 0.812934712, point_color: 'BLUE' }, { point_size: 5.528621049, point_color: 'BLUE' }, { point_size: 1.760072093, point_color: 'BLUE' }, { point_size: 5.103195282, point_color: 'BLUE' }, { point_size: 3.975697912, point_color: 'BLUE' }, { point_size: 13.26549867, point_color: 'BLUE' }],\r\n        mix_by_distractor_array: [{ point_size: 3.917471736, point_color: 'ORANGE' }, { point_size: 11.10545762, point_color: 'ORANGE' }, { point_size: 16.83844198, point_color: 'ORANGE' }, { point_size: 11.83051231, point_color: 'ORANGE' }, { point_size: 20.52879959, point_color: 'ORANGE' }, { point_size: 11.67736852, point_color: 'ORANGE' }, { point_size: 11.27896325, point_color: 'ORANGE' }, { point_size: 16.07439418, point_color: 'ORANGE' }, { point_size: 14.22288807, point_color: 'ORANGE' }, { point_size: 16.29414516, point_color: 'ORANGE' }, { point_size: 15.83145066, point_color: 'ORANGE' }, { point_size: 11.26879575, point_color: 'ORANGE' }, { point_size: 14.73172047, point_color: 'ORANGE' }, { point_size: 24.3540536, point_color: 'ORANGE' }, { point_size: 14.56586823, point_color: 'ORANGE' }, { point_size: 15.77838224, point_color: 'ORANGE' }, { point_size: 11.21544198, point_color: 'ORANGE' }, { point_size: 10.04750919, point_color: 'ORANGE' }, { point_size: 12.09213714, point_color: 'ORANGE' }, { point_size: 16.13186259, point_color: 'ORANGE' }, { point_size: 17.64482009, point_color: 'ORANGE' }, { point_size: 20.11973222, point_color: 'ORANGE' }, { point_size: 12.46862065, point_color: 'ORANGE' }, { point_size: 8.773662149, point_color: 'ORANGE' }, { point_size: 10.10645803, point_color: 'ORANGE' }, { point_size: 13.64724832, point_color: 'ORANGE' }, { point_size: 13.48420708, point_color: 'ORANGE' }, { point_size: 10.58651221, point_color: 'ORANGE' }, { point_size: 12.18157651, point_color: 'ORANGE' }, { point_size: 8.468899343, point_color: 'ORANGE' }, { point_size: 12.98945071, point_color: 'ORANGE' }, { point_size: 10.08112956, point_color: 'ORANGE' }, { point_size: 15.55825003, point_color: 'ORANGE' }, { point_size: 13.48582199, point_color: 'ORANGE' }, { point_size: 10.87251639, point_color: 'ORANGE' }, { point_size: 11.61961167, point_color: 'ORANGE' }, { point_size: 15.89752811, point_color: 'ORANGE' }, { point_size: 15.19474873, point_color: 'ORANGE' }, { point_size: 10.74675586, point_color: 'ORANGE' }, { point_size: 12.76371249, point_color: 'ORANGE' }, { point_size: 8.488336441, point_color: 'ORANGE' }, { point_size: 16.2864987, point_color: 'ORANGE' }, { point_size: 18.63837664, point_color: 'ORANGE' }, { point_size: 9.280755553, point_color: 'ORANGE' }, { point_size: 9.89227944, point_color: 'ORANGE' }, { point_size: 18.37818925, point_color: 'ORANGE' }, { point_size: 5.356308326, point_color: 'ORANGE' }, { point_size: 11.65915114, point_color: 'ORANGE' }, { point_size: 4.152717877, point_color: 'ORANGE' }, { point_size: 11.39046022, point_color: 'ORANGE' }]\r\n      },\r\n      {\r\n        // TARGET CORRELATION: 0.1, DISTRACTOR CORRELATION: 0.3, TARGET MEAN SIZE: 6, DISTRACTOR MEAN SIZE: 13, CUE: color, PROBE: target - color\r\n        distribution_type: \"gaussian\", base_correlation: 0.4, dist_base: 0.95, dist_error: 0.0001, num_points: 100, point_color: 'BLACK', axis_color: 'BLACK', feedback_background_color: 'WHITE', point_size: 6,\r\n        mix_by_target_array: [{ point_size: 2.053772973, point_color: 'BLUE' }, { point_size: 3.421114072, point_color: 'BLUE' }, { point_size: 7.861190731, point_color: 'BLUE' }, { point_size: 9.893156312, point_color: 'BLUE' }, { point_size: 3.585041759, point_color: 'BLUE' }, { point_size: 3.335761252, point_color: 'BLUE' }, { point_size: 2.880014644, point_color: 'BLUE' }, { point_size: 4.577566474, point_color: 'BLUE' }, { point_size: 10.18637813, point_color: 'BLUE' }, { point_size: 5.334771186, point_color: 'BLUE' }, { point_size: 9.270336586, point_color: 'BLUE' }, { point_size: 11.56160563, point_color: 'BLUE' }, { point_size: 3.430461747, point_color: 'BLUE' }, { point_size: 3.824469792, point_color: 'BLUE' }, { point_size: 1.564354613, point_color: 'BLUE' }, { point_size: 3.417827757, point_color: 'BLUE' }, { point_size: 6.745500644, point_color: 'BLUE' }, { point_size: 2.451859684, point_color: 'BLUE' }, { point_size: 6.892546258, point_color: 'BLUE' }, { point_size: 3.60083425, point_color: 'BLUE' }, { point_size: 6.033845866, point_color: 'BLUE' }, { point_size: 6.523961198, point_color: 'BLUE' }, { point_size: 7.80402273, point_color: 'BLUE' }, { point_size: 3.948736395, point_color: 'BLUE' }, { point_size: 1.234043284, point_color: 'BLUE' }, { point_size: 17.20935663, point_color: 'BLUE' }, { point_size: 2.081685208, point_color: 'BLUE' }, { point_size: 3.8618955, point_color: 'BLUE' }, { point_size: 4.629587094, point_color: 'BLUE' }, { point_size: 3.840658293, point_color: 'BLUE' }, { point_size: 6.535240975, point_color: 'BLUE' }, { point_size: 2.029575736, point_color: 'BLUE' }, { point_size: 2.656565568, point_color: 'BLUE' }, { point_size: 3.774488132, point_color: 'BLUE' }, { point_size: 4.952586906, point_color: 'BLUE' }, { point_size: 4.558317905, point_color: 'BLUE' }, { point_size: 14.16559231, point_color: 'BLUE' }, { point_size: 1.77392573, point_color: 'BLUE' }, { point_size: 15.48015925, point_color: 'BLUE' }, { point_size: 8.175623918, point_color: 'BLUE' }, { point_size: 10.10988668, point_color: 'BLUE' }, { point_size: 8.341480233, point_color: 'BLUE' }, { point_size: 9.980943976, point_color: 'BLUE' }, { point_size: 13.96323627, point_color: 'BLUE' }, { point_size: 0.812934712, point_color: 'BLUE' }, { point_size: 5.528621049, point_color: 'BLUE' }, { point_size: 1.760072093, point_color: 'BLUE' }, { point_size: 5.103195282, point_color: 'BLUE' }, { point_size: 3.975697912, point_color: 'BLUE' }, { point_size: 13.26549867, point_color: 'BLUE' }],\r\n        mix_by_distractor_array: [{ point_size: 3.917471736, point_color: 'ORANGE' }, { point_size: 11.10545762, point_color: 'ORANGE' }, { point_size: 16.83844198, point_color: 'ORANGE' }, { point_size: 11.83051231, point_color: 'ORANGE' }, { point_size: 20.52879959, point_color: 'ORANGE' }, { point_size: 11.67736852, point_color: 'ORANGE' }, { point_size: 11.27896325, point_color: 'ORANGE' }, { point_size: 16.07439418, point_color: 'ORANGE' }, { point_size: 14.22288807, point_color: 'ORANGE' }, { point_size: 16.29414516, point_color: 'ORANGE' }, { point_size: 15.83145066, point_color: 'ORANGE' }, { point_size: 11.26879575, point_color: 'ORANGE' }, { point_size: 14.73172047, point_color: 'ORANGE' }, { point_size: 24.3540536, point_color: 'ORANGE' }, { point_size: 14.56586823, point_color: 'ORANGE' }, { point_size: 15.77838224, point_color: 'ORANGE' }, { point_size: 11.21544198, point_color: 'ORANGE' }, { point_size: 10.04750919, point_color: 'ORANGE' }, { point_size: 12.09213714, point_color: 'ORANGE' }, { point_size: 16.13186259, point_color: 'ORANGE' }, { point_size: 17.64482009, point_color: 'ORANGE' }, { point_size: 20.11973222, point_color: 'ORANGE' }, { point_size: 12.46862065, point_color: 'ORANGE' }, { point_size: 8.773662149, point_color: 'ORANGE' }, { point_size: 10.10645803, point_color: 'ORANGE' }, { point_size: 13.64724832, point_color: 'ORANGE' }, { point_size: 13.48420708, point_color: 'ORANGE' }, { point_size: 10.58651221, point_color: 'ORANGE' }, { point_size: 12.18157651, point_color: 'ORANGE' }, { point_size: 8.468899343, point_color: 'ORANGE' }, { point_size: 12.98945071, point_color: 'ORANGE' }, { point_size: 10.08112956, point_color: 'ORANGE' }, { point_size: 15.55825003, point_color: 'ORANGE' }, { point_size: 13.48582199, point_color: 'ORANGE' }, { point_size: 10.87251639, point_color: 'ORANGE' }, { point_size: 11.61961167, point_color: 'ORANGE' }, { point_size: 15.89752811, point_color: 'ORANGE' }, { point_size: 15.19474873, point_color: 'ORANGE' }, { point_size: 10.74675586, point_color: 'ORANGE' }, { point_size: 12.76371249, point_color: 'ORANGE' }, { point_size: 8.488336441, point_color: 'ORANGE' }, { point_size: 16.2864987, point_color: 'ORANGE' }, { point_size: 18.63837664, point_color: 'ORANGE' }, { point_size: 9.280755553, point_color: 'ORANGE' }, { point_size: 9.89227944, point_color: 'ORANGE' }, { point_size: 18.37818925, point_color: 'ORANGE' }, { point_size: 5.356308326, point_color: 'ORANGE' }, { point_size: 11.65915114, point_color: 'ORANGE' }, { point_size: 4.152717877, point_color: 'ORANGE' }, { point_size: 11.39046022, point_color: 'ORANGE' }]\r\n      },\r\n      {\r\n        // TARGET CORRELATION: 0.1, DISTRACTOR CORRELATION: 0.3, TARGET MEAN SIZE: 6, DISTRACTOR MEAN SIZE: 13, CUE: color, PROBE: target - color\r\n        distribution_type: \"gaussian\", base_correlation: 0.4, dist_base: 0.95, dist_error: 0.0001, num_points: 100, point_color: 'BLACK', axis_color: 'BLACK', feedback_background_color: 'WHITE', point_size: 6,\r\n        mix_by_target_array: [{ point_size: 2.053772973, point_color: 'BLUE' }, { point_size: 3.421114072, point_color: 'BLUE' }, { point_size: 7.861190731, point_color: 'BLUE' }, { point_size: 9.893156312, point_color: 'BLUE' }, { point_size: 3.585041759, point_color: 'BLUE' }, { point_size: 3.335761252, point_color: 'BLUE' }, { point_size: 2.880014644, point_color: 'BLUE' }, { point_size: 4.577566474, point_color: 'BLUE' }, { point_size: 10.18637813, point_color: 'BLUE' }, { point_size: 5.334771186, point_color: 'BLUE' }, { point_size: 9.270336586, point_color: 'BLUE' }, { point_size: 11.56160563, point_color: 'BLUE' }, { point_size: 3.430461747, point_color: 'BLUE' }, { point_size: 3.824469792, point_color: 'BLUE' }, { point_size: 1.564354613, point_color: 'BLUE' }, { point_size: 3.417827757, point_color: 'BLUE' }, { point_size: 6.745500644, point_color: 'BLUE' }, { point_size: 2.451859684, point_color: 'BLUE' }, { point_size: 6.892546258, point_color: 'BLUE' }, { point_size: 3.60083425, point_color: 'BLUE' }, { point_size: 6.033845866, point_color: 'BLUE' }, { point_size: 6.523961198, point_color: 'BLUE' }, { point_size: 7.80402273, point_color: 'BLUE' }, { point_size: 3.948736395, point_color: 'BLUE' }, { point_size: 1.234043284, point_color: 'BLUE' }, { point_size: 17.20935663, point_color: 'BLUE' }, { point_size: 2.081685208, point_color: 'BLUE' }, { point_size: 3.8618955, point_color: 'BLUE' }, { point_size: 4.629587094, point_color: 'BLUE' }, { point_size: 3.840658293, point_color: 'BLUE' }, { point_size: 6.535240975, point_color: 'BLUE' }, { point_size: 2.029575736, point_color: 'BLUE' }, { point_size: 2.656565568, point_color: 'BLUE' }, { point_size: 3.774488132, point_color: 'BLUE' }, { point_size: 4.952586906, point_color: 'BLUE' }, { point_size: 4.558317905, point_color: 'BLUE' }, { point_size: 14.16559231, point_color: 'BLUE' }, { point_size: 1.77392573, point_color: 'BLUE' }, { point_size: 15.48015925, point_color: 'BLUE' }, { point_size: 8.175623918, point_color: 'BLUE' }, { point_size: 10.10988668, point_color: 'BLUE' }, { point_size: 8.341480233, point_color: 'BLUE' }, { point_size: 9.980943976, point_color: 'BLUE' }, { point_size: 13.96323627, point_color: 'BLUE' }, { point_size: 0.812934712, point_color: 'BLUE' }, { point_size: 5.528621049, point_color: 'BLUE' }, { point_size: 1.760072093, point_color: 'BLUE' }, { point_size: 5.103195282, point_color: 'BLUE' }, { point_size: 3.975697912, point_color: 'BLUE' }, { point_size: 13.26549867, point_color: 'BLUE' }],\r\n        mix_by_distractor_array: [{ point_size: 3.917471736, point_color: 'ORANGE' }, { point_size: 11.10545762, point_color: 'ORANGE' }, { point_size: 16.83844198, point_color: 'ORANGE' }, { point_size: 11.83051231, point_color: 'ORANGE' }, { point_size: 20.52879959, point_color: 'ORANGE' }, { point_size: 11.67736852, point_color: 'ORANGE' }, { point_size: 11.27896325, point_color: 'ORANGE' }, { point_size: 16.07439418, point_color: 'ORANGE' }, { point_size: 14.22288807, point_color: 'ORANGE' }, { point_size: 16.29414516, point_color: 'ORANGE' }, { point_size: 15.83145066, point_color: 'ORANGE' }, { point_size: 11.26879575, point_color: 'ORANGE' }, { point_size: 14.73172047, point_color: 'ORANGE' }, { point_size: 24.3540536, point_color: 'ORANGE' }, { point_size: 14.56586823, point_color: 'ORANGE' }, { point_size: 15.77838224, point_color: 'ORANGE' }, { point_size: 11.21544198, point_color: 'ORANGE' }, { point_size: 10.04750919, point_color: 'ORANGE' }, { point_size: 12.09213714, point_color: 'ORANGE' }, { point_size: 16.13186259, point_color: 'ORANGE' }, { point_size: 17.64482009, point_color: 'ORANGE' }, { point_size: 20.11973222, point_color: 'ORANGE' }, { point_size: 12.46862065, point_color: 'ORANGE' }, { point_size: 8.773662149, point_color: 'ORANGE' }, { point_size: 10.10645803, point_color: 'ORANGE' }, { point_size: 13.64724832, point_color: 'ORANGE' }, { point_size: 13.48420708, point_color: 'ORANGE' }, { point_size: 10.58651221, point_color: 'ORANGE' }, { point_size: 12.18157651, point_color: 'ORANGE' }, { point_size: 8.468899343, point_color: 'ORANGE' }, { point_size: 12.98945071, point_color: 'ORANGE' }, { point_size: 10.08112956, point_color: 'ORANGE' }, { point_size: 15.55825003, point_color: 'ORANGE' }, { point_size: 13.48582199, point_color: 'ORANGE' }, { point_size: 10.87251639, point_color: 'ORANGE' }, { point_size: 11.61961167, point_color: 'ORANGE' }, { point_size: 15.89752811, point_color: 'ORANGE' }, { point_size: 15.19474873, point_color: 'ORANGE' }, { point_size: 10.74675586, point_color: 'ORANGE' }, { point_size: 12.76371249, point_color: 'ORANGE' }, { point_size: 8.488336441, point_color: 'ORANGE' }, { point_size: 16.2864987, point_color: 'ORANGE' }, { point_size: 18.63837664, point_color: 'ORANGE' }, { point_size: 9.280755553, point_color: 'ORANGE' }, { point_size: 9.89227944, point_color: 'ORANGE' }, { point_size: 18.37818925, point_color: 'ORANGE' }, { point_size: 5.356308326, point_color: 'ORANGE' }, { point_size: 11.65915114, point_color: 'ORANGE' }, { point_size: 4.152717877, point_color: 'ORANGE' }, { point_size: 11.39046022, point_color: 'ORANGE' }]\r\n      },\r\n      {\r\n        // TARGET CORRELATION: 0.1, DISTRACTOR CORRELATION: 0.3, TARGET MEAN SIZE: 6, DISTRACTOR MEAN SIZE: 13, CUE: color, PROBE: target - color\r\n        distribution_type: \"gaussian\", base_correlation: 0.4, dist_base: 0.95, dist_error: 0.0001, num_points: 100, point_color: 'BLACK', axis_color: 'BLACK', feedback_background_color: 'WHITE', point_size: 6,\r\n        mix_by_target_array: [{ point_size: 2.053772973, point_color: 'BLUE' }, { point_size: 3.421114072, point_color: 'BLUE' }, { point_size: 7.861190731, point_color: 'BLUE' }, { point_size: 9.893156312, point_color: 'BLUE' }, { point_size: 3.585041759, point_color: 'BLUE' }, { point_size: 3.335761252, point_color: 'BLUE' }, { point_size: 2.880014644, point_color: 'BLUE' }, { point_size: 4.577566474, point_color: 'BLUE' }, { point_size: 10.18637813, point_color: 'BLUE' }, { point_size: 5.334771186, point_color: 'BLUE' }, { point_size: 9.270336586, point_color: 'BLUE' }, { point_size: 11.56160563, point_color: 'BLUE' }, { point_size: 3.430461747, point_color: 'BLUE' }, { point_size: 3.824469792, point_color: 'BLUE' }, { point_size: 1.564354613, point_color: 'BLUE' }, { point_size: 3.417827757, point_color: 'BLUE' }, { point_size: 6.745500644, point_color: 'BLUE' }, { point_size: 2.451859684, point_color: 'BLUE' }, { point_size: 6.892546258, point_color: 'BLUE' }, { point_size: 3.60083425, point_color: 'BLUE' }, { point_size: 6.033845866, point_color: 'BLUE' }, { point_size: 6.523961198, point_color: 'BLUE' }, { point_size: 7.80402273, point_color: 'BLUE' }, { point_size: 3.948736395, point_color: 'BLUE' }, { point_size: 1.234043284, point_color: 'BLUE' }, { point_size: 17.20935663, point_color: 'BLUE' }, { point_size: 2.081685208, point_color: 'BLUE' }, { point_size: 3.8618955, point_color: 'BLUE' }, { point_size: 4.629587094, point_color: 'BLUE' }, { point_size: 3.840658293, point_color: 'BLUE' }, { point_size: 6.535240975, point_color: 'BLUE' }, { point_size: 2.029575736, point_color: 'BLUE' }, { point_size: 2.656565568, point_color: 'BLUE' }, { point_size: 3.774488132, point_color: 'BLUE' }, { point_size: 4.952586906, point_color: 'BLUE' }, { point_size: 4.558317905, point_color: 'BLUE' }, { point_size: 14.16559231, point_color: 'BLUE' }, { point_size: 1.77392573, point_color: 'BLUE' }, { point_size: 15.48015925, point_color: 'BLUE' }, { point_size: 8.175623918, point_color: 'BLUE' }, { point_size: 10.10988668, point_color: 'BLUE' }, { point_size: 8.341480233, point_color: 'BLUE' }, { point_size: 9.980943976, point_color: 'BLUE' }, { point_size: 13.96323627, point_color: 'BLUE' }, { point_size: 0.812934712, point_color: 'BLUE' }, { point_size: 5.528621049, point_color: 'BLUE' }, { point_size: 1.760072093, point_color: 'BLUE' }, { point_size: 5.103195282, point_color: 'BLUE' }, { point_size: 3.975697912, point_color: 'BLUE' }, { point_size: 13.26549867, point_color: 'BLUE' }],\r\n        mix_by_distractor_array: [{ point_size: 3.917471736, point_color: 'ORANGE' }, { point_size: 11.10545762, point_color: 'ORANGE' }, { point_size: 16.83844198, point_color: 'ORANGE' }, { point_size: 11.83051231, point_color: 'ORANGE' }, { point_size: 20.52879959, point_color: 'ORANGE' }, { point_size: 11.67736852, point_color: 'ORANGE' }, { point_size: 11.27896325, point_color: 'ORANGE' }, { point_size: 16.07439418, point_color: 'ORANGE' }, { point_size: 14.22288807, point_color: 'ORANGE' }, { point_size: 16.29414516, point_color: 'ORANGE' }, { point_size: 15.83145066, point_color: 'ORANGE' }, { point_size: 11.26879575, point_color: 'ORANGE' }, { point_size: 14.73172047, point_color: 'ORANGE' }, { point_size: 24.3540536, point_color: 'ORANGE' }, { point_size: 14.56586823, point_color: 'ORANGE' }, { point_size: 15.77838224, point_color: 'ORANGE' }, { point_size: 11.21544198, point_color: 'ORANGE' }, { point_size: 10.04750919, point_color: 'ORANGE' }, { point_size: 12.09213714, point_color: 'ORANGE' }, { point_size: 16.13186259, point_color: 'ORANGE' }, { point_size: 17.64482009, point_color: 'ORANGE' }, { point_size: 20.11973222, point_color: 'ORANGE' }, { point_size: 12.46862065, point_color: 'ORANGE' }, { point_size: 8.773662149, point_color: 'ORANGE' }, { point_size: 10.10645803, point_color: 'ORANGE' }, { point_size: 13.64724832, point_color: 'ORANGE' }, { point_size: 13.48420708, point_color: 'ORANGE' }, { point_size: 10.58651221, point_color: 'ORANGE' }, { point_size: 12.18157651, point_color: 'ORANGE' }, { point_size: 8.468899343, point_color: 'ORANGE' }, { point_size: 12.98945071, point_color: 'ORANGE' }, { point_size: 10.08112956, point_color: 'ORANGE' }, { point_size: 15.55825003, point_color: 'ORANGE' }, { point_size: 13.48582199, point_color: 'ORANGE' }, { point_size: 10.87251639, point_color: 'ORANGE' }, { point_size: 11.61961167, point_color: 'ORANGE' }, { point_size: 15.89752811, point_color: 'ORANGE' }, { point_size: 15.19474873, point_color: 'ORANGE' }, { point_size: 10.74675586, point_color: 'ORANGE' }, { point_size: 12.76371249, point_color: 'ORANGE' }, { point_size: 8.488336441, point_color: 'ORANGE' }, { point_size: 16.2864987, point_color: 'ORANGE' }, { point_size: 18.63837664, point_color: 'ORANGE' }, { point_size: 9.280755553, point_color: 'ORANGE' }, { point_size: 9.89227944, point_color: 'ORANGE' }, { point_size: 18.37818925, point_color: 'ORANGE' }, { point_size: 5.356308326, point_color: 'ORANGE' }, { point_size: 11.65915114, point_color: 'ORANGE' }, { point_size: 4.152717877, point_color: 'ORANGE' }, { point_size: 11.39046022, point_color: 'ORANGE' }]\r\n      },\r\n    ],\r\n\r\n  test_hybrid_scatter:\r\n    [\r\n      { distribution_type: \"gaussian\", base_correlation: 0.1, num_points: 48, point_size: 12.5, point_color: 'GREY', SD: 0.2 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.2, num_points: 48, point_size: 12.5, point_color: 'GREY', SD: 0.2 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.3, num_points: 48, point_size: 12.5, point_color: 'GREY', SD: 0.2 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.4, num_points: 48, point_size: 12.5, point_color: 'GREY', SD: 0.2 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.5, num_points: 48, point_size: 12.5, point_color: 'GREY', SD: 0.2 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.6, num_points: 48, point_size: 12.5, point_color: 'GREY', SD: 0.2 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.6, num_points: 48, point_size: 12.5, point_color: 'GREY', SD: 0.2 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.7, num_points: 48, point_size: 12.5, point_color: 'GREY', SD: 0.2 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.8, num_points: 48, point_size: 12.5, point_color: 'GREY', SD: 0.2 },\r\n\r\n      { distribution_type: \"gaussian\", base_correlation: 0.9, num_points: 48, point_size: 12.5, point_color: 'GREY', SD: 0.2 },\r\n\r\n    ],\r\n\r\n    hybrid_multi_luminance_scatter:\r\n    [\r\n      { num_points: 48, point_size: 20, point_color: \"#000000\", block: \"#000000\" },\r\n    \r\n      { num_points: 48, point_size: 20, point_color: \"#747474\", block: \"#747474\" },\r\n    \r\n      { num_points: 48, point_size: 20, point_color: \"#a3a3a3\", block: \"#a3a3a3\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#d7d7d7\", block: \"#d7d7d7\" },\r\n    \r\n      { num_points: 48, point_size: 20, mix_type: \"attribute\", mix_data: { point_color: [\"#000000\", \"#747474\", \"#a3a3a3\", \"#d7d7d7\"] }, block: \"mix_by_attribute\" },\r\n    ],\r\n\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/constants/jnd_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "JND_BASE",
    "memberof": "scripts/experiment-properties/data/constants/jnd_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/jnd_data.js~JND_BASE",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/jnd_data.js",
    "importStyle": "{JND_BASE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *, \"design\": *, \"custom\": *}"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "JND_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/jnd_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/jnd_data.js~JND_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/jnd_data.js",
    "importStyle": "{JND_CONDITIONS}",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "{\"symmetric_jnd\": *, \"strip_ring_size\": *, \"line_length_strip\": *, \"stable_line_length_strip\": *, \"multi_size_scatter\": *, \"distractor_multi\": *, \"hollow_scatter\": *, \"thin_hollow_scatter\": *, \"bullseye_scatter\": *, \"large_dot_sizes\": *, \"multi_color_scatter_combined\": *, \"multi_shape_scatter_combined\": *, \"multi_border_combined\": *, \"multi_luminance_scatter_combined\": *, \"multi_opacity_scatter_combined\": *, \"multi_size_scatter_combined\": *, \"mix_point_styles\": *, \"point_styles_combined\": *, \"decreasing_number_of_dots\": *, \"increasing_number_of_dots\": *, \"multi_size_scatter_alternate\": *, \"visual_masking\": *, \"visual_masking_multi_size_half\": *, \"visual_masking_multi_size_half_border\": *, \"visual_masking_border\": *, \"visual_masking_sides\": *, \"visual_masking_sides_border\": *, \"visual_masking_sides_multi_size_half_border\": *, \"visual_masking_sides_multi_size_half\": *, \"visual_masking_fence\": *, \"visual_masking_fence_border\": *, \"visual_masking_fence_multi_size_half_border\": *, \"visual_masking_fence_multi_size_half\": *, \"distractor_rainbow\": *, \"distractor_square_red_hue\": *, \"distractor_square_red_lum\": *, \"distractor_square_red_chrom\": *, \"distractor_square_yellow_hue\": *, \"distractor_square_yellow_lum\": *, \"distractor_square_yellow_chrom\": *, \"distractor_square_blue_hue\": *, \"distractor_square_blue_lum\": *, \"distractor_square_blue_chrom\": *, \"distractor_square_green_hue\": *, \"distractor_square_green_lum\": *, \"distractor_square_green_chrom\": *, \"distractor_blue_shades\": *, \"distractor_red_shades\": *, \"distractor_yellow_shades\": *, \"distractor_control_shades\": *, \"distractor_ratio_pilot\": *, \"distractor_black_high_target\": *, \"distractor_black_low_target\": *, \"devon_attribute_array_test\": *, \"distractor_array_devon_test\": *, \"test_hybrid_scatter\": *, \"hybrid_multi_luminance_scatter\": *}"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/jnd_radius_data.js",
    "content": "export {JND_RADIUS_BASE, JND_RADIUS_CONDITIONS};\r\n\r\nconst JND_RADIUS_BASE = {\r\n\r\n  foundational:\r\n    [\r\n    {base_radius: 2, initial_difference: 0.586, converge_from_above: true, text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', stroke_color: 'none', fill_color: 'BLUE'},\r\n\r\n    {base_radius: 3, initial_difference: 0.879, converge_from_above: true, text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', stroke_color: 'none', fill_color: 'BLUE'},\r\n\r\n    {base_radius: 4, initial_difference: 1.172, converge_from_above: true, text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', stroke_color: 'none', fill_color: 'BLUE'},\r\n\r\n    {base_radius: 5, initial_difference: 1.464, converge_from_above: true, text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', stroke_color: 'none', fill_color: 'BLUE'},\r\n\r\n    {base_radius: 6, initial_difference: 1.757, converge_from_above: true, text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', stroke_color: 'none', fill_color: 'BLUE'}\r\n    ] \r\n}\r\n\r\nconst JND_RADIUS_CONDITIONS = {\r\n\r\n  circle_square:\r\n  \t[\r\n    {shapes: [\"circle\", \"square\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"circle\", \"square\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"circle\", \"square\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"circle\", \"square\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"circle\", \"square\"], stroke_color: \"BLUE\"}\r\n  \t],\r\n\r\n  circle_triangle:\r\n  \t[\r\n  \t{shapes: [\"circle\", \"triangle\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"circle\", \"triangle\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"circle\", \"triangle\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"circle\", \"triangle\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"circle\", \"triangle\"], stroke_color: \"BLUE\"}\r\n  \t],\r\n\r\n  square_triangle:\r\n    [\r\n    {shapes: [\"square\", \"triangle\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"square\", \"triangle\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"square\", \"triangle\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"square\", \"triangle\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"square\", \"triangle\"], stroke_color: \"BLUE\"}\r\n    ], \r\n\r\n  rotSquare_rotTriangle:\r\n    [\r\n    {shapes: [\"rotSquare\", \"rotTriangle\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"rotSquare\", \"rotTriangle\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"rotSquare\", \"rotTriangle\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"rotSquare\", \"rotTriangle\"], stroke_color: \"BLUE\"},\r\n\r\n    {shapes: [\"rotSquare\", \"rotTriangle\"], stroke_color: \"BLUE\"}\r\n    ],\r\n\r\n  slice0_triangle:\r\n    [\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 0},\r\n\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 0},\r\n\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 0},\r\n\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 0},\r\n\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 0}\r\n    ],\r\n\r\n  slice45_triangle:\r\n    [\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 45},\r\n\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 45},\r\n\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 45},\r\n\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 45},\r\n\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 45}\r\n    ],\r\n\r\n  slice90_triangle:\r\n    [\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 90},\r\n\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 90},\r\n\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 90},\r\n\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 90},\r\n\r\n    {shapes: [\"slice\", \"triangle\"], slice_rotation: 90}\r\n    ]\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/constants/jnd_radius_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "JND_RADIUS_BASE",
    "memberof": "scripts/experiment-properties/data/constants/jnd_radius_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/jnd_radius_data.js~JND_RADIUS_BASE",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/jnd_radius_data.js",
    "importStyle": "{JND_RADIUS_BASE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *}"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "JND_RADIUS_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/jnd_radius_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/jnd_radius_data.js~JND_RADIUS_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/jnd_radius_data.js",
    "importStyle": "{JND_RADIUS_CONDITIONS}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"circle_square\": *, \"circle_triangle\": *, \"square_triangle\": *, \"rotSquare_rotTriangle\": *, \"slice0_triangle\": *, \"slice45_triangle\": *, \"slice90_triangle\": *}"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/numerosity_data.js",
    "content": "export {NUMEROSITY_BASE, NUMEROSITY_CONDITIONS};\r\n\r\nconst NUMEROSITY_BASE = {\r\n\r\n  foundational:\r\n    [\r\n        {distribution_type: \"random\", row: 36, col: 36, target_num_points: 100, dist_num_points: 0, alternate_scaling: true, point_color: 'BLACK', axis_color: 'WHITE', text_color: 'BLACK', background_color: 'WHITE', point_size: 12, text_color: 'BLACK'},\r\n\r\n        {distribution_type: \"random\", row: 36, col: 36, target_num_points: 100, dist_num_points: 0, alternate_scaling: true, point_color: 'BLACK', axis_color: 'WHITE', text_color: 'BLACK', background_color: 'WHITE', point_size: 12, text_color: 'BLACK'},\r\n\r\n        {distribution_type: \"random\", row: 36, col: 36, target_num_points: 100, dist_num_points: 0, alternate_scaling: true, point_color: 'BLACK', axis_color: 'WHITE', text_color: 'BLACK', background_color: 'WHITE', point_size: 12, text_color: 'BLACK'},\r\n\r\n        {distribution_type: \"random\", row: 36, col: 36, target_num_points: 100, dist_num_points: 0, alternate_scaling: true, point_color: 'BLACK', axis_color: 'WHITE', text_color: 'BLACK', background_color: 'WHITE', point_size: 12, text_color: 'BLACK'},\r\n\r\n        {distribution_type: \"random\", row: 36, col: 36, target_num_points: 100, dist_num_points: 0, alternate_scaling: true, point_color: 'BLACK', axis_color: 'WHITE', text_color: 'BLACK', background_color: 'WHITE', point_size: 12, text_color: 'BLACK'},\r\n\r\n        {distribution_type: \"random\", row: 36, col: 36, target_num_points: 100, dist_num_points: 0, alternate_scaling: true, point_color: 'BLACK', axis_color: 'WHITE', text_color: 'BLACK', background_color: 'WHITE', point_size: 12, text_color: 'BLACK'},\r\n\r\n        {distribution_type: \"random\", row: 36, col: 36, target_num_points: 100, dist_num_points: 0, alternate_scaling: true, point_color: 'BLACK', axis_color: 'WHITE', text_color: 'BLACK', background_color: 'WHITE', point_size: 12, text_color: 'BLACK'},\r\n\r\n        {distribution_type: \"random\", row: 36, col: 36, target_num_points: 100, dist_num_points: 0, alternate_scaling: true, point_color: 'BLACK', axis_color: 'WHITE', text_color: 'BLACK', background_color: 'WHITE', point_size: 12, text_color: 'BLACK'}  \r\n    ] \r\n}\r\n\r\nconst NUMEROSITY_CONDITIONS = {\r\n\r\n    numerosity_blue_squares:\r\n    [\r\n        {point_shape: \"square\", point_color: \"#007ebc\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#007ebc\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#007ebc\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#007ebc\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#007ebc\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#007ebc\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#007ebc\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#007ebc\"}\r\n    ],\r\n\r\n    numerosity_red_squares:\r\n    [\r\n        {point_shape: \"square\", point_color: \"#cd4c32\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#cd4c32\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#cd4c32\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#cd4c32\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#cd4c32\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#cd4c32\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#cd4c32\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#cd4c32\"}\r\n    ],\r\n\r\n    numerosity_green_squares:\r\n    [\r\n        {point_shape: \"square\", point_color: \"#20874a\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#20874a\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#20874a\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#20874a\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#20874a\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#20874a\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#20874a\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#20874a\"}\r\n    ],\r\n\r\n    numerosity_yellow_squares:\r\n    [\r\n        {point_shape: \"square\", point_color: \"#dbc667\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#dbc667\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#dbc667\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#dbc667\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#dbc667\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#dbc667\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#dbc667\"},\r\n\r\n        {point_shape: \"square\", point_color: \"#dbc667\"}\r\n    ],\r\n\r\n    distractor_numerosity_red_lum_1: \r\n    [\r\n        {target_num_points: 1, target_shape: \"square\", target_color: \"#cd4c32\", dist_num_points: 2, dist_shape: \"circle\", dist_color: \"#c05819\"},\r\n\r\n        {target_num_points: 1, target_shape: \"square\", target_color: \"#cd4c32\", dist_num_points: 2, dist_shape: \"circle\", dist_color: \"#c05819\"},\r\n\r\n        {target_num_points: 1, target_shape: \"square\", target_color: \"#cd4c32\", dist_num_points: 2, dist_shape: \"circle\", dist_color: \"#c05819\"},\r\n\r\n        {target_num_points: 1, target_shape: \"square\", target_color: \"#cd4c32\", dist_num_points: 2, dist_shape: \"circle\", dist_color: \"#c05819\"},\r\n        \r\n        {target_num_points: 1, target_shape: \"square\", target_color: \"#cd4c32\", dist_num_points: 2, dist_shape: \"circle\", dist_color: \"#c05819\"},\r\n        \r\n        {target_num_points: 1, target_shape: \"square\", target_color: \"#cd4c32\", dist_num_points: 2, dist_shape: \"circle\", dist_color: \"#c05819\"},\r\n\r\n        {target_num_points: 1, target_shape: \"square\", target_color: \"#cd4c32\", dist_num_points: 2, dist_shape: \"circle\", dist_color: \"#c05819\"},\r\n\r\n        {target_num_points: 1, target_shape: \"square\", target_color: \"#cd4c32\", dist_num_points: 2, dist_shape: \"circle\", dist_color: \"#c05819\"}\r\n    ]\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/constants/numerosity_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "NUMEROSITY_BASE",
    "memberof": "scripts/experiment-properties/data/constants/numerosity_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/numerosity_data.js~NUMEROSITY_BASE",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/numerosity_data.js",
    "importStyle": "{NUMEROSITY_BASE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *}"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "NUMEROSITY_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/numerosity_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/numerosity_data.js~NUMEROSITY_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/numerosity_data.js",
    "importStyle": "{NUMEROSITY_CONDITIONS}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{\"numerosity_blue_squares\": *, \"numerosity_red_squares\": *, \"numerosity_green_squares\": *, \"numerosity_yellow_squares\": *, \"distractor_numerosity_red_lum_1\": *}"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/sequencing_data.js",
    "content": "export {SEQUENCING_BASE, SEQUENCING_CONDITIONS};\r\n\r\nconst SEQUENCING_BASE = {\r\n  foundational :\r\n    [\r\n    {distribution_type: \"gaussian\", base_correlation: 0.4, stimulus_duration:1600, distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.4, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.4, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.65, stimulus_duration:1600 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.65, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.65, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.9, stimulus_duration:1600 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.9, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.9, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n    ],\r\n}\r\n\r\nconst SEQUENCING_CONDITIONS = {\r\n  sequencing_timing_condition:\r\n  [\r\n    {distribution_type: \"gaussian\", base_correlation: 0.4, stimulus_duration:1600, distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.4, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.4, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.65, stimulus_duration:1600 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.65, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.65, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.9, stimulus_duration:1600 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.9, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.9, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n  ],\r\n\r\n  timing_condition_uniform_distribution:\r\n  [\r\n    {distribution_type: \"uniform\", base_correlation: 0.4, stimulus_duration:1600, distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.4, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.4, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.65, stimulus_duration:1600 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.65, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.65, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.9, stimulus_duration:1600 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.9, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.9, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n  ],\r\n\r\n  strip_ring_size:\r\n    [\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    ],\r\n\r\n  line_length_strip:\r\n  [\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n  ],\r\n\r\n  stable_line_length_strip:\r\n    [\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n   ],\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/constants/sequencing_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "SEQUENCING_BASE",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_data.js~SEQUENCING_BASE",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_data.js",
    "importStyle": "{SEQUENCING_BASE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *}"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "SEQUENCING_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_data.js~SEQUENCING_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_data.js",
    "importStyle": "{SEQUENCING_CONDITIONS}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"sequencing_timing_condition\": *, \"timing_condition_uniform_distribution\": *, \"strip_ring_size\": *, \"line_length_strip\": *, \"stable_line_length_strip\": *}"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/sequencing_side_by_side_data.js",
    "content": "export {SEQUENCING_SIDE_BY_SIDE_BASE, SEQUENCING_SIDE_BY_SIDE_CONDITIONS};\r\n\r\nconst SEQUENCING_SIDE_BY_SIDE_BASE = {\r\n  foundational :\r\n    [\r\n    {distribution_type: \"gaussian\", base_correlation: 0.3, stimulus_duration:1600, distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.3, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.3, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.6, stimulus_duration:1600 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.6, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.6, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.9, stimulus_duration:1600 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.9, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.9, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n    ],\r\n}\r\n\r\nconst SEQUENCING_SIDE_BY_SIDE_CONDITIONS = {\r\n  sequencing_side_by_side_condition:\r\n  [\r\n    {distribution_type: \"gaussian\", base_correlation: 0.3, stimulus_duration:1600, distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.3, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.3, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.6, stimulus_duration:1600 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.6, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.6, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.9, stimulus_duration:1600 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.9, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.9, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n  ],\r\n\r\n  sequencing_side_by_side_condition_uniform_distribution:\r\n  [\r\n    {distribution_type: \"uniform\", base_correlation: 0.3, stimulus_duration:1600, distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.3, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.3, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.6, stimulus_duration:1600 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.6, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.6, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.9, stimulus_duration:1600 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.9, stimulus_duration:400 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n\r\n    {distribution_type: \"uniform\", base_correlation: 0.9, stimulus_duration:100 , distractor_duration:200, error: 0.0001, max_step_size: 0.01, converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 6},\r\n  ],\r\n\r\n  strip_ring_size:\r\n    [\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    {ring_thickness: 1},\r\n\r\n    ],\r\n\r\n  line_length_strip:\r\n  [\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n    {strip_width: 1, fixed_strip_height: false},\r\n\r\n  ],\r\n\r\n  stable_line_length_strip:\r\n    [\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n    {fixed_strip_height: true},\r\n\r\n   ],\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/constants/sequencing_side_by_side_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "SEQUENCING_SIDE_BY_SIDE_BASE",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_side_by_side_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_side_by_side_data.js~SEQUENCING_SIDE_BY_SIDE_BASE",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_side_by_side_data.js",
    "importStyle": "{SEQUENCING_SIDE_BY_SIDE_BASE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *}"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "SEQUENCING_SIDE_BY_SIDE_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_side_by_side_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_side_by_side_data.js~SEQUENCING_SIDE_BY_SIDE_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_side_by_side_data.js",
    "importStyle": "{SEQUENCING_SIDE_BY_SIDE_CONDITIONS}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"sequencing_side_by_side_condition\": *, \"sequencing_side_by_side_condition_uniform_distribution\": *, \"strip_ring_size\": *, \"line_length_strip\": *, \"stable_line_length_strip\": *}"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "content": "export {SEQUENCING_SYMBOLS_BASE, SEQUENCING_SYMBOLS_CONDITIONS};\r\nconst address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\n// Graph Attribute definitions\r\nconst BASE_SCATTER_PLOT = {graph_type: \"scatter\", point_shape: \"circle\", point_color: 'BLACK', axis_color: 'BLACK' , axis_length: 200, buffer: 25,  text_color: 'BLACK', point_size: 5, line_length: 25}\r\nconst LINE_SCATTER_PLOT = {graph_type: \"scatter\", point_shape: \"line\", point_color: 'BLACK', axis_color: 'BLACK' , axis_length: 200, buffer: 25,  text_color: 'BLACK', point_size: 3, line_length: 25}\r\nconst BASE_STRIP_PLOT =   {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 250 , line_height: 150, buffer: 25,  fill_color: \"BLACK\", y_value_representation:\"orientation\", fixed_strip_height: true, strip_width: 1 }\r\nconst LUMINANCE_STRIP_PLOT =  {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 250 , line_height: 150, buffer: 25,  fill_color: \"BLACK\", y_value_representation:\"luminance\", fixed_strip_height: true, strip_width: 5 }\r\nconst BASE_PARALLEL_PLOT =  {graph_type: \"parallel\", axis_color: \"BLACK\", fill_color: \"BLACK\", line_width: 1, axis_height: 200, axis_separation: 200, axis_width: 1, axis_buffer: 25, inverted: true}\r\nconst LOW_DENSITY_SCATTER_PLOT =  {graph_type: \"scatter\", num_points: 48, point_shape: \"circle\", point_color: 'BLACK', axis_color: 'BLACK' , axis_length: 200, buffer: 25,  text_color: 'BLACK', point_size: 5, line_length: 25}\r\nconst HIGH_DENSITY_SCATTER_PLOT = {graph_type: \"scatter\", num_points: 100, point_shape: \"circle\", point_color: 'BLACK', axis_color: 'BLACK' , axis_length: 200, buffer: 25,  text_color: 'BLACK', point_size: 5, line_length: 25}\r\n\r\nconst LUMINANCE_STRIP_PLOT_06mm =  {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 250 , line_height: 150, buffer: 25,  fill_color: \"BLACK\", y_value_representation:\"luminance\", fixed_strip_height: true, strip_width: 3 }\r\nconst LUMINANCE_STRIP_PLOT_08mm =  {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 250 , line_height: 150, buffer: 25,  fill_color: \"BLACK\", y_value_representation:\"luminance\", fixed_strip_height: true, strip_width: 4 }\r\nconst LUMINANCE_STRIP_PLOT_1mm =   {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 250 , line_height: 150, buffer: 25,  fill_color: \"BLACK\", y_value_representation:\"luminance\", fixed_strip_height: true, strip_width: 5 }\r\n\r\nconst LUMINANCE_STRIP_PLOT_YELLOW_TO_LIGHT_BLUE = {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 250 , line_height: 150, buffer: 25,  fill_color: \"BLACK\", y_value_representation:\"cielab\", y_value_range:{min:{l:84.1, a:-16.1, b:108.2}, max:{l:65.5, a:-16.2, b:-57.8}}, strip_width: 4 }\r\n\r\nconst LUMINANCE_STRIP_PLOT_YB_WHITE_BG_7cm =          {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 350 , line_height: 150, buffer: 25,  fill_color: \"BLACK\", y_value_representation:\"cielab\", y_value_range:{min:{l:84.1, a:-16.1, b:108.2}, max:{l:65.5, a:-16.2, b:-57.8}}, strip_width: 4 }\r\nconst LUMINANCE_STRIP_PLOT_YB_BLACK_BG_7cm =          {graph_type: \"strip\", axis_color: 'WHITE' , text_color: 'WHITE',  axis_length: 350 , line_height: 150, buffer: 25,  fill_color: \"WHITE\", y_value_representation:\"cielab\", y_value_range:{min:{l:84.1, a:-16.1, b:108.2}, max:{l:65.5, a:-16.2, b:-57.8}}, strip_width: 4 }\r\nconst LUMINANCE_STRIP_PLOT_WHITE_BG_08mm_7cm =        {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 350 , line_height: 150, buffer: 25,  fill_color: \"BLACK\", y_value_representation:\"cielab\", y_value_range:{min:{l:90, a:0, b:0}, max:{l:0, a:0, b:0}}, strip_width: 4 }\r\nconst LUMINANCE_STRIP_PLOT_BLACK_BG_08mm_7cm =        {graph_type: \"strip\", axis_color: 'WHITE' , text_color: 'WHITE',  axis_length: 350 , line_height: 150, buffer: 25,  fill_color: \"WHITE\", y_value_representation:\"cielab\", y_value_range:{min:{l:0, a:0, b:0}, max:{l:90, a:0, b:0}}, strip_width: 4 }\r\n\r\nconst LUMINANCE_ORIENTATION_STRIP_PLOT_6 = {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 300 , line_height: 150, buffer: 25,  fill_color: \"BLACK\", y_value_representation:\"luminance\",  distractor_value_feature:\"orientation\", fixed_strip_height: true, strip_width: 10 }\r\nconst ORIENTATION_LUMINANCE_STRIP_PLOT_6 = {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 300 , line_height: 150, buffer: 25,  fill_color: \"BLACK\", y_value_representation:\"orientation\", distractor_value_feature:\"luminance\", fixed_strip_height: true, strip_width: 10 }\r\n\r\nconst ORIENTATION_STRIP_PLOT_10 =            {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 500 , line_height: 150, buffer: 50,  fill_color: \"BLACK\", y_value_representation:\"orientation\", fixed_strip_height: true, strip_width: 5 }\r\nconst LUMINANCE_STRIP_PLOT_10 =              {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 500 , line_height: 150, buffer: 50,  fill_color: \"BLACK\", y_value_representation:\"luminance\", fixed_strip_height: true, strip_width: 5 }\r\nconst ORIENTATION_LUMINANCE_STRIP_PLOT_10 =  {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 500 , line_height: 150, buffer: 50,  fill_color: \"BLACK\", y_value_representation:\"orientation\", distractor_value_feature:\"luminance\", fixed_strip_height: true, strip_width: 5 }\r\nconst LUMINANCE_ORIENTATION_STRIP_PLOT_10 =  {graph_type: \"strip\", axis_color: 'BLACK' , text_color: 'BLACK',  axis_length: 500 , line_height: 150, buffer: 50,  fill_color: \"BLACK\", y_value_representation:\"luminance\",  distractor_value_feature:\"orientation\", fixed_strip_height: true, strip_width: 5 }\r\n\r\nconst SEQUENCING_SYMBOLS_BASE = {\r\n  design:\r\n    [\r\n      {base_correlation: 0.3, stimulus_duration:400 , distractor_duration:200, direction: \"symmetric\",  max_step_size: 0.01, initial_difference: 0.1, num_points: 48, feedback_background_color: 'WHITE', background_color: 'WHITE', subcondition_instructions: false},\r\n      \r\n      {base_correlation: 0.6, stimulus_duration:400 , distractor_duration:200, direction: \"symmetric\",  max_step_size: 0.01, initial_difference: 0.1, num_points: 48, feedback_background_color: 'WHITE', background_color: 'WHITE', subcondition_instructions: false},\r\n      \r\n      {base_correlation: 0.9, stimulus_duration:400 , distractor_duration:200, direction: \"symmetric\",  max_step_size: 0.01, initial_difference: 0.1, num_points: 48, feedback_background_color: 'WHITE', background_color: 'WHITE', subcondition_instructions: false}\r\n    ],\r\n\r\n  custom:\r\n  [\r\n    {stimulus_duration: 400 , distractor_duration: 200, direction: \"symmetric\",  max_step_size: 0.01, initial_difference: 0.1, num_points: 48, feedback_background_color: 'WHITE', background_color: 'WHITE', subcondition_instructions: false},\r\n\r\n  ]\r\n}\r\n\r\nconst SEQUENCING_SYMBOLS_CONDITIONS = {\r\n\r\n  // Design Conditions\r\n  // Each array element is a block. Each block gets repeated by the number of design elements (0.3,0.6,0.9 correlations) for a total of 9 subconditions\r\n  // Indexing as follows: Block[0]xDesign[0], Block[0]xDesign[1], Block[0]xDesign[2], Block[1]xDesign[0],...., Block[n]xDesign[n]\r\n  sequencing_symbols_condition:\r\n  [\r\n    {block: \"scatter_scatter\", graph_a_attributes: BASE_SCATTER_PLOT, graph_b_attributes: BASE_SCATTER_PLOT},\r\n\r\n    {block: \"line_line\", graph_a_attributes: LINE_SCATTER_PLOT, graph_b_attributes: LINE_SCATTER_PLOT},\r\n\r\n    {block: \"scatter_line\", graph_a_attributes: BASE_SCATTER_PLOT, graph_b_attributes: LINE_SCATTER_PLOT},\r\n  ],\r\n\r\n  sequencing_symbols_condition_uniform_distribution:\r\n  [\r\n    {distribution_type: \"uniform\", block: \"scatter_scatter\", graph_a_attributes: BASE_SCATTER_PLOT, graph_b_attributes: BASE_SCATTER_PLOT},\r\n    \r\n    {distribution_type: \"uniform\", block: \"line_line\", graph_a_attributes: LINE_SCATTER_PLOT, graph_b_attributes: LINE_SCATTER_PLOT},\r\n\r\n    {distribution_type: \"uniform\", block: \"scatter_line\", graph_a_attributes: BASE_SCATTER_PLOT, graph_b_attributes: LINE_SCATTER_PLOT},\r\n  ],\r\n\r\n  sequencing_symbols_condition_strip_plot:\r\n  [\r\n    {block: \"scatter_scatter\", graph_a_attributes: BASE_SCATTER_PLOT,  graph_b_attributes: BASE_SCATTER_PLOT},\r\n\r\n    {block: \"strip_strip\", graph_a_attributes: BASE_STRIP_PLOT,  graph_b_attributes: BASE_STRIP_PLOT},\r\n\r\n    {block: \"scatter_strip\", graph_a_attributes: BASE_SCATTER_PLOT,  graph_b_attributes: BASE_STRIP_PLOT},\r\n  ],\r\n\r\n  sequencing_symbols_scatter_density:\r\n  [ // num_ponts: -1 makes it so the num_points for each graph is defined separetly in their graph attributes\r\n    {num_points: -1,  block: \"low_low\", graph_a_attributes: LOW_DENSITY_SCATTER_PLOT, graph_b_attributes: LOW_DENSITY_SCATTER_PLOT},\r\n\r\n    {num_points: -1,  block: \"high_high\", graph_a_attributes: HIGH_DENSITY_SCATTER_PLOT, graph_b_attributes: HIGH_DENSITY_SCATTER_PLOT},\r\n\r\n    {num_points: -1,  block: \"low_high\", graph_a_attributes: LOW_DENSITY_SCATTER_PLOT, graph_b_attributes: HIGH_DENSITY_SCATTER_PLOT},\r\n\r\n  ],\r\n\r\n  sequencing_symbols_scatter_parallel:\r\n  [\r\n    {block: \"scatter_scatter\", graph_a_attributes: BASE_SCATTER_PLOT,  graph_b_attributes: BASE_SCATTER_PLOT},\r\n    \r\n    {block: \"parallel_parallel\", graph_a_attributes: BASE_PARALLEL_PLOT,  graph_b_attributes: BASE_PARALLEL_PLOT},\r\n\r\n    {block: \"scatter_parallel\", graph_a_attributes: BASE_SCATTER_PLOT,  graph_b_attributes: BASE_PARALLEL_PLOT}\r\n  ],\r\n\r\n  sequencing_symbols_scatter_strip_luminance:\r\n  [\r\n    {block: \"scatter_scatter\", graph_a_attributes: BASE_SCATTER_PLOT,  graph_b_attributes: BASE_SCATTER_PLOT},\r\n    \r\n    {block: \"strip_strip\", graph_a_attributes: LUMINANCE_STRIP_PLOT, graph_b_attributes: LUMINANCE_STRIP_PLOT},\r\n\r\n    {block: \"scatter_strip\", graph_a_attributes: LUMINANCE_STRIP_PLOT,  graph_b_attributes: BASE_SCATTER_PLOT}\r\n  ],\r\n  \r\n  sequencing_symbols_features_strip_luminance_orientation:\r\n  [\r\n    {distribution_type: \"uniform\", block: \"base\", graph_a_attributes: LUMINANCE_ORIENTATION_STRIP_PLOT_6,  graph_b_attributes: LUMINANCE_ORIENTATION_STRIP_PLOT_6},\r\n\r\n    {distribution_type: \"uniform\", block: \"luminance_y_orientation_y\", graph_a_attributes: LUMINANCE_ORIENTATION_STRIP_PLOT_6, graph_b_attributes: LUMINANCE_ORIENTATION_STRIP_PLOT_6, distractor_type: 'orientation', z_value: 'y_value'},\r\n\r\n    {distribution_type: \"uniform\", block: \"luminance_y_orientation_random\", graph_a_attributes: LUMINANCE_ORIENTATION_STRIP_PLOT_6,  graph_b_attributes: LUMINANCE_ORIENTATION_STRIP_PLOT_6, distractor_type: 'orientation', z_value: 'random'},\r\n\r\n  ],\r\n\r\n  sequencing_symbols_features_strip_orientation_luminance:\r\n  [\r\n    {distribution_type: \"uniform\", block: \"base\", graph_a_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_6,  graph_b_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_6},\r\n\r\n    {distribution_type: \"uniform\", block: \"luminance_y_orientation_y\", graph_a_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_6, graph_b_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_6, distractor_type: 'luminance', z_value: 'y_value'},\r\n\r\n    {distribution_type: \"uniform\", block: \"orientation_y_luminance_random\", graph_a_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_6,  graph_b_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_6, distractor_type: 'luminance',  z_value: 'random'},\r\n  ],\r\n\r\n  sequencing_symbols_strip_luminance_widths:\r\n  [\r\n    {block: \"0.6mm\", graph_a_attributes: LUMINANCE_STRIP_PLOT_06mm,  graph_b_attributes: LUMINANCE_STRIP_PLOT_06mm},\r\n\r\n    {block: \"0.8mm\", graph_a_attributes: LUMINANCE_STRIP_PLOT_08mm,  graph_b_attributes: LUMINANCE_STRIP_PLOT_08mm},\r\n\r\n    {block: \"1.0mm\", graph_a_attributes: LUMINANCE_STRIP_PLOT_1mm,  graph_b_attributes: LUMINANCE_STRIP_PLOT_1mm},\r\n  ],\r\n\r\n  sequencing_symbols_scatter_strip_color_yellow_blue:\r\n  [\r\n    {block: \"scatter_scatter\", graph_a_attributes: BASE_SCATTER_PLOT,  graph_b_attributes: BASE_SCATTER_PLOT},\r\n    \r\n    {block: \"strip_strip\", graph_a_attributes: LUMINANCE_STRIP_PLOT_YELLOW_TO_LIGHT_BLUE, graph_b_attributes: LUMINANCE_STRIP_PLOT_YELLOW_TO_LIGHT_BLUE},\r\n\r\n    {block: \"scatter_strip\", graph_a_attributes: LUMINANCE_STRIP_PLOT_YELLOW_TO_LIGHT_BLUE,  graph_b_attributes: BASE_SCATTER_PLOT}\r\n  ],\r\n\r\n  sequencing_symbols_scatter_strip_color_yellow_blue_800:\r\n  [\r\n    {block: \"scatter_scatter\", stimulus_duration: 800, graph_a_attributes: BASE_SCATTER_PLOT,  graph_b_attributes: BASE_SCATTER_PLOT},\r\n    \r\n    {block: \"strip_strip\", stimulus_duration: 800, graph_a_attributes: LUMINANCE_STRIP_PLOT_YELLOW_TO_LIGHT_BLUE, graph_b_attributes: LUMINANCE_STRIP_PLOT_YELLOW_TO_LIGHT_BLUE},\r\n\r\n    {block: \"scatter_strip\", stimulus_duration: 800, graph_a_attributes: LUMINANCE_STRIP_PLOT_YELLOW_TO_LIGHT_BLUE,  graph_b_attributes: BASE_SCATTER_PLOT}\r\n  ],\r\n\r\n  sequencing_symbols_scatter_strip_color_yellow_blue_1200:\r\n  [\r\n    {block: \"scatter_scatter\", stimulus_duration: 1200, graph_a_attributes: BASE_SCATTER_PLOT,  graph_b_attributes: BASE_SCATTER_PLOT},\r\n    \r\n    {block: \"strip_strip\", stimulus_duration: 1200, graph_a_attributes: LUMINANCE_STRIP_PLOT_YELLOW_TO_LIGHT_BLUE, graph_b_attributes: LUMINANCE_STRIP_PLOT_YELLOW_TO_LIGHT_BLUE},\r\n\r\n    {block: \"scatter_strip\", stimulus_duration: 1200, graph_a_attributes: LUMINANCE_STRIP_PLOT_YELLOW_TO_LIGHT_BLUE,  graph_b_attributes: BASE_SCATTER_PLOT}\r\n  ],\r\n\r\n  sequencing_symbols_strip_color_luminance:\r\n  [\r\n    {block: \"luminance_white_bg\", stimulus_duration: 1200, graph_a_attributes: LUMINANCE_STRIP_PLOT_WHITE_BG_08mm_7cm, graph_b_attributes: LUMINANCE_STRIP_PLOT_WHITE_BG_08mm_7cm},\r\n\r\n    {block: \"luminance_black_bg\", stimulus_duration: 1200, feedback_background_color: 'BLACK', background_color: 'BLACK', graph_a_attributes: LUMINANCE_STRIP_PLOT_BLACK_BG_08mm_7cm, graph_b_attributes: LUMINANCE_STRIP_PLOT_BLACK_BG_08mm_7cm},\r\n\r\n    {block: \"color_yb_white_bg\", stimulus_duration: 1200, graph_a_attributes: LUMINANCE_STRIP_PLOT_YB_WHITE_BG_7cm, graph_b_attributes: LUMINANCE_STRIP_PLOT_YB_WHITE_BG_7cm},\r\n    \r\n    {block: \"color_yb_black_bg\", stimulus_duration: 1200, feedback_background_color: 'BLACK', background_color: 'BLACK', graph_a_attributes: LUMINANCE_STRIP_PLOT_YB_BLACK_BG_7cm, graph_b_attributes: LUMINANCE_STRIP_PLOT_YB_BLACK_BG_7cm},\r\n  ],\r\n\r\n  sequencing_symbols_memory_control_1200:\r\n  [\r\n    {stimulus_duration: 1200, block: \"scatter_scatter\", graph_a_attributes: BASE_SCATTER_PLOT, graph_b_attributes: BASE_SCATTER_PLOT, subcondition_instructions: true},\r\n\r\n    {stimulus_duration: 1200, block: \"scatter_scatter_memory\", direction: \"memory\", graph_a_attributes: BASE_SCATTER_PLOT, graph_b_attributes: BASE_SCATTER_PLOT, subcondition_instructions: true},\r\n  ],\r\n\r\n\r\n  // Custom Conditions\r\n  sequencing_symbols_strip_orientation_luminance_combined:\r\n  [\r\n    {base_correlation: 0.5, distribution_type: \"uniform\", block: \"orientation\", graph_a_attributes: ORIENTATION_STRIP_PLOT_10,  graph_b_attributes: ORIENTATION_STRIP_PLOT_10, subcondition_instructions: true},\r\n    {base_correlation: 0.8, distribution_type: \"uniform\", block: \"orientation\", graph_a_attributes: ORIENTATION_STRIP_PLOT_10,  graph_b_attributes: ORIENTATION_STRIP_PLOT_10, subcondition_instructions: true},\r\n\r\n    {base_correlation: 0.5, distribution_type: \"uniform\", block: \"luminance\", graph_a_attributes: LUMINANCE_STRIP_PLOT_10,  graph_b_attributes: LUMINANCE_STRIP_PLOT_10, subcondition_instructions: true},\r\n    {base_correlation: 0.8, distribution_type: \"uniform\", block: \"luminance\", graph_a_attributes: LUMINANCE_STRIP_PLOT_10,  graph_b_attributes: LUMINANCE_STRIP_PLOT_10, subcondition_instructions: true},\r\n    \r\n    {base_correlation: 0.5, distribution_type: \"uniform\", block: \"orientation_luminance_covar\", graph_a_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_10,  graph_b_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_10, distractor_type: 'luminance', z_value: 'y_value', subcondition_instructions: true},\r\n    {base_correlation: 0.8, distribution_type: \"uniform\", block: \"orientation_luminance_covar\", graph_a_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_10,  graph_b_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_10, distractor_type: 'luminance', z_value: 'y_value', subcondition_instructions: true},\r\n    \r\n    {base_correlation: 0.5, distribution_type: \"uniform\", block: \"orientation_luminance_random\", graph_a_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_10,  graph_b_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_10, distractor_type: 'luminance', z_value: 'random', subcondition_instructions: true},\r\n    {base_correlation: 0.8, distribution_type: \"uniform\", block: \"orientation_luminance_random\", graph_a_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_10,  graph_b_attributes: ORIENTATION_LUMINANCE_STRIP_PLOT_10, distractor_type: 'luminance', z_value: 'random', subcondition_instructions: true},\r\n    \r\n    {base_correlation: 0.5, distribution_type: \"uniform\", block: \"luminance_orientation_random\", graph_a_attributes: LUMINANCE_ORIENTATION_STRIP_PLOT_10,  graph_b_attributes: LUMINANCE_ORIENTATION_STRIP_PLOT_10, distractor_type: 'orientation', z_value: 'random', subcondition_instructions: true},\r\n    {base_correlation: 0.8, distribution_type: \"uniform\", block: \"luminance_orientation_random\", graph_a_attributes: LUMINANCE_ORIENTATION_STRIP_PLOT_10,  graph_b_attributes: LUMINANCE_ORIENTATION_STRIP_PLOT_10, distractor_type: 'orientation', z_value: 'random', subcondition_instructions: true},\r\n  ],\r\n  \r\n\r\n  sequencing_symbols_memory_control:\r\n  [\r\n    {base_correlation: 0.3, block: \"scatter_scatter\", graph_a_attributes: BASE_SCATTER_PLOT, graph_b_attributes: BASE_SCATTER_PLOT, subcondition_instructions: true},\r\n    {base_correlation: 0.6, block: \"scatter_scatter\", graph_a_attributes: BASE_SCATTER_PLOT, graph_b_attributes: BASE_SCATTER_PLOT, subcondition_instructions: true},\r\n    {base_correlation: 0.9, block: \"scatter_scatter\", graph_a_attributes: BASE_SCATTER_PLOT, graph_b_attributes: BASE_SCATTER_PLOT, subcondition_instructions: true},\r\n\r\n    {base_correlation: 0.3, block: \"scatter_scatter_memory\", direction: \"memory\", graph_a_attributes: BASE_SCATTER_PLOT, graph_b_attributes: BASE_SCATTER_PLOT, subcondition_instructions: true},\r\n    {base_correlation: 0.6, block: \"scatter_scatter_memory\", direction: \"memory\", graph_a_attributes: BASE_SCATTER_PLOT, graph_b_attributes: BASE_SCATTER_PLOT, subcondition_instructions: true},\r\n    {base_correlation: 0.9, block: \"scatter_scatter_memory\", direction: \"memory\", graph_a_attributes: BASE_SCATTER_PLOT, graph_b_attributes: BASE_SCATTER_PLOT, subcondition_instructions: true},\r\n  ]\r\n}\r\n\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "BASE_SCATTER_PLOT",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~BASE_SCATTER_PLOT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"point_shape\": string, \"point_color\": string, \"axis_color\": string, \"axis_length\": number, \"buffer\": number, \"text_color\": string, \"point_size\": number, \"line_length\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "LINE_SCATTER_PLOT",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LINE_SCATTER_PLOT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"point_shape\": string, \"point_color\": string, \"axis_color\": string, \"axis_length\": number, \"buffer\": number, \"text_color\": string, \"point_size\": number, \"line_length\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "BASE_STRIP_PLOT",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~BASE_STRIP_PLOT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"fixed_strip_height\": boolean, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "LUMINANCE_STRIP_PLOT",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LUMINANCE_STRIP_PLOT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"fixed_strip_height\": boolean, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "BASE_PARALLEL_PLOT",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~BASE_PARALLEL_PLOT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"fill_color\": string, \"line_width\": number, \"axis_height\": number, \"axis_separation\": number, \"axis_width\": number, \"axis_buffer\": number, \"inverted\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "LOW_DENSITY_SCATTER_PLOT",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LOW_DENSITY_SCATTER_PLOT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"num_points\": number, \"point_shape\": string, \"point_color\": string, \"axis_color\": string, \"axis_length\": number, \"buffer\": number, \"text_color\": string, \"point_size\": number, \"line_length\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "HIGH_DENSITY_SCATTER_PLOT",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~HIGH_DENSITY_SCATTER_PLOT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"num_points\": number, \"point_shape\": string, \"point_color\": string, \"axis_color\": string, \"axis_length\": number, \"buffer\": number, \"text_color\": string, \"point_size\": number, \"line_length\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "LUMINANCE_STRIP_PLOT_06mm",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LUMINANCE_STRIP_PLOT_06mm",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"fixed_strip_height\": boolean, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "LUMINANCE_STRIP_PLOT_08mm",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LUMINANCE_STRIP_PLOT_08mm",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"fixed_strip_height\": boolean, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "LUMINANCE_STRIP_PLOT_1mm",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LUMINANCE_STRIP_PLOT_1mm",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"fixed_strip_height\": boolean, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "LUMINANCE_STRIP_PLOT_YELLOW_TO_LIGHT_BLUE",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LUMINANCE_STRIP_PLOT_YELLOW_TO_LIGHT_BLUE",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"y_value_range\": *, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "LUMINANCE_STRIP_PLOT_YB_WHITE_BG_7cm",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LUMINANCE_STRIP_PLOT_YB_WHITE_BG_7cm",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"y_value_range\": *, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "LUMINANCE_STRIP_PLOT_YB_BLACK_BG_7cm",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LUMINANCE_STRIP_PLOT_YB_BLACK_BG_7cm",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"y_value_range\": *, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "LUMINANCE_STRIP_PLOT_WHITE_BG_08mm_7cm",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LUMINANCE_STRIP_PLOT_WHITE_BG_08mm_7cm",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"y_value_range\": *, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "LUMINANCE_STRIP_PLOT_BLACK_BG_08mm_7cm",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LUMINANCE_STRIP_PLOT_BLACK_BG_08mm_7cm",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"y_value_range\": *, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "LUMINANCE_ORIENTATION_STRIP_PLOT_6",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LUMINANCE_ORIENTATION_STRIP_PLOT_6",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"distractor_value_feature\": string, \"fixed_strip_height\": boolean, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "ORIENTATION_LUMINANCE_STRIP_PLOT_6",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~ORIENTATION_LUMINANCE_STRIP_PLOT_6",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"distractor_value_feature\": string, \"fixed_strip_height\": boolean, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "ORIENTATION_STRIP_PLOT_10",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~ORIENTATION_STRIP_PLOT_10",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"fixed_strip_height\": boolean, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "LUMINANCE_STRIP_PLOT_10",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LUMINANCE_STRIP_PLOT_10",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"fixed_strip_height\": boolean, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "ORIENTATION_LUMINANCE_STRIP_PLOT_10",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~ORIENTATION_LUMINANCE_STRIP_PLOT_10",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"distractor_value_feature\": string, \"fixed_strip_height\": boolean, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "LUMINANCE_ORIENTATION_STRIP_PLOT_10",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~LUMINANCE_ORIENTATION_STRIP_PLOT_10",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "{\"graph_type\": string, \"axis_color\": string, \"text_color\": string, \"axis_length\": number, \"line_height\": number, \"buffer\": number, \"fill_color\": string, \"y_value_representation\": string, \"distractor_value_feature\": string, \"fixed_strip_height\": boolean, \"strip_width\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "SEQUENCING_SYMBOLS_BASE",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~SEQUENCING_SYMBOLS_BASE",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": "{SEQUENCING_SYMBOLS_BASE}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "{\"design\": *, \"custom\": *}"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "SEQUENCING_SYMBOLS_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/sequencing_symbols_data.js~SEQUENCING_SYMBOLS_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/sequencing_symbols_data.js",
    "importStyle": "{SEQUENCING_SYMBOLS_CONDITIONS}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "{\"sequencing_symbols_condition\": *, \"sequencing_symbols_condition_uniform_distribution\": *, \"sequencing_symbols_condition_strip_plot\": *, \"sequencing_symbols_scatter_density\": *, \"sequencing_symbols_scatter_parallel\": *, \"sequencing_symbols_scatter_strip_luminance\": *, \"sequencing_symbols_features_strip_luminance_orientation\": *, \"sequencing_symbols_features_strip_orientation_luminance\": *, \"sequencing_symbols_strip_luminance_widths\": *, \"sequencing_symbols_scatter_strip_color_yellow_blue\": *, \"sequencing_symbols_scatter_strip_color_yellow_blue_800\": *, \"sequencing_symbols_scatter_strip_color_yellow_blue_1200\": *, \"sequencing_symbols_strip_color_luminance\": *, \"sequencing_symbols_memory_control_1200\": *, \"sequencing_symbols_strip_orientation_luminance_combined\": *, \"sequencing_symbols_memory_control\": *}"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/stevens_data.js",
    "content": "export { STEVENS_BASE, STEVENS_CONDITIONS };\r\n\r\nconst STEVENS_BASE = {\r\n\r\n  foundational:\r\n    [\r\n      { distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 1, low_ref: 0, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 0.5, low_ref: 0, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 1, low_ref: 0.5, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 0.25, low_ref: 0, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 0.5, low_ref: 0.25, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 0.75, low_ref: 0.5, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'test', trials_per_round: 4, high_ref: 1, low_ref: 0.75, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.375, low_ref: 0.125, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.5, low_ref: 0.25, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.625, low_ref: 0.375, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.75, low_ref: 0.5, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.875, low_ref: 0.625, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.875, low_ref: 0.125, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.75, low_ref: 0.25, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n\r\n      { distribution_type: \"gaussian\", round_type: 'consistency', trials_per_round: 4, high_ref: 0.625, low_ref: 0.375, error: 0.0001, num_points: 100, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n    ],\r\n\r\n  design:\r\n    [\r\n      { distribution_type: \"gaussian\", trials_per_round: 4, high_ref: 0.9, low_ref: 0, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n    ],\r\n\r\n  custom:\r\n    [\r\n      { distribution_type: \"gaussian\", trials_per_round: 4, high_ref: 1, low_ref: 0, regen_rate: 1000, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', background_color: 'WHITE', point_size: 6, regen_rate: 1000 },\r\n    ]\r\n}\r\n\r\nconst STEVENS_CONDITIONS = {\r\n  // Foundational\r\n  strip_ring_size:\r\n    [\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 },\r\n\r\n      { ring_thickness: 1 }\r\n    ],\r\n\r\n  line_length_strip:\r\n    [\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n\r\n      { strip_width: 1, fixed_strip_height: false },\r\n    ],\r\n\r\n  stable_line_length_strip:\r\n    [\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true },\r\n\r\n      { fixed_strip_height: true }\r\n    ],\r\n\r\n  // Design\r\n  distractor_rainbow:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'RED', point_size: 6 }, block: 'RED' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'GREEN', point_size: 6 }, block: 'GREEN' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'BLUE', point_size: 6 }, block: 'BLUE' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'YELLOW', point_size: 6 }, block: 'YELLOW' },\r\n\r\n      //{ dist_attributes: {correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'RED', point_size: 6}, block: 'RED' }, // there were two Red blocks in original data\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_size: 6, mix_type: \"attribute\", mix_data: { point_color: ['RED', 'GREEN', 'BLUE', 'YELLOW'] } }, block: 'MIX' }\r\n    ],\r\n\r\n  distractor_square_red_hue:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#d83862', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#d83862' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#d54049', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#d54049' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#c05819', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#c05819' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#ae6500', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#ae6500' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#WHITE' },\r\n\r\n    ],\r\n\r\n  distractor_square_red_lum:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#9e210f', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'lum', block: '#d83862' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#b63821', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'lum', block: '#d54049' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#e45f43', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'lum', block: '#c05819' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#fe7657', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#ae6500' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#WHITE' },\r\n\r\n    ],\r\n\r\n  distractor_square_red_chrom:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#aa6453', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'chro', block: '#aa6453' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#bc5942', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'chro', block: '#bc5942' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#dc391f', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'chro', block: '#dc391f' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#eb1607', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'chro', block: '#eb1607' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square' }, point_color: '#cd4c32', point_shape: 'square', point_size: 8, dimension: 'chro', block: '#WHITE' },\r\n\r\n    ],\r\n\r\n  distractor_square_yellow_hue:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#ffaf7d', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#ffaf7d' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#f4bc6a', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#f4bc6a' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#bfce6d', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#bfce6d' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#9fd57d', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#9fd57d' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'hue', block: '#WHITE' },\r\n    ],\r\n\r\n  distractor_square_yellow_lum:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#b19e41', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#c6b254', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#f1da7a', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#fff08e', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n    ],\r\n\r\n  distractor_square_yellow_chrom:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#d1c6a3', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'chro', block: 'd1c6a3' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#d7c685', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'chro', block: 'd7c685' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#dec644', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'chro', block: 'dec644' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#dfc602', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'chro', block: 'd7c685' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square' }, point_color: '#dbc667', point_shape: 'square', point_size: 8, dimension: 'chro', block: 'd7c685' },\r\n\r\n    ],\r\n\r\n  distractor_square_blue_hue:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#008897', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#0085ad', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#5575bc', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#816ab1', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n    ],\r\n\r\n  distractor_square_blue_lum:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#005a95', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#006ca9', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#006ca9', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#43a4e6', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    ],\r\n\r\n  distractor_square_blue_chrom:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#6a7887', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#4d7ba1', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#0081d9', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#0085f7', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square' }, point_color: '#007ebc', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n    ],\r\n\r\n  distractor_square_green_hue:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#6b7e21', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#4d8433', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#008a67', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#008a67', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'hue' },\r\n\r\n    ],\r\n\r\n  distractor_square_green_lum:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#006228', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#007438', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#399b5c', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#4eaf6e', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'lum' },\r\n\r\n    ],\r\n\r\n  distractor_square_green_chrom:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#5e7e66', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#468358', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#008d33', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#00920c', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_shape: 'square' }, point_color: '#20874a', point_shape: 'square', point_size: 8, dimension: 'chro' },\r\n    ],\r\n\r\n  distractor_blue_shades:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#004078', point_size: 6 }, point_color: '#699938' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#2c6fad', point_size: 6 }, point_color: '#699938' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#69a3e5', point_size: 6 }, point_color: '#699938' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#a2d9ff', point_size: 6 }, point_color: '#699938' },\r\n\r\n    ],\r\n\r\n  distractor_red_shades:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#9f2b2a', point_size: 6 }, point_color: '#699938' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#bc4740', point_size: 6 }, point_color: '#699938' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#db6158', point_size: 6 }, point_color: '#699938' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#ff988a', point_size: 6 }, point_color: '#699938' },\r\n    ],\r\n\r\n  distractor_yellow_shades:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#d3c86a', point_size: 6 }, point_color: '#699938' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#9b9236', point_size: 6 }, point_color: '#699938' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#80781b', point_size: 6 }, point_color: '#699938' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: '#f0e484', point_size: 6 }, point_color: '#699938' },\r\n    ],\r\n\r\n  distractor_control_shades:\r\n    [\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_size: 6 }, point_color: '#699938' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_size: 6 }, point_color: '#699938' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_size: 6 }, point_color: '#699938' },\r\n\r\n      { dist_attributes: { correlation: 0.3, error: 0.0001, num_points: 100, point_color: 'WHITE', point_size: 6 }, point_color: '#699938' },\r\n    ],\r\n\r\n  hollow_scatter:\r\n    [\r\n      { point_shape: \"hollow_circle\" },\r\n    ],\r\n\r\n  thin_hollow_scatter:\r\n    [\r\n      { point_shape: \"thin_hollow_circle\" },\r\n    ],\r\n\r\n  bullseye_scatter:\r\n    [\r\n      { point_shape: \"bullseye_circle\" },\r\n    ],\r\n\r\n  mix_point_styles:\r\n    [\r\n      { mix_by_attribute: { point_shape: [\"hollow_circle\", \"thin_hollow_circle\", \"bullseye_circle\", \"circle\"] } },\r\n    ],\r\n\r\n  point_styles_combined:\r\n    [\r\n      { point_shape: \"hollow_circle\", block: \"hollow_circle\" },\r\n\r\n      { point_shape: \"thin_hollow_circle\", block: \"thin_hollow_circle\" },\r\n\r\n      { point_shape: \"bullseye_circle\", block: \"bullseye_circle\" },\r\n\r\n      { point_shape: \"circle\", block: \"circle\" },\r\n\r\n      { mix_by_attribute: { point_shape: [\"hollow_circle\", \"thin_hollow_circle\", \"bullseye_circle\", \"circle\"] }, block: \"mix_by_attribute\" },\r\n\r\n    ],\r\n\r\n  multi_size_scatter:\r\n    [\r\n      { num_points: 50, point_size: 6.25 },\r\n\r\n      { num_points: 50, point_size: 12.5 },//mix_by_attribute: {point_size: [0.125, 0.25, 0.5, 1]}},\r\n\r\n      { num_points: 50, point_size: 25 },//mix_by_attribute: {point_size: [0.125, 0.25, 0.5, 1]}},\r\n\r\n      { num_points: 50, point_size: 50 },//mix_by_attribute: {point_size: [0.125, 0.25, 0.5, 1]}},\r\n\r\n      { num_points: 50, mix_type: \"targeted\", mix_data: { point_size: [6.25, 12.5, 25, 50], num_target: 11 } },//mix_by_attribute: {point_size: [0.125, 0.25, 0.5, 1]}},\r\n    ],\r\n\r\n  large_dot_sizes:\r\n    [\r\n      { point_size: 24 },\r\n\r\n      { point_size: 35.5 },\r\n\r\n      { point_size: 50 },\r\n\r\n      { point_size: 71 },\r\n\r\n      { mix_type: \"attribute\", mix_data: { point_size: [24, 35.5, 50, 71] } },\r\n    ],\r\n\r\n  multi_color_scatter_combined:\r\n    [\r\n      { num_points: 48, point_size: 20, point_color: \"#808080\", block: \"GREY\" },\r\n      { num_points: 48, point_size: 20, point_color: \"#808080\", block: \"GREY\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"BLUE\", block: \"BLUE\" },\r\n      { num_points: 48, point_size: 20, point_color: \"BLUE\", block: \"BLUE\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"RED\", block: \"RED\" },\r\n      { num_points: 48, point_size: 20, point_color: \"RED\", block: \"RED\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"GREEN\", block: \"GREEN\" },\r\n      { num_points: 48, point_size: 20, point_color: \"GREEN\", block: \"GREEN\" },\r\n\r\n      { num_points: 48, point_size: 20, mix_type: \"attribute\", mix_data: { point_color: [\"#808080\", \"BLUE\", \"RED\", \"GREEN\"] }, block: \"MIX\" },\r\n      { num_points: 48, point_size: 20, mix_type: \"attribute\", mix_data: { point_color: [\"#808080\", \"BLUE\", \"RED\", \"GREEN\"] }, block: \"MIX\" },\r\n    ],\r\n\r\n  multi_shape_scatter_combined:\r\n    [\r\n      { num_points: 48, point_size: 10, point_shape: \"hollow_circle\", block: \"hollow_circle\" },\r\n\r\n      { num_points: 48, point_size: 10, point_shape: \"hollow_triangle\", block: \"hollow_triangle\" },\r\n\r\n      { num_points: 48, point_size: 10, point_shape: \"plus\", block: \"plus\" },\r\n\r\n      { num_points: 48, point_size: 10, point_shape: \"cross\", block: \"cross\" },\r\n\r\n      { num_points: 48, mix_type: \"attribute\", mix_data: { point_shape: [\"hollow_circle\", \"hollow_triangle\", \"plus\", \"cross\"] }, point_size: 10, block: \"mix\" },\r\n    ],\r\n\r\n  multi_border_combined:\r\n    [\r\n      { num_points: 48, point_size: 20, borders: \"0\", block: \"0\" },\r\n\r\n      { num_points: 48, point_size: 20, borders: \"2\", block: \"2\" },\r\n\r\n      { num_points: 48, point_size: 20, borders: \"3U\", block: \"3U\" },\r\n\r\n      { num_points: 48, point_size: 20, borders: \"3C\", block: \"3C\" },\r\n\r\n      { num_points: 48, point_size: 20, borders: \"4\", block: \"4\" },\r\n\r\n    ],\r\n\r\n  multi_luminance_scatter_combined:\r\n    [\r\n      { num_points: 48, point_size: 20, point_color: \"#000000\", block: \"#000000\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#808080\", block: \"808080\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#404040\", block: \"404040\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#bfbfbf\", block: \"bfbfbf\" },\r\n\r\n      { num_points: 48, point_size: 20, mix_type: \"attribute\", mix_data: { point_color: [\"#000000\", \"#808080\", \"#404040\", \"#bfbfbf\"] }, block: \"mix_by_attribute\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#000000\", block: \"#000000\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#808080\", block: \"808080\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#404040\", block: \"404040\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#bfbfbf\", block: \"bfbfbf\" },\r\n\r\n      { num_points: 48, point_size: 20, mix_type: \"attribute\", mix_data: { point_color: [\"#000000\", \"#808080\", \"#404040\", \"#bfbfbf\"] }, block: \"mix_by_attribute\" },\r\n\r\n    ],\r\n\r\n  multi_opacity_scatter_combined:\r\n    [\r\n      { num_points: 48, point_size: 20, point_color: \"#000000\", block: \"#000000\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#000000BF\", block: \"#000000BF\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#00000080\", block: \"#00000080\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#00000040\", block: \"#00000040\" },\r\n\r\n      { num_points: 48, point_size: 20, mix_type: \"attribute\", mix_data: { point_color: [\"#000000\", \"#000000BF\", \"#00000080\", \"#00000040\"] }, block: \"mix_by_attribute\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#000000\", block: \"#000000\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#000000BF\", block: \"#000000BF\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#00000080\", block: \"#00000080\" },\r\n\r\n      { num_points: 48, point_size: 20, point_color: \"#00000040\", block: \"#00000040\" },\r\n\r\n      { num_points: 48, point_size: 20, mix_type: \"attribute\", mix_data: { point_color: [\"#000000\", \"#000000BF\", \"#00000080\", \"#00000040\"] }, block: \"mix_by_attribute\" },\r\n    ],\r\n\r\n  multi_size_scatter_combined:\r\n    [\r\n      { num_points: 48, point_size: 2.5, block: \"0.5\" },\r\n      { num_points: 48, point_size: 2.5, block: \"0.5\" },\r\n\r\n      { num_points: 48, point_size: 5, block: \"1.0\" },\r\n      { num_points: 48, point_size: 5, block: \"1.0\" },\r\n\r\n      { num_points: 48, point_size: 10, block: \"2.0\" },\r\n      { num_points: 48, point_size: 10, block: \"2.0\" },\r\n\r\n      { num_points: 48, point_size: 20, block: \"4.0\" },\r\n      { num_points: 48, point_size: 20, block: \"4.0\" },\r\n\r\n      { num_points: 48, mix_type: \"attribute\", mix_data: { point_size: [2.5, 5, 10, 20] }, block: \"mixed_size\" },\r\n      { num_points: 48, mix_type: \"attribute\", mix_data: { point_size: [2.5, 5, 10, 20] }, block: \"mixed_size\" },\r\n    ],\r\n\r\n\r\n  decreasing_number_of_dots: [\r\n    { num_points: 100, block: \"100\" },\r\n    { num_points: 100, block: \"100\" },\r\n\r\n    { num_points: 48, block: \"48\" },\r\n    { num_points: 48, block: \"48\" },\r\n\r\n    { num_points: 24, block: \"24\" },\r\n    { num_points: 24, block: \"24\" },\r\n\r\n    { num_points: 12, block: \"12\" },\r\n    { num_points: 12, block: \"12\" },\r\n\r\n    { num_points: 6, block: \"6\" },\r\n    { num_points: 6, block: \"6\" }\r\n\r\n  ],\r\n\r\n  increasing_number_of_dots: [\r\n    { num_points: 100, block: \"100\", starting_high_ref: 0.9, starting_low_ref: 0.1 },\r\n    { num_points: 100, block: \"100\", starting_high_ref: 0.9, starting_low_ref: 0.1 },\r\n\r\n    { num_points: 150, block: \"150\", starting_high_ref: 0.9, starting_low_ref: 0.1 },\r\n    { num_points: 150, block: \"150\", starting_high_ref: 0.9, starting_low_ref: 0.1 },\r\n\r\n    { num_points: 200, block: \"200\", starting_high_ref: 0.9, starting_low_ref: 0.1 },\r\n    { num_points: 200, block: \"200\", starting_high_ref: 0.9, starting_low_ref: 0.1 },\r\n\r\n    { num_points: 250, block: \"250\", starting_high_ref: 0.9, starting_low_ref: 0.1 },\r\n    { num_points: 250, block: \"250\", starting_high_ref: 0.9, starting_low_ref: 0.1 },\r\n\r\n    { num_points: 300, block: \"300\", starting_high_ref: 0.9, starting_low_ref: 0.1 },\r\n    { num_points: 300, block: \"300\", starting_high_ref: 0.9, starting_low_ref: 0.1 }\r\n  ],\r\n\r\n  hybrid_multi_luminance_scatter: [\r\n    { num_points: 48, point_size: 20, point_color: \"#000000\", block: \"#000000\" },\r\n    { num_points: 48, point_size: 20, point_color: \"#000000\", block: \"#000000\" },\r\n\r\n    { num_points: 48, point_size: 20, point_color: \"#747474\", block: \"#747474\" },\r\n    { num_points: 48, point_size: 20, point_color: \"#747474\", block: \"#747474\" },\r\n\r\n    { num_points: 48, point_size: 20, point_color: \"#a3a3a3\", block: \"#a3a3a3\" },\r\n    { num_points: 48, point_size: 20, point_color: \"#a3a3a3\", block: \"#a3a3a3\" },\r\n\r\n    { num_points: 48, point_size: 20, point_color: \"#d7d7d7\", block: \"#d7d7d7\" },\r\n    { num_points: 48, point_size: 20, point_color: \"#d7d7d7\", block: \"#d7d7d7\" },\r\n\r\n    { num_points: 48, point_size: 20, mix_type: \"attribute\", mix_data: { point_color: [\"#000000\", \"#747474\", \"#a3a3a3\", \"#d7d7d7\"] }, block: \"mix_by_attribute\" },\r\n    { num_points: 48, point_size: 20, mix_type: \"attribute\", mix_data: { point_color: [\"#000000\", \"#747474\", \"#a3a3a3\", \"#d7d7d7\"] }, block: \"mix_by_attribute\" },\r\n  ],\r\n\r\n  // Custom\r\n\r\n  test_hybrid_scatter:\r\n    [\r\n      { num_points: 48, point_size: 12.5, point_color: \"GREY\", trials_per_round: 10 },\r\n    ],\r\n\r\n  multi_size_scatter_alternate:\r\n    [\r\n      { num_points: 50, point_size: 6.25 },\r\n\r\n      { num_points: 50, point_size: 12.5 },\r\n\r\n      { num_points: 50, point_size: 25 },\r\n\r\n      { num_points: 50, point_size: 50 },\r\n\r\n      { num_points: 50, mix_type: \"targeted\", mix_data: { point_size: [6.25, 12.25, 25, 50], num_target: 11 } }\r\n    ],\r\n\r\n  visual_masking: [\r\n    { low_ref: 0, high_ref: 1, num_points: 48, point_size: 6, visual_masking_type: \"borderless\", visual_masking_pos: \"middle\" },\r\n  ],\r\n\r\n  visual_masking_border: [\r\n    { low_ref: 0, high_ref: 1, num_points: 48, point_size: 6, visual_masking_type: \"border\", visual_masking_pos: \"middle\" },\r\n  ],\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/constants/stevens_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "STEVENS_BASE",
    "memberof": "scripts/experiment-properties/data/constants/stevens_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/stevens_data.js~STEVENS_BASE",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/stevens_data.js",
    "importStyle": "{STEVENS_BASE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *, \"design\": *, \"custom\": *}"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "STEVENS_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/stevens_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/stevens_data.js~STEVENS_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/stevens_data.js",
    "importStyle": "{STEVENS_CONDITIONS}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "{\"strip_ring_size\": *, \"line_length_strip\": *, \"stable_line_length_strip\": *, \"distractor_rainbow\": *, \"distractor_square_red_hue\": *, \"distractor_square_red_lum\": *, \"distractor_square_red_chrom\": *, \"distractor_square_yellow_hue\": *, \"distractor_square_yellow_lum\": *, \"distractor_square_yellow_chrom\": *, \"distractor_square_blue_hue\": *, \"distractor_square_blue_lum\": *, \"distractor_square_blue_chrom\": *, \"distractor_square_green_hue\": *, \"distractor_square_green_lum\": *, \"distractor_square_green_chrom\": *, \"distractor_blue_shades\": *, \"distractor_red_shades\": *, \"distractor_yellow_shades\": *, \"distractor_control_shades\": *, \"hollow_scatter\": *, \"thin_hollow_scatter\": *, \"bullseye_scatter\": *, \"mix_point_styles\": *, \"point_styles_combined\": *, \"multi_size_scatter\": *, \"large_dot_sizes\": *, \"multi_color_scatter_combined\": *, \"multi_shape_scatter_combined\": *, \"multi_border_combined\": *, \"multi_luminance_scatter_combined\": *, \"multi_opacity_scatter_combined\": *, \"multi_size_scatter_combined\": *, \"decreasing_number_of_dots\": *, \"increasing_number_of_dots\": *, \"hybrid_multi_luminance_scatter\": *, \"test_hybrid_scatter\": *, \"multi_size_scatter_alternate\": *, \"visual_masking\": *, \"visual_masking_border\": *}"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "scripts/experiment-properties/data/constants/visual_search_data.js",
    "content": "export {VISUAL_SEARCH_BASE, VISUAL_SEARCH_CONDITIONS};\r\n\r\nconst VISUAL_SEARCH_BASE = {\r\n\r\n  foundational:\r\n    [\r\n        {distribution_type: \"random\", row: 36, col: 36, num_points: 10, alternate_scaling: true, target_color: 'BLUE', point_color: 'BLACK', axis_color: 'WHITE', text_color: 'BLACK', background_color: 'WHITE', point_size: 8, text_color: 'BLACK'},\r\n    \r\n        {distribution_type: \"random\", row: 36, col: 36, num_points: 10, alternate_scaling: true, target_color: 'BLUE', point_color: 'BLACK', axis_color: 'WHITE', text_color: 'BLACK', background_color: 'WHITE', point_size: 8, text_color: 'BLACK'},\r\n\r\n        {distribution_type: \"random\", row: 36, col: 36, num_points: 10, alternate_scaling: true, target_color: 'BLUE', point_color: 'BLACK', axis_color: 'WHITE', text_color: 'BLACK', background_color: 'WHITE', point_size: 8, text_color: 'BLACK'},\r\n\r\n        {distribution_type: \"random\", row: 36, col: 36, num_points: 10, alternate_scaling: true, target_color: 'BLUE', point_color: 'BLACK', axis_color: 'WHITE', text_color: 'BLACK', background_color: 'WHITE', point_size: 8, text_color: 'BLACK'},\r\n    ] \r\n}\r\n\r\nconst VISUAL_SEARCH_CONDITIONS = {\r\n\r\n    vs_blue_squares:\r\n    [\r\n        {target_color: 'BLUE', target_present: false, point_shape: \"square\", mix_by_attribute_targeted: {point_color: [\"#007ebc\", \"#43a4e6\"], num_target: 0}},\r\n\r\n        {target_color: 'BLUE', target_present: true, point_shape: \"square\", mix_by_attribute_targeted: {point_color: [\"#007ebc\", \"#005a95\"], num_target: 2}},\r\n\r\n        {target_color: 'BLUE', target_present: true, point_shape: \"square\", mix_by_attribute_targeted: {point_color: [\"#007ebc\", \"#43a4e6\"], num_target: 1}},\r\n\r\n        {target_color: 'BLUE', target_present: false, point_shape: \"square\", mix_by_attribute_targeted: {point_color: [\"#007ebc\", \"#005a95\"], num_target: 0}},\r\n    ]\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/constants/visual_search_data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "VISUAL_SEARCH_BASE",
    "memberof": "scripts/experiment-properties/data/constants/visual_search_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/visual_search_data.js~VISUAL_SEARCH_BASE",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/visual_search_data.js",
    "importStyle": "{VISUAL_SEARCH_BASE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *}"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "VISUAL_SEARCH_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/constants/visual_search_data.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/constants/visual_search_data.js~VISUAL_SEARCH_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/constants/visual_search_data.js",
    "importStyle": "{VISUAL_SEARCH_CONDITIONS}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"vs_blue_squares\": *}"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "content": "import {EXPERIMENT_BASES, EXPERIMENT_CONDITIONS, create_condition_dataset, create_design_condition_dataset} from \"/scripts/experiment-properties/data/data_controller.js\";\r\nimport {initialize_random_order} from \"/scripts/experiment-properties/balancing/generators/random_generator.js\";\r\n\r\nexport {CUSTOM_TRIAL_STRUCTURE_CONDITIONS, get_custom_subcondition};\r\n\r\n// Add condition here if it uses a non-custom trial-structure\r\n// (e.g. foundational, design), but programatically generates\r\n// subconditions.\r\nvar CUSTOM_TRIAL_STRUCTURE_CONDITIONS = {\r\n\tfoundational : [\r\n\t\t\"stable_line_length_strip\",\r\n\t\t\"line_length_strip\",\r\n\t\t\"strip_ring_size\"\r\n\t],\r\n    design : [\r\n\t\t// Distractor Diamond use data from the square subconditions change the shape to diamonds\r\n    \t\"distractor_diamond_square_red_hue\",\r\n    \t\"distractor_diamond_square_red_lum\",\r\n    \t\"distractor_diamond_square_red_chrom\",\r\n    \t\"distractor_diamond_square_yellow_hue\",\r\n    \t\"distractor_diamond_square_yellow_lum\",\r\n    \t\"distractor_diamond_square_yellow_chrom\",\r\n    \t\"distractor_diamond_square_blue_hue\",\r\n    \t\"distractor_diamond_square_blue_lum\",\r\n    \t\"distractor_diamond_square_blue_chrom\",\r\n    \t\"distractor_diamond_square_green_hue\",\r\n    \t\"distractor_diamond_square_green_lum\",\r\n    \t\"distractor_diamond_square_green_chrom\"\r\n    ],\r\n\tcustom: [\r\n\t]\r\n}\r\n\r\n/**\r\n * Controls which helper method to access depending on condition name.\r\n *\r\n * @param {object}   experiment\r\n */\r\nfunction get_custom_subcondition(experiment) {\r\n\r\n\tif (is_distractor_diamond_square(experiment.condition_name)){\r\n\t\treturn generate_distractor_diamond_square_subconditions(experiment);\r\n\t}\r\n\telse if (experiment.condition_name === \"distractor_multi\") {\r\n\t\treturn generate_distractor_multi_subconditions(experiment);\r\n\t}\r\n\telse if (experiment.condition_name === \"distractor_blue_shades\"   ||\r\n\t\t     experiment.condition_name === \"distractor_red_shades\"    ||\r\n\t\t     experiment.condition_name === \"distractor_yellow_shades\" ||\r\n\t\t     experiment.condition_name === \"distractor_control_shades\"){\r\n\t\treturn generate_distractor_shades_subconditions(experiment);\r\n\t}\r\n\telse if (experiment.condition_name.split(\"_\").includes(\"num\")\r\n\t\t\t&& experiment.condition_name.split(\"_\").includes(\"corr\")){\r\n\t\treturn generate_num_corr_subconditions(experiment);\r\n\t}\r\n\telse if (experiment.condition_name.split(\"_\").includes(\"strip\") || experiment.graph_type === \"strip\") {\r\n\t\treturn generate_strip_subconditions(experiment);\r\n\t}\r\n\t// else if (experiment.condition_name.split(\"_\").includes(\"multi\") || experiment.condition_name.split(\"_\").includes(\"hybrid\")) {\r\n\t// \treturn generate_hybrid_scatter_subconditions(experiment);\r\n\t// }\r\n\telse if (experiment.condition_name.split(\"_\").includes(\"visual\") && experiment.condition_name.split(\"_\").includes(\"masking\")){\r\n\t\treturn generate_visual_masking_subconditions(experiment);\r\n\t}\r\n\telse{\r\n\t\treturn generate_custom_conditon_from_base_data(experiment);\r\n\t}\t//console.error(\"condition name not found\");\r\n}\r\n\r\n/**\r\n * Checks if the condition name is a \"distractor_diamond_square\" one.\r\n *\r\n * @param   {object}   experiment\r\n * @return  {boolean}\r\n */\r\nfunction is_distractor_diamond_square(condition_name) {\r\n\r\n\tlet array = condition_name.split(\"_\");\r\n\tif (array[0] === \"distractor\" && array[1] === \"diamond\" && array[2] === \"square\") {\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n// GENERATORS HERE\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Generates a Custom Condition using the Custom Constants Data and the baseline experiment data (first of foundational)\r\n * Custom Constants Data overwrites Baseline Data if needed. Custom Condition Length is equal to Custom Data Length\r\n * @param {Object} experiment \r\n */\r\nfunction generate_custom_conditon_from_base_data(experiment){\r\n\tlet condition_name = experiment.condition_name;\r\n\tlet experiment_name = experiment.constructor.name;\r\n\tlet custom_subconditions = EXPERIMENT_CONDITIONS[experiment_name][condition_name];\r\n\tlet base_subcondition = EXPERIMENT_BASES[experiment_name][\"custom\"][0];\r\n\tlet custom_condition  = []\r\n\tfor(let i = 0; i < custom_subconditions.length; i++){\r\n\t\tlet subcondition = Object.assign({}, base_subcondition, custom_subconditions[i]);\r\n\t\tcustom_condition.push(subcondition);\r\n\t}\r\n\tconsole.log(custom_condition)\r\n\treturn custom_condition;\r\n}\r\n\r\n/**\r\n * Generates subconditions for distractor_diamond_square conditions\r\n * Takes the \"square\" condition data from the constants and changes the dist_shape to diamond\r\n *\r\n * @param   {object}   experiment\r\n */\r\nfunction generate_distractor_diamond_square_subconditions(experiment) {\r\n\r\n\tlet array = experiment.condition_name.split(\"_\");\r\n\tif (array.length !== 5) throw new Error(experiment.condition_name + \" is not a valid distractor_diamond_square condition.\");\r\n\r\n\tlet square_name = array[0] + \"_\" + array[2] + \"_\" + array[3] + \"_\" + array[4];\r\n\tlet experiment_name = experiment.constructor.name;\r\n\tlet trial_structure = experiment.trial_structure;\r\n\r\n\tlet subconditions = create_design_condition_dataset(EXPERIMENT_BASES[experiment_name][trial_structure], EXPERIMENT_CONDITIONS[experiment_name][square_name]);\r\n\r\n\tfor (let c of subconditions) {\r\n\t\tc[\"dist_shape\"] = \"diamond\";\r\n\r\n\t\t// Overwrite to opposing colors when dist_color = white\r\n\t\tif (c[\"dist_color\"] === \"WHITE\"){\r\n\t\t\t// If RED\r\n\t\t\tif (c[\"target_color\"] === \"#cd4c32\"){\r\n\t\t\t\tc[\"dist_color\"] = \"#007ebc\";\r\n\t\t\t}\r\n\t\t\t// If BLUE\r\n\t\t\telse if (c[\"target_color\"] === \"#007ebc\"){\r\n\t\t\t\tc[\"dist_color\"] = \"#cd4c32\";\r\n\t\t\t}\r\n\t\t\t// If YELLOW\r\n\t\t\telse if (c[\"target_color\"] === \"#dbc667\"){\r\n\t\t\t\tc[\"dist_color\"] = \"#20874a\";\r\n\t\t\t}\r\n\t\t\t// If GREEN\r\n\t\t\telse {\r\n\t\t\t\tc[\"dist_color\"] = \"#dbc667\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn subconditions;\r\n}\r\n\r\n/**\r\n * Generates subconditions for distractor_multi condition.\r\n *\r\n * @param   {object}   experiment\r\n */\r\nfunction generate_distractor_multi_subconditions(experiment) {\r\n\tconsole.log(\"multi\")\r\n\tlet condition_name = experiment.condition_name;\r\n\tlet experiment_name = experiment.constructor.name;\r\n\tlet subconditions = EXPERIMENT_CONDITIONS[experiment_name][condition_name];\r\n\r\n\t// Using the first 12 subconditions from the JND design:\r\n\tlet jnd_base_subconditions = EXPERIMENT_BASES[experiment_name][\"design\"].slice(1,13);\r\n\r\n\tlet dataset = create_condition_dataset(jnd_base_subconditions, subconditions);\r\n\r\n\tlet result = []\r\n\r\n\t// Doing each set 4 times\r\n\tfor (let i = 0; i < 4; i++) {\r\n\t\tresult = result.concat(dataset);\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Generates subconditions for distractor_shade conditions.\r\n *\r\n * @param   {object}   experiment\r\n */\r\nfunction generate_distractor_shades_subconditions(experiment) {\r\n\r\n\tlet condition_name = experiment.condition_name;\r\n\tlet experiment_name = experiment.constructor.name;\r\n\tlet subconditions = EXPERIMENT_CONDITIONS[experiment_name][condition_name];\r\n\r\n\t// Using the first 12 subconditions from the JND design:\r\n\tif (experiment_name === \"JND\"){\r\n\t\tlet jnd_base_subconditions = EXPERIMENT_BASES[\"JND\"][\"design\"].slice(1,13);\r\n\r\n\t\tlet dataset = create_condition_dataset(jnd_base_subconditions, subconditions);\r\n\r\n\t\treturn dataset;\r\n\t} else {\r\n\t\tlet stevens_base_subconditions = EXPERIMENT_BASES[\"Stevens\"][\"design\"].slice(1,2);\r\n\r\n\t\tlet dataset = create_condition_dataset(stevens_base_subconditions, subconditions);\r\n\r\n\t\treturn dataset;\r\n\t}\r\n}\r\n\r\n/**\r\n * Generates subconditions for numerosity-correlation conditions.\r\n *\r\n * @param   {object}   experiment\r\n */\r\nfunction generate_num_corr_subconditions(experiment) {\r\n\t// Get the distractor_ratio_pilot subconditions\r\n\tlet jnd_design_base = EXPERIMENT_BASES[experiment.constructor.name][\"design\"];\r\n\tconsole.log(experiment.constructor.name)\r\n\tlet dist_ratio_pilot_subcond = EXPERIMENT_CONDITIONS[experiment.constructor.name][\"distractor_ratio_pilot\"];\r\n\tconsole.log(jnd_design_base)\r\n\tconsole.log(dist_ratio_pilot_subcond)\r\n\r\n\tlet subconditions = create_design_condition_dataset(jnd_design_base, dist_ratio_pilot_subcond);\r\n\tlet base_set = subconditions.slice(0,3); // Getting the 0.3, 0.6, 0.9 assoc arrays\r\n\r\n\tlet BASE_NUMBER = [50, 100, 150];\r\n\tlet CORR_REF_START = [0.2, 0.5, 0.8];\r\n\tlet NUMERO_REF_START = [40, 90, 140];\r\n\r\n\tlet TASKS = [\"correlation\", \"numerosity\"];\r\n\tlet INITIAL_DIFFERENCE = {\"correlation\": 0.1, \"numerosity\": 10};\r\n\r\n\tlet NUM_INSTRUCTIONS = `<div align = 'center'>\r\n\t\t\t\t\t\t\t\t<font size = 10>\r\n\t\t\t\t\t\t\t\tWhich has <b>more points</b>?\r\n\t\t\t\t\t\t\t\t<br>\r\n\t\t\t\t\t\t\t\t<br>\r\n\t\t\t\t\t\t\t\tThe <font color = 'RED'>target</font> population on your right or left?\r\n\t\t\t\t\t\t\t\t</font>\r\n\t\t\t\t\t\t\t</div>`;\r\n\tlet CORR_INSTRUCTIONS = `<div align = 'center'>\r\n\t\t\t\t\t\t\t\t<font size = 10>\r\n\t\t\t\t\t\t\t\tWhich is <b>more correlated</b>?\r\n\t\t\t\t\t\t\t\t<br>\r\n\t\t\t\t\t\t\t\t<br>\r\n\t\t\t\t\t\t\t\tThe <font color = 'RED'>target</font> population on your right or left?\r\n\t\t\t\t\t\t\t\t</font>\r\n\t\t\t\t\t\t\t</div>`;\r\n\r\n\tlet result = [];\r\n\r\n\tfor (let task of TASKS) {\r\n\t\tfor (let base_num of BASE_NUMBER) {\r\n\t\t\tfor (let i = 0; i < base_set.length; i++) {\r\n\t\t\t\tlet subcondition = Object.assign({}, base_set[i]);\r\n\t\t\t\tsubcondition.num_points = base_num;\r\n\t\t\t\tsubcondition.task = task;\r\n\t\t\t\tsubcondition.target_color = '#cd4c32'; // RED\r\n\t\t\t\tsubcondition.point_color = '#cd4c32';\r\n\r\n\t\t\t\tif (subcondition.task === \"correlation\") {\r\n\t\t\t\t\tsubcondition.reference_start = CORR_REF_START[i];\r\n\t\t\t\t\tsubcondition.initial_difference = INITIAL_DIFFERENCE[\"correlation\"];\r\n\t\t\t\t\tsubcondition.subcondition_instructions = CORR_INSTRUCTIONS;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsubcondition.reference_start = NUMERO_REF_START[i];\r\n\t\t\t\t\tsubcondition.initial_difference = INITIAL_DIFFERENCE[\"numerosity\"];\r\n\t\t\t\t\tsubcondition.subcondition_instructions = NUM_INSTRUCTIONS;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (experiment.condition_name.split(\"_\").includes(\"distractor\")){\r\n\t\t\t\t\tsubcondition.dist_num_points = 100;\r\n\t\t\t\t\tsubcondition.dist_color = '#20874a'; // GREEN\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult.push(subcondition);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tconsole.log(result)\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Removes unnecessary graphical attributes point_color and point_size from strip conditions.\r\n *\r\n * @param   {object}   experiment\r\n */\r\nfunction generate_strip_subconditions(experiment) {\r\n\r\n\tlet subconditions = [];\r\n\r\n\tif (experiment.condition_name === \"base\") {\r\n\r\n\t\tsubconditions = EXPERIMENT_BASES[experiment.constructor.name][experiment.trial_structure];\r\n\r\n\t} else {\r\n\r\n\t\tsubconditions = EXPERIMENT_CONDITIONS[experiment.constructor.name][experiment.condition_name];\r\n     \tsubconditions = create_condition_dataset(EXPERIMENT_BASES[experiment.constructor.name][experiment.trial_structure], subconditions);\r\n\t}\r\n\r\n\tfor (let s of subconditions) {\r\n\t\tdelete s.point_color;\r\n\t\tdelete s.point_size;\r\n\t}\r\n\r\n\treturn subconditions;\r\n}\r\n\r\n/**\r\n * Generates subconditions for hybrid sandwich condition.\r\n *\r\n * @param   {object}   experiment\r\n */\r\nfunction generate_hybrid_scatter_subconditions(experiment) {\r\n\r\n\tlet condition_name = experiment.condition_name;\r\n\tlet experiment_name = experiment.constructor.name;\r\n\tlet subconditions = EXPERIMENT_CONDITIONS[experiment_name][condition_name];\r\n\t\r\n\tif (experiment_name === \"JND\") {\r\n\t\t// Using the first 3 subconditions from the JND design:\r\n\t\tlet jnd_base_subconditions = experiment.condition_name===\"test_hybrid_scatter\"&&!experiment.practice_end?EXPERIMENT_BASES[experiment_name][\"design\"].slice(0,10):EXPERIMENT_BASES[experiment_name][\"design\"].slice(0,3);\r\n\r\n\t\tconsole.log('hybrid trial')\r\n\r\n\t\tlet dataset = create_design_condition_dataset(jnd_base_subconditions, subconditions);\r\n\r\n\t\treturn dataset;\r\n\t} else if (experiment_name === \"Stevens\") {\r\n\t\tlet stevens_base_subconditions = experiment.condition_name===\"test_hybrid_scatter\"&&!experiment.practice_end?EXPERIMENT_BASES[experiment_name][\"design\"].slice(4,5):EXPERIMENT_BASES[experiment_name][\"design\"].slice(0,1); // custom Stevens test_hybrid should be 10 max trials\r\n\t\tlet dataset = create_design_condition_dataset(stevens_base_subconditions, subconditions);\r\n\r\n\t\treturn dataset;\r\n\t} else {\r\n\t\tconsole.log(\"experiment neither Stevens nor JND\");\r\n\t}\r\n}\r\n\r\nfunction generate_visual_masking_subconditions(experiment){\r\n\tlet condition_name = experiment.condition_name;\r\n\tlet experiment_name = experiment.constructor.name;\r\n\tlet subconditions = EXPERIMENT_CONDITIONS[experiment_name][condition_name];\r\n\tconsole.log(experiment);\r\n\tif (experiment_name === \"JND\") {\r\n\t\t// Using the first 3 subconditions from the JND design:\r\n\t\tlet jnd_base_subconditions = EXPERIMENT_BASES[experiment_name][\"design\"].slice(0,3);\r\n\r\n\t\tlet dataset = create_condition_dataset(jnd_base_subconditions, subconditions);\r\n\r\n\t\tlet result = []\r\n\r\n\t\t// Doing each set n times\r\n\t\tfor (let i = 0; i < 1; i++) {\r\n\t\t\tresult = result.concat(dataset);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}  else if (experiment_name === \"Stevens\") {\r\n\t\tlet stevens_base_subconditions = EXPERIMENT_BASES[experiment_name][\"design\"].slice(0,1); // custom Stevens test_hybrid should be 10 max trials\r\n\t\tlet dataset = create_condition_dataset(stevens_base_subconditions, subconditions);\r\n\r\n\t\treturn dataset;\r\n\t} else {\r\n\t\tconsole.log(\"experiment must be JND or Stevens\");\r\n\t}\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "is_distractor_diamond_square",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~is_distractor_diamond_square",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Checks if the condition name is a \"distractor_diamond_square\" one.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "generate_custom_conditon_from_base_data",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~generate_custom_conditon_from_base_data",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Generates a Custom Condition using the Custom Constants Data and the baseline experiment data (first of foundational)\nCustom Constants Data overwrites Baseline Data if needed. Custom Condition Length is equal to Custom Data Length",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "generate_distractor_diamond_square_subconditions",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~generate_distractor_diamond_square_subconditions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Generates subconditions for distractor_diamond_square conditions\nTakes the \"square\" condition data from the constants and changes the dist_shape to diamond",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "generate_distractor_multi_subconditions",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~generate_distractor_multi_subconditions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Generates subconditions for distractor_multi condition.",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "generate_distractor_shades_subconditions",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~generate_distractor_shades_subconditions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Generates subconditions for distractor_shade conditions.",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "generate_num_corr_subconditions",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~generate_num_corr_subconditions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Generates subconditions for numerosity-correlation conditions.",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "generate_strip_subconditions",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~generate_strip_subconditions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Removes unnecessary graphical attributes point_color and point_size from strip conditions.",
    "lineNumber": 286,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "generate_hybrid_scatter_subconditions",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~generate_hybrid_scatter_subconditions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": "Generates subconditions for hybrid sandwich condition.",
    "lineNumber": 313,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "generate_visual_masking_subconditions",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~generate_visual_masking_subconditions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "params": [
      {
        "name": "experiment",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "CUSTOM_TRIAL_STRUCTURE_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~CUSTOM_TRIAL_STRUCTURE_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": "{CUSTOM_TRIAL_STRUCTURE_CONDITIONS}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"foundational\": *, \"design\": *, \"custom\": *}"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "get_custom_subcondition",
    "memberof": "scripts/experiment-properties/data/custom_subcondition_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/custom_subcondition_generator.js~get_custom_subcondition",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/custom_subcondition_generator.js",
    "importStyle": "{get_custom_subcondition}",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "experiment",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "scripts/experiment-properties/data/data_controller.js",
    "content": "import {CUSTOM_TRIAL_STRUCTURE_CONDITIONS, get_custom_subcondition} from \"/scripts/experiment-properties/data/custom_subcondition_generator.js\";\r\nimport {JND_BASE, JND_CONDITIONS} from \"/scripts/experiment-properties/data/constants/jnd_data.js\";\r\nimport {STEVENS_BASE, STEVENS_CONDITIONS} from \"/scripts/experiment-properties/data/constants/stevens_data.js\";\r\nimport {HYBRID_BASE, HYBRID_CONDITIONS} from \"/scripts/experiment-properties/data/constants/hybrid_data.js\";\r\nimport {ESTIMATION_CONDITIONS} from \"/scripts/experiment-properties/data/constants/estimation_data.js\";\r\nimport {JND_RADIUS_BASE, JND_RADIUS_CONDITIONS} from \"/scripts/experiment-properties/data/constants/jnd_radius_data.js\";\r\nimport {NUMEROSITY_BASE, NUMEROSITY_CONDITIONS} from \"/scripts/experiment-properties/data/constants/numerosity_data.js\";\r\nimport {VISUAL_SEARCH_BASE, VISUAL_SEARCH_CONDITIONS} from \"/scripts/experiment-properties/data/constants/visual_search_data.js\";\r\nimport {SEQUENCING_BASE, SEQUENCING_CONDITIONS} from \"/scripts/experiment-properties/data/constants/sequencing_data.js\";\r\nimport {SEQUENCING_SIDE_BY_SIDE_BASE, SEQUENCING_SIDE_BY_SIDE_CONDITIONS} from \"/scripts/experiment-properties/data/constants/sequencing_side_by_side_data.js\";\r\nimport {SEQUENCING_SYMBOLS_BASE, SEQUENCING_SYMBOLS_CONDITIONS} from \"/scripts/experiment-properties/data/constants/sequencing_symbols_data.js\";\r\nimport {ENSEMBLE_AVERAGE_BASE, ENSEMBLE_AVERAGE_CONDITIONS} from \"./constants/ensemble_average_data.js\";\r\nimport { GRAPH_TYPES, GRAPH_FEATURES } from \"/config/graphing-config.js\";\r\nimport { EXPERIMENTS } from \"/config/experiments-config.js\";\r\nimport { DISTRIBUTION_TYPES } from \"../../../config/distribution-config.js\";\r\n\r\nexport { get_data,\r\n         get_data_subset,\r\n         create_condition_dataset,\r\n         create_design_condition_dataset,\r\n         EXPERIMENT_BASES,\r\n         EXPERIMENT_CONDITIONS };\r\n\r\nconst EXPERIMENT_BASES = {\r\n  \"JND\" : JND_BASE,\r\n  \"Stevens\" : STEVENS_BASE,\r\n  \"Hybrid\": HYBRID_BASE,\r\n  \"JND_Radius\" : JND_RADIUS_BASE,\r\n  \"Estimation\" : [],\r\n  \"Numerosity\" : NUMEROSITY_BASE,\r\n  \"Visual_Search\" : VISUAL_SEARCH_BASE,\r\n  \"Sequencing\" : SEQUENCING_BASE,\r\n  \"Sequencing_Side_by_Side\" : SEQUENCING_SIDE_BY_SIDE_BASE,\r\n  \"Sequencing_Symbols\": SEQUENCING_SYMBOLS_BASE,\r\n  \"Ensemble_Average\" : ENSEMBLE_AVERAGE_BASE\r\n};\r\n        \r\nconst EXPERIMENT_CONDITIONS = {\r\n  \"JND\" : JND_CONDITIONS,\r\n  \"Stevens\" : STEVENS_CONDITIONS,\r\n  \"Hybrid\": HYBRID_CONDITIONS,\r\n  \"JND_Radius\" : JND_RADIUS_CONDITIONS,\r\n  \"Estimation\" : ESTIMATION_CONDITIONS,\r\n  \"Numerosity\" : NUMEROSITY_CONDITIONS,\r\n  \"Visual_Search\" : VISUAL_SEARCH_CONDITIONS,\r\n  \"Sequencing\" : SEQUENCING_CONDITIONS,\r\n  \"Sequencing_Side_by_Side\" : SEQUENCING_SIDE_BY_SIDE_CONDITIONS,\r\n  \"Sequencing_Symbols\": SEQUENCING_SYMBOLS_CONDITIONS,\r\n  \"Ensemble_Average\" : ENSEMBLE_AVERAGE_CONDITIONS,\r\n};\r\n        \r\n\r\nconst EXPERIMENTS_WITH_DIRECT_DATA = [\"Estimation\", \"Ensemble_Average\"]\r\n\r\n/**\r\n * Retrieves the data for the corresponding experiment object.\r\n *\r\n * @param  {object}  experiment       Model object of the experiment \r\n *\r\n * @return {assoc[]} dataset\r\n */\r\nfunction get_data(experiment){\r\n  var dataset;\r\n\r\n  var trial_structure = experiment.trial_structure;\r\n  var graph_type = experiment.graph_type;\r\n  var condition = experiment.condition_name;\r\n  var experiment_name = experiment.constructor.name;\r\n\r\n  // Condition Data is Foundational Data from Experiment\r\n  let condition_name_keys = condition.split(\"_\");\r\n  if (condition_name_keys.includes(\"base\")){\r\n    if (!EXPERIMENT_BASES[experiment_name][trial_structure]) {\r\n      throw new Error (\"Base for \" + condition + \" does not exist.\");\r\n    }\r\n    dataset = EXPERIMENT_BASES[experiment_name][trial_structure];\r\n    check_dataset(experiment_name, graph_type, dataset)\r\n    return dataset;\r\n  }\r\n  // Condition Data for Experiment with no Base\r\n  if(EXPERIMENTS_WITH_DIRECT_DATA[experiment_name]){\r\n    if (!EXPERIMENT_CONDITIONS[experiment_name][condition]){\r\n      throw new Error (condition + \" is not supported.\");\r\n    }\r\n  \r\n    dataset = EXPERIMENT_CONDITIONS[experiment_name][condition];\r\n    check_dataset(experiment_name, graph_type, dataset)\r\n    return dataset;\r\n  }\r\n  // Data generated from Custom Case\r\n  if(CUSTOM_TRIAL_STRUCTURE_CONDITIONS[trial_structure].includes(condition)){\r\n    dataset = get_custom_subcondition(experiment);\r\n    check_dataset(experiment_name, graph_type, dataset)\r\n    return dataset;\r\n  }\r\n  // Data from Trial Structure\r\n  let subconditions = EXPERIMENT_CONDITIONS[experiment_name][condition];\r\n  switch(trial_structure){    \r\n    case \"foundational\":\r\n      check_subcondition_data(experiment_name,condition,trial_structure);\r\n      check_trial_structure(experiment_name,trial_structure)\r\n      dataset = create_foundational_condition_dataset(EXPERIMENT_BASES[experiment_name][trial_structure], subconditions);\r\n      break;\r\n    case \"design\":\r\n      check_trial_structure(experiment_name,trial_structure)\r\n      check_subcondition_data(experiment_name,condition,trial_structure);\r\n      dataset = create_design_condition_dataset(EXPERIMENT_BASES[experiment_name][trial_structure], subconditions);\r\n      break;\r\n    case \"custom\":\r\n      dataset = get_custom_subcondition(experiment);\r\n      break;\r\n    default:\r\n      throw new Error(`Trial Structure ${trial_structure} not supported.`)\r\n  }\r\n  check_dataset(experiment_name, graph_type, dataset)\r\n\r\n  return dataset;\r\n}\r\n\r\n/**\r\n * Checks if all subconditions have the necessary attributes to run the experiment.\r\n *\r\n * @param  experiment      {string}                 type of experiment\r\n *         graph_type.     {string}                 type of graph\r\n *         dataset         {array of JS objects}    dataset to check            \r\n */\r\nfunction check_dataset(experiment_name, graph_type, dataset) {\r\n\r\n  let name = \"\";\r\n  let graph_attributes = GRAPH_TYPES[graph_type][\"attributes\"];\r\n  let exp_attributes = EXPERIMENTS[experiment_name.toLowerCase()][\"attributes\"];\r\n  let dist_attributes = DISTRIBUTION_TYPES[\"coordinate_distribution\"][\"attributes\"];\r\n  let graph_feature_attributes = {};\r\n\r\n\r\n  let all_attributes = Object.assign({}, graph_attributes);\r\n  all_attributes = Object.assign(all_attributes, exp_attributes);\r\n  all_attributes = Object.assign(all_attributes, dist_attributes)\r\n  for(let key in GRAPH_FEATURES){\r\n    const feature_attributes = GRAPH_FEATURES[key][\"attributes\"];\r\n    all_attributes = Object.assign(all_attributes, feature_attributes)\r\n  }\r\n\r\n  for (let subcondition of dataset) {\r\n\r\n    // Check that each subcond has the necessary attributes to run the experiment\r\n    for (let attribute_key in EXPERIMENTS[experiment_name.toLowerCase()][\"attributes\"]){\r\n\r\n      let attribute = EXPERIMENTS[experiment_name.toLowerCase()][\"attributes\"][attribute_key];\r\n\r\n      // Check that conditions has all required attributes\r\n      if (subcondition[attribute_key] === undefined && attribute[\"required\"]){\r\n        throw new Error(\"Required attribute \" + attribute_key + \" was not found in the subcondition \" + JSON.stringify(subcondition));\r\n      }\r\n    }\r\n\r\n    for (let subcondition_key in subcondition) {\r\n\r\n      // Check that all attributes have been defined in either experiment or graphing config\r\n      if (all_attributes[subcondition_key] === undefined) {\r\n        throw new Error(\"Attribute \" + subcondition_key + \" has not been defined in config files.\");\r\n      }\r\n\r\n      // Check that if there is a valid_input, it is listed in the configs\r\n      if (Array.isArray(subcondition[subcondition_key])) { //If array, loop through values and check each\r\n\r\n        for (let value of subcondition[subcondition_key]) {\r\n          if (all_attributes[subcondition_key].valid_inputs \r\n            && !all_attributes[subcondition_key].valid_inputs.includes(value)){\r\n            throw new Error(\"Attribute \" + subcondition_key + \" has value \" + value + \" that is not a valid value. Valid values are: \" + all_attributes[subcondition_key].valid_inputs);\r\n          }\r\n        }\r\n\r\n      } else {\r\n        if (all_attributes[subcondition_key].valid_inputs \r\n          && !all_attributes[subcondition_key].valid_inputs.includes(subcondition[subcondition_key])){\r\n          throw new Error(\"Attribute \" + subcondition_key + \" has value \" + subcondition[subcondition_key] + \" that is not a valid value. Valid values are: \" + all_attributes[subcondition_key].valid_inputs);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction check_subcondition_data(experiment_name,condition){\r\n  if (!EXPERIMENT_CONDITIONS[experiment_name][condition]){\r\n    throw new Error (condition + \" is not supported.\");\r\n  }    \r\n}\r\n\r\nfunction check_trial_structure(experiment_name,trial_structure){\r\n  if(!EXPERIMENT_BASES[experiment_name][trial_structure]){\r\n    throw new Error ( trial_structure + \" is not supported.\");\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves a smaller dataset (4 subconditions) given experiment, trial structure and condition.\r\n *\r\n * @param {string} experiment experiment name\r\n * @param {string} trial_structure \"foundational\",\"design\",\"custom\"\r\n * @param {string} condition condition name\r\n * @returns {assoc[]} dataset\r\n */\r\nfunction get_data_subset(experiment, trial_structure, condition) {\r\n\r\n  var dataset = get_data(experiment, trial_structure, condition);\r\n\r\n  return dataset.slice(0, 4);\r\n}\r\n\r\n/**\r\n * Appends condition-specific data to the dataset.\r\n *\r\n * @param {assoc[]} base_data     dataset with base experiment constants \r\n * @param {assoc[]} condition_data condition set for that experiment\r\n * @returns {assoc[]} dataset\r\n */\r\nfunction create_condition_dataset(base_data, condition_data){\r\n  var condition_dataset = [];\r\n\r\n  if (condition_data.length % base_data.length != 0) {\r\n    console.log('bd length ', base_data.length)\r\n    console.log('cd length ', condition_data.length)\r\n\r\n    throw Error(\"Condition Data Length is not a multiple of Base Data Set Length.\");\r\n  }\r\n\r\n  for (let i = 0; i < condition_data.length; i++){\r\n    let j =  i % base_data.length;\r\n    let curr_subcondition_data = condition_data[i];\r\n    let curr_base_data = base_data[j];\r\n    //console.log(`Base Data [${j}] Condtion Data [${i}]`)\r\n    //console.log(curr_base_data,curr_subcondition_data)\r\n    let merged_data = Object.assign({},curr_base_data,curr_subcondition_data)\r\n    condition_dataset.push(merged_data);\r\n\r\n  }\r\n\r\n  // for (let i in base_data) {\r\n  //   let obj = Object.assign({}, base_data[i], condition_data[i]);\r\n  //   condition_dataset.push(obj);\r\n  //   console.log('base data ' , i, ' number ', base_data[i])\r\n  //   console.log('condition data ' , i, ' number ', condition_data[i])\r\n  // }\r\n\r\n  return condition_dataset;\r\n}\r\n\r\n/**\r\n * Creates non-base Foundational Condition Datasets. Condition Data must be\r\n * the same length as Foundational Data.\r\n * \r\n * @param {assoc} base_data \r\n * @param {assoc} condition_data \r\n * @returns {assoc} dataset\r\n */\r\nfunction create_foundational_condition_dataset(base_data, condition_data){\r\n  let base_length = base_data.length;\r\n  let condition_length = condition_data.length;\r\n  if (base_length != condition_length){\r\n    throw Error(\"Foundational Condition Data Length is not the same as Foundational Base Data Length\");\r\n  }\r\n  let condition_dataset = [];\r\n  for(let i = 0; i < base_length; i++){\r\n    let curr_subcondition_data = condition_data[i];\r\n    let curr_base_data = base_data[i];\r\n    let merged_data = Object.assign({},curr_base_data,curr_subcondition_data)\r\n    condition_dataset.push(merged_data);\r\n  }\r\n  return condition_dataset;\r\n}\r\n\r\n/**\r\n * Takes the base Design data and appends the Condition data to create design x block\r\n * Subcondition array. Total number of subconditions is base length x number of blocks.\r\n * Attributes redefined in the blocked data overwrite those in base data.\r\n * \r\n * @param {assoc[]} base_data \r\n * @param {assoc[]} blocked_condition_data \r\n * @returns {assoc[]} blocked_condition_dataset\r\n */\r\nfunction create_design_condition_dataset(base_data, blocked_condition_data){\r\n  let blocked_condition_dataset = [];\r\n  let base_length = base_data.length;\r\n  let number_of_blocks = blocked_condition_data.length;\r\n\r\n  for(let i = 0; i < number_of_blocks; i++){\r\n    for(let j = 0; j < base_length; j++){\r\n      let subcondition = Object.assign({}, base_data[j], blocked_condition_data[i]);\r\n      blocked_condition_dataset.push(subcondition);\r\n    }\r\n  }\r\n  return blocked_condition_dataset;\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/data/data_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "EXPERIMENTS_WITH_DIRECT_DATA",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~EXPERIMENTS_WITH_DIRECT_DATA",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "check_dataset",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~check_dataset",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": null,
    "description": "Checks if all subconditions have the necessary attributes to run the experiment.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "{string}                 type of experiment\n        graph_type.     {string}                 type of graph\n        dataset         {array of JS objects}    dataset to check"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "check_subcondition_data",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~check_subcondition_data",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [
      {
        "name": "experiment_name",
        "types": [
          "*"
        ]
      },
      {
        "name": "condition",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "check_trial_structure",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~check_trial_structure",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "params": [
      {
        "name": "experiment_name",
        "types": [
          "*"
        ]
      },
      {
        "name": "trial_structure",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "create_foundational_condition_dataset",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~create_foundational_condition_dataset",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": null,
    "description": "Creates non-base Foundational Condition Datasets. Condition Data must be\nthe same length as Foundational Data.",
    "lineNumber": 257,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc} dataset"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc"
        ],
        "spread": false,
        "optional": false,
        "name": "base_data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "assoc"
        ],
        "spread": false,
        "optional": false,
        "name": "condition_data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc"
      ],
      "spread": false,
      "description": "dataset"
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "get_data",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~get_data",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": "{get_data}",
    "description": "Retrieves the data for the corresponding experiment object.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "Model object of the experiment"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc[]"
      ],
      "spread": false,
      "description": "dataset"
    }
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "get_data_subset",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~get_data_subset",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": "{get_data_subset}",
    "description": "Retrieves a smaller dataset (4 subconditions) given experiment, trial structure and condition.",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc[]} dataset"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "experiment name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_structure",
        "description": "\"foundational\",\"design\",\"custom\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "condition name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc[]"
      ],
      "spread": false,
      "description": "dataset"
    }
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "create_condition_dataset",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~create_condition_dataset",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": "{create_condition_dataset}",
    "description": "Appends condition-specific data to the dataset.",
    "lineNumber": 218,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc[]} dataset"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc[]"
        ],
        "spread": false,
        "optional": false,
        "name": "base_data",
        "description": "dataset with base experiment constants"
      },
      {
        "nullable": null,
        "types": [
          "assoc[]"
        ],
        "spread": false,
        "optional": false,
        "name": "condition_data",
        "description": "condition set for that experiment"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc[]"
      ],
      "spread": false,
      "description": "dataset"
    }
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "create_design_condition_dataset",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~create_design_condition_dataset",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": "{create_design_condition_dataset}",
    "description": "Takes the base Design data and appends the Condition data to create design x block\nSubcondition array. Total number of subconditions is base length x number of blocks.\nAttributes redefined in the blocked data overwrite those in base data.",
    "lineNumber": 282,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc[]} blocked_condition_dataset"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc[]"
        ],
        "spread": false,
        "optional": false,
        "name": "base_data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "assoc[]"
        ],
        "spread": false,
        "optional": false,
        "name": "blocked_condition_data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc[]"
      ],
      "spread": false,
      "description": "blocked_condition_dataset"
    }
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "EXPERIMENT_BASES",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~EXPERIMENT_BASES",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": "{EXPERIMENT_BASES}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{\"JND\": *, \"Stevens\": *, \"Hybrid\": *, \"JND_Radius\": *, \"Estimation\": *, \"Numerosity\": *, \"Visual_Search\": *, \"Sequencing\": *, \"Sequencing_Side_by_Side\": *, \"Sequencing_Symbols\": *, \"Ensemble_Average\": *}"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "EXPERIMENT_CONDITIONS",
    "memberof": "scripts/experiment-properties/data/data_controller.js",
    "static": true,
    "longname": "scripts/experiment-properties/data/data_controller.js~EXPERIMENT_CONDITIONS",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/data/data_controller.js",
    "importStyle": "{EXPERIMENT_CONDITIONS}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "{\"JND\": *, \"Stevens\": *, \"Hybrid\": *, \"JND_Radius\": *, \"Estimation\": *, \"Numerosity\": *, \"Visual_Search\": *, \"Sequencing\": *, \"Sequencing_Side_by_Side\": *, \"Sequencing_Symbols\": *, \"Ensemble_Average\": *}"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "scripts/experiment-properties/distribution/distribution_controller.js",
    "content": "import { generateDistribution, generateRandomGaussian } from '/scripts/experiment-properties/distribution/gaussian_distribution_generator.js'\r\nimport { generateUniformDistribution, generateRandomUniform} from '/scripts/experiment-properties/distribution/uniform_distribution_generator.js'\r\nimport { DISTRIBUTION_TYPES } from '../../../config/distribution-config.js';\r\nexport {generate_initial_distribution, generate_adjusted_distribution, generate_random_distribution};\r\n\r\n/**\r\n * Generates the initial distribution depending on the type of distribution.\r\n * If no task is specified, defaults to using Gaussian.\r\n *\r\n * @return {object}            Adjusted coordinates\r\n */\r\nfunction generate_initial_distribution(constants){\r\n  let base_coordinates;\r\n  let distribution_attributes = generate_distribution_attributes_object(constants)\r\n\r\n  switch (distribution_attributes.distribution_type){\r\n    case \"gaussian\":\r\n      //console.log(\"Normal Distribution Generation\");\r\n      base_coordinates = generateDistribution(constants.base_correlation,\r\n                                              distribution_attributes.error,\r\n                                              distribution_attributes.num_points,\r\n                                              distribution_attributes.num_SD,\r\n                                              distribution_attributes.mean,\r\n                                              distribution_attributes.SD);\r\n      break;\r\n\r\n    case \"uniform\":\r\n      //console.log(\"Uniform Distribution Generation\");\r\n      base_coordinates = generateUniformDistribution(constants.base_correlation,\r\n                                                      distribution_attributes.error,\r\n                                                      distribution_attributes.num_points,\r\n                                                      distribution_attributes.num_SD,\r\n                                                      distribution_attributes.mean,\r\n                                                      distribution_attributes.SD);\r\n\r\n      break;\r\n   default:\r\n     console.log(\"Default Case\");\r\n     base_coordinates = generateDistribution(constants.base_correlation,\r\n                                             distribution_attributes.error,\r\n                                             distribution_attributes.num_points,\r\n                                             distribution_attributes.num_SD,\r\n                                             distribution_attributes.mean,\r\n                                             distribution_attributes.SD);\r\n     break;\r\n  }\r\n  return base_coordinates;\r\n\r\n}\r\n\r\n/**\r\n * Generates the adjusted distribution depending on the type of task.\r\n * If no task is specified, defaults to using correlation.\r\n * @param {object} constants\r\n * @param {number} adjusted_value\r\n * @return {object}            Adjusted coordinates\r\n */\r\nfunction generate_adjusted_distribution(constants, adjusted_value) {\r\n  let adjusted_coordinates;\r\n  let distribution_attributes = generate_distribution_attributes_object(constants)\r\n  switch (distribution_attributes.distribution_type){\r\n    case \"gaussian\":\r\n      //console.log(\"Normal Distribution Generation\");\r\n      adjusted_coordinates = generateDistribution(adjusted_value,\r\n                                                  distribution_attributes.error,\r\n                                                  distribution_attributes.num_points,\r\n                                                  distribution_attributes.num_SD,\r\n                                                  distribution_attributes.mean,\r\n                                                  distribution_attributes.SD);\r\n      break;\r\n\r\n    case \"uniform\":\r\n      //console.log(\"Uniform Distribution Generation\");\r\n      adjusted_coordinates = generateUniformDistribution(adjusted_value,\r\n                                                          distribution_attributes.error,\r\n                                                          distribution_attributes.num_points,\r\n                                                          distribution_attributes.num_SD,\r\n                                                          distribution_attributes.mean,\r\n                                                          distribution_attributes.SD);\r\n\r\n      break;\r\n   default:\r\n     //console.log(\"Default Case\");\r\n     adjusted_coordinates = generateDistribution(adjusted_value,\r\n                                                distribution_attributes.error,\r\n                                                distribution_attributes.num_points,\r\n                                                distribution_attributes.num_SD,\r\n                                                distribution_attributes.mean,\r\n                                                distribution_attributes.SD);\r\n     break;\r\n  }\r\n\r\n  return adjusted_coordinates;\r\n}\r\n\r\n/**\r\n * @param {Integer} num_points \r\n * @param {String} distribution_type \"gaussian\", \"uniform\"\r\n * @returns {{[random values]}} random points (0,1)\r\n */\r\nfunction generate_random_distribution(num_points, distribution_type){\r\n  let random_points;\r\n  switch (distribution_type){\r\n    case \"gaussian\":\r\n      random_points = generateRandomGaussian(num_points);\r\n      break;\r\n    case \"uniform\":\r\n      random_points = generateRandomUniform(num_points);\r\n      break;\r\n    default:\r\n      random_points = generateRandomGaussian(num_points);\r\n      break;\r\n  }\r\n  return random_points;\r\n}\r\n\r\n/**\r\n * Generates the distribution attributes based on the sub condition data if they are present or from \r\n * the default valoues in DISTRIBUTION_TYPES if they are not.\r\n * @param {assoc array} constants \r\n * @returns {assoc array} \r\n */\r\nfunction generate_distribution_attributes_object(constants){\r\n  let sub_condition_distribution_attributes = {};\r\n  for(let key in DISTRIBUTION_TYPES[\"coordinate_distribution\"][\"attributes\"]){\r\n    let curr_attribute = DISTRIBUTION_TYPES[\"coordinate_distribution\"][\"attributes\"][key];\r\n    sub_condition_distribution_attributes[key] = (constants[key] == undefined ? curr_attribute[\"default\"] : constants[key]);\r\n\r\n  }\r\n  return sub_condition_distribution_attributes;\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/distribution/distribution_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "generate_distribution_attributes_object",
    "memberof": "scripts/experiment-properties/distribution/distribution_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/distribution_controller.js~generate_distribution_attributes_object",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/distribution_controller.js",
    "importStyle": null,
    "description": "Generates the distribution attributes based on the sub condition data if they are present or from \nthe default valoues in DISTRIBUTION_TYPES if they are not.",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc array} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc array"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "generate_initial_distribution",
    "memberof": "scripts/experiment-properties/distribution/distribution_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/distribution_controller.js~generate_initial_distribution",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/distribution_controller.js",
    "importStyle": "{generate_initial_distribution}",
    "description": "Generates the initial distribution depending on the type of distribution.\nIf no task is specified, defaults to using Gaussian.",
    "lineNumber": 12,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Adjusted coordinates"
    },
    "params": [
      {
        "name": "constants",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "generate_adjusted_distribution",
    "memberof": "scripts/experiment-properties/distribution/distribution_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/distribution_controller.js~generate_adjusted_distribution",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/distribution_controller.js",
    "importStyle": "{generate_adjusted_distribution}",
    "description": "Generates the adjusted distribution depending on the type of task.\nIf no task is specified, defaults to using correlation.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "adjusted_value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Adjusted coordinates"
    }
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "generate_random_distribution",
    "memberof": "scripts/experiment-properties/distribution/distribution_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/distribution_controller.js~generate_random_distribution",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/distribution_controller.js",
    "importStyle": "{generate_random_distribution}",
    "description": "",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{[random values]}} random points (0,1)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "num_points",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "distribution_type",
        "description": "\"gaussian\", \"uniform\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{[random values]}"
      ],
      "spread": false,
      "description": "random points (0,1)"
    }
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "content": "export {generateDistribution};\r\nexport {transformPoints};\r\nexport {readjustPoints};\r\nexport {prepare_coordinates};\r\nexport {generateRandomGaussian};\r\nexport {random_bm};\r\nexport {pointNotWithinRequiredStdDevs};\r\nexport {correlationNotWithinError};\r\nexport {getPearsonCorrelation}\r\n\r\nconst TRIAL_LIMIT = 250;\r\n\r\n/**\r\n * \r\n * @param {float} correlation \r\n * @param {float} error \r\n * @param {int} size \r\n * @param {float} numsd \r\n * @param {float} mean \r\n * @param {float} sd \r\n * @returns {{x_values: [], y_values: []}} normally distrubuted correlated coordinates\r\n */\r\nfunction generateDistribution(correlation, error, size, numsd, mean, sd){\r\n  // dynamicallyLoadScript(MATHJS_URL);\r\n  var coordinates = {x_values: [], y_values: []};\r\n  var overshootSize = size + 20; // Generating > size will guarantee we have\r\n                                 // a distribution of the speciied size later.\r\n\r\n  var done = true;\r\n  // Initialize the points and make sure the correlation is in an acceptable error range.\r\n  // Restart from scratch if adjusting for the error value is taking too long.\r\n  do {\r\n      // Reset coordinates:\r\n      coordinates = {x_values: [], y_values: []};\r\n\r\n      initializePoints(coordinates, correlation, overshootSize, numsd, mean, sd);\r\n      done = adjustPointsForError(coordinates, correlation, error, overshootSize, numsd, mean, sd);\r\n  } while(done == false);\r\n\r\n  // Transformation into range [0, 1]\r\n  transformPoints(coordinates, mean, sd);\r\n  readjustPoints(coordinates, correlation, error, overshootSize, numsd, mean, sd);\r\n\r\n  // Since this is code ported from the java codebase, coordinates are plotted\r\n  // so that origin as at the top left (this makes the distribution negative instead\r\n  // of positive). To force it to be positive, we flip the whole distribution\r\n  // across y axis, then add 1 to move it into 1st quadrant.\r\n  for (let i = 0; i<coordinates.y_values.length; i++) {\r\n    coordinates.y_values[i] = coordinates.y_values[i] * (-1) + 1;\r\n  }\r\n\r\n  let prepared_coordinates = prepare_coordinates(coordinates, size);\r\n\r\n  // Author: Jake\r\n  // Date: Feb 4, 2021\r\n  // Description: Test to check whether generated coordinates are outside the graph\r\n  // for (const coordinate of prepared_coordinates) {\r\n  //   if (coordinate[0] < 0 || coordinate[0] > 1 || coordinate[1] < 0 || coordinate[1] > 1) {\r\n  //       throw Error (`invalid coordinate of x = ${coordinate[0]} and y = ${coordinate[1]}`)\r\n  //   }\r\n  // }\r\n\r\n  return prepared_coordinates;\r\n}\r\n\r\n/**\r\n * Generates normally distributed points in the (0,1) range\r\n * @param {Integer} num_points \r\n * @returns {[random values]}\r\n */\r\nfunction generateRandomGaussian(num_points){\r\n  let random_points = [];\r\n  for (let i = 0; i < num_points; i++){\r\n    let num = random_bm();\r\n    num = num / 10.0 + 0.5; // Translate to 0 -> 1\r\n    if (num > 1 || num < 0) return generateRandomGaussian(num_points) // resample between 0 and 1\r\n    random_points.push(num);\r\n  }\r\n  //console.log(random_points)\r\n  return random_points;\r\n}\r\n\r\n\r\n/**\r\n* Converts the coordinates into this format for d3:\r\n* [ [x1, y1], [x2, y2] ... [xn, yn] ]\r\n* And samples the distribution for the specified num_points.\r\n*\r\n* @param coordinates { {x_values: [], y_values: []} }\r\n*        num_points {integer}\r\n* @return output_coordinates { [x1, y1], [x2, y2] ... }\r\n*/\r\nfunction prepare_coordinates(coordinates, num_points){\r\n\r\n  var array = [];\r\n  var reorganized_coordinates = [];\r\n\r\n  for (let i = 0; i < coordinates.x_values.length; i++){\r\n    array.push(coordinates.x_values[i]);\r\n    array.push(coordinates.y_values[i]);\r\n\r\n    reorganized_coordinates.push(array);\r\n    array = [];\r\n  }\r\n\r\n  var output_coordinates = sample_coordinates(reorganized_coordinates, num_points);\r\n\r\n  return output_coordinates;\r\n}\r\n\r\n/**\r\n* Randomly picks x number of points from the distribution\r\n* where x = num_points.\r\n*\r\n* @param coordinates { [x1, y1], [x2, y2] ... }\r\n*        num_points {integer}\r\n* @return output_coordinates with size num_points { [x1, y1], [x2, y2] ... }\r\n*/\r\nfunction sample_coordinates(coordinates, num_points){\r\n  var output_coordinates = [];\r\n\r\n  for (let i = num_points; i > 0; i-- ) {\r\n    var random_coordinate = coordinates.splice(Math.floor(Math.random() * (i + 1)), 1)[0];\r\n    output_coordinates.push(random_coordinate);\r\n  }\r\n\r\n  return output_coordinates;\r\n}\r\n\r\nfunction initializePoints(coordinates, correlation, size, numsd, mean, sd){\r\n  var xVal;\r\n  var x2Val;\r\n  var yVal;\r\n\r\n  for (let i = 0; i < size; i++) {\r\n    do {\r\n        xVal = random_bm();\r\n        x2Val = random_bm();\r\n\r\n        // formula for generating gaussian distribution: y = p*x + sqrt(1-p^2)*(x2)\r\n        yVal = (correlation * xVal) + (Math.sqrt(1 - (correlation * correlation)) * x2Val);\r\n    } while (pointNotWithinRequiredStdDevs(xVal, yVal, numsd));\r\n    coordinates.x_values.push(xVal);\r\n    coordinates.y_values.push(yVal);\r\n  }\r\n}\r\n\r\nfunction adjustPointsForError(coordinates, correlation, error, size, numsd, mean, sd) {\r\n\r\n  var currTrial = 0;\r\n\r\n  // Try to correct the correlation value, up to a maximum of TRIAL_LIMIT trials.\r\n  while (correlationNotWithinError(coordinates, correlation, error) && (currTrial < TRIAL_LIMIT)) {\r\n    currTrial += 1;\r\n    coordinates.x_values.splice(size - 1, 1);\r\n    coordinates.y_values.splice(size - 1, 1);\r\n    var x;\r\n    var x2;\r\n    var y;\r\n    do {\r\n      x = random_bm();\r\n      x2 = random_bm();\r\n      y = (correlation * x) + (Math.sqrt(1 - (correlation * correlation)) * x2);\r\n    } while (pointNotWithinRequiredStdDevs(x, y, numsd));\r\n    coordinates.x_values.push(x);\r\n    coordinates.y_values.push(y);\r\n  }\r\n  return !(correlationNotWithinError(coordinates, correlation, error));\r\n}\r\n\r\n// Replaces the points that are outside of the [0,1] range.\r\nfunction readjustPoints(coordinates, correlation, error, size, numsd, mean, sd) {\r\n\r\n  var temp_coordinates = {x_values: [], y_values: []};\r\n  var attempsLimit = 500;\r\n\r\n  for (let i = 0; i<size; i++) {\r\n    if (pointNotWithinRequiredStdDevsLong(coordinates.x_values[i], coordinates.y_values[i], numsd, mean, sd)){\r\n      coordinates.x_values.splice(i, 1);\r\n      coordinates.y_values.splice(i, 1);\r\n      var x;\r\n      var x2;\r\n      var y;\r\n\r\n      var attempts = 0;\r\n      while (attempts < attempsLimit){\r\n        x = random_bm();\r\n        x2 = random_bm();\r\n        y = (correlation * x) + (Math.sqrt(1 - (correlation * correlation)) * x2);\r\n        x = x*sd + mean;\r\n        y = y*sd + mean;\r\n\r\n        if (i > 0) {\r\n          temp_coordinates.x_values = coordinates.x_values.slice(0, i);\r\n          temp_coordinates.y_values = coordinates.y_values.slice(0, i);\r\n\r\n          temp_coordinates.x_values[i] = x;\r\n          temp_coordinates.y_values[i] = y;\r\n        }\r\n\r\n        if (!pointNotWithinRequiredStdDevsLong(x, y, numsd, mean, sd) && (i > 0) &&\r\n            !correlationNotWithinError(temp_coordinates, correlation, error)){\r\n          break;\r\n        }\r\n\r\n        attempts++;\r\n      }\r\n\r\n      coordinates.x_values[i] = x;\r\n      coordinates.y_values[i] = y;\r\n    }\r\n\r\n    // If number of attemps reached the limit, it is very likely that at least one point will be generated outside the graph.\r\n    // In this case, clear all the points generated and restart generating the points from the start\r\n    if (attempts == attempsLimit) {\r\n      // console.log(\"Reached max number of attempts to generate a graph without a point outside the boundary of [0, 1]\");\r\n      // console.log(\"New coordinates will be generated\");\r\n      temp_coordinates = {x_values: [], y_values: []};\r\n      attempts = 0;\r\n      // Start the for loop again\r\n      i = -1;\r\n    }\r\n  }\r\n\r\n  /*\r\n  If, after replacing the points, the correlation is outside of the error thresholds, regenerate the entire\r\n  distribution\r\n   */\r\n  //if (correlationNotWithinError(coordinates, correlation, error)) {\r\n    //coordinates = {x_values: [], y_values: []};\r\n    //generateDistribution(correlation, error, size, numsd, mean, sd);\r\n  //}\r\n}\r\n\r\nfunction pointNotWithinRequiredStdDevs(x, y, numsd){\r\n  return pointNotWithinRequiredStdDevsLong(x, y, numsd, 0, 1);\r\n}\r\n\r\nfunction pointNotWithinRequiredStdDevsLong(x, y, numsd, mean, sd){\r\n\r\n  var leftThreshold = mean - numsd*sd;\r\n  var rightThreshold = mean + numsd*sd;\r\n\r\n  return (x < leftThreshold) || (x > rightThreshold) || (y < leftThreshold) || (y > rightThreshold);\r\n}\r\n\r\nfunction correlationNotWithinError(coordinates, correlation, error){\r\n  return Math.abs(correlation - getPearsonCorrelation(coordinates.x_values, coordinates.y_values)) > error;\r\n}\r\n\r\nfunction transformPoints(coordinates, mean, sd) {\r\n\r\n    /** Calculate the needed x- and y- scale/translation amount\r\n     * by using the formulas for:\r\n     *         mean change: newMeanX = scaleX*meanX+translateX\r\n     *             stdev change: newStdevX = scaleX*stdevX\r\n     */\r\n    var scaleX = sd/math.std(coordinates.x_values);\r\n    var scaleY = sd/math.std(coordinates.y_values);\r\n    var translateX = mean - math.mean(coordinates.x_values)*scaleX;\r\n    var translateY = mean - math.mean(coordinates.y_values)*scaleY;\r\n    scalePoints(coordinates,scaleX,scaleY);\r\n    translatePoints(coordinates,translateX,translateY);\r\n}\r\n\r\n// Scales the points in a distribution with the given x and y scale values.\r\nfunction scalePoints(coordinates, scaleX, scaleY) {\r\n  for (let i = 0; i<coordinates.x_values.length; i++) {\r\n    coordinates.x_values[i] = coordinates.x_values[i] * scaleX;\r\n    coordinates.y_values[i] = coordinates.y_values[i] * scaleY;\r\n  }\r\n}\r\n\r\n// Translates the points in a distribution with the given x and y translate values.\r\nfunction translatePoints(coordinates, x, y) {\r\n  for (let i = 0; i<coordinates.x_values.length; i++) {\r\n    coordinates.x_values[i] = coordinates.x_values[i] + x;\r\n    coordinates.y_values[i] = 1 - (coordinates.y_values[i] + y);\r\n  }\r\n}\r\n\r\n// Returns Pearson Correlation Coefficient.\r\n// SOURCE: https://memory.psych.mun.ca/tech/js/correlation.shtml\r\nfunction getPearsonCorrelation(x, y) {\r\n  var shortestArrayLength = 0;\r\n\r\n  if(x.length == y.length) {\r\n      shortestArrayLength = x.length;\r\n  } else if(x.length > y.length) {\r\n      shortestArrayLength = y.length;\r\n      console.error('x has more items in it, the last ' + (x.length - shortestArrayLength) + ' item(s) will be ignored');\r\n  } else {\r\n      shortestArrayLength = x.length;\r\n      console.error('y has more items in it, the last ' + (y.length - shortestArrayLength) + ' item(s) will be ignored');\r\n  }\r\n\r\n  var xy = [];\r\n  var x2 = [];\r\n  var y2 = [];\r\n\r\n  for(var i=0; i<shortestArrayLength; i++) {\r\n      xy.push(x[i] * y[i]);\r\n      x2.push(x[i] * x[i]);\r\n      y2.push(y[i] * y[i]);\r\n  }\r\n\r\n  var sum_x = 0;\r\n  var sum_y = 0;\r\n  var sum_xy = 0;\r\n  var sum_x2 = 0;\r\n  var sum_y2 = 0;\r\n\r\n  for(var i=0; i< shortestArrayLength; i++) {\r\n      sum_x += x[i];\r\n      sum_y += y[i];\r\n      sum_xy += xy[i];\r\n      sum_x2 += x2[i];\r\n      sum_y2 += y2[i];\r\n  }\r\n\r\n  var step1 = (shortestArrayLength * sum_xy) - (sum_x * sum_y);\r\n  var step2 = (shortestArrayLength * sum_x2) - (sum_x * sum_x);\r\n  var step3 = (shortestArrayLength * sum_y2) - (sum_y * sum_y);\r\n  var step4 = Math.sqrt(step2 * step3);\r\n  var answer = step1 / step4;\r\n\r\n  return answer;\r\n}\r\n\r\n/**\r\n * Box-Muller transform for normal random value with mean = 0\r\n * Value is changed to (0,1) domain in later functions\r\n * SOURCE: https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa\r\n * @returns {float}\r\n */\r\nfunction random_bm() {\r\n  var u = 0, v = 0;\r\n  while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n  while(v === 0) v = Math.random();\r\n  let num = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\r\n  return num\r\n}\r\n\r\nfunction dynamicallyLoadScript(url) {\r\n  var script = document.createElement(\"script\"); // Make a script DOM node\r\n  script.src = url; // Set it's src to the provided URL\r\n\r\n  document.head.appendChild(script); // Add it to the end of the head section of the page (could change 'head' to 'body' to add it to the end of the body section instead)\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "TRIAL_LIMIT",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~TRIAL_LIMIT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "sample_coordinates",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~sample_coordinates",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": "Randomly picks x number of points from the distribution\nwhere x = num_points.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": "{ [x1, y1], [x2, y2] ... }\n       num_points {integer}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "output_coordinates with size num_points { [x1, y1], [x2, y2] ... }"
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "initializePoints",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~initializePoints",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "correlation",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "adjustPointsForError",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~adjustPointsForError",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "correlation",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "pointNotWithinRequiredStdDevsLong",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~pointNotWithinRequiredStdDevsLong",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "scalePoints",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~scalePoints",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "scaleX",
        "types": [
          "*"
        ]
      },
      {
        "name": "scaleY",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "translatePoints",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~translatePoints",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "dynamicallyLoadScript",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~dynamicallyLoadScript",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 344,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "generateDistribution",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~generateDistribution",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": "{generateDistribution}",
    "description": "",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{x_values: [], y_values: []}} normally distrubuted correlated coordinates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "correlation",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "numsd",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "mean",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "sd",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{x_values: [], y_values: []}"
      ],
      "spread": false,
      "description": "normally distrubuted correlated coordinates"
    }
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "transformPoints",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~transformPoints",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": "{transformPoints}",
    "description": null,
    "lineNumber": 251,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "readjustPoints",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~readjustPoints",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": "{readjustPoints}",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "correlation",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "prepare_coordinates",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~prepare_coordinates",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": "{prepare_coordinates}",
    "description": "Converts the coordinates into this format for d3:\n[ [x1, y1], [x2, y2] ... [xn, yn] ]\nAnd samples the distribution for the specified num_points.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": "{ {x_values: [], y_values: []} }\n       num_points {integer}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "output_coordinates { [x1, y1], [x2, y2] ... }"
    }
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "generateRandomGaussian",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~generateRandomGaussian",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": "{generateRandomGaussian}",
    "description": "Generates normally distributed points in the (0,1) range",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{[random values]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "num_points",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[random values]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "random_bm",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~random_bm",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": "{random_bm}",
    "description": "Box-Muller transform for normal random value with mean = 0\nValue is changed to (0,1) domain in later functions\nSOURCE: https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa",
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{float}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "pointNotWithinRequiredStdDevs",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~pointNotWithinRequiredStdDevs",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": "{pointNotWithinRequiredStdDevs}",
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "correlationNotWithinError",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~correlationNotWithinError",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": "{correlationNotWithinError}",
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "correlation",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "getPearsonCorrelation",
    "memberof": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/gaussian_distribution_generator.js~getPearsonCorrelation",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/gaussian_distribution_generator.js",
    "importStyle": "{getPearsonCorrelation}",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "scripts/experiment-properties/distribution/random_distribution_generator.js",
    "content": "export {generateRandomDistribution};\r\n/**\r\n * Generates a random population, that can exclude a coordinate set if desired.\r\n *\r\n * @param {int} row                    The number of possible unique x coordinates the points can land on\r\n * @param {int} col                    Same as above but for y coordinates\r\n * @param {int} num_points             The number of target points to be plotted\r\n * @param {array} excluding_coordinates Set this to null if do not want to exclude anything\r\n *                              \r\n * @return { [ [x1, y1], [x2, y2] ... ]}coordinates         \r\n */\r\nfunction generateRandomDistribution(row, col, num_points, excluding_coordinates) {\r\n\r\n    let coordinates = [];\r\n    while (coordinates.length < num_points) {\r\n        let coord = generate_random_coordinate(row, col);\r\n\r\n        if (!coordinates.includes(coord)){\r\n            if (excluding_coordinates === null){\r\n                coordinates.push(coord);\r\n            } else if (!excluding_coordinates.includes(coord)) {\r\n                coordinates.push(coord);\r\n            }\r\n        }\r\n    }\r\n    return coordinates;\r\n}\r\n\r\n/**\r\n * Generates random coordinate given row and column values.\r\n *\r\n * @param  row                  {int}\r\n *         col                  {int}\r\n *\r\n * @return [row, col] (JSON stringified so can do object comparisons)\r\n */\r\nfunction generate_random_coordinate(row, col) {\r\n    let x = get_random_int(row);\r\n    let y = get_random_int(col);\r\n\r\n    return [x,y];\r\n}\r\n\r\n/**\r\n * Generates random integer given max value.\r\n *\r\n * @param  max                   {int}\r\n * @return integer\r\n */\r\nfunction get_random_int(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\n/**\r\n* Converts the coordinates into this format for d3:\r\n* [ [x1, y1], [x2, y2] ... [xn, yn] ]\r\n* And samples the distribution for the specified num_points.\r\n*\r\n* @param coordinates { {x_values: [], y_values: []} }\r\n*        num_points {integer}\r\n* @return output_coordinates { [x1, y1], [x2, y2] ... }\r\n*/\r\nfunction prepare_coordinates(coordinates, num_points){\r\n\r\n    var array = [];\r\n    var reorganized_coordinates = [];\r\n  \r\n    for (let i = 0; i < coordinates.x_values.length; i++){\r\n      array.push(coordinates.x_values[i]);\r\n      array.push(coordinates.y_values[i]);\r\n  \r\n      reorganized_coordinates.push(array);\r\n      array = [];\r\n    }\r\n    return reorganized_coordinates;\r\n  }\r\n\r\n/**\r\n* Randomly picks x number of points from the distribution\r\n* where x = num_points\r\n* Method is currently unused but kept in case of use for further extension\r\n* @param coordinates { [x1, y1], [x2, y2] ... }\r\n*        num_points {integer}\r\n* @return output_coordinates with size num_points { [x1, y1], [x2, y2] ... }\r\n*/\r\nfunction sample_coordinates(coordinates, num_points){\r\n    var output_coordinates = [];\r\n  \r\n    for (let i = num_points; i > 0; i-- ) {\r\n      var random_coordinate = coordinates.splice(Math.floor(Math.random() * (i + 1)), 1)[0];\r\n      output_coordinates.push(random_coordinate);\r\n    }\r\n  \r\n    return output_coordinates;\r\n  }",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/distribution/random_distribution_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "generate_random_coordinate",
    "memberof": "scripts/experiment-properties/distribution/random_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/random_distribution_generator.js~generate_random_coordinate",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/random_distribution_generator.js",
    "importStyle": null,
    "description": "Generates random coordinate given row and column values.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "{int}\n        col                  {int}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "[row, col] (JSON stringified so can do object comparisons)"
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "get_random_int",
    "memberof": "scripts/experiment-properties/distribution/random_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/random_distribution_generator.js~get_random_int",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/random_distribution_generator.js",
    "importStyle": null,
    "description": "Generates random integer given max value.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "{int}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "integer"
    },
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "prepare_coordinates",
    "memberof": "scripts/experiment-properties/distribution/random_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/random_distribution_generator.js~prepare_coordinates",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/random_distribution_generator.js",
    "importStyle": null,
    "description": "Converts the coordinates into this format for d3:\n[ [x1, y1], [x2, y2] ... [xn, yn] ]\nAnd samples the distribution for the specified num_points.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": "{ {x_values: [], y_values: []} }\n       num_points {integer}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "output_coordinates { [x1, y1], [x2, y2] ... }"
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "sample_coordinates",
    "memberof": "scripts/experiment-properties/distribution/random_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/random_distribution_generator.js~sample_coordinates",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/random_distribution_generator.js",
    "importStyle": null,
    "description": "Randomly picks x number of points from the distribution\nwhere x = num_points\nMethod is currently unused but kept in case of use for further extension",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": "{ [x1, y1], [x2, y2] ... }\n       num_points {integer}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "output_coordinates with size num_points { [x1, y1], [x2, y2] ... }"
    },
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "generateRandomDistribution",
    "memberof": "scripts/experiment-properties/distribution/random_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/random_distribution_generator.js~generateRandomDistribution",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/random_distribution_generator.js",
    "importStyle": "{generateRandomDistribution}",
    "description": "Generates a random population, that can exclude a coordinate set if desired.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "The number of possible unique x coordinates the points can land on"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "Same as above but for y coordinates"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "num_points",
        "description": "The number of target points to be plotted"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "excluding_coordinates",
        "description": "Set this to null if do not want to exclude anything"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "{ [ [x1, y1], [x2, y2] ... ]}coordinates"
    }
  },
  {
    "__docId__": 201,
    "kind": "file",
    "name": "scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "content": "\r\nexport {generateUniformDistribution, generateRandomUniform};\r\nimport {transformPoints, prepare_coordinates, random_bm, pointNotWithinRequiredStdDevs, correlationNotWithinError} from '/scripts/experiment-properties/distribution/gaussian_distribution_generator.js';\r\n\r\nconst TRIAL_LIMIT = 250;\r\n\r\nfunction generateUniformDistribution(correlation, error, size, numsd, mean, sd){\r\n\r\n  // dynamicallyLoadScript(MATHJS_URL);\r\n  var coordinates = {x_values: [], y_values: []};\r\n  var overshootSize = size + 20; // Generating > size will guarantee we have\r\n                                 // a distribution of the speciied size later.\r\n\r\n  var done = true;\r\n  // Initialize the points and make sure the correlation is in an acceptable error range.\r\n  // Restart from scratch if adjusting for the error value is taking too long.\r\n  do {\r\n      // Reset coordinates:\r\n      coordinates = {x_values: [], y_values: []};\r\n\r\n      initializeUniformPoints(coordinates, correlation, overshootSize, numsd, mean, sd);\r\n      done = adjustUniformPointsForError(coordinates, correlation, error, overshootSize, numsd, mean, sd);\r\n  } while(done == false);\r\n\r\n\r\n  let prepared_coordinates = prepare_coordinates(coordinates, size);\r\n\r\n  return prepared_coordinates;\r\n}\r\n\r\n\r\n/**\r\n * Method used for generating uncorrelated random points in (0,1) range\r\n * @param {int} num_points \r\n * @returns {array}\r\n */\r\nfunction generateRandomUniform(num_points){\r\n  let random_points = [];\r\n  for (let i = 0; i < num_points; i++){\r\n    var u = 0;\r\n    while(u === 0) u = Math.random(); //Converting [0,1) to (0,1) \r\n    random_points.push(u);\r\n  }\r\n  //console.log(random_points)\r\n  return random_points;\r\n\r\n}\r\n\r\nfunction initializeUniformPoints(coordinates, correlation, size, numsd, mean, sd){\r\n  var xVal;\r\n  var x2Val;\r\n  var yVal;\r\n  // https://pstblog.com/2017/10/07/correlated-randoms\r\n  // Method described creates two correlated normal points and transforms them to uniform\r\n\r\n  for (let i = 0; i < size; i++){\r\n    do{\r\n      xVal = random_bm(); // Cholesky does not preserve shape for non-normal\r\n      x2Val = random_bm();\r\n      // Simplified cholesky matrix multiplication to correlate two values\r\n      yVal = (correlation * xVal) + (Math.sqrt(1 - (correlation * correlation)) * x2Val);\r\n\r\n\r\n    } while (pointNotWithinRequiredStdDevs(xVal, yVal, numsd));\r\n    xVal = normal_to_uniform(xVal);\r\n    yVal = normal_to_uniform(yVal);\r\n    if(xVal <= 0 || xVal >= 1 || yVal <= 0 || yVal >= 1){\r\n      console.log(\"Uniform Issue\")\r\n      console.log(xVal,yVal)\r\n    }\r\n    coordinates.x_values.push(xVal);\r\n    coordinates.y_values.push(yVal);\r\n\r\n\r\n  }\r\n}\r\n\r\nfunction adjustUniformPointsForError(coordinates, correlation, error, size, numsd, mean, sd){\r\n  var currTrial = 0;\r\n\r\n  // Try to correct the correlation value, up to a maximum of TRIAL_LIMIT trials.\r\n  while (correlationNotWithinError(coordinates, correlation, error) && (currTrial < TRIAL_LIMIT)) {\r\n    currTrial += 1;\r\n    coordinates.x_values.splice(size - 1, 1);\r\n    coordinates.y_values.splice(size - 1, 1);\r\n    var x;\r\n    var x2;\r\n    var y;\r\n    do {\r\n      x = random_bm();\r\n      x2 = random_bm();\r\n      y = (correlation * x) + (Math.sqrt(1 - (correlation * correlation)) * x2);\r\n      // x = normal_to_uniform(x);\r\n      // y = normal_to_uniform(y);\r\n\r\n    } while (pointNotWithinRequiredStdDevs(x, y, numsd));\r\n\r\n    x = normal_to_uniform(x);\r\n    y = normal_to_uniform(y);\r\n    coordinates.x_values.push(x);\r\n    coordinates.y_values.push(y);\r\n\r\n\r\n  }\r\n  return !(correlationNotWithinError(coordinates, correlation, error));\r\n\r\n}\r\n/**\r\n * If X is a random variable with pdf f(x) and cdf F(X), then F(X) is a uniform(0, 1) distribution.\r\n * Takes in a normal point and passes it through the cdf function of a normal distribution\r\n * @param {float} x \r\n * @returns {float}\r\n */\r\nfunction normal_to_uniform(x){\r\n  return 0.5*(1+erf(x/Math.sqrt(2)));\r\n}\r\n\r\n//https://stackoverflow.com/questions/1906064/gauss-error-function-implementation-for-javascript\r\nfunction erf(x) {\r\n  var z;\r\n  const ERF_A = 0.147;\r\n  var the_sign_of_x;\r\n  if(0==x) {\r\n    the_sign_of_x = 0;\r\n    return 0;\r\n  } else if(x>0){\r\n    the_sign_of_x = 1;\r\n  } else {\r\n    the_sign_of_x = -1;\r\n  }\r\n\r\n  var one_plus_axsqrd = 1 + ERF_A * x * x;\r\n  var four_ovr_pi_etc = 4/Math.PI + ERF_A * x * x;\r\n  var ratio = four_ovr_pi_etc / one_plus_axsqrd;\r\n  ratio *= x * -x;\r\n  var expofun = Math.exp(ratio);\r\n  var radical = Math.sqrt(1-expofun);\r\n  z = radical * the_sign_of_x;\r\n  return z;\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "variable",
    "name": "TRIAL_LIMIT",
    "memberof": "scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "static": true,
    "longname": "scripts/experiment-properties/distribution/uniform_distribution_generator.js~TRIAL_LIMIT",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "initializeUniformPoints",
    "memberof": "scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/uniform_distribution_generator.js~initializeUniformPoints",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "correlation",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "adjustUniformPointsForError",
    "memberof": "scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/uniform_distribution_generator.js~adjustUniformPointsForError",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "coordinates",
        "types": [
          "*"
        ]
      },
      {
        "name": "correlation",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "normal_to_uniform",
    "memberof": "scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/uniform_distribution_generator.js~normal_to_uniform",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "importStyle": null,
    "description": "If X is a random variable with pdf f(x) and cdf F(X), then F(X) is a uniform(0, 1) distribution.\nTakes in a normal point and passes it through the cdf function of a normal distribution",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{float}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "erf",
    "memberof": "scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/uniform_distribution_generator.js~erf",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "function",
    "name": "generateUniformDistribution",
    "memberof": "scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/uniform_distribution_generator.js~generateUniformDistribution",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "importStyle": "{generateUniformDistribution}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "correlation",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "numsd",
        "types": [
          "*"
        ]
      },
      {
        "name": "mean",
        "types": [
          "*"
        ]
      },
      {
        "name": "sd",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "generateRandomUniform",
    "memberof": "scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/distribution/uniform_distribution_generator.js~generateRandomUniform",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/distribution/uniform_distribution_generator.js",
    "importStyle": "{generateRandomUniform}",
    "description": "Method used for generating uncorrelated random points in (0,1) range",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "num_points",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/color_generator.js",
    "content": "/**\r\n * \r\n * @param {string} default_color \r\n * @param {array} hslo_color \r\n * @returns {hsl}\r\n */\r\nexport function generate_color(default_color, hslo_color){\r\n    if(hslo_color == null){\r\n        return default_color;\r\n    }\r\n    if(hslo_color.length <3){\r\n        throw Error(\"HSLO Object is too small. Requires at least HSL attributes\");\r\n    }\r\n    let h = hslo_color[0];\r\n    let s = hslo_color[1];\r\n    let l = hslo_color[2];\r\n    if(h < 0 || h > 360){\r\n        throw Error (\"Hue value out of bounds\")\r\n    }\r\n    if(s < 0 || s > 1.0){\r\n        throw Error (\"Saturation value out of bounds\")\r\n    }\r\n    if(l < 0 || l > 1.0){\r\n        throw Error (\"Luminosity value out of bounds\")\r\n    }\r\n    let color = new d3.hsl(h,s,l)\r\n    if(hslo_color.length == 4){\r\n        let o = hslo_color[3]\r\n        if(o < 0 || o > 1.0){\r\n            throw Error (\"Oppacity value out of bounds\")\r\n        }    \r\n        color.opacity = o;\r\n    }\r\n    console.log(color)\r\n    return color;\r\n}\r\n\r\nexport function generate_color_hex(h, s, l, o = 1.0){\r\n    check_hslo_ranges(h, s, l, o)\r\n\r\n    let s_255 = Math.round(s * 255);\r\n    let l_255 = Math.round(l * 255);\r\n    let o_255 = Math.round(o * 255);\r\n\r\n    let hex_h = h.toString(16);\r\n    let hex_s = s_255.toString(16);\r\n    let hex_l = l_255.toString(16);\r\n    let hex_o = o_255.toString(16);\r\n\r\n    return hex_h + hex_s + hex_l + hex_o;\r\n}\r\n\r\nfunction check_hslo_ranges(h, s, l, o){\r\n    if(h < 0 || h > 360){\r\n        throw Error (\"Hue value out of bounds\")\r\n    }\r\n    if(s < 0 || s > 1.0){\r\n        throw Error (\"Saturation value out of bounds\")\r\n    }\r\n    if(l < 0 || l > 1.0){\r\n        throw Error (\"Luminosity value out of bounds\")\r\n    }\r\n    if(o < 0 || o > 1.0){\r\n        throw Error (\"Oppacity value out of bounds\")\r\n    }    \r\n\r\n}\r\n\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/color_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "generate_color",
    "memberof": "scripts/experiment-properties/graphing/color_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/color_generator.js~generate_color",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/color_generator.js",
    "importStyle": "{generate_color}",
    "description": "",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{hsl}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "default_color",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "hslo_color",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "hsl"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "generate_color_hex",
    "memberof": "scripts/experiment-properties/graphing/color_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/color_generator.js~generate_color_hex",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/color_generator.js",
    "importStyle": "{generate_color_hex}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "h",
        "types": [
          "*"
        ]
      },
      {
        "name": "s",
        "types": [
          "*"
        ]
      },
      {
        "name": "l",
        "types": [
          "*"
        ]
      },
      {
        "name": "o",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "check_hslo_ranges",
    "memberof": "scripts/experiment-properties/graphing/color_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/color_generator.js~check_hslo_ranges",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/color_generator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "h",
        "types": [
          "*"
        ]
      },
      {
        "name": "s",
        "types": [
          "*"
        ]
      },
      {
        "name": "l",
        "types": [
          "*"
        ]
      },
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "content": "import { create_distractor_scatter_plot } from \"/scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js\";\r\nimport {create_estimation_plot,create_estimation_interference_plot,create_estimation_multi_interference_plot,create_estimation_bisection_plot} from \"/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js\";\r\nimport {generate_attributes_object} from \"/scripts/experiment-properties/graphing/graphing_controller.js\"\r\nimport {create_scatter_plot} from \"/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js\";\r\nexport { is_custom_plot, prepare_custom_plot };\r\n\r\n/**\r\n * Checks if the experiment needs a custom plot.\r\n *\r\n * @param  {object}   experiment\r\n * @return {boolean}\r\n */\r\nfunction is_custom_plot(experiment) {\r\n\r\n  if (experiment.condition_group === \"distractor\") {\r\n    return false;\r\n  }\r\n  else if (experiment.constructor.name === \"Estimation\") {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Routes to the correct plotting code in /d3-custom-plots depending on \r\n * experiment condition.\r\n *\r\n * @param  {object}   experiment\r\n * @return {boolean}\r\n */\r\nfunction prepare_custom_plot(experiment) {\r\n  if (experiment.condition_group === \"distractor\") {\r\n    //prepare_distractor_scatter_plot(experiment) \r\n    prepare_distractor_plot(experiment);\r\n  }\r\n  else if (experiment.constructor.name === \"Estimation\") {\r\n    prepare_estimation_plot(experiment);\r\n  }\r\n  else {\r\n    throw Error(\"Condition \" + experiment.condition_name + \" does not have a custom plot function.\");\r\n  }\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n// CUSTOM PREPARE METHODS HERE\r\n////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Sets up attributes from trial data for distractor scatter plots and creates the plots.\r\n *\r\n * @param {object}   experiment\r\n */\r\nfunction prepare_distractor_scatter_plot(experiment) {\r\n  let datasets = experiment.coordinates;\r\n  let distractors = experiment.distractor_coordinates;\r\n  // console.log(\"distractor coords: \" + JSON.stringify(distractors));\r\n  let trial_data = experiment.trial_data;\r\n  // console.log(\"trial data: \" + JSON.stringify(trial_data));\r\n  let attributes = \"\";\r\n\r\n  for (let i in datasets) {\r\n\r\n    attributes = {\r\n      target: {\r\n        dataset: datasets[i],\r\n        graph_attributes: {\r\n          axis_color:  (\"axis_color\"   in trial_data ? trial_data.axis_color   : \"BLACK\"),\r\n          point_color: (\"target_color\" in trial_data ? trial_data.target_color : \"BLACK\"),\r\n          point_shape: (\"target_shape\" in trial_data ? trial_data.target_shape : \"circle\"),\r\n          point_size:  (\"point_size\"   in trial_data ? trial_data.point_size   : 3),\r\n          row: (\"row\" in trial_data? trial_data.row : 0),\r\n          col: (\"col\" in trial_data? trial_data.col : 0),\r\n          alternate_scaling: (\"alternate_scaling\" in trial_data ? trial_data.alternate_scaling : false),\r\n          axis_length: (\"axis_length\" in trial_data ? trial_data.axis_length : null),\r\n          mix_by_target_array: (\"mix_by_target_array\" in trial_data ? trial_data.mix_by_target_array : [])\r\n        }\r\n      },\r\n      distractor: {\r\n        dataset: distractors[i],\r\n        graph_attributes: {\r\n          point_color: (\"dist_color\" in trial_data ? trial_data.dist_color : \"RED\"),\r\n          point_shape: (\"dist_shape\" in trial_data ? trial_data.dist_shape : \"circle\"),\r\n          point_size:  (\"point_size\" in trial_data ? trial_data.point_size : 3),\r\n          alternate_scaling: (\"alternate_scaling\" in trial_data ? trial_data.alternate_scaling : false),\r\n          mix_by_distractor_array: (\"mix_by_distractor_array\" in trial_data ? trial_data.mix_by_distractor_array : [])\r\n        }\r\n      }\r\n    };\r\n\r\n    // Force pixels_per_cm property onto graph_attributes since dynamically generated\r\n    attributes[\"target\"][\"graph_attributes\"][\"pixels_per_cm\"] = experiment.PIXELS_PER_CM;\r\n    \r\n    console.log(\"create_distractor_scatter_plot\")\r\n    create_distractor_scatter_plot(attributes);\r\n\r\n    // Set background color\r\n    document.body.style.backgroundColor = (trial_data.background_color ? trial_data.background_color : \"WHITE\");\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Retrieves attributes to run all estimation plots + calls correct plot method depending on \r\n * condition.\r\n *\r\n * @param {object}   experiment\r\n */\r\nfunction prepare_estimation_plot(experiment) {\r\n\r\n  // Defer to model level for attribute computation\r\n  let attributes = experiment.compute_plot_attributes();\r\n\r\n  let name_array = experiment.condition_name.split(\"_\");\r\n\r\n  if (name_array.includes(\"interference\")) {\r\n\r\n    if (name_array.includes(\"multi\")) {\r\n      create_estimation_multi_interference_plot(experiment, attributes);\r\n    }\r\n    else {\r\n      create_estimation_interference_plot(experiment, attributes);\r\n    }\r\n\r\n  }\r\n  else if (name_array.includes(\"bisection\")) {\r\n    create_estimation_bisection_plot(experiment, attributes);\r\n  }\r\n  else {\r\n    create_estimation_plot(experiment, attributes);\r\n  }\r\n}\r\n/**\r\n * Prepares the attributes object for target and distractor datasets\r\n * to plot them with the combine_target_and_distractor function +\r\n * the specific plot function\r\n * @param {object} experiment \r\n */\r\nfunction prepare_distractor_plot(experiment){\r\n  let datasets = experiment.coordinates;\r\n  let distractors = experiment.distractor_coordinates;\r\n  // console.log(\"distractor coords: \" + JSON.stringify(distractors));\r\n  let trial_data = experiment.trial_data;\r\n  // console.log(\"trial data: \" + JSON.stringify(trial_data));\r\n\r\n  for (let i in datasets) {\r\n\r\n    let attributes = {\r\n      target: {\r\n        dataset: datasets[i],\r\n        graph_attributes: generate_attributes_object(experiment.graph_type, trial_data, i)\r\n      },\r\n      distractor: {\r\n        dataset: distractors[i],\r\n        graph_attributes: generate_attributes_object(experiment.graph_type, trial_data.dist_attributes, i)\r\n      }\r\n    };\r\n    console.log(\"create_distractor_scatter_plot\")\r\n    // Only supports scatterplots for now\r\n    create_scatter_plot(attributes.target, null, attributes.distractor);\r\n\r\n    // Set background color\r\n    document.body.style.backgroundColor = (trial_data.background_color ? trial_data.background_color : \"WHITE\");\r\n  }\r\n\r\n}\r\n\r\n\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "prepare_distractor_scatter_plot",
    "memberof": "scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/custom_graphing_controller.js~prepare_distractor_scatter_plot",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "importStyle": null,
    "description": "Sets up attributes from trial data for distractor scatter plots and creates the plots.",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "prepare_estimation_plot",
    "memberof": "scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/custom_graphing_controller.js~prepare_estimation_plot",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "importStyle": null,
    "description": "Retrieves attributes to run all estimation plots + calls correct plot method depending on \ncondition.",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "function",
    "name": "prepare_distractor_plot",
    "memberof": "scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/custom_graphing_controller.js~prepare_distractor_plot",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "importStyle": null,
    "description": "Prepares the attributes object for target and distractor datasets\nto plot them with the combine_target_and_distractor function +\nthe specific plot function",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "is_custom_plot",
    "memberof": "scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/custom_graphing_controller.js~is_custom_plot",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "importStyle": "{is_custom_plot}",
    "description": "Checks if the experiment needs a custom plot.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "prepare_custom_plot",
    "memberof": "scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/custom_graphing_controller.js~prepare_custom_plot",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/custom_graphing_controller.js",
    "importStyle": "{prepare_custom_plot}",
    "description": "Routes to the correct plotting code in /d3-custom-plots depending on \nexperiment condition.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 219,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "content": "import { add_graph_features } from \"../graph_feature_controller.js\";\r\n\r\nexport {create_parallel_plot};\r\n\r\n/**\r\n * D3 code for plotting a PCP.\r\n *\r\n * @param {object}   attributes\r\n */\r\nfunction create_parallel_plot(attributes, style_attributes = null, distractor_attributes = null) {\r\n\t///console.log(style_attributes)\r\n\tlet dataset = attributes.dataset;\r\n    let properties = attributes.graph_attributes;\r\n    const axis_separation = properties.axis_separation;\r\n\tconst line_width = properties.line_width;\r\n\tconst axis_width = properties.axis_width;\r\n\r\n\tlet axis_scale = getAxisScale(properties);\r\n\tlet x_data_scale = getXDataScale(properties);\r\n\tlet y_data_scale = getYDataScale(properties);\r\n\tlet height = getHeight(properties)\r\n\r\n\t// Create axes\r\n\tconst x_axis = d3.axisLeft()\r\n\t\t\t\t\t.scale(axis_scale)\r\n\t\t\t\t\t.tickSize(0);\r\n\r\n\tconst y_axis = d3.axisLeft()\r\n\t\t\t\t\t.scale(axis_scale)\r\n\t\t\t\t\t.tickSize(0);\r\n\r\n\tconst chart = generate_chart(style_attributes, axis_separation, height, properties.buffer);\r\n\r\n    // Creating transform SVG elements + append to SVG:\r\n  \tchart.append(\"g\")\r\n\t\t.attr(\"transform\", \"translate(0, 0)\")\r\n\t\t.attr(\"stroke\", properties[\"axis_color\"])\r\n\t\t.attr(\"stroke-width\", `${axis_width}px`)\r\n\t\t.call(x_axis);\r\n\r\n    chart.append(\"g\")\r\n\t\t.attr(\"transform\", `translate(${axis_separation}, 0)`)\r\n\t\t.attr(\"stroke\", properties[\"axis_color\"])\r\n\t\t.attr(\"stroke-width\", `${3*axis_width}px`) // axis thickness is halved for some reason\r\n\t\t.call(y_axis)\r\n\r\n\t// Set axis color\r\n\tchart.selectAll(\"path\")\r\n\t.attr(\"stroke\", properties[\"axis_color\"])\r\n\r\n\t// Adding graph features, if any, otherwise it calls plot_scatter_points normally\r\n\tadd_graph_features(chart, attributes, distractor_attributes, x_data_scale, y_data_scale, plot_parallal_plot);\r\n\r\n\t//Remove tick labels\r\n\tchart.selectAll(\"text\").remove();\r\n}\r\n\r\n/**\r\n * Plots the the dataset on a parallel plot\r\n * \r\n * @param {*} chart \r\n * @param {*} x_data_scale \r\n * @param {*} y_data_scale \r\n * @param {*} data \r\n * @param {*} properties \r\n */\r\nfunction plot_parallal_plot(chart, x_data_scale, y_data_scale, data, properties){\r\n\t// Plot the Lines\r\n\tchart.selectAll(\"line_data\")\r\n\t\t\t.data(data)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"line\")\r\n\t\t\t.style('stroke', properties[\"fill_color\"])\r\n\t\t\t.style(\"stroke-width\", function () {\r\n\t\t\t\treturn properties.line_width;\r\n\t\t\t})\r\n\t\t\t.attr(\"x1\", function (d){\r\n\t\t\t\treturn 0;\r\n\t\t\t})\r\n\t\t\t.attr(\"y1\", function (d){\r\n\t\t\t\treturn x_data_scale(d[0]);\r\n\t\t\t})\r\n\t\t\t.attr(\"x2\", function (d){\r\n\t\t\t\treturn properties.axis_separation;\r\n\t\t\t})\r\n\t\t\t.attr(\"y2\", function (d){\r\n\t\t\t\treturn y_data_scale(d[1]);\r\n\t\t\t})\r\n}\r\n\r\nfunction generate_chart(style_attributes,axis_separation,height, buffer){\r\n\tlet chart;\r\n\tif(style_attributes == null){\r\n\t\tchart = d3.select(\"#graph\") // Insert into the div w/ id = \"graph\"\r\n\t\t.append(\"svg\") \r\n\t\t.attr(\"width\", axis_separation) \r\n\t\t.attr(\"height\", height)\r\n\t\t.attr(\"style\", `margin-left: ${buffer}; margin-right: ${buffer}; margin-top: 25vh;`);\r\n\t}\r\n\telse{\r\n\t\tchart = d3.select(\"#graph\") // Insert into the div w/ id = \"graph\"\r\n\t\t\t\t\t.append(\"svg\") \r\n\t\t\t\t\t.attr(\"width\", axis_separation) \r\n\t\t\t\t\t.attr(\"height\", height)\r\n\t\t\t\t\t.attr(\"style\", `display: ${style_attributes.display} ; margin-left: ${style_attributes.left}; margin-right: ${style_attributes.right}; margin-top: ${style_attributes.top}; margin-bottom: ${style_attributes.bot}`);\r\n\t}\r\n\treturn chart;\r\n}\r\n\r\nfunction getAxisScale(properties){\r\n\tlet combined_length =  (properties.axis_height + 2*properties.axis_buffer);\r\n\tlet axis_scale = d3.scaleLinear()\r\n                   \t\t.domain([0, 1]) \r\n                   \t\t.range([0, combined_length]);\r\n\treturn axis_scale;\r\n}\r\n\r\nfunction getXDataScale(properties){\r\n\tlet axis_length = properties.axis_height\r\n\tlet combined_length = (axis_length+properties.axis_buffer);\r\n\tlet axis_scale = d3.scaleLinear()\r\n                   \t\t.domain([0, 1]) \r\n                   \t\t.range([properties.axis_buffer, combined_length]);\r\n\treturn axis_scale;\r\n}\r\n\r\nfunction getYDataScale(properties){\r\n\tlet axis_scale;\r\n\tlet axis_length = properties.axis_height\r\n\tlet combined_length = (axis_length+properties.axis_buffer);\r\n\tif(properties.inverted){\r\n\t\taxis_scale = d3.scaleLinear()\r\n\t\t\t\t\t\t.domain([0, 1]) \r\n\t\t\t\t\t\t.range([combined_length, properties.axis_buffer]);\r\n\t}\r\n\telse{\r\n\t\taxis_scale = d3.scaleLinear()\r\n\t\t\t\t\t\t.domain([0, 1]) \r\n\t\t\t\t\t\t.range([properties.axis_buffer, combined_length]);\r\n\t\r\n\t}\r\n\treturn axis_scale;\r\n}\r\n\r\nfunction getHeight(properties){\r\n\tlet height;\r\n\tif(properties.axis_buffer){\r\n\t\theight = properties.axis_height + 2*properties.axis_buffer;\r\n\t}\r\n\telse{\r\n\t\theight = properties.axis_height;\r\n\t}\r\n\treturn height\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 220,
    "kind": "function",
    "name": "plot_parallal_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js~plot_parallal_plot",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "importStyle": null,
    "description": "Plots the the dataset on a parallel plot",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_data_scale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_data_scale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "generate_chart",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js~generate_chart",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "style_attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "axis_separation",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      },
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "getAxisScale",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js~getAxisScale",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "properties",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "function",
    "name": "getXDataScale",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js~getXDataScale",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "properties",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "getYDataScale",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js~getYDataScale",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "properties",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 225,
    "kind": "function",
    "name": "getHeight",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js~getHeight",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "properties",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "create_parallel_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js~create_parallel_plot",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js",
    "importStyle": "{create_parallel_plot}",
    "description": "D3 code for plotting a PCP.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-base-plots/ring_plot.js",
    "content": "export {create_ring_plot};\r\n\r\n/**\r\n * D3 code for plotting a ring plot.\r\n *\r\n * @param {object}   attributes\r\n */\r\nfunction create_ring_plot(attributes) {\r\n\r\n  let dataset = attributes[\"dataset\"];\r\n  let properties = attributes[\"graph_attributes\"];\r\n\r\n  let width = window.innerWidth * 0.8;\r\n  let height = window.innerHeight * 0.3;\r\n\r\n  // Scale for data slightly smaller than full width of axes to account for outliers.\r\n  var xscale_for_data = d3.scaleLinear()\r\n                 .domain([0, 1]) \r\n                 .range([window.innerWidth * 0.10, window.innerWidth * 0.70]);\r\n\r\n  var xscale = d3.scaleLinear()\r\n                 .domain([0, 1])\r\n                 .range([0, width]);\r\n\r\n  var yscale = d3.scaleLinear()\r\n                 .domain([-1, 0])\r\n                 .range([height/2, 0]);\r\n\r\n  // Create axes: \r\n  var x_axis = d3.axisBottom()\r\n                 .scale(xscale)\r\n                 .tickSize([0]);\r\n\r\n  var y_axis = d3.axisLeft()\r\n                 .scale(yscale)\r\n                 .tickSize([0]);\r\n    \r\n  var chart = d3.select(\"#graph\") // Insert into the div w/ id = \"graph\"\r\n                .append(\"svg\") \r\n                  .attr(\"width\", width) \r\n                  .attr(\"height\", height)\r\n                  .attr(\"transform\", \"scale(-1,1)\"); // Flip horizontally so cone is\r\n                                                     // is going left -> right (like orig. version)  \r\n\r\n  var xAxisTranslate = height/2;\r\n  var xAxisElements = chart.append(\"g\")\r\n                            .attr(\"transform\", \"translate(0, \" + xAxisTranslate  +\")\")\r\n                            .call(x_axis);\r\n\r\n  // Populating data: \r\n  chart.selectAll(\"ring\") // Technically no circles inside div yet, but will be creating it\r\n        .data(dataset)\r\n          .enter()\r\n            .append(\"circle\") // Creating the circles for each entry in data set \r\n            .attr(\"cx\", function (d) { // d is a subarray of the dataset i.e coordinates [5, 20]\r\n              return xscale_for_data(d[0]);\r\n            })\r\n            .attr(\"cy\", function (d) {\r\n              return height/2;\r\n            })\r\n            .attr(\"r\", function (d) {\r\n              return yscale(d[1]);\r\n            })\r\n            .attr(\"stroke\", properties[\"stroke_color\"])\r\n            .attr(\"stroke-width\", properties[\"ring_thickness\"])\r\n            .attr(\"fill\", properties[\"fill_color\"]);\r\n\r\n  // Set axis color\r\n  chart.selectAll(\"path\")\r\n       .attr(\"stroke\", properties[\"axis_color\"]);\r\n\r\n  // Remove tick labels\r\n  chart.selectAll(\"text\").remove();     \r\n\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/d3-base-plots/ring_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "create_ring_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/ring_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/ring_plot.js~create_ring_plot",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/ring_plot.js",
    "importStyle": "{create_ring_plot}",
    "description": "D3 code for plotting a ring plot.",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "content": "import { GRAPH_TYPES } from \"/config/graphing-config.js\";\r\nimport { add_graph_features } from \"../graph_feature_controller.js\";\r\nexport {create_scatter_plot, plot_scatter_points};\r\n\r\n/**\r\n * \r\n * @param {object} attributes - graph dataset and graph_attributes\r\n * @param {object} style_attributes css style attributes if they exist\r\n * @param {object} distractor_attributes distractor graph attributes (dataset and graph_attributes)\r\n */\r\nfunction create_scatter_plot(attributes, style_attributes = null, distractor_attributes = null) {\r\n    const properties = attributes.graph_attributes;\r\n    const axis_length = getAxisLength(properties);\r\n    const height = axis_length;\r\n    const width = axis_length;\r\n    const axis_scale = getAxisScale(axis_length);\r\n    const x_data_scale = getXDataScale(properties);\r\n    const y_data_scale = getYDataScale (properties);\r\n    const buffer = properties[\"buffer\"];\r\n    \r\n    // d3 chart is passed by reference and modified in subsequent functions\r\n    let chart = generate_chart(height, width, buffer, style_attributes);\r\n    // setting up visual mask properties;\r\n    attributes[\"graph_attributes\"][\"chart_height\"] = height;\r\n    attributes[\"graph_attributes\"][\"chart_width\"] = width;\r\n\r\n    // Adding graph features, if any, otherwise it calls plot_scatter_points normally\r\n    add_graph_features(chart, attributes, distractor_attributes, x_data_scale, y_data_scale, plot_scatter_points)\r\n\r\n    // Add scatterplot axis borders for borders conditions\r\n    add_borders(chart, properties, height, width, axis_scale, x_data_scale, y_data_scale)\r\n    // Set axis color\r\n    chart.selectAll(\"path\")\r\n         .attr(\"stroke\", properties[\"axis_color\"])\r\n         //.attr(\"stroke-width\", \"2px\")\r\n\r\n    // Remove tick labels\r\n    chart.selectAll(\"text\").remove();\r\n\r\n}\r\n\r\n/**\r\n * D3 code for appending data to the graph depending on point shape type.\r\n *\r\n * @param {object}         chart\r\n * @param {function}       x_data_scale\r\n * @param {function}       y_data_scale\r\n * @param {number[number[]]} data ([x_value, y_value])\r\n * @param {assoc. array}   properties e.g. {\"point_shape\": \"square\", \"point_size\": 5 .... }\r\n */\r\nfunction plot_scatter_points(chart, x_data_scale, y_data_scale, data, properties) {\r\n  // var GRAPH_TYPES comes from /config/graphing-config.js\r\n  if (!GRAPH_TYPES[\"scatter\"][\"attributes\"][\"point_shape\"][\"valid_inputs\"].includes(properties[\"point_shape\"])){\r\n    throw Error(\"Point shape \" + properties[\"point_shape\"] + \" is not a valid shape for graph type scatter.\");\r\n  }\r\n  \r\n  switch(properties[\"point_shape\"]){\r\n    case \"circle\":\r\n      chart.selectAll(\"circle_data\")\r\n                 .data(data)\r\n                  .enter()\r\n                  .append(\"circle\") // Creating the circles for each entry in data set\r\n                  .attr(\"cx\", function (d) { // d is a subarray of the dataset i.e coordinates [5, 20]\r\n                    return x_data_scale(d[0]); \r\n                  })\r\n                  .attr(\"cy\", function (d) {\r\n                    return y_data_scale(d[1]);\r\n                  })\r\n                  .attr(\"r\", function () {\r\n                    return properties[\"point_size\"]/2;\r\n                  })\r\n                  .attr(\"fill\", properties[\"point_color\"]);\r\n      break;\r\n    case \"square\":\r\n      chart.selectAll(\"square_data\")\r\n                 .data(data)\r\n                  .enter()\r\n                  .append(\"rect\")\r\n                  .attr(\"x\", function (d){\r\n                    return x_data_scale(d[0]);\r\n                  })\r\n                  .attr(\"y\", function (d){\r\n                    return y_data_scale(d[1]);\r\n                  })\r\n                  .attr(\"width\", properties[\"point_size\"])\r\n                  .attr(\"height\", properties[\"point_size\"])\r\n                  .style('fill', properties[\"point_color\"]);\r\n      break;\r\n\r\n    case \"diamond\":\r\n      chart.selectAll(\"square_data\")\r\n                 .data(data)\r\n                  .enter()\r\n                  .append(\"rect\")\r\n                  .attr(\"x\", function (d){\r\n                    return x_data_scale(d[0]);\r\n                  })\r\n                  .attr(\"y\", function (d){\r\n                    return y_data_scale(d[1]);\r\n                  })\r\n                  .attr(\"width\", properties[\"point_size\"])\r\n                  .attr(\"height\", properties[\"point_size\"])\r\n                  .style('fill', properties[\"point_color\"])\r\n                  .attr('transform', function(d){\r\n                    // Adapted from: https://stackoverflow.com/questions/44817414/rotate-svg-in-place-using-d3-js\r\n                    var x1 = x_data_scale(d[0]) + properties[\"point_size\"]; //the center x about which you want to rotate\r\n                    var y1 = y_data_scale(d[1]) + properties[\"point_size\"]; //the center y about which you want to rotate\r\n\r\n                    return `rotate(45, ${x1}, ${y1})`; //rotate 180 degrees about x and y\r\n                });\r\n      break;\r\n\r\n  \tcase \"hollow_circle\":\r\n      chart.selectAll(\"circle_data\")\r\n                 .data(data)\r\n                  .enter()\r\n                  .append(\"circle\") // Creating the circles for each entry in data set\r\n                  .attr(\"cx\", function (d) { // d is a subarray of the dataset i.e coordinates [5, 20]\r\n                    return x_data_scale(d[0]); // +60 is for buffer (points going -x, even if they are positive)\r\n                  })\r\n                  .attr(\"cy\", function (d) {\r\n                    return y_data_scale(d[1]);\r\n                  })\r\n                  .attr(\"r\", function () {\r\n                    return properties[\"point_size\"]/2;\r\n                  })\r\n                  .style(\"fill\", \"none\").style(\"stroke\", properties[\"point_color\"]).style(\"stroke-width\", \"1\");\r\n      break;\r\n\r\n\t  case \"bullseye_circle\":\r\n      chart.selectAll(\"circle_data\")\r\n                 .data(data)\r\n                  .enter()\r\n                  .append(\"circle\") // Creating the circles for each entry in data set\r\n                  .attr(\"cx\", function (d) { // d is a subarray of the dataset i.e coordinates [5, 20]\r\n                    return x_data_scale(d[0]); // +60 is for buffer (points going -x, even if they are positive)\r\n                  })\r\n                  .attr(\"cy\", function (d) {\r\n                    return y_data_scale(d[1]);\r\n                  })\r\n                  .attr(\"r\", function () {\r\n                    return properties[\"point_size\"]/2;\r\n                  })\r\n                .style(\"fill\", properties[\"point_color\"]);\r\n\r\n      chart.selectAll(\"circle_data\")\r\n                 .data(data)\r\n                  .enter()\r\n                  .append(\"circle\") // Creating the circles for each entry in data set\r\n                  .attr(\"cx\", function (d) { // d is a subarray of the dataset i.e coordinates [5, 20]\r\n                    return x_data_scale(d[0]); // +60 is for buffer (points going -x, even if they are positive)\r\n                  })\r\n                  .attr(\"cy\", function (d) {\r\n                    return y_data_scale(d[1]);\r\n                  })\r\n                  .attr(\"r\", function () {\r\n                    return properties[\"point_size\"]/2;\r\n                  })\r\n                  .style(\"fill\", \"none\").style(\"stroke\", properties[\"point_color\"]).style(\"stroke-width\", \"1\");\r\n      break;\r\n\r\n  \tcase \"thin_hollow_circle\":\r\n      chart.selectAll(\"circle_data\")\r\n                 .data(data)\r\n                  .enter()\r\n                  .append(\"circle\") // Creating the circles for each entry in data set\r\n                  .attr(\"cx\", function (d) { // d is a subarray of the dataset i.e coordinates [5, 20]\r\n                    return x_data_scale(d[0]); // +60 is for buffer (points going -x, even if they are positive)\r\n                  })\r\n                  .attr(\"cy\", function (d) {\r\n                    return y_data_scale(d[1]);\r\n                  })\r\n                  .attr(\"r\", function () {\r\n                    return properties[\"point_size\"]/2;\r\n                  })\r\n                  .style(\"fill\", \"none\").style(\"stroke\", properties[\"point_color\"]).style(\"stroke-width\", \"1\");\r\n      break;\r\n\r\n   case \"line\":\r\n        chart.selectAll(\"square_data\")\r\n                 .data(data)\r\n                  .enter()\r\n                  .append(\"rect\") // Creating the circles for each entry in data set\r\n                  .attr(\"x\", function (d) { // d is a subarray of the dataset i.e coordinates [5, 20]\r\n                    return x_data_scale(d[0])- properties[\"point_size\"]/2;    // - point size centers point of origin of line to center instead of top right corner\r\n                  })\r\n                  .attr(\"y\", function (d) {\r\n                    return y_data_scale(d[1]) - properties[\"line_length\"]/2;  // - line length centers point of origin of line to center instead of top right corner\r\n                  })\r\n                  .attr(\"fill\", properties[\"point_color\"])\r\n                  .attr(\"width\", function () {\r\n                    return properties[\"point_size\"];\r\n                  })\r\n                  .attr(\"height\", function () {\r\n                    return properties[\"line_length\"];\r\n                  });\r\n                  \r\n        break; \r\n      \r\n      case \"plus\":\r\n        chart.selectAll(\"square_data\") // tall\r\n                   .data(data)\r\n                    .enter()\r\n                    .append(\"rect\") \r\n                    .attr(\"x\", function (d){\r\n                      return x_data_scale(d[0]) + properties[\"point_size\"]/2;\r\n                    })\r\n                    .attr(\"y\", function (d){\r\n                      return y_data_scale(d[1]);\r\n                    })\r\n                    .attr(\"width\", \"1\")\r\n                    .attr(\"height\", properties[\"point_size\"])\r\n                    .style('fill', properties[\"point_color\"]);\r\n        chart.selectAll(\"square_data\") // wide\r\n                   .data(data)\r\n                    .enter()\r\n                    .append(\"rect\") \r\n                    .attr(\"x\", function (d){\r\n                      return x_data_scale(d[0]);\r\n                    })\r\n                    .attr(\"y\", function (d){\r\n                      return y_data_scale(d[1]) + properties[\"point_size\"]/2;\r\n                    })\r\n                    .attr(\"height\", \"1\")\r\n                    .attr(\"width\", properties[\"point_size\"])\r\n                    .style('fill', properties[\"point_color\"]);\r\n          break;\r\n  \r\n        case \"cross\":\r\n          chart.selectAll(\"square_data\") // tall\r\n                   .data(data)\r\n                    .enter()\r\n                    .append(\"rect\") \r\n                    .attr(\"x\", function (d){\r\n                      return x_data_scale(d[0]) + properties[\"point_size\"]/2;\r\n                    })\r\n                    .attr(\"y\", function (d){\r\n                      return y_data_scale(d[1]);\r\n                    })\r\n                    .attr(\"width\", \"1\")\r\n                    .attr(\"height\", properties[\"point_size\"])\r\n                    .style('fill', properties[\"point_color\"])\r\n                    .attr('transform', function(d){\r\n                      let x1 = x_data_scale(d[0]) + properties[\"point_size\"]/2;\r\n                      let y1 = y_data_scale(d[1]) + properties[\"point_size\"]/2; \r\n                      return `rotate(45, ${x1}, ${y1})`; //rotate 180 degrees about x and y\r\n                  }); \r\n        chart.selectAll(\"square_data\") // wide\r\n                   .data(data)\r\n                    .enter()\r\n                    .append(\"rect\") \r\n                    .attr(\"x\", function (d){\r\n                      return x_data_scale(d[0]);\r\n                    })\r\n                    .attr(\"y\", function (d){\r\n                      return y_data_scale(d[1]) + properties[\"point_size\"]/2;\r\n                    })\r\n                    .attr(\"height\", \"1\")\r\n                    .attr(\"width\", properties[\"point_size\"])\r\n                    .style('fill', properties[\"point_color\"])\r\n                    .attr('transform', function(d){\r\n                        let x1 = x_data_scale(d[0]) + properties[\"point_size\"]/2;\r\n                        let y1 = y_data_scale(d[1]) + properties[\"point_size\"]/2; \r\n                        return `rotate(45, ${x1}, ${y1})`; //rotate 180 degrees about x and y\r\n                    }); \r\n          break;\r\n  \r\n        case \"hollow_triangle\":\r\n          chart.selectAll(\"square_data\")\r\n                    .data(data)\r\n                    .enter()\r\n                    .append(\"polygon\")\r\n                    .attr(\"x\", function (d) {\r\n                      return x_data_scale(d[0]);\r\n                    })\r\n                    .attr(\"y\", function (d) {\r\n                      return y_data_scale(d[1]);\r\n                    })\r\n                    .attr(\"points\", function (d) {\r\n                      // https://www.quora.com/An-equilateral-triangle-is-inscribed-in-a-circle-what-is-the-altitude-of-the-triangle-if-radius-equals-to-3-units\r\n                      var x = x_data_scale(d[0]);\r\n                      var y = y_data_scale(d[1]);\r\n                      // point size is diameter\r\n                      let r = properties[\"point_size\"]/2;\r\n                      let h = r/2;\r\n                      let b = Math.sqrt(r**2 - h**2);\r\n                      let px0 = x;\r\n                      let py0 = y - r;\r\n                      let px1 = x + b;\r\n                      let py1 = y + h;\r\n                      let px2 = x - b;\r\n                      let py2 = y + h;\r\n                      return `${px0},${py0} ${px1},${py1} ${px2},${py2} ${px0},${py0}`\r\n                    })\r\n                    .attr(\"stroke\", properties[\"point_color\"])\r\n                    .attr(\"stroke_width\", \"1\")\r\n                    .attr(\"fill\", \"none\");\r\n    \r\n          break;\r\n  }\r\n  \r\n}\r\n\r\nfunction add_borders(chart, properties, height, width, axis_scale, x_data_scale, y_data_scale) {\r\n  // Create axes:\r\n  let x_axis = d3.axisBottom()\r\n                .scale(axis_scale)\r\n                .tickSize([0])\r\n\r\n  let y_axis = d3.axisLeft()\r\n                .scale(axis_scale)\r\n                .tickSize([0]);\r\n\r\n  let x_top = d3.axisTop()\r\n                .scale(axis_scale)\r\n                .tickSize([0]);\r\n\r\n  let y_right = d3.axisRight()\r\n                  .scale(axis_scale)\r\n                  .tickSize([0]);\r\n\r\n  let axis_thickness = properties.axis_thickness;\r\n  switch(properties.borders){\r\n    case \"0\":\r\n      // No Axes are created\r\n      break;\r\n    case \"2\":\r\n      createXYAxes(chart, properties, y_axis, x_axis, height);\r\n      break;\r\n    case \"3U\":\r\n      createXYAxes(chart, properties, y_axis, x_axis, height);\r\n      chart.append('g')\r\n            .attr(\"transform\", \"translate(\" + width + \", 0)\")\r\n            .attr(\"stroke\", properties[\"axis_color\"])\r\n            .attr(\"stroke-width\", `${2*axis_thickness}px`) // horizontal thickness is doubled for some reason\r\n            .call(y_right);\r\n      break;\r\n    case \"3C\":\r\n      createXYAxes(chart, properties, y_axis, x_axis, height);\r\n      chart.append('g')\r\n            .attr(\"stroke\", properties[\"axis_color\"])\r\n            .attr(\"stroke-width\", `${axis_thickness}px`) // horizontal thickness is doubled for some reason\r\n            .attr(\"transform\", \"translate(0, 0)\")\r\n            .call(x_top);\r\n\r\n      break;\r\n    case \"4\":\r\n      createXYAxes(chart, properties, y_axis, x_axis, height);\r\n      chart.append('g')\r\n            .attr(\"transform\", \"translate(\" + width + \", 0)\")\r\n            .attr(\"stroke\", properties[\"axis_color\"])\r\n            .attr(\"stroke-width\", `${2*axis_thickness}px`) // horizontal thickness is doubled for some reason\r\n            .call(y_right);\r\n      chart.append('g')\r\n            .attr(\"stroke\", properties[\"axis_color\"])\r\n            .attr(\"stroke-width\", `${axis_thickness}px`) // horizontal thickness is doubled for some reason\r\n            .attr(\"transform\", \"translate(0, 0)\")\r\n            .call(x_top);\r\n      break;\r\n  }\r\n}\r\n\r\nfunction createXYAxes(chart, properties, y_axis, x_axis, height){\r\n  let axis_thickness = properties.axis_thickness;\r\n\r\n  chart.append(\"g\")\r\n        .attr(\"transform\", \"translate(0, 0)\")\r\n        .attr(\"stroke\", properties[\"axis_color\"])\r\n        .attr(\"stroke-width\", `${axis_thickness}px`) // horizontal thickness is doubled for some reason\r\n        .call(y_axis);\r\n\r\n  chart.append(\"g\")\r\n        .attr(\"transform\", `translate(0, ${height})`)\r\n        .attr(\"stroke\", properties[\"axis_color\"])\r\n        .attr(\"stroke-width\", `${2*axis_thickness}px`)\r\n        .call(x_axis)\r\n}\r\n\r\n// https://coderwall.com/p/_g3x9q/how-to-check-if-javascript-object-is-empty\r\nfunction isEmpty(obj) {\r\n  for(var key in obj) {\r\n      if(obj.hasOwnProperty(key))\r\n          return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Gets the length of the scatterplot axis from properties if it exists and adds the buffer if it exists.\r\n * @param {asoc array} properties \r\n * @returns {float}\r\n */\r\nfunction getAxisLength(properties){\r\n  return properties.axis_length + properties.buffer;\r\n}\r\n\r\n/**\r\n * Gets the d3 scale linear function with the correct axis length\r\n * @param {float} axis_length \r\n * @returns {d3 scaleLinear}\r\n */\r\nfunction getAxisScale(axis_length){\r\n\tlet axis_scale = d3.scaleLinear()\r\n                   \t\t.domain([0, 1]) \r\n                   \t\t.range([0, axis_length]);\r\n\treturn axis_scale;\r\n}\r\n\r\n/**\r\n * Gets the appropiate scale linear function for the x values\r\n * taking into account buffer\r\n * and alternate scaling properties.\r\n * @param {asoc array} properties \r\n * @returns {d3 scaleLinear} \r\n */\r\nfunction getXDataScale(properties){\r\n  let axis_length = properties.axis_length;\r\n  let x_data_scale = d3.scaleLinear()\r\n                .domain([0, 1]) \r\n                .range([0, axis_length]);\r\n  // Numerosity experiments do not scale the distribution\r\n  // coordinates down to the range of [0,1] so the\r\n  // call to .domain() in the scaleLinear() method is needed\r\n  // scale the domain down into the appropriate range\r\n  if (properties.alternate_scaling) {\r\n    var x_max = properties.row;\r\n    x_data_scale = d3.scaleLinear()\r\n                .domain([0, x_max])\r\n                .range([0, axis_length]);\r\n  }\r\n  return x_data_scale;\r\n}\r\n\r\n/**\r\n * Gets the appropiate scale linear function for the y values, taking into account buffer\r\n * and alternate scaling properties.\r\n * @param {asoc array} properties \r\n * @returns {d3 scaleLinear}\r\n */\r\nfunction getYDataScale(properties){\r\n  let axis_length = properties.axis_length + properties.buffer;\r\n  let min_range = properties.buffer;   \r\n\r\n  let y_data_scale = d3.scaleLinear()\r\n                .domain([0, 1]) \r\n                .range([axis_length,min_range]); // y = 0 starts at top of graph so it needs to be inverted\r\n\r\n  if (properties.alternate_scaling) {\r\n    var y_max = properties.col;\r\n    y_data_scale = d3.scaleLinear()\r\n               .domain([0, y_max])\r\n               .range([axis_length, 0]);\r\n  }\r\n  return y_data_scale;\r\n}\r\n\r\n/**\r\n * Sets the correct style attributes depending if the experiment provides a style_attributes property or not\r\n * @param {asoc array} style_attributes \r\n * @returns {chart} \r\n */\r\nfunction generate_chart(height, width, buffer, style_attributes){\r\n  let chart;\r\n  // if the experiment uses style_attributes generated by get_mixed_graph_style_attributes() in experiment_helper.js\r\n  if (style_attributes != null){\r\n    chart = d3.select(\"#graph\")\r\n    .append(\"svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      //.attr(\"display\", style_attributes.display)\r\n      .attr(\"style\", `display: ${style_attributes.display}; margin-left: ${style_attributes.left}; \r\n            margin-right: ${style_attributes.right}; margin-top: ${style_attributes.top}; margin-bottom: ${style_attributes.bot}`)\r\n    }\r\n  else{\r\n    chart = d3.select(\"#graph\")\r\n    .append(\"svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .attr(\"style\", `margin-left: ${buffer}; margin-right: ${buffer}; margin-top: 25vh;`);\r\n  }\r\n  return chart;\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "add_borders",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~add_borders",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "params": [
      {
        "name": "chart",
        "types": [
          "*"
        ]
      },
      {
        "name": "properties",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      },
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "axis_scale",
        "types": [
          "*"
        ]
      },
      {
        "name": "x_data_scale",
        "types": [
          "*"
        ]
      },
      {
        "name": "y_data_scale",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 231,
    "kind": "function",
    "name": "createXYAxes",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~createXYAxes",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 363,
    "undocument": true,
    "params": [
      {
        "name": "chart",
        "types": [
          "*"
        ]
      },
      {
        "name": "properties",
        "types": [
          "*"
        ]
      },
      {
        "name": "y_axis",
        "types": [
          "*"
        ]
      },
      {
        "name": "x_axis",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "isEmpty",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~isEmpty",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 380,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "getAxisLength",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~getAxisLength",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": null,
    "description": "Gets the length of the scatterplot axis from properties if it exists and adds the buffer if it exists.",
    "lineNumber": 393,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{float}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "asoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 234,
    "kind": "function",
    "name": "getAxisScale",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~getAxisScale",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": null,
    "description": "Gets the d3 scale linear function with the correct axis length",
    "lineNumber": 402,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{d3 scaleLinear}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "axis_length",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "d3 scaleLinear"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "getXDataScale",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~getXDataScale",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": null,
    "description": "Gets the appropiate scale linear function for the x values\ntaking into account buffer\nand alternate scaling properties.",
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{d3 scaleLinear} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "asoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "d3 scaleLinear"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "getYDataScale",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~getYDataScale",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": null,
    "description": "Gets the appropiate scale linear function for the y values, taking into account buffer\nand alternate scaling properties.",
    "lineNumber": 440,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{d3 scaleLinear}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "asoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "d3 scaleLinear"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "generate_chart",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~generate_chart",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": null,
    "description": "Sets the correct style attributes depending if the experiment provides a style_attributes property or not",
    "lineNumber": 462,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{chart} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "asoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "style_attributes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "chart"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "create_scatter_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~create_scatter_plot",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": "{create_scatter_plot}",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": "graph dataset and graph_attributes"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "style_attributes",
        "description": "css style attributes if they exist"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "distractor_attributes",
        "description": "distractor graph attributes (dataset and graph_attributes)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "plot_scatter_points",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js~plot_scatter_points",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js",
    "importStyle": "{plot_scatter_points}",
    "description": "D3 code for appending data to the graph depending on point shape type.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "x_data_scale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "y_data_scale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number[number[]]"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "([x_value, y_value])"
      },
      {
        "nullable": null,
        "types": [
          "assoc. array"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "e.g. {\"point_shape\": \"square\", \"point_size\": 5 .... }"
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "content": "export {create_shape_plot};\r\n\r\n/**\r\n * D3 code for setting up shape plot chart area\r\n *\r\n * @param {object}   attributes\r\n */\r\nfunction create_shape_plot(attributes) {\r\n\r\n  let radius = attributes[\"curr_radius\"];\r\n  let max_radius = attributes[\"max_radius\"];\r\n  let min_radius = attributes[\"min_radius\"];\r\n  let properties = attributes[\"graph_attributes\"];\r\n\r\n  let diff = max_radius - min_radius;\r\n\r\n  // SVG dimensions\r\n  let height = max_radius*2; \r\n  let width = max_radius*2;\r\n\r\n  // Margin calculations\r\n  let width_diff = (1/4)*window.innerWidth - max_radius;\r\n\r\n  let margin_top;\r\n\r\n  // Firefox check (doesn't handle JsPsych formatting well)\r\n  if (typeof InstallTrigger !== 'undefined') {\r\n    let margin_top = window.innerHeight/2 - max_radius;\r\n  } else {\r\n    let margin_top = 0;\r\n  }\r\n\r\n  var chart = d3.select(\"#graph\") \r\n                 .append(\"svg\") \r\n                  .attr(\"width\", width) \r\n                  .attr(\"height\", height)\r\n                  .attr(\"style\", `margin-right: ${width_diff}; margin-left: ${width_diff}; margin-top: ${margin_top}`);\r\n\r\n  // var GRAPH_TYPES comes from /config/graphing-config.js\r\n  if (!GRAPH_TYPES[\"shapes\"][\"attributes\"][\"shapes\"][\"valid_inputs\"].includes(properties[\"shapes\"])){\r\n    throw Error(\" \" + shape_type + \" is not a valid shape for graph type shapes.\");\r\n  }\r\n\r\n  // Plot depending on shape specified\r\n  switch (properties[\"shapes\"]){\r\n    \r\n    case \"slice\":\r\n      let degrees = properties[\"slice_rotation\"];\r\n      plot_slice(chart, radius, degrees, max_radius, diff, properties);\r\n      break;\r\n\r\n    case \"square\":\r\n      plot_square(chart, radius, max_radius, diff, properties);\r\n      break;\r\n\r\n    case \"rotSquare\":\r\n      plot_rotated_square(chart, radius, max_radius, diff, properties);\r\n      break;\r\n\r\n    case \"triangle\":\r\n      plot_triangle(chart, radius, max_radius, diff, properties);\r\n      break;\r\n\r\n    case \"rotTriangle\":\r\n      plot_rotated_triangle(chart, radius, max_radius, diff, properties);\r\n      break;\r\n\r\n    default:\r\n      plot_circle(chart, radius, max_radius, diff, properties);\r\n      break;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * D3 code for plotting a circle.\r\n *\r\n * @param  chart      {svg object}\r\n *         radius     {double} \r\n *         max_radius {double}     Largest radius of the given trial\r\n *         diff       {double}     Difference between max and min radius of given trial        \r\n */ \r\nfunction plot_circle(chart, radius, max_radius, diff, properties) {\r\n\r\n  let translation = radius;\r\n\r\n  // If radius is the smaller one, need to adjust translation\r\n  if (radius !== max_radius) {\r\n    translation += diff;\r\n  }\r\n\r\n  // Move the origin to center of SVG\r\n  let g = chart.append(\"g\")\r\n               .attr(\"transform\", \"translate(\" + translation + \",\" + translation + \")\");\r\n\r\n  // Generate the pie\r\n  let pie = d3.pie();\r\n\r\n  // Generate the arcs\r\n  let arc = d3.arc()\r\n              .innerRadius(0)\r\n              .outerRadius(radius/2);\r\n\r\n  // Represents the % that each slice takes up - so this is a pie with 4 \"parts\".\r\n  let data = [25, 25, 25, 25];\r\n  \r\n  // Generate groups\r\n  let arcs = g.selectAll(\"arc\")\r\n              .data(pie(data))\r\n              .enter()\r\n              .append(\"g\")\r\n              .attr(\"class\", \"arc\")\r\n\r\n  // Draw arc paths\r\n  arcs.append(\"path\")\r\n      .attr(\"fill\", function(d, i) {\r\n        return properties[\"fill_color\"];\r\n      })\r\n      .attr(\"stroke\", function(d, i) {\r\n        return properties[\"stroke_color\"];\r\n      })\r\n      .attr(\"d\", arc);\r\n}\r\n\r\n/**\r\n * D3 code for plotting a slice (1/4 of circle).\r\n *      \r\n * @param  chart      {svg object}\r\n *         radius     {double} \r\n *         rotation   {int}        Degrees of rotation in the counterclockwise direction.        \r\n *         max_radius {double}     Largest radius of the given trial\r\n *         diff       {double}     Difference between max and min radius of given trial  \r\n *         properties {object}     Graph attributes extracted from constants\r\n */ \r\nfunction plot_slice(chart, radius, rotation, max_radius, diff, properties) {\r\n\r\n  let translation = 0;\r\n\r\n  // If radius is the smaller one, need to adjust translation\r\n  if (radius !== max_radius) {\r\n    translation = 0.5*diff;\r\n  }\r\n\r\n  // Move the origin to center of SVG\r\n  let g = chart.append(\"g\")\r\n               .attr(\"transform\", function() {\r\n                 if (rotation === 0) {\r\n                   return \"translate(\" + (max_radius/2 + translation) + \",\" + (1.5*radius + translation) + \")\";\r\n                 } \r\n                 else if (rotation === 90) {\r\n                   return \"translate(\" + (max_radius*1.5 + translation) + \",\" + (1.5*radius + translation) + \")\";\r\n                 }\r\n                 // This is assuming the object is centered\r\n                 else {\r\n                   return \"translate(\" + (max_radius + translation) + \",\" + (1.5*radius + translation) + \")\";\r\n                 }\r\n               });\r\n\r\n  // Generate the pie\r\n  let pie = d3.pie();\r\n\r\n  // Generate the arcs\r\n  let arc = d3.arc()\r\n              .innerRadius(0)\r\n              .outerRadius(radius);\r\n\r\n  // Represents the % that each slice takes up - so this is a pie with 4 \"parts\".\r\n  let data = [25, 25, 25, 25];\r\n  \r\n  // Generate groups\r\n  let arcs = g.selectAll(\"arc\")\r\n              .data(pie(data))\r\n              .enter()\r\n              .append(\"g\")\r\n              .attr(\"class\", \"arc\")\r\n\r\n  arcs.append(\"path\")\r\n      .attr(\"fill\", function(d, i) {\r\n          if (i === 0) {\r\n              return properties[\"fill_color\"];\r\n          } else {\r\n              return \"#ffffff\";\r\n          }    \r\n      })\r\n      .attr(\"stroke\", function(d, i) {\r\n        return properties[\"stroke_color\"];\r\n      })\r\n      .attr(\"d\", arc)\r\n      .attr(\"transform\", \"rotate(\" + (-1)*rotation + \")\");\r\n}\r\n\r\n/**\r\n * D3 code for plotting a square.\r\n *\r\n * @param  chart      {svg object}\r\n *         radius     {double} \r\n *         max_radius {double}     Largest radius of the given trial\r\n *         diff       {double}     Difference between max and min radius of given trial  \r\n *         properties {object}     Graph attributes extracted from constants       \r\n */ \r\nfunction plot_square(chart, radius, max_radius, diff, properties) {\r\n\r\n  let translation = 0.5*max_radius;\r\n\r\n  // If radius is the smaller one, need to adjust translation\r\n  if (radius !== max_radius) {\r\n    translation = 0.5*max_radius + 0.5*diff;\r\n  }\r\n\r\n  let g = chart.append(\"g\");\r\n\r\n  let rect = g.append(\"rect\")\r\n                 .attr(\"x\", 0)\r\n                 .attr(\"y\", 0)\r\n                 .attr(\"width\", radius)\r\n                 .attr(\"height\", radius)\r\n                 .attr(\"fill\", properties[\"fill_color\"])\r\n                 .attr(\"stroke\", properties[\"stroke_color\"])\r\n                 .attr(\"transform\", \"translate(\" + translation + \",\" + translation + \")\");\r\n}\r\n\r\n/**\r\n * D3 code for plotting a rotated square AKA diamond.\r\n *\r\n * @param  chart      {svg object}\r\n *         radius     {double} \r\n *         max_radius {double}     Largest radius of the given trial\r\n *         diff       {double}     Difference between max and min radius of given trial   \r\n *         properties {object}     Graph attributes extracted from constants     \r\n */ \r\nfunction plot_rotated_square(chart, radius, max_radius, diff, properties) {\r\n\r\n  let xtranslation = radius;\r\n  let ytranslation = 0.25*radius;\r\n\r\n  // If radius is the smaller one, need to adjust translation\r\n  if (radius !== max_radius) {\r\n    xtranslation += 0.5*diff;\r\n    ytranslation += diff;\r\n  }\r\n\r\n  let g = chart.append(\"g\");\r\n            \r\n  let rect = g.append(\"rect\")\r\n                 .attr(\"x\", 0)\r\n                 .attr(\"y\", 0)\r\n                 .attr(\"width\", radius)\r\n                 .attr(\"height\", radius)\r\n                 .attr(\"fill\", properties[\"fill_color\"])\r\n                 .attr(\"stroke\", properties[\"stroke_color\"])\r\n                 .attr(\"transform\", \"translate(\" + xtranslation + \",\" + ytranslation + \") rotate(45)\");\r\n}\r\n\r\n/**\r\n * D3 code for plotting a triangle.\r\n *\r\n * @param  chart      {svg object}\r\n *         radius     {double} \r\n *         max_radius {double}     Largest radius of the given trial\r\n *         diff       {double}     Difference between max and min radius of given trial   \r\n *         properties {object}     Graph attributes extracted from constants     \r\n */ \r\nfunction plot_triangle(chart, radius, max_radius, diff, properties) {\r\n\r\n  let translation = 0;\r\n\r\n  // If radius is the smaller one, need to shift by the 0.5*diff\r\n  if (radius !== max_radius) {\r\n    translation = diff;\r\n  }\r\n\r\n  let poly = [{\"x\":(0.5*radius + translation), \"y\":(0.5*radius + translation)},\r\n              {\"x\":(0.5*radius + translation), \"y\":(1.5*radius + translation)},\r\n              {\"x\":(1.5*radius + translation), \"y\":(1.5*radius + translation)}];\r\n\r\n  chart.selectAll(\"polygon\")\r\n       .data([poly])\r\n       .enter().append(\"polygon\")\r\n       .attr(\"points\",function(d) { \r\n          return d.map(function(d) { return [d.x, d.y].join(\",\"); }).join(\" \");})\r\n       .attr(\"fill\", properties[\"fill_color\"])\r\n       .attr(\"stroke\", properties[\"stroke_color\"]);\r\n}\r\n\r\n/**\r\n * D3 code for plotting a rotated triangle.\r\n *\r\n * @param  chart      {svg object}\r\n *         radius     {double} \r\n *         max_radius {double}     Largest radius of the given trial\r\n *         diff       {double}     Difference between max and min radius of given trial \r\n *         properties {object}     Graph attributes extracted from constants       \r\n */ \r\nfunction plot_rotated_triangle(chart, radius, max_radius, diff, properties) {\r\n\r\n  let translation = 0;\r\n\r\n  // If radius is the smaller one, need to shift by the 0.5*diff\r\n  if (radius !== max_radius) {\r\n    translation = diff;\r\n  }\r\n\r\n  let poly = [{\"x\":(1.5*radius + translation), \"y\":(0.5*radius + translation)},\r\n              {\"x\":(0.5*radius + translation), \"y\":(radius + translation)},\r\n              {\"x\":(1.5*radius + translation), \"y\":(1.5*radius + translation)}];\r\n\r\n  chart.selectAll(\"polygon\")\r\n       .data([poly])\r\n       .enter().append(\"polygon\")\r\n       .attr(\"points\",function(d) { \r\n          return d.map(function(d) { return [d.x, d.y].join(\",\"); }).join(\" \");})\r\n       .attr(\"fill\", properties[\"fill_color\"])\r\n       .attr(\"stroke\", properties[\"stroke_color\"]);      \r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "plot_circle",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~plot_circle",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": null,
    "description": "D3 code for plotting a circle.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{svg object}\n        radius     {double} \n        max_radius {double}     Largest radius of the given trial\n        diff       {double}     Difference between max and min radius of given trial"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "plot_slice",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~plot_slice",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": null,
    "description": "D3 code for plotting a slice (1/4 of circle).\n     ",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{svg object}\n        radius     {double} \n        rotation   {int}        Degrees of rotation in the counterclockwise direction.        \n        max_radius {double}     Largest radius of the given trial\n        diff       {double}     Difference between max and min radius of given trial  \n        properties {object}     Graph attributes extracted from constants"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "function",
    "name": "plot_square",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~plot_square",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": null,
    "description": "D3 code for plotting a square.",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{svg object}\n        radius     {double} \n        max_radius {double}     Largest radius of the given trial\n        diff       {double}     Difference between max and min radius of given trial  \n        properties {object}     Graph attributes extracted from constants"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "function",
    "name": "plot_rotated_square",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~plot_rotated_square",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": null,
    "description": "D3 code for plotting a rotated square AKA diamond.",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{svg object}\n        radius     {double} \n        max_radius {double}     Largest radius of the given trial\n        diff       {double}     Difference between max and min radius of given trial   \n        properties {object}     Graph attributes extracted from constants"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "plot_triangle",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~plot_triangle",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": null,
    "description": "D3 code for plotting a triangle.",
    "lineNumber": 263,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{svg object}\n        radius     {double} \n        max_radius {double}     Largest radius of the given trial\n        diff       {double}     Difference between max and min radius of given trial   \n        properties {object}     Graph attributes extracted from constants"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "plot_rotated_triangle",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~plot_rotated_triangle",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": null,
    "description": "D3 code for plotting a rotated triangle.",
    "lineNumber": 294,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{svg object}\n        radius     {double} \n        max_radius {double}     Largest radius of the given trial\n        diff       {double}     Difference between max and min radius of given trial \n        properties {object}     Graph attributes extracted from constants"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "create_shape_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js~create_shape_plot",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js",
    "importStyle": "{create_shape_plot}",
    "description": "D3 code for setting up shape plot chart area",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "content": "import {plot_mixed_attribute_graph} from \"/scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js\"\r\nimport {prepare_visual_mask_graph} from \"/scripts/experiment-properties/graphing/d3-plot-features/visual_mask_generator.js\"\r\nimport {combine_target_and_distractor} from \"/scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js\"\r\nimport { add_graph_features } from \"../graph_feature_controller.js\";\r\n\r\nexport {create_strip_plot};\r\n/**\r\n * D3 code to plot a strip plot\r\n * @param {array} dataset - Array of data coordinates to plot the strip plot lines\r\n * @param {assoc array} properties - D3 Graph Properties such as height, width, axis thickness, etc...\r\n * @param {assoc array} style_attributes - Optional style attributes for css styling\r\n */\r\nfunction create_strip_plot(attributes, style_attributes = null, distractor_attributes = null) {\r\n\tlet dataset = attributes.dataset;\r\n    let properties = attributes.graph_attributes;\r\n\tlet width = getWidth(properties);\r\n    let height = getHeight(properties);\r\n\r\n\tlet xscale_data = getXScaleData(properties,width);\r\n\tconst yscale_data = getYDataScale(properties);\r\n\r\n    const xscale_x_axis = d3.scaleLinear()\r\n                   .domain([0, 1]) \r\n                   .range([0, width]);\r\n\r\n    // Create axes\r\n    const x_axis = d3.axisBottom()\r\n                   .scale(xscale_x_axis)\r\n                   .tickSize(0);\r\n\r\n\tconst chart = setStyleAttributes(style_attributes,height,width)\r\n\t\r\n\tchart.append(\"g\")\r\n\t    .attr(\"transform\", \"translate(0, \" + height/2  +\")\") \r\n\t    .call(x_axis)\r\n\t\r\n\tadd_graph_features(chart, attributes, distractor_attributes, xscale_data, yscale_data, plotStripYValue);\r\n\r\n\t// Plot main feature representation\r\n\t//plotStripYValue(chart, properties, dataset, height, xscale_data)\r\n\r\n\t// Plot Distractor feature representation\r\n\tplotStripZValue(chart, properties, height, xscale_data)\r\n\r\n\t// Set axis color\r\n\tchart.selectAll(\"path\")\r\n\t   .attr(\"stroke\", properties[\"axis_color\"])\r\n\r\n\t// Remove tick labels\r\n\tchart.selectAll(\"text\").remove();   \r\n\r\n}\r\n\r\nfunction plotStripYValue(chart, xscale_data, y_data_scale, dataset, properties){\r\n\t\tlet height = getHeight(properties);\r\n\t\tswitch(properties[\"y_value_representation\"]){\r\n\t\t\tcase \"orientation\":\r\n\t\t\t\tconst rotate_data = d3.scaleLinear()\r\n\t\t\t\t\t\t\t\t\t.domain([0, 1])\r\n\t\t\t\t\t\t\t\t\t.range([-45, 45]);\r\n\r\n\t\t\t\tchart.selectAll(\"strip\")\r\n\t\t\t\t\t.data(dataset)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"x\", function(d){\r\n\t\t\t\t\t\treturn xscale_data(d[0]) - properties.strip_width/2;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"y\", 0)\r\n\t\t\t\t\t.attr(\"width\", properties.strip_width)\r\n\t\t\t\t\t.attr(\"height\", function(d){\r\n\t\t\t\t\t\tlet angle_deg = y_data_scale(d[1]);\r\n\t\t\t\t\t\tlet extra_height = getExtraHeight(angle_deg, height);\r\n\t\t\t\t\t\treturn height + 2*extra_height;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"transform\", function (d) {\r\n\t\t\t\t\t\tlet cx = xscale_data(d[0]);\r\n\t\t\t\t\t\tlet angle_deg = y_data_scale(d[1]);\r\n\t\t\t\t\t\tlet extra_height = getExtraHeight(angle_deg, height);\r\n\t\t\t\t\t\tlet cy = height/2;\r\n\t\t\t\t\t\treturn `translate(0,${-extra_height}) rotate(${angle_deg},${cx},${cy})`\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr('fill', properties[\"fill_color\"])\r\n\t\t\t\tbreak;\t\r\n\t\t\tcase \"luminance\":\r\n\t\t\t\tconst luminance_scale = d3.scaleLinear()\r\n\t\t\t\t\t\t\t\t\t\t.domain([0, 1])\r\n\t\t\t\t\t\t\t\t\t\t.range([0.9, 0])\r\n\r\n\t\t\t\tchart.selectAll(\"strip\")\r\n\t\t\t\t\t.data(dataset)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"x\", function(d){\r\n\t\t\t\t\t\treturn xscale_data(d[0]) - properties.strip_width/2;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"y\", 0)\r\n\t\t\t\t\t.attr(\"height\", height)\r\n\t\t\t\t\t.attr(\"width\", properties.strip_width)\r\n\t\t\t\t\t.attr(\"fill\", function(d){\t// luminance properties\r\n\t\t\t\t\t\tlet hsl_color = new d3.hsl(1,0,y_data_scale(d[1]))\r\n\t\t\t\t\t\treturn hsl_color\r\n\t\t\t\t\t})\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"height\":\r\n\t\t\t\tconst yscale = d3.scaleLinear()\r\n\t\t\t\t\t\t\t\t\t.domain([0, 1])\r\n\t\t\t\t\t\t\t\t\t.range([height, 0]);\r\n\r\n\t\t\t\tchart.selectAll(\"strip\")\r\n\t\t\t\t\t.data(dataset)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"x\", function(d){\r\n\t\t\t\t\t\treturn xscale_data(d[0]) - properties.strip_width/2;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"y\", function(d){\r\n\t\t\t\t\t\tlet diff = height/2 - yscale(d[1])/2\r\n\t\t\t\t\t\treturn diff\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"height\", function(d){\r\n\t\t\t\t\t\treturn y_data_scale(d[1])\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"width\", properties.strip_width)\r\n\t\t\t\t\t.attr('fill', properties[\"fill_color\"])\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"cielab\":\r\n\t\t\t\tconst cielab_scales = generateCielablScales(properties);\r\n\t\t\t\t//console.log(cielab_scales)\r\n\t\t\t\tchart.selectAll(\"strip\")\r\n\t\t\t\t\t.data(dataset)\r\n\t\t\t\t\t.enter()\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.attr(\"x\", function(d){\r\n\t\t\t\t\t\treturn xscale_data(d[0]) - properties.strip_width/2;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"y\", 0)\r\n\t\t\t\t\t.attr(\"height\", height)\r\n\t\t\t\t\t.attr(\"width\", properties.strip_width)\r\n\t\t\t\t\t.attr(\"fill\", function(d){\t// luminance properties\r\n\t\t\t\t\t\tlet cielab_color = new d3.lab(cielab_scales.l_range(d[1]),cielab_scales.a_range(d[1]),cielab_scales.b_range(d[1]), 1.0);\r\n\t\t\t\t\t\t//console.log(cielab_color)\r\n\t\t\t\t\t\treturn cielab_color\r\n\t\t\t\t\t})\r\n\t\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(`Representation ${properties[\"y_value_representation\"]} has not been defined in the strip plot generator.`);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\r\n}\r\n\r\n/**\r\n * Plots the z-value features of the strip plot by modifying the existing rect object attributes\r\n * @param {object} chart \r\n * @param {assoc array} properties \r\n * @param {int} height \r\n * @param {function} xscale_data \r\n * @param {function} rotate_data \r\n * @param {function} yscale \r\n */\r\nfunction plotStripZValue(chart, properties, height, xscale_data, rotate_data, yscale, luminance_scale){\r\n\tswitch(properties[\"distractor_value_feature\"]){\r\n\t\tcase \"orientation\":\r\n\t\t\tconst rotate_data = d3.scaleLinear()\r\n\t\t\t\t\t\t\t\t\t.domain([0, 1])\r\n\t\t\t\t\t\t\t\t\t.range([-45, 45]);\r\n\t\t\tchart.selectAll(\"rect\")\r\n\t\t\t\t.attr(\"height\", function(d){\r\n\t\t\t\t\tlet angle_deg = rotate_data(d[2]);\r\n\t\t\t\t\tlet extra_height = getExtraHeight(angle_deg, height);\r\n\t\t\t\t\treturn height + 2*extra_height;\r\n\t\t\t\t})\r\n\t\t\t\t.attr(\"transform\", function (d) {\r\n\t\t\t\t\tlet cx = xscale_data(d[0]);\r\n\t\t\t\t\tlet angle_deg = rotate_data(d[2]);\r\n\t\t\t\t\tlet extra_height = getExtraHeight(angle_deg, height);\r\n\t\t\t\t\tlet cy = height/2;\r\n\t\t\t\t\treturn `translate(0,${-extra_height}) rotate(${angle_deg},${cx},${cy})`\r\n\t\t\t\t})\r\n\t\t\t\tbreak;\r\n\t\tcase \"luminance\":\r\n\t\t\tconst luminance_scale = d3.scaleLinear()\r\n\t\t\t\t\t\t\t\t\t\t.domain([0, 1])\r\n\t\t\t\t\t\t\t\t\t\t.range([0.9, 0])\r\n\r\n\t\t\tchart.selectAll(\"rect\")\r\n\t\t\t\t.attr(\"fill\", function(d){\t// luminance properties\r\n\t\t\t\t\tlet hsl_color = new d3.hsl(1,0,luminance_scale(d[2]))\r\n\t\t\t\t\treturn hsl_color\r\n\t\t\t\t})\r\n\t\t\tbreak;\r\n\t\tcase \"height\":\r\n\t\t\tconst yscale = d3.scaleLinear()\r\n\t\t\t\t\t\t\t\t\t.domain([0, 1])\r\n\t\t\t\t\t\t\t\t\t.range([height, 0]);\r\n\r\n\t\t\tattr(\"y\", function(d){\r\n\t\t\t\tlet diff = height/2 - yscale(d[2])/2\r\n\t\t\t\treturn diff\r\n\t\t\t})\r\n\t\t\t.attr(\"height\", function(d){\r\n\t\t\t\treturn yscale(d[2])\r\n\t\t\t})\r\n\t\t\tbreak;\r\n\t\tcase \"none\":\r\n\t\t\tbreak\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\n/**\r\n * Gets the correct axis width with buffer if the properties has it\r\n * @param {asoc array} properties \r\n * @returns {float}\r\n */\r\nfunction getWidth(properties){\r\n\tlet width = properties.axis_length;\r\n\tif(properties.buffer){\r\n\t\twidth += properties.buffer;\r\n\t}\r\n\treturn width;\r\n}\r\n\r\n/**\r\n * Gets the correct axis height. Generalized as a function for future proofing.\r\n * @param {asoc array} properties \r\n * @returns {float}\r\n */\r\nfunction getHeight(properties){\r\n\tlet height = properties.line_height;\r\n\r\n\treturn height;\r\n}\r\n\r\nfunction getXScaleData(properties, width){\r\n\tlet xscale_data;\r\n\tlet buffer = properties.buffer;\r\n\tif (properties.buffer){\r\n\t\txscale_data = d3.scaleLinear()\r\n\t\t\t\t\t\t.domain([0, 1]) \r\n\t\t\t\t\t\t.range([buffer, width - buffer]);\r\n\t}\r\n\telse{\r\n\t\txscale_data = d3.scaleLinear()\r\n                   \t\t.domain([0, 1]) \r\n                   \t\t.range([width * 0.05, width * 0.95]);\r\n\t}\r\n\treturn xscale_data;\r\n}\r\n\r\n/**\r\n * \r\n * @param {assoc. array} properties \r\n * @returns {function}\r\n */\r\nfunction getYDataScale(properties){\r\n\tconst min = properties[\"y_value_range\"][\"min\"];\r\n\tconst max = properties[\"y_value_range\"][\"max\"];\r\n\r\n\tconst yscale_data = d3.scaleLinear()\r\n\t\t\t\t\t\t.domain([0, 1])\r\n\t\t\t\t\t\t.range([min, max])\r\n\treturn yscale_data;\r\n}\r\n\r\nfunction setStyleAttributes(style_attributes,height,width){\r\n\tlet chart;\r\n\r\n\tif(style_attributes){\r\n\t\tchart = d3.select(\"#graph\") // Insert into the div w/ id = \"graph\"\r\n\t\t\t\t\t.append(\"svg\") \r\n\t\t\t\t\t.attr(\"width\", width) \r\n\t\t\t\t\t.attr(\"height\", height)\r\n\t\t\t\t\t.attr(\"style\", `display: ${style_attributes.display} ; margin-left: ${style_attributes.left}; margin-right: ${style_attributes.right}; margin-top: ${style_attributes.top}; margin-bottom: ${style_attributes.bot}`);\r\n\t}\r\n\telse{\r\n\t\tchart = d3.select(\"#graph\") // Insert into the div w/ id = \"graph\"\r\n\t\t\t\t\t.append(\"svg\") \r\n\t\t\t\t\t.attr(\"width\", width) \r\n\t\t\t\t\t.attr(\"height\", height)\r\n\t\t\t\t\t.attr(\"transform\", \"scale(-1,1)\"); \r\n\t}\r\n\r\n\treturn chart;\r\n}\r\n\r\n/**\r\n * Gets the length of the rotated line so that the height of the graph remains constant.\r\n * Otherwise the height of the line decreases. Line needs to be offset by the extra height\r\n * @param {float} angle_deg angle of rotation in degrees (-45,45)\r\n * @param {float} height    target height of the graph\r\n * @returns {float} \t\textra height so rotated line matches target height of graph \r\n */\r\nfunction getExtraHeight(angle_deg,height){\r\n\t//let angle = Math.abs(rotate_data(d[1])) * Math.PI / 180; // rads\r\n\t//let angle_deg = 45\r\n\tlet angle_rad = angle_deg * Math.PI / 180; // rads\r\n\tlet ninety = Math.PI/2;\r\n\tlet short_height = height * Math.cos(angle_rad); // https://math.stackexchange.com/questions/260096/find-the-coordinates-of-a-point-on-a-circle\r\n\t//console.log(angle, short_height)\r\n\tlet height_diff = height - short_height;\r\n\tlet extra_height =  height_diff / Math.sin(ninety - angle_rad); // https://www.softschools.com/math/calculus/using_the_law_of_sines_to_find_an_unknown_side/\r\n\t//console.log(height / Math.cos(rotate_data(d[1]) * Math.PI / 180))\r\n\t//console.log (height, extra_height)\r\n\treturn extra_height; \r\n}\r\n\r\nfunction generateCielablScales(properties){\r\n\tif(properties.y_value_representation != \"cielab\"){\r\n\t\treturn;\r\n\t}\r\n\tlet l_min = properties.y_value_range.min.l;\r\n\tlet a_min = properties.y_value_range.min.a;\r\n\tlet b_min = properties.y_value_range.min.b;\r\n\tlet l_max = properties.y_value_range.max.l;\r\n\tlet a_max = properties.y_value_range.max.a;\r\n\tlet b_max = properties.y_value_range.max.b;\r\n\r\n\tlet cielab_scales = {};\r\n\tcielab_scales.l_range = d3.scaleLinear()\r\n\t\t\t\t\t\t\t\t.domain([0, 1]) \r\n\t\t\t\t\t\t\t\t.range([l_min, l_max]);\r\n\r\n\tcielab_scales.a_range = d3.scaleLinear()\r\n\t\t\t\t\t\t\t\t.domain([0, 1]) \r\n\t\t\t\t\t\t\t\t.range([a_min, a_max]);\r\n\tcielab_scales.b_range = d3.scaleLinear()\r\n\t\t\t\t\t\t\t\t.domain([0, 1]) \r\n\t\t\t\t\t\t\t\t.range([b_min, b_max]);\r\n\treturn cielab_scales;\r\n}\r\n\r\n/**\r\n * Translates and Rotates the strip plot line for orientation feature\r\n * First translates the y position of the line to account for the extra height from getHeightOrientation\r\n * Then rotates it along cx,cy by the given angle. cy is calculated internally\r\n * \r\n * @param {float} cx \t\tcenter x coordinate for rotation\r\n * @param {float} angle_deg rotation angle in degrees\r\n * @param {float} height \ttarget height of the graph\r\n * @returns {string} \t\td3 transformation function formated as a string\r\n */\r\nfunction translateAndRotateOrientation(cx,angle_deg,height){\r\n\t//let angle_deg = 45\r\n\t//let angle_sign = Math.sign(angle_deg)\r\n\tlet angle_rad = angle_deg * Math.PI / 180; // rads\r\n\tlet ninety = Math.PI/2;\r\n\tlet cos_a = Math.cos(angle_rad)\r\n\tlet short_height = height * cos_a; // https://math.stackexchange.com/questions/260096/find-the-coordinates-of-a-point-on-a-circle\r\n\t//console.log(angle_rad, cos_a , short_height)\r\n\tlet height_diff = height - short_height;\r\n\tlet extra_height =  height_diff / Math.sin(ninety - angle_rad); // https://www.softschools.com/math/calculus/using_the_law_of_sines_to_find_an_unknown_side/\r\n\tlet rotation_cy = height/2;\r\n\t// subtract the extra height (half the total additional height of the line) so that rotation cy aligns with y axis position\r\n\t// then translate line to the right at a ratio equal to 1 - the cosine (ie dont translate if) rotate by rotate_data angle, along cx and cy (half the height)\r\n\t//return `translate(0,${-extra_height}) rotate(${angle_deg},${cx},${rotation_cy})`\r\n\treturn `rotate(${angle_deg},${cx},${rotation_cy})`\r\n\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "plotStripYValue",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js~plotStripYValue",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "chart",
        "types": [
          "*"
        ]
      },
      {
        "name": "xscale_data",
        "types": [
          "*"
        ]
      },
      {
        "name": "y_data_scale",
        "types": [
          "*"
        ]
      },
      {
        "name": "dataset",
        "types": [
          "*"
        ]
      },
      {
        "name": "properties",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "plotStripZValue",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js~plotStripZValue",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "importStyle": null,
    "description": "Plots the z-value features of the strip plot by modifying the existing rect object attributes",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "xscale_data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "rotate_data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "yscale",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 251,
    "kind": "function",
    "name": "getWidth",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js~getWidth",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "importStyle": null,
    "description": "Gets the correct axis width with buffer if the properties has it",
    "lineNumber": 218,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{float}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "asoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "getHeight",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js~getHeight",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "importStyle": null,
    "description": "Gets the correct axis height. Generalized as a function for future proofing.",
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{float}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "asoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "getXScaleData",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js~getXScaleData",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "params": [
      {
        "name": "properties",
        "types": [
          "*"
        ]
      },
      {
        "name": "width",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 254,
    "kind": "function",
    "name": "getYDataScale",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js~getYDataScale",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc. array"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "setStyleAttributes",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js~setStyleAttributes",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "params": [
      {
        "name": "style_attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      },
      {
        "name": "width",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "getExtraHeight",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js~getExtraHeight",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "importStyle": null,
    "description": "Gets the length of the rotated line so that the height of the graph remains constant.\nOtherwise the height of the line decreases. Line needs to be offset by the extra height",
    "lineNumber": 296,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{float} \t\textra height so rotated line matches target height of graph "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "angle_deg",
        "description": "angle of rotation in degrees (-45,45)"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "target height of the graph"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": "extra height so rotated line matches target height of graph"
    },
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "generateCielablScales",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js~generateCielablScales",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "params": [
      {
        "name": "properties",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 258,
    "kind": "function",
    "name": "translateAndRotateOrientation",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js~translateAndRotateOrientation",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "importStyle": null,
    "description": "Translates and Rotates the strip plot line for orientation feature\nFirst translates the y position of the line to account for the extra height from getHeightOrientation\nThen rotates it along cx,cy by the given angle. cy is calculated internally",
    "lineNumber": 345,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} \t\td3 transformation function formated as a string"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "cx",
        "description": "center x coordinate for rotation"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "angle_deg",
        "description": "rotation angle in degrees"
      },
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "target height of the graph"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "d3 transformation function formated as a string"
    },
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "create_strip_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js~create_strip_plot",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js",
    "importStyle": "{create_strip_plot}",
    "description": "D3 code to plot a strip plot",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "Array of data coordinates to plot the strip plot lines"
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "D3 Graph Properties such as height, width, axis thickness, etc..."
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "style_attributes",
        "description": "Optional style attributes for css styling"
      }
    ],
    "return": null
  },
  {
    "__docId__": 260,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "content": "import { plot_scatter_points } from \"/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js\";\r\nexport { create_distractor_scatter_plot };\r\n\r\n/**\r\n * @param {object}   attributes\r\n */\r\nfunction create_distractor_scatter_plot(attributes) {\r\n\r\n  let target_array_size = attributes[\"target\"][\"graph_attributes\"][\"mix_by_target_array\"].length;\r\n  let distractor_array_size = attributes[\"distractor\"][\"graph_attributes\"][\"mix_by_distractor_array\"].length;\r\n \r\n  if (target_array_size > 0 && distractor_array_size > 0) {\r\n    // if there are mix attribute arrays (primarily for Feature Based Attention in Two Class Scatterplots experiment)\r\n    // currently only works if both targets AND distractors have mix attribute arrays\r\n    plot_mix_attribute_distractor_graphs(attributes)\r\n  } else {\r\n\r\n    let target_dataset = attributes[\"target\"][\"dataset\"];\r\n    //console.log(\"target_dataset:  \" + JSON.stringify(target_dataset));\r\n    let target_properties = attributes[\"target\"][\"graph_attributes\"];\r\n    //console.log(\"target_properties:  \" + JSON.stringify(target_properties));\r\n\r\n    let distractor_dataset = attributes[\"distractor\"][\"dataset\"];\r\n    //console.log(\"distractor_dataset:  \" + JSON.stringify(distractor_dataset));\r\n    let distractor_properties = attributes[\"distractor\"][\"graph_attributes\"];\r\n    //console.log(\"distractor_properties:  \" + JSON.stringify(distractor_properties));\r\n\r\n    // Size of the graph\r\n    // var window_height_multiplier = 0.65;\r\n    // var window_width_multiplier = 0.5;\r\n\r\n    // if (target_properties.alternate_scaling) {\r\n    //   BUFFER = 150;\r\n    //   window_height_multiplier = 1.15;\r\n    //   window_width_multiplier = .75;\r\n    // }\r\n    // let height = window.innerHeight * window_height_multiplier;\r\n    // let width = height * window_width_multiplier;\r\n\r\n    // 5.5cm\r\n    const height = 550;\r\n    const width = height/2;\r\n\r\n    // if axis length is set to a fixed value\r\n    if(target_properties.axis_length){\r\n      console.log(\"axis length: \" + target_properties.axis_length);\r\n      width = target_properties.axis_length * target_properties.pixels_per_cm;\r\n      height = width*2;\r\n    }\r\n\r\n\r\n    // Create scales:\r\n    // ** D3 creates a function that takes in input between [0, 100] and \r\n    //    outputs between [0, width].\r\n    //    Basically, domain = input, range = ouput. \r\n    let xscale = d3.scaleLinear()\r\n      .domain([0, 1])\r\n      .range([0, width]);\r\n\r\n    let yscale = d3.scaleLinear()\r\n      .domain([0, 1])\r\n      .range([height / 2, 0]);\r\n\r\n    if (target_properties.alternate_scaling) {\r\n      // Numerosity experiments do not scale the distribution\r\n      // coordinates down to the range of [0,1] so the\r\n      // call to .domain() in the scaleLinear() method is needed\r\n      // scale the domain down into the appropriate range\r\n      var x_max = target_properties.row;\r\n      var y_max = target_properties.col;\r\n\r\n      xscale = d3.scaleLinear()\r\n        .domain([0, x_max])\r\n        .range([0, width]);\r\n\r\n      yscale = d3.scaleLinear()\r\n        .domain([0, y_max])\r\n        .range([height / 2, 0]);\r\n    }\r\n\r\n    // Create axes: \r\n    let x_axis = d3.axisBottom()\r\n      .scale(xscale)\r\n      .tickSize([0]);\r\n\r\n    let y_axis = d3.axisLeft()\r\n      .scale(yscale)\r\n      .tickSize([0]);\r\n\r\n    // Append SVG into graph div\r\n    let chart = d3.select(\"#graph\")\r\n      .append(\"svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .attr(\"style\", `margin-left: ${width/4}; margin-right: ${width/4}; margin-top: 25vh;`);\r\n\r\n    // Creating transform SVG elements + append to SVG: \r\n    let yAxisElements = chart.append(\"g\")\r\n      .attr(\"transform\", \"translate(0, 0)\")\r\n      .call(y_axis);\r\n\r\n    let xAxisTranslate = height / 2;\r\n\r\n    let xAxisElements = chart.append(\"g\")\r\n      .attr(\"transform\", \"translate(0, \" + xAxisTranslate + \")\")\r\n      .call(x_axis)\r\n\r\n    // If dist point color is WHITE, only plot the targets \r\n    if (distractor_properties[\"point_color\"] === \"WHITE\") {\r\n\r\n      plot_scatter_points(chart, xscale, yscale, target_dataset, target_properties);\r\n    }\r\n    else {\r\n\r\n      let larger_data;\r\n      let smaller_data;\r\n\r\n      // Handle if the number of points between distractor & target are unequal\r\n      if (attributes[\"target\"][\"dataset\"].length > attributes[\"distractor\"][\"dataset\"].length) {\r\n        larger_data = attributes[\"target\"];\r\n        smaller_data = attributes[\"distractor\"];\r\n      } else {\r\n        larger_data = attributes[\"distractor\"];\r\n        smaller_data = attributes[\"target\"];\r\n      }\r\n\r\n      // Alternate plotting of distractor and main dataset points - want equal chance of one\r\n      // getting occluded over the other\r\n      for (let j in larger_data[\"dataset\"]) {\r\n\r\n        if (j < smaller_data[\"dataset\"].length) {\r\n          let small_point = smaller_data[\"dataset\"][j];\r\n          plot_scatter_points(chart, xscale, yscale, [small_point], smaller_data[\"graph_attributes\"]);\r\n        }\r\n\r\n        let large_point = larger_data[\"dataset\"][j];\r\n        plot_scatter_points(chart, xscale, yscale, [large_point], larger_data[\"graph_attributes\"]);\r\n      }\r\n    }\r\n\r\n    // Set axis color\r\n    chart.selectAll(\"path\")\r\n      .attr(\"stroke\", target_properties[\"axis_color\"]);\r\n\r\n    // Remove tick labels\r\n    chart.selectAll(\"text\").remove();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {*} attributes \r\n */\r\nfunction plot_mix_attribute_distractor_graphs(attributes) {\r\n  \r\n  let target_dataset = attributes[\"target\"][\"dataset\"];\r\n  let target_properties = attributes[\"target\"][\"graph_attributes\"];\r\n\r\n  let distractor_dataset = attributes[\"distractor\"][\"dataset\"];\r\n  let distractor_properties = attributes[\"distractor\"][\"graph_attributes\"];\r\n\r\n  // Size of the graph\r\n  var window_height_multiplier = 0.65;\r\n  var window_width_multiplier = 0.5;\r\n\r\n  if (target_properties.alternate_scaling) {\r\n    window_height_multiplier = 1.15;\r\n    window_width_multiplier = .75;\r\n  }\r\n  let height = window.innerHeight * window_height_multiplier;\r\n  let width = height * window_width_multiplier;\r\n\r\n  // if axis length is set to a fixed value\r\n  if(target_properties.axis_length){\r\n    console.log(\"axis length: \" + target_properties.axis_length);\r\n    width = target_properties.axis_length * target_properties.pixels_per_cm;\r\n    height = width*2;\r\n  }\r\n\r\n  // Create scales:\r\n  // ** D3 creates a function that takes in input between [0, 100] and \r\n  //    outputs between [0, width].\r\n  //    Basically, domain = input, range = ouput. \r\n  let xscale = d3.scaleLinear()\r\n    .domain([0, 1])\r\n    .range([0, width]);\r\n\r\n  let yscale = d3.scaleLinear()\r\n    .domain([0, 1])\r\n    .range([height / 2, 0]);\r\n\r\n  if (target_properties.alternate_scaling) {\r\n    // Numerosity experiments do not scale the distribution\r\n    // coordinates down to the range of [0,1] so the\r\n    // call to .domain() in the scaleLinear() method is needed\r\n    // scale the domain down into the appropriate range\r\n    var x_max = target_properties.row;\r\n    var y_max = target_properties.col;\r\n\r\n    xscale = d3.scaleLinear()\r\n      .domain([0, x_max])\r\n      .range([0, width]);\r\n\r\n    yscale = d3.scaleLinear()\r\n      .domain([0, y_max])\r\n      .range([height / 2, 0]);\r\n  }\r\n\r\n  // Create axes: \r\n  let x_axis = d3.axisBottom()\r\n    .scale(xscale)\r\n    .tickSize([0]);\r\n\r\n  let y_axis = d3.axisLeft()\r\n    .scale(yscale)\r\n    .tickSize([0]);\r\n\r\n  // Append SVG into graph div\r\n  let chart = d3.select(\"#graph\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", width)\r\n    .attr(\"height\", height*2/3)\r\n    .attr(\"style\", `margin-top: 25vh;`);\r\n\r\n  // Creating transform SVG elements + append to SVG: \r\n  let yAxisElements = chart.append(\"g\")\r\n    .attr(\"transform\", \"translate(0, 0)\")\r\n    .call(y_axis);\r\n\r\n  let xAxisTranslate = height / 2;\r\n\r\n  let xAxisElements = chart.append(\"g\")\r\n    .attr(\"transform\", \"translate(0, \" + xAxisTranslate + \")\")\r\n    .call(x_axis)\r\n\r\n  let larger_data;\r\n  let smaller_data;\r\n\r\n  // Handle if the number of points between distractor & target are unequal\r\n  if (attributes[\"target\"][\"dataset\"].length > attributes[\"distractor\"][\"dataset\"].length) {\r\n    larger_data = attributes[\"target\"];\r\n    smaller_data = attributes[\"distractor\"];\r\n  } else {\r\n    larger_data = attributes[\"distractor\"];\r\n    smaller_data = attributes[\"target\"];\r\n  }\r\n\r\n\r\n// ____________________________________________________ TEST BLOCK ________________________________________________________________\r\n\r\n  let NUM_LARGER_GROUPS, NUM_SMALLER_GROUPS, POINTS_PER_LARGER_GROUP, POINTS_PER_SMALLER_GROUP;\r\n\r\n  /**\r\n   * Distractor dataset will not have mix_by_target_array\r\n   * Target dataset will not have mix_by_distractor_array\r\n   */\r\n  if (larger_data[\"graph_attributes\"][\"mix_by_target_array\"] != null) {\r\n    NUM_LARGER_GROUPS = larger_data[\"graph_attributes\"][\"mix_by_target_array\"].length;\r\n    NUM_SMALLER_GROUPS = smaller_data[\"graph_attributes\"][\"mix_by_distractor_array\"].length;\r\n    POINTS_PER_LARGER_GROUP = larger_data[\"dataset\"].length / NUM_LARGER_GROUPS;\r\n    POINTS_PER_SMALLER_GROUP = smaller_data[\"dataset\"].length / NUM_SMALLER_GROUPS;\r\n  } else {\r\n    NUM_LARGER_GROUPS = larger_data[\"graph_attributes\"][\"mix_by_distractor_array\"].length;\r\n    NUM_SMALLER_GROUPS = smaller_data[\"graph_attributes\"][\"mix_by_target_array\"].length;\r\n    POINTS_PER_LARGER_GROUP = larger_data[\"dataset\"].length / NUM_LARGER_GROUPS;\r\n    POINTS_PER_SMALLER_GROUP = smaller_data[\"dataset\"].length / NUM_SMALLER_GROUPS;\r\n  }\r\n\r\n/**\r\n * this loop has 3 primary functions:\r\n * 1. randomizes order of attribute arrays for both target and distractor populations\r\n * 2. overrides base properties of populations with properties contained within respective mix attribute arrays\r\n * 3. plots the points of each population one at a time, with equal chance of occluding one population over the other\r\n */\r\n  for (let i = 0; i < NUM_LARGER_GROUPS; i++) {\r\n    let larger_grouped_dataset = [];\r\n    let smaller_grouped_dataset = [];\r\n\r\n    //randomize larger dataset order\r\n    for (let j = 0; j < POINTS_PER_LARGER_GROUP; j++) {\r\n\r\n      //make sure dataset isn't empty\r\n      if (larger_data[\"dataset\"].length > 0) {\r\n        let larger_rand_index = Math.floor(Math.random() * larger_data[\"dataset\"].length);\r\n        larger_grouped_dataset.push(larger_data[\"dataset\"][larger_rand_index]);\r\n\r\n        larger_data[\"dataset\"].splice(larger_rand_index, 1);\r\n      }\r\n    }\r\n\r\n    // randomize smaller dataset order\r\n    for (let k = 0; k < POINTS_PER_SMALLER_GROUP; k++) {\r\n\r\n      //make sure dataset isn't empty\r\n      if (smaller_data[\"dataset\"].length > 0) {\r\n        let smaller_rand_index = Math.floor(Math.random() * smaller_data[\"dataset\"].length);\r\n        smaller_grouped_dataset.push(smaller_data[\"dataset\"][smaller_rand_index]);\r\n\r\n        smaller_data[\"dataset\"].splice(smaller_rand_index, 1);\r\n      }\r\n    }\r\n\r\n    // override base properties if present in mix arrays, for both larger & smaller datasets\r\n    if (larger_data[\"graph_attributes\"][\"mix_by_target_array\"] != null) {\r\n      // case where larger_data is TARGET population\r\n\r\n      for (var attrib in larger_data[\"graph_attributes\"][\"mix_by_target_array\"][i]) {\r\n        larger_data[\"graph_attributes\"][attrib] = larger_data[\"graph_attributes\"][\"mix_by_target_array\"][i][attrib];\r\n      }\r\n\r\n      for (var attrib in smaller_data[\"graph_attributes\"][\"mix_by_distractor_array\"][i]) {\r\n        smaller_data[\"graph_attributes\"][attrib] = smaller_data[\"graph_attributes\"][\"mix_by_distractor_array\"][i][attrib];\r\n      }\r\n\r\n    } else {\r\n      // case where larger_data is DISTRACTOR population\r\n\r\n      for (var attrib in smaller_data[\"graph_attributes\"][\"mix_by_target_array\"][i]) {\r\n        smaller_data[\"graph_attributes\"][attrib] = smaller_data[\"graph_attributes\"][\"mix_by_target_array\"][i][attrib];\r\n      }\r\n\r\n      for (var attrib in larger_data[\"graph_attributes\"][\"mix_by_distractor_array\"][i]) {\r\n        larger_data[\"graph_attributes\"][attrib] = larger_data[\"graph_attributes\"][\"mix_by_distractor_array\"][i][attrib];\r\n      }\r\n    }\r\n\r\n    // alternate plotting of distractor and target dataset points. \r\n    // equal chance of one getting occluded over the other.\r\n    for (let j in larger_grouped_dataset) {\r\n\r\n      if (j < smaller_data[\"dataset\"].length) {\r\n        let small_point = smaller_grouped_dataset[j];\r\n        plot_scatter_points(chart, xscale, yscale, [small_point], smaller_data[\"graph_attributes\"]);\r\n      }\r\n\r\n      let large_point = larger_grouped_dataset[j];\r\n      plot_scatter_points(chart, xscale, yscale, [large_point], larger_data[\"graph_attributes\"]);\r\n    }\r\n\r\n    // Set axis color\r\n    chart.selectAll(\"path\")\r\n      .attr(\"stroke\", target_properties[\"axis_color\"]);\r\n\r\n    // Remove tick labels\r\n    chart.selectAll(\"text\").remove();\r\n  }\r\n}\r\n// ____________________________________________________ END BLOCK ________________________________________________________________\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 261,
    "kind": "function",
    "name": "plot_mix_attribute_distractor_graphs",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js~plot_mix_attribute_distractor_graphs",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 262,
    "kind": "function",
    "name": "create_distractor_scatter_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js~create_distractor_scatter_plot",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/distractor_scatter_plot.js",
    "importStyle": "{create_distractor_scatter_plot}",
    "description": "",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 263,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "content": "export {create_estimation_plot, \r\n        create_estimation_interference_plot, \r\n        create_estimation_multi_interference_plot,\r\n        create_estimation_bisection_plot};\r\n    \r\nvar exp;\r\n\r\n/**\r\n * Plots a regular estimation condition\r\n *\r\n * @param {object} experiment\r\n *        {object} attributes\r\n */\r\nfunction create_estimation_plot(experiment, attributes) {\r\n\r\n    exp = experiment;\r\n\r\n    let chart = d3.select(\"#graph\")\r\n        .append(\"svg\")\r\n        .attr(\"width\", attributes.chart.width)\r\n        .attr(\"height\", attributes.chart.height)\r\n        .attr(\"style\", \"display: block\");\r\n\r\n    let left = attributes.left_shape;\r\n    let right = attributes.right_shape;\r\n\r\n    plot_shape(left.shape, chart, left.size, left.y, left.x, left.is_ref, left.outline, left.fill, left.options);\r\n    plot_shape(right.shape, chart, right.size, right.y, right.x, right.is_ref, right.outline, right.fill, right.options);\r\n\r\n    if (experiment.condition_name === \"absolute_area_ratio\"){\r\n        plot_text(chart, \"The target area ratio is \" + attributes.chart.target_area_ratio + \".\")\r\n    }\r\n}\r\n\r\n/**\r\n * Plots a bisection estimation condition\r\n * (e.g. conditions with \"bisection\" in their name)\r\n *\r\n * @param {object} experiment\r\n *        {object} attributes\r\n */\r\nfunction create_estimation_bisection_plot(experiment, attributes) {\r\n\r\n    exp = experiment;\r\n\r\n    let chart = d3.select(\"#graph\")\r\n        .append(\"svg\")\r\n        .attr(\"width\", attributes.chart.width)\r\n        .attr(\"height\", attributes.chart.height)\r\n        .attr(\"style\", \"display: block\");\r\n\r\n    let left = attributes.left_shape;\r\n    let right = attributes.right_shape;\r\n    let middle = attributes.middle_shape;\r\n\r\n    plot_shape(left.shape, chart, left.size, left.y, left.x, left.is_ref, left.outline, left.fill, left.options);\r\n    plot_shape(middle.shape, chart, middle.size, middle.y, middle.x, middle.is_ref, middle.outline, middle.fill, middle.options);\r\n    plot_shape(right.shape, chart, right.size, right.y, right.x, right.is_ref, right.outline, right.fill, right.options);\r\n}\r\n\r\n/**\r\n * Plots an interference estimation condition \r\n * (e.g. conditions with \"interference\" in their name but are not multi)\r\n *\r\n * @param {object} experiment\r\n *        {object} attributes\r\n */\r\nfunction create_estimation_interference_plot(experiment, attributes) {\r\n\r\n    exp = experiment;\r\n\r\n    let chart = d3.select(\"#graph\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", attributes.chart.width)\r\n    .attr(\"height\", attributes.chart.height)\r\n    .attr(\"style\", \"display: block\");\r\n\r\n    let left = attributes.left_shape;\r\n    let right = attributes.right_shape;\r\n    let interf = attributes.interf_shape;\r\n\r\n    // Plot interference shape\r\n    if (interf) {\r\n        plot_shape(interf.shape, chart, interf.size, interf.y, interf.x, interf.is_ref, interf.outline, interf.fill, interf.options);\r\n    }\r\n\r\n    // Plot main shapes\r\n    plot_shape(left.shape, chart, left.size, left.y, left.x, left.is_ref, left.outline, left.fill, left.options);\r\n    plot_shape(right.shape, chart, right.size, right.y, right.x, right.is_ref, right.outline, right.fill, right.options);\r\n}\r\n\r\n/**\r\n * Plots a multi interference estimation condition \r\n * (e.g. conditions with \"interference\" and \"multi\" in their name)\r\n *\r\n * @param {object} experiment\r\n *        {object} attributes\r\n */\r\nfunction create_estimation_multi_interference_plot(experiment, attributes) {\r\n\r\n    exp = experiment;\r\n\r\n    let chart = d3.select(\"#graph\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", attributes.chart.width)\r\n    .attr(\"height\", attributes.chart.height)\r\n    .attr(\"style\", \"display: block\");\r\n\r\n    let left = attributes.left_shape;\r\n    let right = attributes.right_shape;\r\n    let ref_sub = attributes.ref_sub_shape;\r\n    let mod = attributes.mod_shape;\r\n\r\n    // These conditions need main to go first as the sub+mod are on top\r\n    if (experiment.condition_name.split(\"_\").includes(\"fan\") || \r\n        experiment.condition_name === \"multi_square_cutout_interference\" ||\r\n        experiment.condition_name === \"multi_square_cutout_interference_flicker\") {\r\n\r\n        // Plot main shapes\r\n        plot_shape(left.shape, chart, left.size, left.y, left.x, left.is_ref, left.outline, left.fill, left.options);\r\n        plot_shape(right.shape, chart, right.size, right.y, right.x, right.is_ref, right.outline, right.fill, right.options);\r\n\r\n        // Plot ref sub shape\r\n        plot_shape(ref_sub.shape, chart, ref_sub.size, ref_sub.y, ref_sub.x, ref_sub.is_ref, ref_sub.outline, ref_sub.fill, ref_sub.options);\r\n\r\n        // Plot mod shape\r\n        plot_shape(mod.shape, chart, mod.size, mod.y, mod.x, mod.is_ref, mod.outline, mod.fill, mod.options);\r\n\r\n    } else {\r\n\r\n        // Plot ref sub shape\r\n        plot_shape(ref_sub.shape, chart, ref_sub.size, ref_sub.y, ref_sub.x, ref_sub.is_ref, ref_sub.outline, ref_sub.fill, ref_sub.options);\r\n\r\n        // Plot mod shape\r\n        plot_shape(mod.shape, chart, mod.size, mod.y, mod.x, mod.is_ref, mod.outline, mod.fill, mod.options);\r\n\r\n        // Plot main shapes\r\n        plot_shape(left.shape, chart, left.size, left.y, left.x, left.is_ref, left.outline, left.fill, left.options);\r\n        plot_shape(right.shape, chart, right.size, right.y, right.x, right.is_ref, right.outline, right.fill, right.options);\r\n    }\r\n}\r\n\r\n/**\r\n * Routes to correct plotting code depending on shape type.\r\n *\r\n * @param shape {string}\r\n * @param chart {object}\r\n * @param length {number} \r\n * @param y_pos {number}\r\n * @param x_pos {number}\r\n * @param is_ref {boolean} if the shape is a reference shape or a modifiable shape\r\n * @param outline {string} outline color\r\n * @param fill {string} fill color\r\n * @param options {string} can be: {\"scaling\": \"scales_with_mod\"   This shape serves as bg to the modifiable shape\r\n                                                OR \r\n                                               \"scales_indep\"      This shape is a bg shape, but is the one being modified\r\n                                               },\r\n\r\n                                   {\"fan-attributes\": {\"slice-alignment\"         : \"top\" or \"bottom\",   Position of slice in pie\r\n                                                       \"angle-size\"              : some_value,          Angle in degrees of the fan\r\n                                                      },          \r\n\r\n                                   {\"flicker\": {\"on\": on_duration,    The duration in ms for the shape to appear\r\n                                                \"off\": off_duration}} The duration in ms for the shape to disappear\r\n */\r\nfunction plot_shape(shape, chart, length, y_pos, x_pos, is_ref, outline, fill, options) {\r\n    switch (shape) {\r\n        case \"circle\":\r\n            plot_circle(chart, length, y_pos, x_pos, is_ref, outline, fill, options);\r\n            break;\r\n        case \"fan\":\r\n\r\n            // When mod_side_alignment = slice-bottom, reference circle must have a sliced out\r\n            // section equivalent to modifiable fan. Here we just plot another fan over the \r\n            // reference circle.\r\n            if (options[\"fan-attributes\"][\"ref_shape_adjusts\"]) {\r\n                plot_fan(chart, length, y_pos-length/4, x_pos, is_ref, fill, fill, options);\r\n            }\r\n\r\n            plot_fan(chart, length, y_pos, x_pos, is_ref, outline, fill, options);\r\n\r\n            break;\r\n        case \"triangle\":\r\n            plot_triangle(chart, length, y_pos, x_pos, is_ref, outline, fill, options);\r\n            break;\r\n        case \"square\":\r\n            plot_square(chart, length, y_pos, x_pos, is_ref, outline, fill, options);\r\n            break;\r\n        case \"line\":\r\n            plot_line(chart, length, y_pos, x_pos, is_ref, outline, options);\r\n            break;\r\n        case \"rectangle\":\r\n            plot_rectangle(chart, length, y_pos, x_pos, is_ref, outline, fill, options);\r\n            break;\r\n        default:\r\n            throw Error(shape + \" shape is not supported.\");\r\n    }\r\n}\r\n\r\n/**\r\n * Plots a circle.\r\n *\r\n * @param chart {object}\r\n * @param diameter {number}\r\n * @param y_pos {number}\r\n * @param x_pos {number}\r\n * @param is_ref {boolean} if the shape is a reference shape or a modifiable shape\r\n * @param outline {string}\r\n * @param fill {string}\r\n * @param options {string}\r\n */\r\nfunction plot_circle(chart, diameter, y_pos, x_pos, is_ref, outline, fill, options) {\r\n\r\n    let radius = diameter / 2;\r\n    let shape = chart.append(\"circle\")\r\n                        .attr(\"cx\", x_pos)\r\n                        .attr(\"cy\", y_pos)\r\n                        .attr(\"r\", diameter / 2)\r\n                        .attr(\"id\", function(){\r\n                            if (options && options.scaling && options.scaling === \"scales_with_mod\") {\r\n                                exp.interf_shape_variables = {x_pos: x_pos, y_pos: y_pos, diameter: diameter};\r\n                                return \"bound_circle_shape\"\r\n                            }\r\n                            return \"circle_shape\"}\r\n                        )\r\n                        .attr(\"is_ref\", is_ref)\r\n                        .attr(\"fill\", fill)\r\n                        .attr(\"stroke\", outline);\r\n    if (is_ref === false) {\r\n        d3.select(\"body\")\r\n            .on(\"keydown\", function () {\r\n                let event = d3.event;\r\n                // console.log(event);\r\n                if (event.key === \"m\" || event.key === \"z\") {\r\n                    diameter = calculate_size_change(event.key, diameter, \"circle\");\r\n                    radius = diameter / 2;\r\n                    d3.select(\"#circle_shape\")\r\n                        .attr(\"r\", radius);\r\n                }\r\n            });\r\n    }\r\n\r\n    if (options && options.flicker) {\r\n        shape.call(flicker_shape, fill, outline, options.flicker.on, options.flicker.off);\r\n    }\r\n}\r\n\r\n/**\r\n * Plots a fan.\r\n *\r\n * @param chart {object}\r\n * @param width {number}\r\n * @param y_pos {number}\r\n * @param x_pos {number}\r\n * @param is_ref {boolean} if the shape is a reference shape or a modifiable shape,\r\n *                         is_ref === true if the shape is a reference shape\r\n * @param outline {string}\r\n * @param fill {string}\r\n * @param options {object}\r\n */\r\nfunction plot_fan(chart, diameter, y_pos, x_pos, is_ref, outline, fill, options) {\r\n\r\n    if (!options[\"fan-attributes\"]) {throw Error(\"Fan attributes are needed in options to plot a fan.\")};\r\n\r\n    let radius = diameter/2;\r\n    let angle_size = options[\"fan-attributes\"][\"angle_size\"];\r\n\r\n    let arc = d3.arc()\r\n                .innerRadius(0)\r\n                .outerRadius(radius)\r\n                .startAngle(0 * Math.PI/180)\r\n                .endAngle(function(){\r\n                    return angle_size * Math.PI/180;\r\n                });\r\n\r\n    let shape = chart.append(\"g\")\r\n                     .attr(\"transform\", function() {\r\n                        return \"translate(\" + x_pos + \",\" + y_pos + \")\";\r\n                      }) \r\n                     .append(\"path\")\r\n                     .attr(\"id\", function(){\r\n                        if (is_ref) {\r\n                            return \"fan_shape_ref\";\r\n                        } else {\r\n                            return \"fan_shape_mod\";\r\n                        }\r\n                      })\r\n                     .attr(\"d\", arc)\r\n                     .attr(\"fill\", fill)\r\n                     .attr(\"stroke\", outline)\r\n                     .attr(\"stroke-width\", 1)\r\n                     .attr(\"transform\", \"rotate(\" + compute_angle_shift(angle_size, options[\"fan-attributes\"][\"slice-alignment\"]) + \")\");\r\n        \r\n    if (is_ref === false) {\r\n        d3.select(\"body\")\r\n          .on(\"keydown\", function () {\r\n                let event = d3.event;\r\n                if (event.key === \"m\" || event.key === \"z\") {\r\n                    // Estimated size = angle units\r\n                    angle_size = calculate_angle_change(event.key, angle_size, radius);\r\n\r\n                    let changed_arc = d3.arc()\r\n                                        .innerRadius(0)\r\n                                        .outerRadius(radius)\r\n                                        .startAngle(0 * Math.PI/180)\r\n                                        .endAngle(function(){\r\n                                            return angle_size * Math.PI/180;\r\n                                        });\r\n\r\n                    d3.selectAll(\"#fan_shape_mod\")\r\n                        .attr(\"d\", changed_arc)\r\n                        .attr(\"transform\", \"rotate(\" + compute_angle_shift(angle_size, options[\"fan-attributes\"][\"slice-alignment\"]) + \")\");\r\n                }\r\n        });\r\n    }\r\n\r\n    if (options && options.flicker) {\r\n        shape.call(flicker_shape, fill, outline, options.flicker.on, options.flicker.off);\r\n    }\r\n}\r\n\r\n/**\r\n * Returns the amount of rotational shift in degrees to align the angle \r\n * at the desired alignment.\r\n *  \r\n * @param {double}   angle - size of angle in degrees\r\n *        {string}   alignment - e.g. bottom or top of circle\r\n */\r\nfunction compute_angle_shift(angle, alignment) {\r\n\r\n    let shift = (-1)*angle/2; // Shifts it so slice is perfectly centered and at top of pie\r\n\r\n    if (alignment === \"bottom\") {\r\n        shift += 180;\r\n    } else if (alignment !== \"top\") {\r\n        throw Error(alignment + \" alignment not supported in computing angle shift for fan shapes.\");\r\n    }\r\n\r\n    return shift;\r\n}\r\n\r\n/**\r\n * On conditions square,circle interference and circle interference, will trigger\r\n * the underlying bound bg shape to scale with the mod shape\r\n *  \r\n * @param {double}     size_change\r\n */\r\nfunction adjust_interference_shape(size_change) {\r\n    let subcond = exp.curr_conditions_constants[exp.curr_condition_index];\r\n    let ratio = subcond.interf_ratio;\r\n\r\n    let y_translation;\r\n    let x_translation;\r\n\r\n    if (subcond.interf_shape) {\r\n\r\n        switch (subcond.interf_shape) {\r\n\r\n            case \"circle\" :\r\n\r\n                d3.select(\"#bound_circle_shape\")\r\n                  .attr(\"r\", size_change * ratio)\r\n                break;\r\n\r\n            case \"square\" :\r\n\r\n                x_translation = exp.interf_shape_variables.x_pos - ((size_change * ratio) / 2);\r\n                y_translation = exp.interf_shape_variables.y_pos - ((size_change * ratio) / 2);\r\n\r\n                d3.select(\"#bound_square_shape\")\r\n                  .attr(\"width\", (size_change * ratio))\r\n                  .attr(\"height\", (size_change * ratio))\r\n                  .attr(\"x\", x_translation)\r\n                  .attr(\"y\", y_translation);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Plots a square.\r\n *\r\n * @param chart {object}\r\n * @param width {number}\r\n * @param y_pos {number}\r\n * @param x_pos {number}\r\n * @param is_ref {boolean} if the shape is a reference shape or a modifiable shape,\r\n *                         is_ref === true if the shape is a reference shape\r\n * @param outline {string}\r\n * @param fill {string}\r\n * @param options {object}\r\n */\r\nfunction plot_square(chart, width, y_pos, x_pos, is_ref, outline, fill, options) {\r\n\r\n    let subcond = exp.curr_conditions_constants[exp.curr_condition_index];\r\n\r\n    let shape;\r\n\r\n    if (options && options.cutout_radius) {\r\n\r\n        let cutout = options.cutout_radius;\r\n\r\n        // Need to shift by half length to match centering done by regular rect svgs\r\n        x_pos -= width/2;\r\n        y_pos -= width/2;\r\n\r\n        let poly = [{\"x\":(x_pos+cutout), \"y\":(y_pos)}, //bottom left of cutout\r\n                    {\"x\":(x_pos+cutout), \"y\":(y_pos+cutout)}, //bottom right of cutout\r\n                    {\"x\":(x_pos), \"y\":(y_pos+cutout)}, //top right of cutout\r\n\r\n                    {\"x\":(x_pos), \"y\":(y_pos+width)}, //bottom left corner\r\n                    {\"x\":(x_pos + width), \"y\":(y_pos + width)}, //bottom right corner\r\n                    {\"x\":(x_pos + width), \"y\":(y_pos)}, //top right corner\r\n                    ];\r\n\r\n        shape = chart.append(\"polygon\")\r\n                        .attr(\"points\",function() {\r\n                            return poly.map(function(d) { return [d.x, d.y].join(\",\"); }).join(\" \");})\r\n                        .attr(\"fill\", fill)\r\n                        .attr(\"stroke\", outline)\r\n                        .attr(\"id\", is_ref? \"square_cutout_shape_ref\" : \"square_cutout_shape_mod\");\r\n\r\n    } else {\r\n\r\n        shape = chart.append(\"rect\")\r\n                        .attr(\"id\", function(){\r\n                            if (options && options.scaling && options.scaling === \"scales_with_mod\") {\r\n                                exp.interf_shape_variables = {x_pos: x_pos, y_pos: y_pos, width: width};\r\n                                return \"bound_square_shape\";\r\n                            }\r\n\r\n                            if (is_ref) {\r\n                                return \"square_shape_ref\";\r\n                            } else {\r\n                                return \"square_shape_mod\"; // if is an interf and is not ref, becomes a mod\r\n                            }\r\n                        })\r\n                        .attr(\"x\", x_pos - width / 2)\r\n                        .attr(\"y\", y_pos - width / 2) // the x and y core_attributes for square\r\n                                                      // refers to the position of the upper left corner\r\n                                                      // however x_pos and y_pos specifies the center of the shape\r\n                        .attr(\"width\", width)\r\n                        .attr(\"height\", width)\r\n                        .attr(\"fill\", fill)\r\n                        .attr(\"stroke\", outline);\r\n\r\n        if (is_ref === true && exp.curr_trial_data.ref_rotate_by) {\r\n            let transform = \"rotate(\";\r\n            transform = transform + exp.curr_trial_data.ref_rotate_by.toString();\r\n            transform = transform + \" \" + (x_pos - width).toString();\r\n            transform = transform + \" \" + (y_pos - width).toString();\r\n            transform = transform + \")\";\r\n            d3.select(\"#square_shape_ref\").attr(\"transform\", transform);\r\n        }\r\n        if (is_ref === false) {\r\n            d3.select(\"body\")\r\n                .on(\"keydown\", () => {\r\n                    let event = d3.event;\r\n                    if (event.key === \"m\" || event.key === \"z\") {\r\n                        width = calculate_size_change(event.key, width, \"square\");\r\n                        d3.select(\"#square_shape_mod\")\r\n                            .attr(\"width\", width)\r\n                            .attr(\"height\", width);\r\n\r\n                        // Need to adjust translation for when adjustable\r\n                        // interf is overlapping.\r\n                        if (options && options.scaling && options.scaling === \"scales_indep\"){\r\n\r\n                            let x_translation;\r\n                            let y_translation;\r\n\r\n                            // If interf is larger than ref\r\n                            if (subcond.mod_ratio > 1) {\r\n                                x_translation = x_pos - ((width * subcond.mod_ratio) / 4);\r\n                                y_translation = y_pos - ((width * subcond.mod_ratio) / 4);\r\n                            } else { // If interf is smaller than ref (so behind + center of ref)\r\n\r\n                                x_translation = x_pos - ((width * subcond.mod_ratio));\r\n                                y_translation = y_pos - ((width * subcond.mod_ratio));\r\n                            }\r\n                            \r\n                            d3.select(\"#square_shape_mod\")\r\n                                .attr(\"x\", x_translation)\r\n                                .attr(\"y\", y_translation);\r\n                        }\r\n                        \r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    if (options && options.flicker) {\r\n        shape.call(flicker_shape, fill, outline, options.flicker.on, options.flicker.off);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Plots a triangle. \r\n *\r\n * @param chart {object}\r\n * @param radius {number}\r\n * @param y_pos {number}\r\n * @param x_pos {number}\r\n * @param is_ref {boolean} if the shape is a reference shape or a modifiable shape,\r\n *                         is_ref === true if the shape is a reference shape\r\n * @param outline {string}\r\n * @param fill {string}\r\n * @param options {object}\r\n */\r\nfunction plot_triangle(chart, radius, y_pos, x_pos, is_ref, outline, fill, options) {\r\n\r\n    // for equilateral triangles, height = side * sqrt(3) / 2;\r\n    let short_side = radius;\r\n    let long_side = radius;\r\n    let height = 0, width = 0;\r\n\r\n    let poly = [];\r\n    if (!is_ref) {\r\n        if (exp.curr_trial_data.width_height_ratio) {\r\n            long_side = short_side * exp.curr_trial_data.width_height_ratio;\r\n            height = Math.sqrt(Math.pow(long_side, 2) - Math.pow(short_side / 2, 2));\r\n            width = short_side;\r\n            if (exp.curr_trial_data.mod_rotate_by) {\r\n                poly = [\r\n                    {\"x\":(0.5 * height + x_pos), \"y\":(y_pos)},\r\n                    {\"x\":(-0.5 * height + x_pos), \"y\":(-0.5 * width + y_pos)},\r\n                    {\"x\":(-0.5 * height + x_pos), \"y\":(0.5 * width + y_pos)}];\r\n            } else {\r\n                poly = [\r\n                    {\"x\":(x_pos), \"y\":(-0.5 * height + y_pos)},\r\n                    {\"x\":(-0.5 * width + x_pos), \"y\":(0.5 * height + y_pos)},\r\n                    {\"x\":(0.5 * width + x_pos), \"y\":(0.5 * height + y_pos)}];\r\n            }\r\n        } else {\r\n            height = radius * Math.sqrt(3)/2;\r\n            poly = [\r\n                {\"x\":x_pos, \"y\":(-0.5 * height + y_pos)},\r\n                {\"x\":(-0.5 * radius + x_pos), \"y\":(0.5 * height + y_pos)},\r\n                {\"x\":(0.5 * radius + x_pos), \"y\":(0.5 * height + y_pos)}];\r\n        }\r\n    } else {\r\n        height = radius * Math.sqrt(3)/2;\r\n        poly = [\r\n            {\"x\":x_pos, \"y\":(-0.5 * height + y_pos)},\r\n            {\"x\":(-0.5 * radius + x_pos), \"y\":(0.5 * height + y_pos)},\r\n            {\"x\":(0.5 * radius + x_pos), \"y\":(0.5 * height + y_pos)}];\r\n    }\r\n\r\n    let shape = chart.append(\"polygon\")\r\n                        .attr(\"points\",function() {\r\n                            return poly.map(function(d) { return [d.x, d.y].join(\",\"); }).join(\" \");})\r\n                        .attr(\"fill\", fill)\r\n                        .attr(\"stroke\", outline)\r\n                        .attr(\"id\", is_ref? \"triangle_shape_ref\" : \"triangle_shape_mod\");\r\n\r\n    if (is_ref === false) {\r\n        d3.select(\"body\")\r\n            .on(\"keydown\", function () {\r\n                let event = d3.event;\r\n                if (event.key === \"m\" || event.key === \"z\") {\r\n                    // decide the amount of change;\r\n                    radius = calculate_size_change(event.key, radius, \"triangle\");\r\n                    // plot the changed shape\r\n                    short_side = radius;\r\n                    if (exp.curr_trial_data.width_height_ratio) {\r\n                        long_side = short_side * exp.curr_trial_data.width_height_ratio;\r\n                        height = Math.sqrt(Math.pow(long_side, 2) - Math.pow(short_side / 2, 2));\r\n                        width = short_side;\r\n                        if (exp.curr_trial_data.mod_rotate_by) {\r\n                            poly = [\r\n                                {\"x\":(0.5 * height + x_pos), \"y\":(y_pos)},\r\n                                {\"x\":(-0.5 * height + x_pos), \"y\":(-0.5 * width + y_pos)},\r\n                                {\"x\":(-0.5 * height + x_pos), \"y\":(0.5 * width + y_pos)}];\r\n                        } else {\r\n                            poly = [\r\n                                {\"x\":(x_pos), \"y\":(-0.5 * height + y_pos)},\r\n                                {\"x\":(-0.5 * width + x_pos), \"y\":(0.5 * height + y_pos)},\r\n                                {\"x\":(0.5 * width + x_pos), \"y\":(0.5 * height + y_pos)}];\r\n                        }\r\n                    } else {\r\n                        height = short_side * Math.sqrt(3)/2;\r\n                        poly = [\r\n                            {\"x\":x_pos, \"y\":(-0.5 * height + y_pos)},\r\n                            {\"x\":(-0.5 * short_side + x_pos), \"y\":(0.5 * height + y_pos)},\r\n                            {\"x\":(0.5 * short_side + x_pos), \"y\":(0.5 * height + y_pos)}];\r\n                    }\r\n\r\n                   chart.select(\"#triangle_shape_mod\")\r\n                        .attr(\"points\",function() {\r\n                            return poly.map(function(d) { return [d.x, d.y].join(\",\"); }).join(\" \");});\r\n\r\n                   adjust_interference_shape(radius);\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    if (options && options.flicker) {\r\n        shape.call(flicker_shape, fill, outline, options.flicker.on, options.flicker.off);\r\n    }\r\n}\r\n\r\n/**\r\n * Plots a rectangle.\r\n *\r\n * @param chart {object}\r\n * @param size {number}\r\n * @param y_pos {number}\r\n * @param x_pos {number}\r\n * @param is_ref {boolean}\r\n * @param outline {string}\r\n * @param fill {string}\r\n * @param options {object}\r\n */\r\nfunction plot_rectangle(chart, size, y_pos, x_pos, is_ref, outline, fill, options) {\r\n    let short_side = size;\r\n    let long_side = size;\r\n    let height = 0, width = 0;\r\n    if (exp.curr_trial_data.width_height_ratio) {\r\n        long_side = short_side * exp.curr_trial_data.width_height_ratio;\r\n    }\r\n    width = short_side;\r\n    height = long_side;\r\n    let shape = chart.append(\"rect\")\r\n                    .attr(\"id\", is_ref? \"rect_shape_ref\": \"rect_shape_mod\")\r\n                    .attr(\"x\", x_pos - width / 2)\r\n                    .attr(\"y\", y_pos - height / 2) // the x and y core_attributes for square\r\n                    // refers to the position of the upper left corner\r\n                    // however x_pos and y_pos specifies the center of the shape\r\n                    .attr(\"width\", width)\r\n                    .attr(\"height\", height)\r\n                    .attr(\"fill\", fill)\r\n        .attr(\"stroke\", outline);\r\n    if (is_ref === false && exp.curr_trial_data.mod_rotate_by) {\r\n        let transform = \"rotate(\";\r\n        transform = transform + exp.curr_trial_data.mod_rotate_by.toString();\r\n        transform = transform + \" \" + (x_pos).toString();\r\n        transform = transform + \" \" + (y_pos).toString();\r\n        transform = transform + \")\";\r\n        console.log(transform);\r\n        d3.select(\"#rect_shape_mod\").attr(\"transform\", transform);\r\n    }\r\n\r\n    if (is_ref === false) {\r\n        d3.select(\"body\")\r\n            .on(\"keydown\", function () {\r\n                let event = d3.event;\r\n                if (event.key === \"m\" || event.key === \"z\") {\r\n                    size = calculate_size_change(event.key, size, \"rectangle\");\r\n                    let short_side = size;\r\n                    let long_side = exp.curr_trial_data.width_height_ratio * short_side;\r\n                    let new_width = 0, new_height = 0;\r\n                    new_width = short_side;\r\n                    new_height = long_side;\r\n                    d3.select(\"#rect_shape_mod\")\r\n                        .attr(\"width\", new_width)\r\n                        .attr(\"height\", new_height);\r\n                }\r\n            });\r\n    }\r\n\r\n    if (options && options.flicker) {\r\n        shape.call(flicker_shape, fill, outline, options.flicker.on, options.flicker.off);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Plots a line.\r\n *\r\n * @param chart {object}\r\n * @param width {number}\r\n * @param y_pos {number}\r\n * @param x_pos {number}\r\n * @param is_ref {boolean}\r\n * @param outline\r\n * @param options {object}\r\n */\r\nfunction plot_line(chart, width, y_pos, x_pos, is_ref, outline, options) {\r\n\r\n    let x1, x2, y1, y2;\r\n    if (!is_ref) {\r\n        x1 = x_pos - (width / 2) * Math.sin(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\r\n        x2 = x_pos + (width / 2) * Math.sin(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\r\n        y1 = y_pos - (width / 2) * Math.cos(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\r\n        y2 = y_pos + (width / 2) * Math.cos(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\r\n    } else {\r\n        x1 = x_pos - width / 2;\r\n        x2 = x_pos + width / 2;\r\n        y1 = y_pos;\r\n        y2 = y_pos;\r\n    }\r\n    let shape = chart.append(\"line\")\r\n                        .style(\"stroke\", outline)\r\n                        .style(\"stroke-width\", exp.curr_trial_data.stroke_width)\r\n                        .attr(\"id\", is_ref? \"line_shape_ref\": \"line_shape_mod\")\r\n                        .attr(\"x1\", x1)\r\n                        .attr(\"x2\", x2)\r\n                        .attr(\"y1\", y1)\r\n                        .attr(\"y2\", y2);\r\n    if (is_ref === false) {\r\n        d3.select(\"body\")\r\n            .on(\"keydown\", function () {\r\n                let event = d3.event;\r\n                if (event.key === \"m\" || event.key === \"z\") {\r\n                    width = calculate_size_change(event.key, width, \"line\");\r\n                    if (!is_ref) {\r\n                        x1 = x_pos - (width / 2) * Math.sin(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\r\n                        x2 = x_pos + (width / 2) * Math.sin(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\r\n                        y1 = y_pos - (width / 2) * Math.cos(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\r\n                        y2 = y_pos + (width / 2) * Math.cos(exp.curr_trial_data.mod_rotate_by * Math.PI / 180);\r\n                    } else {\r\n                        x1 = x_pos - width / 2;\r\n                        x2 = x_pos + width / 2;\r\n                        y1 = y_pos;\r\n                        y2 = y_pos;\r\n                    }\r\n                    d3.select(\"#line_shape_mod\")\r\n                        .attr(\"x1\", x1)\r\n                        .attr(\"x2\", x2)\r\n                        .attr(\"y1\", y1)\r\n                        .attr(\"y2\", y2);\r\n                }\r\n            });\r\n    }\r\n\r\n    if (options && options.flicker) {\r\n        shape.call(flicker_shape, \"none\", outline, options.flicker.on, options.flicker.off);\r\n    }\r\n}\r\n\r\n/**\r\n * Plots text centered at the bottom of the page. \r\n *\r\n * @param chart {object}\r\n *        text  {string}\r\n */\r\nfunction plot_text(chart, text){\r\n\r\n    chart.append(\"text\")\r\n        .attr(\"x\", \"50%\")\r\n        .attr(\"y\", \"95%\")\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"font-family\", \"sans-serif\")\r\n        .attr(\"font-size\", \"28px\")\r\n        .attr(\"fill\", \"black\")\r\n        .text(()=>{\r\n            return text;\r\n        });\r\n}\r\n\r\n/**\r\n * Flickers on and off the D3 selection.\r\n *\r\n * @param {object} selection\r\n *        {string} fill\r\n *        {string} stroke\r\n *        {double} on_duration - duration selection displays for in ms\r\n *        {double} off_duration - duration selection becomes invisible for in ms\r\n */\r\nfunction flicker_shape(selection, fill, stroke, on_duration, off_duration) {\r\n\r\n    setInterval(display_off, on_duration);\r\n    setInterval(display_on, on_duration + off_duration);\r\n\r\n    function display_off() {\r\n        selection.attr(\"fill\", \"none\")\r\n                 .attr(\"stroke\", \"WHITE\");\r\n    }\r\n\r\n    function display_on() {\r\n        selection.attr(\"fill\", fill)\r\n                 .attr(\"stroke\", stroke);\r\n    }\r\n}\r\n\r\n/**\r\n * Calculates the next size and saves the data.\r\n *\r\n * @param {object}  event_key  m to increase the size and z to decrease the size\r\n * @param {double}  size the previous size of the shape\r\n * @param {string}  the type of shape\r\n *\r\n * @returns {number}  the new size in pixels\r\n */\r\nfunction calculate_size_change(event_key, size, shape_type) {\r\n\r\n    let sign = event_key === \"m\" ? 1 : -1;\r\n    let change = Math.random() * exp.PIXEL_TO_CM * exp.MAX_STEP_SIZE;\r\n    let new_radius = size + sign * change;\r\n    let size_in_px = new_radius;\r\n    let size_in_cm = new_radius / exp.PIXEL_TO_CM;\r\n\r\n    exp.save_adjustment(change * sign / exp.PIXEL_TO_CM);\r\n    exp.save_estimated_size(size_in_cm, \"cm\");\r\n\r\n    let area = exp.compute_shape_area(shape_type, size_in_px);\r\n    exp.save_estimated_area(area);\r\n\r\n    return size_in_px;\r\n}\r\n\r\n/**\r\n * Calculates the next angle and saves the data.\r\n *\r\n * @param {object}  event_key  m to increase the size and z to decrease the size\r\n * @param {double}  previous angle\r\n * @param {double}  radius of the fan\r\n *\r\n * @returns {number}  the new angle in degrees\r\n */\r\nfunction calculate_angle_change(event_key, angle, radius) {\r\n\r\n    let current_constants = exp.curr_conditions_constants[exp.curr_condition_index];\r\n    let max_step_size = current_constants.max_step_size;\r\n\r\n    let sign = event_key === \"m\" ? 1 : -1;\r\n    let change = Math.random() * max_step_size;\r\n    let diff_angle = sign * change;\r\n\r\n    let new_angle = angle + diff_angle;\r\n\r\n    exp.save_adjustment(diff_angle);\r\n    exp.save_estimated_size(new_angle, \"angle\");\r\n\r\n    let area = exp.compute_fan_area(new_angle, radius);\r\n    exp.save_estimated_area(area);\r\n\r\n    return new_angle;\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 264,
    "kind": "function",
    "name": "plot_shape",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~plot_shape",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "Routes to correct plotting code depending on shape type.",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "shape",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean} if the shape is a reference shape or a modifiable shape"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": "{string} outline color"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fill",
        "description": "{string} fill color"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "{string} can be: {\"scaling\": \"scales_with_mod\"   This shape serves as bg to the modifiable shape\nOR \n\"scales_indep\"      This shape is a bg shape, but is the one being modified\n},\n\n{\"fan-attributes\": {\"slice-alignment\"         : \"top\" or \"bottom\",   Position of slice in pie\n\"angle-size\"              : some_value,          Angle in degrees of the fan\n},          \n\n{\"flicker\": {\"on\": on_duration,    The duration in ms for the shape to appear\n\"off\": off_duration}} The duration in ms for the shape to disappear"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "function",
    "name": "plot_circle",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~plot_circle",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "Plots a circle.",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "diameter",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean} if the shape is a reference shape or a modifiable shape"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fill",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "{string}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 266,
    "kind": "function",
    "name": "plot_fan",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~plot_fan",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "Plots a fan.",
    "lineNumber": 261,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean} if the shape is a reference shape or a modifiable shape,\n                        is_ref === true if the shape is a reference shape"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fill",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "{object}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 267,
    "kind": "function",
    "name": "compute_angle_shift",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~compute_angle_shift",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "Returns the amount of rotational shift in degrees to align the angle \nat the desired alignment.\n ",
    "lineNumber": 329,
    "params": [
      {
        "nullable": null,
        "types": [
          "double"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "size of angle in degrees\n       {string}   alignment - e.g. bottom or top of circle"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 268,
    "kind": "function",
    "name": "adjust_interference_shape",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~adjust_interference_shape",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "On conditions square,circle interference and circle interference, will trigger\nthe underlying bound bg shape to scale with the mod shape\n ",
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "double"
        ],
        "spread": false,
        "optional": false,
        "name": "size_change",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 269,
    "kind": "function",
    "name": "plot_square",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~plot_square",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "Plots a square.",
    "lineNumber": 393,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean} if the shape is a reference shape or a modifiable shape,\n                        is_ref === true if the shape is a reference shape"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fill",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "{object}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "plot_triangle",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~plot_triangle",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "Plots a triangle. ",
    "lineNumber": 511,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean} if the shape is a reference shape or a modifiable shape,\n                        is_ref === true if the shape is a reference shape"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fill",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "{object}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 271,
    "kind": "function",
    "name": "plot_rectangle",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~plot_rectangle",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "Plots a rectangle.",
    "lineNumber": 616,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fill",
        "description": "{string}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "{object}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 272,
    "kind": "function",
    "name": "plot_line",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~plot_line",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "Plots a line.",
    "lineNumber": 680,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x_pos",
        "description": "{number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "is_ref",
        "description": "{boolean}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "{object}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 273,
    "kind": "function",
    "name": "plot_text",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~plot_text",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "Plots text centered at the bottom of the page. ",
    "lineNumber": 739,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "{object}\n       text  {string}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 274,
    "kind": "function",
    "name": "flicker_shape",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~flicker_shape",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "Flickers on and off the D3 selection.",
    "lineNumber": 762,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "selection",
        "description": "{string} fill\n       {string} stroke\n       {double} on_duration - duration selection displays for in ms\n       {double} off_duration - duration selection becomes invisible for in ms"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 275,
    "kind": "function",
    "name": "calculate_size_change",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~calculate_size_change",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "Calculates the next size and saves the data.",
    "lineNumber": 787,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}  the new size in pixels"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event_key",
        "description": "m to increase the size and z to decrease the size"
      },
      {
        "nullable": null,
        "types": [
          "double"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "the previous size of the shape"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "the",
        "description": "type of shape"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the new size in pixels"
    },
    "ignore": true
  },
  {
    "__docId__": 276,
    "kind": "function",
    "name": "calculate_angle_change",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~calculate_angle_change",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": null,
    "description": "Calculates the next angle and saves the data.",
    "lineNumber": 813,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}  the new angle in degrees"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event_key",
        "description": "m to increase the size and z to decrease the size"
      },
      {
        "nullable": null,
        "types": [
          "double"
        ],
        "spread": false,
        "optional": false,
        "name": "previous",
        "description": "angle"
      },
      {
        "nullable": null,
        "types": [
          "double"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "of the fan"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the new angle in degrees"
    },
    "ignore": true
  },
  {
    "__docId__": 277,
    "kind": "function",
    "name": "create_estimation_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~create_estimation_plot",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": "{create_estimation_plot}",
    "description": "Plots a regular estimation condition",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "{object} attributes"
      }
    ],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "function",
    "name": "create_estimation_interference_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~create_estimation_interference_plot",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": "{create_estimation_interference_plot}",
    "description": "Plots an interference estimation condition \n(e.g. conditions with \"interference\" in their name but are not multi)",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "{object} attributes"
      }
    ],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "function",
    "name": "create_estimation_multi_interference_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~create_estimation_multi_interference_plot",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": "{create_estimation_multi_interference_plot}",
    "description": "Plots a multi interference estimation condition \n(e.g. conditions with \"interference\" and \"multi\" in their name)",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "{object} attributes"
      }
    ],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "function",
    "name": "create_estimation_bisection_plot",
    "memberof": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js~create_estimation_bisection_plot",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-custom-plots/estimation_plot.js",
    "importStyle": "{create_estimation_bisection_plot}",
    "description": "Plots a bisection estimation condition\n(e.g. conditions with \"bisection\" in their name)",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "{object} attributes"
      }
    ],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js",
    "content": "/**\r\n * Alternates the plotting of target and distractor graph points so they are equally mixed, otherwise\r\n * one type of graph will be in the foreground and the other in the background depending on which one\r\n * is plotted first.\r\n * \r\n * @param {assoc array} target - target dataset and d3 attributes\r\n * @param {assoc array} distractor - distractor dataset and d3 attributes\r\n * @param {object} chart - d3 chart\r\n * @param {function} xscale - x value scale function\r\n * @param {function} yscale - y value scale function\r\n * @param {function} plot_graph - (chart, xscale, yscale, data, properties) d3 graph plotting function \r\n * @param {function} plot_mix_graph - (chart, xscale, yscale, large_points, graph_attributes, plot_graph)\r\n */\r\nexport function combine_target_and_distractor(target, distractor, chart, xscale, yscale, plot_graph, plot_mix_graph = null){\r\n  let larger_data;\r\n  let smaller_data;\r\n  \r\n  // Handle if the number of points between distractor & target are unequal\r\n  if (target[\"dataset\"].length >= distractor[\"dataset\"].length) {\r\n    larger_data = target;\r\n    smaller_data = distractor;\r\n  } else {\r\n    larger_data = distractor;\r\n    smaller_data = target;\r\n  }\r\n \r\n  // Get the number of groups and points per group in target and distractor\r\n  // Attributes without mix_data have 1 group in them (the total set)\r\n  let NUM_LARGER_GROUPS = get_number_of_data_groups(larger_data[\"graph_attributes\"][\"mix_data\"]);\r\n  let NUM_SMALLER_GROUPS = get_number_of_data_groups(smaller_data[\"graph_attributes\"][\"mix_data\"]);\r\n  let LARGER_GROUP_NUMBER = math.max(NUM_LARGER_GROUPS,NUM_SMALLER_GROUPS);\r\n\r\n  let POINTS_PER_LARGER_GROUP = larger_data[\"dataset\"].length / NUM_LARGER_GROUPS;\r\n  let POINTS_PER_SMALLER_GROUP = smaller_data[\"dataset\"].length / NUM_SMALLER_GROUPS;\r\n  let surplus_large_points = larger_data[\"dataset\"].length - smaller_data[\"dataset\"].length;\r\n\r\n  if((surplus_large_points % NUM_LARGER_GROUPS && larger_data[\"graph_attributes\"][\"mix_type\"] === \"attribute\")){\r\n    throw new Error(\" Incompatible Sets of Point sizes for dual Mixed Attribute plotting. \" +\r\n    `The surplus number of points is ${surplus_large_points} and it should be a multiple of ${NUM_LARGER_GROUPS}.`)\r\n  }\r\n\r\n  // Plotting surplus large points first\r\n  // Surplus points should be a valid number for plot_mix_graph\r\n  let large_points = larger_data[\"dataset\"].slice(0, surplus_large_points);\r\n  plot_points(chart, xscale, yscale, large_points, larger_data[\"graph_attributes\"], plot_graph , plot_mix_graph);\r\n  let plotted_large_points = surplus_large_points;\r\n\r\n  // Plotting remaining points in mix_data groups\r\n  let plotted_small_points = 0;\r\n  for(let j = 0; j < POINTS_PER_SMALLER_GROUP; j++){\r\n    let start_index = j * LARGER_GROUP_NUMBER;\r\n    let large_points = larger_data[\"dataset\"].slice(start_index, start_index + LARGER_GROUP_NUMBER);\r\n    plot_points(chart, xscale, yscale, large_points, larger_data[\"graph_attributes\"], plot_graph , plot_mix_graph);\r\n    let small_points = smaller_data[\"dataset\"].slice(start_index, start_index + LARGER_GROUP_NUMBER);\r\n    plot_points(chart, xscale, yscale, small_points, smaller_data[\"graph_attributes\"], plot_graph, plot_mix_graph)\r\n    plotted_small_points += LARGER_GROUP_NUMBER;\r\n    plotted_large_points += LARGER_GROUP_NUMBER;\r\n    if(plotted_small_points >= smaller_data[\"dataset\"].length){\r\n      break;\r\n    }\r\n  }\r\n \r\n}\r\n\r\n/**\r\n * Gets the number of data groups in the mix_data.\r\n * If it is not a mix condition, there is only 1 group which is the\r\n * default group\r\n * \r\n * @param {object} mix_data \r\n * @returns {number}\r\n */\r\nfunction get_number_of_data_groups(mix_data){\r\n  if(mix_data === null) return 1;\r\n  let count = 0;\r\n  for(let key in mix_data){    \r\n    count += mix_data[key].length;\r\n  }\r\n  return count;\r\n}\r\n\r\n/**\r\n * Plots the given points, using the plot_mix_graph function if appropiate\r\n * or the given plot_graph function.\r\n * \r\n * @param {*} chart \r\n * @param {*} xscale \r\n * @param {*} yscale \r\n * @param {*} points \r\n * @param {*} graph_attributes \r\n * @param {*} plot_graph \r\n * @param {*} plot_mix_graph \r\n */\r\nfunction plot_points(chart, xscale, yscale, points, graph_attributes , plot_graph , plot_mix_graph){\r\n  if(graph_attributes[\"mix_data\"] != null){\r\n    plot_mix_graph(chart, xscale, yscale, points, graph_attributes, plot_graph)\r\n  } else{\r\n    plot_graph(chart, xscale, yscale, points, graph_attributes);\r\n  }\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "function",
    "name": "combine_target_and_distractor",
    "memberof": "scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js~combine_target_and_distractor",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js",
    "importStyle": "{combine_target_and_distractor}",
    "description": "Alternates the plotting of target and distractor graph points so they are equally mixed, otherwise\none type of graph will be in the foreground and the other in the background depending on which one\nis plotted first.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "target dataset and d3 attributes"
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "distractor",
        "description": "distractor dataset and d3 attributes"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "d3 chart"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "xscale",
        "description": "x value scale function"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "yscale",
        "description": "y value scale function"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "plot_graph",
        "description": "(chart, xscale, yscale, data, properties) d3 graph plotting function"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "plot_mix_graph",
        "description": "(chart, xscale, yscale, large_points, graph_attributes, plot_graph)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "function",
    "name": "get_number_of_data_groups",
    "memberof": "scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js~get_number_of_data_groups",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js",
    "importStyle": null,
    "description": "Gets the number of data groups in the mix_data.\nIf it is not a mix condition, there is only 1 group which is the\ndefault group",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "mix_data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 284,
    "kind": "function",
    "name": "plot_points",
    "memberof": "scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js~plot_points",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js",
    "importStyle": null,
    "description": "Plots the given points, using the plot_mix_graph function if appropiate\nor the given plot_graph function.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "xscale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "yscale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "points",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "graph_attributes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "plot_graph",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "plot_mix_graph",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 285,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js",
    "content": "/**\r\n * Plots the given plot_graph function using the given mix_type\r\n * @param {object} chart d3 chart reference\r\n * @param {function} x_data_scale data scaling function for the x values \r\n * @param {function} y_data_scale  data scaling function for the y values\r\n * @param {number[number[]]} dataset {number[x_value, y_value]{}\r\n * @param {object} properties graph properties\r\n * @param {function} plot_graph (chart, x_data_scale, y_data_scale, dataset, properties)\r\n *  \r\n */\r\nexport function plot_mixed_attribute_graph(chart, x_data_scale, y_data_scale, dataset, properties, plot_graph){\r\n  switch(properties.mix_type){\r\n    case \"none\":\r\n      plot_graph(chart, x_data_scale, y_data_scale, dataset, properties);\r\n      //throw Error(`plot_mixed_attribute_graph called for \"none\" mix_type.`)\r\n      break;\r\n    case \"attribute\":\r\n      prepare_mix_graph(chart, x_data_scale, y_data_scale, dataset, properties, plot_graph);\r\n      break;\r\n    case \"targeted\":\r\n      prepare_targeted_mix_graph(chart, x_data_scale, y_data_scale, dataset, properties, plot_graph);\r\n      break;\r\n    case \"attribute_array\":\r\n      prepare_array_mix_graph(chart, x_data_scale, y_data_scale, dataset, properties, plot_graph);\r\n      break;\r\n    default: \r\n      throw Error(`mix_type ${properties.mix_type} has not been handled.`)\r\n  }\r\n}\r\n\r\n/**\r\n * Will plot points depending on what is defined as the mix attribute,\r\n * and will sample (w/o replacement) from the dataset to display points\r\n * with all defined values for the mix attribute.\r\n *\r\n * E.g. if properties[\"mix_data\"] = {\"point_size\" = [1, 2, 3, 4]}\r\n *      and there are 100 points in the dataset, will plot 25 points with\r\n *      point_size = 1, 25 points with point_size = 2, etc...\r\n * \r\n * E.g. if properties[\"mix_data\"] = {\"point_size\" = [1, 2], \"point_color\" = [black, blue]}\r\n *      and there are 100 points in the dataset, will first convert the set into the array \r\n *      [{\"point_size\" = 1, \"point_color\" = red}, {\"point_size\" = 2, \"point_color\" = red},\r\n *      {\"point_size\" = 1, \"point_color\" = blue}, {\"point_size\" = 2, \"point_color\" = blue}], \r\n *      then plot 25 points with point_size = 1 and point_color = red, \r\n *      25 points with point_size = 2 and point_color = red, etc...\r\n *\r\n * E.g. if properties[\"mix_data\"] = {\"point_size\" = [1, 2], \"point_color\" = [black, blue]}\r\n *      and there are 100 points in the dataset, will first convert the set into the array \r\n *      [{\"point_size\" = 1, \"point_color\" = red}, {\"point_size\" = 2, \"point_color\" = red},\r\n *      {\"point_size\" = 1, \"point_color\" = blue}, {\"point_size\" = 2, \"point_color\" = blue}], \r\n *      then plot 25 points with point_size = 1 and point_color = red, \r\n *      25 points with point_size = 2 and point_color = red, etc...\r\n *\r\n * @param {object}         chart\r\n * @param {function}       xscale\r\n * @param {function}       yscale\r\n * @param {number[]}          dataset ([x_value, y_value])\r\n * @param {assoc. array}   e.g. {\"point_shape\": \"square\", \"point_size\": 5 .... }\r\n */\r\nexport function prepare_mix_graph(chart, xscale, yscale, dataset, properties, plot_graph) {\r\n\r\n    let NUM_GROUPS = 1;\r\n    let mix_attribs = []\r\n    let mix_attribs_pairs = [{}];\r\n  \r\n    for (let x = 0; x < Object.keys(properties[\"mix_data\"]).length; x++){\r\n      let mix_attrib = Object.keys(properties[\"mix_data\"])[x];\r\n      mix_attribs.push(mix_attrib);\r\n      NUM_GROUPS = NUM_GROUPS * properties[\"mix_data\"][mix_attrib].length;\r\n  \r\n      let new_mix_attribs = [];\r\n      properties[\"mix_data\"][mix_attrib].forEach(e => {\r\n  \r\n        let temp_mix_attribs = [];\r\n        mix_attribs_pairs.forEach(original => {\r\n          var copy = {};\r\n          for(var key in original)\r\n            {\r\n                copy[key] = original[key];\r\n            }\r\n          temp_mix_attribs.push(copy)\r\n        });\r\n  \r\n        temp_mix_attribs.forEach(element => {\r\n          element[mix_attrib] = e;\r\n        });\r\n        new_mix_attribs = new_mix_attribs.concat(temp_mix_attribs);  \r\n      });\r\n      mix_attribs_pairs = new_mix_attribs;\r\n    }\r\n  \r\n    let POINTS_PER_GROUP = dataset.length / NUM_GROUPS;\r\n  \r\n    if(dataset.length % NUM_GROUPS > 0){\r\n      throw Error(\r\n      `ERROR: DATASET CAN'T BE DEVIDED BY NUM_GROUPS EVENLY.\r\n      dataset.length: ${dataset.length}\r\n      NUM_GROUPS: ${NUM_GROUPS}\r\n      POINTS_PER_GROUP: ${POINTS_PER_GROUP}\r\n      dataset.length % NUM_GROUPS = ${(dataset.length % NUM_GROUPS)}` \r\n      )\r\n    }\r\n  \r\n  \r\n    for (let i = 0; i < NUM_GROUPS; i++) {\r\n  \r\n      let grouped_dataset = [];\r\n  \r\n      for (let j = 0; j < POINTS_PER_GROUP; j++) {\r\n  \r\n        let rand_index = Math.floor(Math.random() * dataset.length);\r\n        grouped_dataset.push(dataset[rand_index]);\r\n  \r\n        // Remove from dataset\r\n        dataset.splice(rand_index, 1);\r\n      }\r\n  \r\n      // Override the property if it is a mix attribute\r\n    \r\n      for (let y = 0; y < mix_attribs.length; y++) {\r\n        properties[mix_attribs[y]] = mix_attribs_pairs[i][mix_attribs[y]];         \r\n      }\r\n      // Plot this group of points with the ith value for the mix attribute\r\n      plot_graph(chart, xscale, yscale, grouped_dataset, properties);\r\n    }\r\n  }\r\n  \r\n/**\r\n * The same as prepare_mix_graph but now the first item in the mix by attributes array\r\n * is treated as the target\r\n * The user can specify how many target points there are\r\n * The rest of the mix by attributes are treated as distractors\r\n * and the remaining number of points is distributed evenly among them\r\n * \r\n * e.g. if if properties[\"mix_by_attribute_targeted\"] = {\"point_size\" = [1, 2, 3, 4], num_target: 10}\r\n *      and there are 100 points in the dataset, will plot 10 points with\r\n *      point_size = 1, 30 points with point_size = 2, 3 and 4.\r\n *\r\n * @param {object}         chart\r\n * @param {function}       xscale\r\n * @param {function}       yscale\r\n * @param {number[]}       dataset ([x_value, y_value])\r\n * @param {assoc. array}   e.g. {\"point_shape\": \"square\", \"point_size\": 5 .... }\r\n */\r\nexport function prepare_targeted_mix_graph(chart, xscale, yscale, dataset, properties, plot_graph) {\r\n  let mix_attrib = Object.keys(properties[\"mix_data\"])[0];\r\n  let POINTS_FOR_TARGET = properties[\"mix_data\"][\"num_target\"];\r\n  \r\n  let NUM_GROUPS = properties[\"mix_data\"][mix_attrib].length;\r\n  if (POINTS_FOR_TARGET < 0) {\r\n    NUM_GROUPS = NUM_GROUPS - 1;\r\n  }\r\n  let POINTS_PER_GROUP = (dataset.length - POINTS_FOR_TARGET) / NUM_GROUPS;\r\n\r\n  for (let i = 0; i < NUM_GROUPS; i++) {\r\n\r\n    let grouped_dataset = [];\r\n    if (i == 0 && POINTS_FOR_TARGET == 0) {\r\n      continue;\r\n    }\r\n  \r\n    if (i == 0) {\r\n      for (let h = 0; h < POINTS_FOR_TARGET; h++) {\r\n        let rand_index = Math.floor(Math.random() * dataset.length);\r\n        grouped_dataset.push(dataset[rand_index]);\r\n        // Remove from dataset\r\n        dataset.splice(rand_index, 1);\r\n      }\r\n    } else {\r\n        for (let j = 0; j < POINTS_PER_GROUP; j++) {\r\n          let rand_index = Math.floor(Math.random() * dataset.length);\r\n          grouped_dataset.push(dataset[rand_index]);\r\n\r\n          // Remove from dataset\r\n          dataset.splice(rand_index, 1);\r\n        }\r\n    }\r\n\r\n    // Override the property if it is a mix attribute\r\n    properties[mix_attrib] = properties[\"mix_data\"][mix_attrib][i];\r\n    // Plot this group of points with the ith value for the mix attribute\r\n    plot_graph(chart, xscale, yscale, grouped_dataset, properties);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * similar to mix_by_attribute, prepare_array_mix_graph will plot points\r\n * depending on what is defined as the mix attributes. However, mix_by_attribute_array\r\n * allows for several attributes to be changed within a single graph.\r\n * \r\n * e.g. if properties[\"mix_by_attribute_array\"] =\r\n *      [{\"point_size\" = 1}, \r\n *      {\"point_size\" = 2, \"point_color\" = blue, \"point_shape\" = circle}, \r\n *      {\"point_size\" = 3, \"point_color\" = red},\r\n *      {\"point_size\" = 4, \"point_color\" = red},]\r\n *      and there are 100 points in the dataset, will plot 25 points with\r\n *      point_size = 1, 25 points with point_size = 2 and point_color = blue and point_shape = circle, etc...\r\n * \r\n * \r\n * @param {*} chart \r\n * @param {*} xscale \r\n * @param {*} yscale \r\n * @param {*} dataset ([x_value, y_value])\r\n * @param {*} properties {\"point_shape\": \"square\", \"point_size\": 5 .... }\r\n */\r\nexport function prepare_array_mix_graph(chart, xscale, yscale, dataset, properties, plot_graph) {\r\n  let NUM_GROUPS = properties[\"mix_data\"].length;\r\n  let mix_attrib_array = properties[\"mix_data\"];\r\n  let POINTS_PER_GROUP = dataset.length / NUM_GROUPS;\r\n\r\n  for (let i = 0; i < NUM_GROUPS; i++) {\r\n\r\n    let grouped_dataset = [];\r\n\r\n    for (let j = 0; j < POINTS_PER_GROUP; j++) {\r\n      //make sure the dataset is not empty\r\n      if(dataset.length > 0){\r\n        let rand_index = Math.floor(Math.random() * dataset.length);\r\n        grouped_dataset.push(dataset[rand_index]);\r\n\r\n        // Remove from dataset\r\n        dataset.splice(rand_index, 1);\r\n      }\r\n    }\r\n\r\n    // Override the property if it is a mix attribute\r\n    for(var attrib in mix_attrib_array[i]){\r\n      // console.log(\"attrib\")\r\n      // console.log(attrib);\r\n      properties[attrib] = mix_attrib_array[i][attrib];   \r\n    }    \r\n\r\n    // console.log(\"properties\")\r\n    // console.log(properties);\r\n\r\n    // Plot this group of points with the ith value for the mix attribute\r\n    plot_graph(chart, xscale, yscale, grouped_dataset, properties);\r\n  }\r\n}\r\n  ",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "function",
    "name": "plot_mixed_attribute_graph",
    "memberof": "scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js~plot_mixed_attribute_graph",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js",
    "importStyle": "{plot_mixed_attribute_graph}",
    "description": "Plots the given plot_graph function using the given mix_type",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "d3 chart reference"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "x_data_scale",
        "description": "data scaling function for the x values"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "y_data_scale",
        "description": "data scaling function for the y values"
      },
      {
        "nullable": null,
        "types": [
          "number[number[]]"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "{number[x_value, y_value]{}"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "graph properties"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "plot_graph",
        "description": "(chart, x_data_scale, y_data_scale, dataset, properties)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 287,
    "kind": "function",
    "name": "prepare_mix_graph",
    "memberof": "scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js~prepare_mix_graph",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js",
    "importStyle": "{prepare_mix_graph}",
    "description": "Will plot points depending on what is defined as the mix attribute,\nand will sample (w/o replacement) from the dataset to display points\nwith all defined values for the mix attribute.\n\nE.g. if properties[\"mix_data\"] = {\"point_size\" = [1, 2, 3, 4]}\n     and there are 100 points in the dataset, will plot 25 points with\n     point_size = 1, 25 points with point_size = 2, etc...\n\nE.g. if properties[\"mix_data\"] = {\"point_size\" = [1, 2], \"point_color\" = [black, blue]}\n     and there are 100 points in the dataset, will first convert the set into the array \n     [{\"point_size\" = 1, \"point_color\" = red}, {\"point_size\" = 2, \"point_color\" = red},\n     {\"point_size\" = 1, \"point_color\" = blue}, {\"point_size\" = 2, \"point_color\" = blue}], \n     then plot 25 points with point_size = 1 and point_color = red, \n     25 points with point_size = 2 and point_color = red, etc...\n\nE.g. if properties[\"mix_data\"] = {\"point_size\" = [1, 2], \"point_color\" = [black, blue]}\n     and there are 100 points in the dataset, will first convert the set into the array \n     [{\"point_size\" = 1, \"point_color\" = red}, {\"point_size\" = 2, \"point_color\" = red},\n     {\"point_size\" = 1, \"point_color\" = blue}, {\"point_size\" = 2, \"point_color\" = blue}], \n     then plot 25 points with point_size = 1 and point_color = red, \n     25 points with point_size = 2 and point_color = red, etc...",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "xscale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "yscale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "([x_value, y_value])"
      },
      {
        "nullable": null,
        "types": [
          "assoc. array"
        ],
        "spread": false,
        "optional": false,
        "name": "e.g.",
        "description": "{\"point_shape\": \"square\", \"point_size\": 5 .... }"
      }
    ],
    "return": null
  },
  {
    "__docId__": 288,
    "kind": "function",
    "name": "prepare_targeted_mix_graph",
    "memberof": "scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js~prepare_targeted_mix_graph",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js",
    "importStyle": "{prepare_targeted_mix_graph}",
    "description": "The same as prepare_mix_graph but now the first item in the mix by attributes array\nis treated as the target\nThe user can specify how many target points there are\nThe rest of the mix by attributes are treated as distractors\nand the remaining number of points is distributed evenly among them\n\ne.g. if if properties[\"mix_by_attribute_targeted\"] = {\"point_size\" = [1, 2, 3, 4], num_target: 10}\n     and there are 100 points in the dataset, will plot 10 points with\n     point_size = 1, 30 points with point_size = 2, 3 and 4.",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "xscale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "yscale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "([x_value, y_value])"
      },
      {
        "nullable": null,
        "types": [
          "assoc. array"
        ],
        "spread": false,
        "optional": false,
        "name": "e.g.",
        "description": "{\"point_shape\": \"square\", \"point_size\": 5 .... }"
      }
    ],
    "return": null
  },
  {
    "__docId__": 289,
    "kind": "function",
    "name": "prepare_array_mix_graph",
    "memberof": "scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js~prepare_array_mix_graph",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js",
    "importStyle": "{prepare_array_mix_graph}",
    "description": "similar to mix_by_attribute, prepare_array_mix_graph will plot points\ndepending on what is defined as the mix attributes. However, mix_by_attribute_array\nallows for several attributes to be changed within a single graph.\n\ne.g. if properties[\"mix_by_attribute_array\"] =\n     [{\"point_size\" = 1}, \n     {\"point_size\" = 2, \"point_color\" = blue, \"point_shape\" = circle}, \n     {\"point_size\" = 3, \"point_color\" = red},\n     {\"point_size\" = 4, \"point_color\" = red},]\n     and there are 100 points in the dataset, will plot 25 points with\n     point_size = 1, 25 points with point_size = 2 and point_color = blue and point_shape = circle, etc...",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "xscale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "yscale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "([x_value, y_value])"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "{\"point_shape\": \"square\", \"point_size\": 5 .... }"
      }
    ],
    "return": null
  },
  {
    "__docId__": 290,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/d3-plot-features/visual_mask_generator.js",
    "content": "/**\r\n * D3 code for appending data to the graph depending on point shape type.\r\n *\r\n * @param {object}         chart\r\n * @param {function}       xscale\r\n * @param {function}       yscale\r\n * @param {array}          data ([x_value, y_value])\r\n * @param {assoc. array}   properties e.g. {\"point_shape\": \"square\", \"point_size\": 5 .... }\r\n */\r\nexport function prepare_visual_mask_graph(chart, properties) {\r\n    const width = properties[\"chart_width\"];\r\n    const height = properties[\"chart_height\"];\r\n    let rect_width = properties[\"chart_width\"]*properties[\"visual_masking_ratio\"];\r\n    let rect_height = properties[\"chart_height\"];\r\n    switch(properties[\"visual_masking_pos\"]){\r\n        case \"middle\":\r\n            chart.append(\"svg\")\r\n                .append(\"rect\")\r\n                .attr(\"class\",\"mask\")\r\n                .attr(\"x\",width/2-rect_width/2)\r\n                .attr(\"y\",width/2-rect_height/2)\r\n                .attr(\"width\",rect_width)\r\n                .attr(\"height\",rect_height)\r\n                .attr(\"fill\",\"white\")\r\n                .attr(\"transform\",`rotate(-45,${width/2},${width/2})`);\r\n            break;\r\n        case \"sides\":\r\n            rect_width = rect_width/2\r\n            // rectangle at right side\r\n            chart.append(\"svg\")\r\n                .append(\"rect\")\r\n                .attr(\"class\",\"mask\")\r\n                .attr(\"x\",width-rect_width)\r\n                .attr(\"y\",width/2-rect_height/2)\r\n                .attr(\"width\",rect_width)\r\n                .attr(\"height\",rect_height)\r\n                .attr(\"fill\",\"white\")\r\n                .attr(\"transform\",`rotate(-45,${width/2},${width/2})`);\r\n                // rectangle at left side\r\n            chart.append(\"svg\")\r\n                .append(\"rect\")\r\n                .attr(\"class\",\"mask\")\r\n                .attr(\"x\",0)\r\n                .attr(\"y\",width/2-rect_height/2)\r\n                .attr(\"width\",rect_width)\r\n                .attr(\"height\",rect_height)\r\n                .attr(\"fill\",\"white\")\r\n                .attr(\"transform\",`rotate(-45,${width/2},${width/2})`);\r\n            break;\r\n        case \"fence\":\r\n            let num_mask = 5;\r\n            rect_width = rect_width/num_mask;\r\n            for (let i = 0;i<num_mask;i++){\r\n              chart.append(\"svg\")\r\n                .append(\"rect\")\r\n                .attr(\"class\",\"mask\")\r\n                .attr(\"x\",i*rect_width/properties[\"visual_masking_ratio\"])\r\n                .attr(\"y\",width/2-rect_height/2)\r\n                .attr(\"width\",rect_width)\r\n                .attr(\"height\",rect_height)\r\n                .attr(\"fill\",\"white\")\r\n                .attr(\"transform\",`rotate(-45,${width/2},${width/2})`);\r\n            }\r\n            break;\r\n    } \r\n    switch(properties[\"visual_masking_type\"]){\r\n        case \"border\":\r\n            d3.selectAll(\".mask\")\r\n            .attr(\"stroke\",\"black\");\r\n            \r\n            // delete (cover with white) addtional mask segment beyond the axis\r\n            chart.append(\"svg\")\r\n            .append(\"rect\")\r\n            .attr(\"x\",0)\r\n            .attr(\"y\",width)\r\n            .attr(\"width\",width)\r\n            .attr(\"height\",height)\r\n            .attr(\"fill\",\"white\")\r\n            break;\r\n    }\r\n  }",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/d3-plot-features/visual_mask_generator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 291,
    "kind": "function",
    "name": "prepare_visual_mask_graph",
    "memberof": "scripts/experiment-properties/graphing/d3-plot-features/visual_mask_generator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/d3-plot-features/visual_mask_generator.js~prepare_visual_mask_graph",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/d3-plot-features/visual_mask_generator.js",
    "importStyle": "{prepare_visual_mask_graph}",
    "description": "D3 code for appending data to the graph depending on point shape type.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "xscale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "yscale",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "([x_value, y_value])"
      },
      {
        "nullable": null,
        "types": [
          "assoc. array"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "e.g. {\"point_shape\": \"square\", \"point_size\": 5 .... }"
      }
    ],
    "return": null
  },
  {
    "__docId__": 292,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/graphing_controller.js",
    "content": "import {create_scatter_plot} from \"/scripts/experiment-properties/graphing/d3-base-plots/scatter_plot.js\";\r\nimport {create_strip_plot} from \"/scripts/experiment-properties/graphing/d3-base-plots/strip_plot.js\";\r\nimport {create_ring_plot} from \"/scripts/experiment-properties/graphing/d3-base-plots/ring_plot.js\";\r\nimport {create_shape_plot} from \"/scripts/experiment-properties/graphing/d3-base-plots/shape_plot.js\";\r\nimport {create_parallel_plot} from \"/scripts/experiment-properties/graphing/d3-base-plots/parallel_plot.js\";\r\nimport {is_custom_plot, prepare_custom_plot} from \"/scripts/experiment-properties/graphing/custom_graphing_controller.js\";\r\nimport { GRAPH_TYPES, GRAPH_FEATURES } from \"/config/graphing-config.js\";\r\n\r\nexport {plot_distributions};\r\n\r\n/**\r\n * Main point of entry to determine whether there is a custom plotting code for\r\n * the condition, or we use one of the standard supported graph plots.\r\n *\r\n * @param {object}   experiment\r\n */\r\nfunction plot_distributions(experiment) {\r\n\t// If experiment uses a custom plotting code not supported by\r\n\t// main plots:\r\n\tif (is_custom_plot(experiment)){\r\n\t\treturn prepare_custom_plot(experiment);\r\n\t}\r\n\r\n\tswitch (experiment.graph_type) {\r\n\t\tcase \"scatter\":\r\n\t\t\tprepare_scatter_plot(experiment);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"strip\":\r\n\t\t\tprepare_strip_plot(experiment);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"ring\":\r\n\t\t\tprepare_ring_plot(experiment);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"shapes\":\r\n\t\t\tprepare_shapes_plot(experiment);\r\n\t\t\tbreak;\r\n\t\t\r\n\t\tcase \"parallel\":\r\n\t\t\tprepare_parallel_plot(experiment);\r\n\t\t\tbreak;\r\n\t\tcase \"mixed\":\r\n\t\t\tprepare_mixed_plot(experiment);\r\n\t\t\tbreak;\t\r\n\t\tdefault:\r\n\t\t\tthrow Error(\"Graph type \" + experiment.graph_type + \" is not supported.\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Sets up attributes from trial data for scatter plots and creates the plots.\r\n *\r\n * @param {object}   experiment\r\n */\r\nfunction prepare_scatter_plot(experiment) {\r\n\t\r\n\tlet datasets = experiment.coordinates;\r\n\tlet trial_data = experiment.trial_data;\r\n\r\n    for (let i in datasets) {\r\n\t\tlet attributes = generate_graphing_attributes(experiment, trial_data, datasets, i);\r\n\t\tconsole.log(attributes)\r\n\t\tlet style_attributes = generate_style_attributes(trial_data, i);\r\n\t\tlet distractor_attribtues = generate_distractor_attributes(experiment, trial_data, i);\r\n\t\t// Force specific numerosity attributes onto graph_attributes if doing numerosity experiment\r\n\t\tattributes.graph_attributes[\"alternate_scaling\"] = trial_data.alternate_scaling;\r\n\t\tattributes.graph_attributes[\"row\"] = trial_data.row;\r\n\t\tattributes.graph_attributes[\"col\"] = trial_data.col;\r\n\t    create_scatter_plot(attributes, style_attributes, distractor_attribtues);\r\n\t}\r\n\r\n    // Set background color\r\n    document.body.style.backgroundColor = (trial_data.background_color ? trial_data.background_color : \"WHITE\");\r\n}\r\n\r\n/**\r\n * Sets up attributes from trial data for strip plots and creates the plots.\r\n *\r\n * @param {object}   experiment\r\n */\r\nfunction prepare_strip_plot(experiment) {\r\n\r\n\tlet datasets = experiment.coordinates;\r\n\tlet trial_data = experiment.trial_data;\r\n\t\r\n\tfor (let i in datasets) {\r\n\t\t\r\n\t\tlet attributes = generate_graphing_attributes(experiment, trial_data, datasets, i);\r\n\t\tlet style_attributes = generate_style_attributes(trial_data, i);\r\n\t\tlet distractor_attribtues = generate_distractor_attributes(experiment, trial_data, i);\r\n\r\n\t\tcreate_strip_plot(attributes, style_attributes, distractor_attribtues);\r\n\t}\r\n\r\n\t// Set background color\r\n    document.body.style.backgroundColor = (trial_data.background_color ? trial_data.background_color : \"WHITE\");\r\n}\r\n\r\n/**\r\n * Sets up attributes from trial data for ring plots and creates the plots.\r\n *\r\n * @param {object}   experiment\r\n */\r\nfunction prepare_ring_plot(experiment) {\r\n\r\n\tlet datasets = experiment.coordinates;\r\n\tlet trial_data = experiment.trial_data;\r\n\r\n\tfor (let i in datasets) {\r\n\r\n\t\tlet attributes = generate_graphing_attributes(experiment, trial_data, datasets, i);\r\n\t\tlet style_attributes = generate_style_attributes(trial_data, i);\r\n\t\tlet distractor_attribtues = generate_distractor_attributes(experiment, trial_data, i);\r\n\r\n\t\tcreate_ring_plot(attributes, style_attributes, distractor_attribtues);\r\n\t}\r\n\r\n\t// Set background color\r\n    document.body.style.backgroundColor = (trial_data.background_color ? trial_data.background_color : \"WHITE\");\r\n}\r\n\r\n/**\r\n * Sets up attributes from trial data for shape plots and creates the plots.\r\n *\r\n * @param {object}   experiment\r\n */\r\nfunction prepare_shapes_plot(experiment) {\r\n\r\n\tlet radii = experiment.radii;\r\n\tlet trial_data = experiment.trial_data;\r\n\r\n\tlet max_radius = Math.max(...radii);\r\n  \tlet min_radius = Math.min(...radii);\r\n\r\n\tfor (let i in radii) {\r\n\t\tlet attributes = generate_graphing_attributes(experiment, trial_data, datasets, i);\r\n\t\tlet style_attributes = generate_style_attributes(trial_data, i);\r\n\t\tlet distractor_attribtues = generate_distractor_attributes(experiment, trial_data, i);\r\n\r\n\t\tattributes.curr_radius = radii[i];\r\n\t\tattributes.max_radius = max_radius;\r\n\t\tattributes.min_radius = min_radius;\r\n\r\n\t\tcreate_shape_plot(attributes, style_attributes, distractor_attribtues);\r\n\t}\r\n\r\n\t// Set background color\r\n    document.body.style.backgroundColor = (trial_data.background_color ? trial_data.background_color : \"WHITE\");\r\n}\r\n\r\n/**\r\n * \r\n * @param {object} experiment \r\n */\r\nfunction prepare_parallel_plot(experiment){\r\n\tlet datasets = experiment.coordinates; \r\n\tlet trial_data = experiment.trial_data;\r\n\t\r\n    for (let i in datasets) {\r\n\t\tlet attributes = generate_graphing_attributes(experiment, trial_data, datasets, i);\r\n\t\tlet style_attributes = generate_style_attributes(trial_data, i);\r\n\t\tlet distractor_attribtues = generate_distractor_attributes(experiment, trial_data, i);\r\n\r\n\t\tcreate_parallel_plot(attributes, style_attributes, distractor_attribtues)\r\n\t}\r\n}\r\n\r\n/**\r\n * Sets up attributes from trial data for mixed plots.\r\n *\r\n * @param {object}   experiment\r\n */\r\nfunction prepare_mixed_plot(experiment) {\r\n\tlet datasets = experiment.coordinates; \r\n\tlet graph_properties = experiment.graph_properties;\r\n\tlet trial_data = experiment.trial_data;\r\n    for (let i in datasets) {\r\n\t\tlet graph_type = trial_data[graph_properties[i]][\"graph_type\"];\r\n\t\tlet graph_data = trial_data[graph_properties[i]];\r\n\t\t//let attributes = generate_graphing_attributes(experiment, trial_data, i)\r\n\t\tlet dataset = datasets[i];\r\n\t\tlet graph_attributes = generate_attributes_object(graph_type, graph_data, i);\r\n\t\tlet style_attributes = generate_style_attributes(trial_data, i)\r\n\t\tlet distractor_attribtues = generate_distractor_attributes(experiment, trial_data, i)\r\n\t\tlet attributes = {dataset: dataset, graph_attributes: graph_attributes}\r\n\t\tswitch(graph_type){\r\n\t\t\tcase \"scatter\":\r\n\t\t\t\tcreate_scatter_plot(attributes, style_attributes, distractor_attribtues);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"strip\":\r\n\t\t\t\tcreate_strip_plot(attributes, style_attributes, distractor_attribtues);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"parallel\":\r\n\t\t\t\tcreate_parallel_plot(attributes, style_attributes, distractor_attribtues);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow Error(\"Graph Type Not Supported\"); \r\n\t\t}\r\n\t}\r\n\r\n    // Set background color\r\n    document.body.style.backgroundColor = (trial_data.background_color ? trial_data.background_color : \"WHITE\");\r\n}\r\n\r\n/**\r\n * \r\n * @param {object} experiment \r\n * @param {assoc array} trial_data current sub condition constants\r\n * @param {array[]} datasets array of the data coordinates which are \r\n * @param {number} i current graph (0 is the left/top most)\r\n * @returns {assoc array}\r\n */\r\nfunction generate_graphing_attributes(experiment, trial_data, datasets, i){\r\n\r\n\tlet graph_data = trial_data.graph_a_attributes ? trial_data[experiment.graph_properties[i]] : trial_data;\r\n\tlet dataset = datasets[i];\r\n\tlet graph_attributes = generate_attributes_object(experiment.graph_type, graph_data, i);\r\n\tlet attributes = {dataset: dataset, graph_attributes: graph_attributes};\r\n\treturn attributes;\r\n}\r\n\r\n/**\r\n * Generates the style_attributes object for the graph which contains html alignment\r\n * and margin values.\r\n * Style Attribtues are generated by the get_mixed_graph_styles function in experiment helper\r\n * They help to line up the graph and distractor dimensions by having the same css style\r\n * This is not generalized for more than 2 graphs\r\n * \r\n * @param {assoc array} trial_data current sub condition constants\r\n * @param {number} i current graph (0 is the left/top most)\r\n * @returns {assoc array}\r\n */\r\nfunction generate_style_attributes(trial_data, i){\r\n\tlet style_attributes = null;\r\n\tif(trial_data.style_attributes){\r\n\t\tstyle_attributes = trial_data[\"style_attributes\"][i]\r\n\t}\r\n\treturn style_attributes;\r\n}\r\n\r\n/**\r\n * Generates the distractor attributes for the experiment if they exist.\r\n * \r\n * @param {object} experiment \r\n * @param {number[]} trial_data \r\n * @param {number} i \r\n * @returns {assoc array}\r\n */\r\nfunction generate_distractor_attributes(experiment, trial_data, i){\r\n\tlet distractor_attribtues = null;\r\n\tif(trial_data[\"dist_attributes\"]){\r\n\t\tlet distractor_coordinates = experiment.distractor_coordinates;\r\n\t\tdistractor_attribtues = {\r\n\t\t\tdataset: distractor_coordinates[i],\r\n\t\t\tgraph_attributes: generate_attributes_object(experiment.graph_type, trial_data.dist_attributes, i)\r\n\t\t  }\r\n\t}\r\n\treturn distractor_attribtues;\r\n}\r\n\r\n\r\n/**\r\n * Generates the js object for graph_attributes based on what is specified in\r\n * the graphing-config.js.\r\n *\r\n * E.g., will return object in this format:\r\n * {\r\n *\t\"axis_color\"  : \"BLACK\",\r\n *  \"point_color\" : \"RED\",\r\n *  \"point_size\"  : 3\r\n *   ....\r\n * }\r\n *\r\n * @param {string}   plot_type\t\t\tOnly takes in graphs defined in GRAPH_TYPES\r\n * @param {assoc array}   trial_data         Trial data object from experiment model\r\n * @param {number}\tplot_number\t\tDenotes plot number from left to right (e.g. leftmost is 1 etc.)\r\n *\r\n * @return {assoc array}  graph_attributes\r\n */\r\nexport function generate_attributes_object(plot_type, trial_data, plot_number) {\r\n\r\n\tlet curr_graph_attributes = {};\r\n\tconst graph = GRAPH_TYPES[plot_type]; //GRAPH_TYPES comes from /config/graphing-config.js\r\n\tconst graph_attributes = graph[\"attributes\"];\r\n\tcurr_graph_attributes = append_graph_attributes(trial_data, graph_attributes, curr_graph_attributes, plot_number);\r\n\r\n\tcurr_graph_attributes = append_graph_feature_attributes(trial_data, curr_graph_attributes);\r\n\t\r\n\treturn curr_graph_attributes;\r\n}\r\n\r\n/**\r\n * Appends the graph attributes to the curr_graph_attributes object\r\n * \r\n * @param {assoc array} trial_data - current sub condition trial data\r\n * @param {assoc array} graph_attributes - graph attributes object for current graph being plotted\r\n * @param {assoc array} curr_graph_attributes - current graph attributes object to be passed to plotter\r\n * @param {number} plot_number - plot number for shapes case\r\n * @returns {assoc array}\r\n */\r\nfunction append_graph_attributes(trial_data, graph_attributes, curr_graph_attributes, plot_number){\r\n\tconsole.log(trial_data)\r\n\t\r\n\tfor (let key in graph_attributes) {\r\n\r\n\t\tconst curr_attribute = graph_attributes[key];\r\n\r\n\t\t// These attributes are dependent on plot_number:\r\n\t\tif (key === \"shapes\") {\r\n\r\n\t\t\tcurr_graph_attributes[key] = (key in trial_data ? trial_data[key][plot_number] : curr_attribute[\"default\"])\r\n\r\n\t\t} else {\r\n\t\t\t// Check if the key exists in trial_data\r\n\t\t\t// If it exists, use the value in trial_data\r\n\t\t\t// Else, use the default specified\r\n\t\t\tcurr_graph_attributes[key] = (key in trial_data ? trial_data[key] : curr_attribute[\"default\"]);\r\n\t\t}\r\n\t}\r\n\treturn curr_graph_attributes;\r\n}\r\n\r\n/**\r\n * Appends the graph feature attributes to the trial data, using the default\r\n * values if they are not present.\r\n * \r\n * @param {assoc array} trial_data \r\n * @param {assoc array} curr_graph_attributes \r\n * @returns {assoc array}\r\n */\r\nfunction append_graph_feature_attributes(trial_data, curr_graph_attributes){\r\n\tfor (let key in GRAPH_FEATURES){\r\n\t\tconst curr_feature_attributes = GRAPH_FEATURES[key][\"attributes\"];\r\n\t\tfor(let feature_key in curr_feature_attributes){\r\n\t\t\tcurr_graph_attributes[feature_key] = feature_key in trial_data ? trial_data[feature_key] : curr_feature_attributes[feature_key][\"default\"];\r\n\t\t}\r\n\t}\r\n\treturn curr_graph_attributes;\r\n}\r\n\r\n\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/graphing_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 293,
    "kind": "function",
    "name": "prepare_scatter_plot",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~prepare_scatter_plot",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Sets up attributes from trial data for scatter plots and creates the plots.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 294,
    "kind": "function",
    "name": "prepare_strip_plot",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~prepare_strip_plot",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Sets up attributes from trial data for strip plots and creates the plots.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 295,
    "kind": "function",
    "name": "prepare_ring_plot",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~prepare_ring_plot",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Sets up attributes from trial data for ring plots and creates the plots.",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 296,
    "kind": "function",
    "name": "prepare_shapes_plot",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~prepare_shapes_plot",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Sets up attributes from trial data for shape plots and creates the plots.",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 297,
    "kind": "function",
    "name": "prepare_parallel_plot",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~prepare_parallel_plot",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 298,
    "kind": "function",
    "name": "prepare_mixed_plot",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~prepare_mixed_plot",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Sets up attributes from trial data for mixed plots.",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 299,
    "kind": "function",
    "name": "generate_graphing_attributes",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~generate_graphing_attributes",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_data",
        "description": "current sub condition constants"
      },
      {
        "nullable": null,
        "types": [
          "array[]"
        ],
        "spread": false,
        "optional": false,
        "name": "datasets",
        "description": "array of the data coordinates which are"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": "current graph (0 is the left/top most)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc array"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 300,
    "kind": "function",
    "name": "generate_style_attributes",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~generate_style_attributes",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Generates the style_attributes object for the graph which contains html alignment\nand margin values.\nStyle Attribtues are generated by the get_mixed_graph_styles function in experiment helper\nThey help to line up the graph and distractor dimensions by having the same css style\nThis is not generalized for more than 2 graphs",
    "lineNumber": 235,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_data",
        "description": "current sub condition constants"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": "current graph (0 is the left/top most)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc array"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "function",
    "name": "generate_distractor_attributes",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~generate_distractor_attributes",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Generates the distractor attributes for the experiment if they exist.",
    "lineNumber": 251,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc array"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "function",
    "name": "generate_attributes_object",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~generate_attributes_object",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": "{generate_attributes_object}",
    "description": "Generates the js object for graph_attributes based on what is specified in\nthe graphing-config.js.\n\nE.g., will return object in this format:\n{\n\"axis_color\"  : \"BLACK\",\n \"point_color\" : \"RED\",\n \"point_size\"  : 3\n  ....\n}",
    "lineNumber": 282,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "plot_type",
        "description": "Only takes in graphs defined in GRAPH_TYPES"
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_data",
        "description": "Trial data object from experiment model"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "plot_number",
        "description": "Denotes plot number from left to right (e.g. leftmost is 1 etc.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc array"
      ],
      "spread": false,
      "description": "graph_attributes"
    }
  },
  {
    "__docId__": 303,
    "kind": "function",
    "name": "append_graph_attributes",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~append_graph_attributes",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Appends the graph attributes to the curr_graph_attributes object",
    "lineNumber": 303,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_data",
        "description": "current sub condition trial data"
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "graph_attributes",
        "description": "graph attributes object for current graph being plotted"
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "curr_graph_attributes",
        "description": "current graph attributes object to be passed to plotter"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "plot_number",
        "description": "plot number for shapes case"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc array"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 304,
    "kind": "function",
    "name": "append_graph_feature_attributes",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~append_graph_feature_attributes",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": null,
    "description": "Appends the graph feature attributes to the trial data, using the default\nvalues if they are not present.",
    "lineNumber": 333,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "curr_graph_attributes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc array"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 305,
    "kind": "function",
    "name": "plot_distributions",
    "memberof": "scripts/experiment-properties/graphing/graphing_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graphing_controller.js~plot_distributions",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graphing_controller.js",
    "importStyle": "{plot_distributions}",
    "description": "Main point of entry to determine whether there is a custom plotting code for\nthe condition, or we use one of the standard supported graph plots.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "file",
    "name": "scripts/experiment-properties/graphing/graph_feature_controller.js",
    "content": "import {plot_mixed_attribute_graph} from \"/scripts/experiment-properties/graphing/d3-plot-features/mix_attribute_generator.js\"\r\nimport {prepare_visual_mask_graph} from \"/scripts/experiment-properties/graphing/d3-plot-features/visual_mask_generator.js\"\r\nimport {combine_target_and_distractor} from \"/scripts/experiment-properties/graphing/d3-plot-features/distractor_plot.js\"\r\n\r\n/**\r\n * Adds additional graph features to the graph such as mixed attributes or \r\n * distractor graphs. If they don't exist, plot_graph function is called\r\n * normally.\r\n * \r\n * @param {object} chart - d3 chart\r\n * @param {assoc. array} graph_attributes - target graph properties and dataset\r\n * @param {assoc. array} distractor_attributes - distractor graph properties and dataset\r\n * @param {function} x_data_scale - x axis scale function\r\n * @param {function} y_data_scale -y axis scale function\r\n * @param {function} plot_graph - graph plotting function\r\n */\r\nexport function add_graph_features(chart, graph_attributes, distractor_attributes, x_data_scale, y_data_scale, plot_graph){\r\n    const target_attributes = graph_attributes[\"graph_attributes\"];\r\n\r\n    if(distractor_attributes == null){\r\n        const target_dataset = graph_attributes[\"dataset\"];\r\n        plot_mixed_attribute_graph(chart, x_data_scale, y_data_scale, target_dataset, target_attributes, plot_graph);\r\n    } \r\n    else{\r\n        combine_target_and_distractor(graph_attributes, distractor_attributes, chart, x_data_scale, y_data_scale, plot_graph, plot_mixed_attribute_graph);\r\n    }\r\n  \r\n    prepare_visual_mask_graph(chart, target_attributes);\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/graphing/graph_feature_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 307,
    "kind": "function",
    "name": "add_graph_features",
    "memberof": "scripts/experiment-properties/graphing/graph_feature_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/graphing/graph_feature_controller.js~add_graph_features",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/graphing/graph_feature_controller.js",
    "importStyle": "{add_graph_features}",
    "description": "Adds additional graph features to the graph such as mixed attributes or \ndistractor graphs. If they don't exist, plot_graph function is called\nnormally.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "chart",
        "description": "d3 chart"
      },
      {
        "nullable": null,
        "types": [
          "assoc. array"
        ],
        "spread": false,
        "optional": false,
        "name": "graph_attributes",
        "description": "target graph properties and dataset"
      },
      {
        "nullable": null,
        "types": [
          "assoc. array"
        ],
        "spread": false,
        "optional": false,
        "name": "distractor_attributes",
        "description": "distractor graph properties and dataset"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "x_data_scale",
        "description": "x axis scale function"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "y_data_scale",
        "description": "y axis scale function"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "plot_graph",
        "description": "graph plotting function"
      }
    ],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "file",
    "name": "scripts/experiment-properties/instructions/instructions_controller.js",
    "content": "import { EXPERIMENTS } from \"/config/experiments-config.js\";\r\nimport { CONDITIONS } from \"/config/conditions-config.js\";\r\nimport { correlation_dependencies } from \"/scripts/helpers/correlation_dependencies.js\"\r\nexport { get_instructions, get_jspsych_instructions, generate_subcond_instruction_block }\r\n\r\n\r\n/**\r\n * Generates a jsPsych instruction trial for the current condition if it has been defined for it, or\r\n * the default experiment instruction (which needs to be defined otherwise an error is thrown)\r\n * \r\n * It handles the old instruction format where the instructions are a plain HTML string and image array that replaces\r\n * the image key words in the html string with get_html_with_images(). This is done through either entering no instruction name\r\n * (the jnd timeline does this), which defaults to the old behavior, or \r\n * \r\n * It also handles experiments with both type of instruction types such as new_sequencing by givin it the experiment name as\r\n * the instruction name. \r\n * \r\n * Otherwise (default) it gets the jsPsych trial instruction object with the given instruction_name\r\n * \r\n * @param {object} experiment \r\n * @param {string} instruction_name \r\n * @param {boolean} custom_instructions \r\n * @returns {jsPsych trial}\r\n */\r\nfunction get_jspsych_instructions(experiment, instruction_name = \"\", custom_instructions = false) {\r\n  let experiment_name = experiment.constructor.name.toLowerCase();\r\n  let experiment_instructions = EXPERIMENTS[experiment_name].instructions;\r\n  let condition_instructions_object = CONDITIONS[experiment.condition_name].instructions;\r\n\r\n  switch (instruction_name) {\r\n    case \"\":\r\n      //check if there is specific images for the block\r\n      if (is_block_specific_image(experiment) && condition_instructions_object) {\r\n        return condition_custom_block_html_to_trial(experiment, experiment_instructions);\r\n      }\r\n      // Backwards compatibility case for experiments with only HTML instructions\r\n      if (condition_instructions_object) {\r\n        if (is_custom_html_trial_instruction(condition_instructions_object, experiment_name)) {\r\n          return condition_custom_html_to_trial(condition_instructions_object[experiment_name], experiment_instructions)\r\n        }\r\n        throw new Error(\"Condition instructions with no name default to old HTML instruction format. Double check if this condition is formated as that, otherwise use the specific instruction name or\")\r\n      }\r\n      if (experiment_instructions.default_html || experiment_instructions.default_images) {\r\n        return experiment_custom_html_to_trial(experiment_instructions);\r\n      }\r\n      else {\r\n        throw new Error(\"No default html defined in instructions object for this condition for experiment \" + experiment.constructor.name);\r\n      }\r\n    case experiment_name:\r\n      // Backwards compatibility case for experiments with combined instruction types\r\n      if (condition_instructions_object) {\r\n        if (condition_instructions_object[experiment_name]) {\r\n          return condition_instructions_object[experiment_name];\r\n        }\r\n      }\r\n      if (experiment_instructions.default_html || experiment_instructions.default_images) {\r\n        return experiment_custom_html_to_trial(experiment_instructions);\r\n      }\r\n      else {\r\n        throw new Error(\"No default html defined in instructions object for this condition for experiment \" + experiment.constructor.name);\r\n      }\r\n    default:\r\n      let instruction = instruction_name + \"_html\";\r\n      if (condition_instructions_object && condition_instructions_object[instruction]) {\r\n\r\n        return condition_instructions_object[instruction];\r\n      }\r\n      if (experiment_instructions[instruction]) {\r\n\r\n        return experiment_instructions[instruction];\r\n      }\r\n      else {\r\n        throw new Error(\"No jspsych html defined in instructions object for this condition for experiment \" + experiment.constructor.name);\r\n      }\r\n  }\r\n}\r\n\r\n/**\r\n * Generates the instructions html for the given experiment.\r\n * Loads default Instruction object from experiments-config.js\r\n * and Condition Instruction object from conditions-config.js if it exists\r\n *\r\n * @param   {object}   experiment\r\n *\r\n * @return  {string}   html for the instructions jsPsych block\r\n */\r\nfunction get_instructions(experiment) {\r\n\r\n  // EXPERIMENTS from experiments-config.js\r\n  let experiment_name = experiment.constructor.name.toLowerCase();\r\n  let instructions_info = EXPERIMENTS[experiment_name].instructions;\r\n\r\n  if (!instructions_info.default_html || instructions_info.default_html.length === 0) {\r\n    throw new Error(\"No default html specified for experiment \" + experiment_name);\r\n  }\r\n\r\n  if (!instructions_info.default_images || instructions_info.default_images.length === 0) {\r\n    throw new Error(\"No default images are defined for experiment \" + experiment_name);\r\n  }\r\n\r\n  let default_html = instructions_info.default_html;\r\n  let default_images = instructions_info.default_images;\r\n  let condition_instructions_object = CONDITIONS[experiment.condition_name].instructions;\r\n\r\n  if (condition_instructions_object) {\r\n    return get_custom_instructions(experiment, condition_instructions_object, default_html, default_images);\r\n  }\r\n  // Else use default html and images\r\n  else {\r\n    return get_html_with_images(default_html, default_images);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Generates custom instructions depending on whether custom_html is defined, or \r\n * custom_images is defined.\r\n *\r\n * @param   {object}   experiment\r\n * @param   {object}   condition_instructions_object\r\n * @param   {string}   default_html\r\n * @param   {array}    default_images\r\n *\r\n * @return  {string}   html for custom instructions\r\n */\r\nfunction get_custom_instructions(experiment, condition_instructions_object, default_html, default_images) {\r\n\r\n  // Validation check that experiment in instructions object is a supported experiment for the condition\r\n  Object.keys(condition_instructions_object).forEach(function (exp) {\r\n    if (!CONDITIONS[experiment.condition_name][\"experiment\"].includes(exp)) {\r\n      throw new Error(\"Experiment \" + exp + \" is listed within instructions key but is not among the supported experiments \" +\r\n        \"listed for the condition. Listed experiments are: \" + CONDITIONS[experiment.condition_name][\"experiment\"] + \".\");\r\n    }\r\n  });\r\n\r\n  let condition_instructions = condition_instructions_object[experiment.constructor.name.toLowerCase()];\r\n\r\n  // If no instructions for this experiment, use default\r\n  if (!condition_instructions) {\r\n    return get_html_with_images(default_html, default_images);\r\n  }\r\n  else {\r\n\r\n    // Validation check that must only have one key (custom_html or custom_images) defined\r\n    if (Object.keys(condition_instructions).length > 1) {\r\n      throw new Error(\"Only one key permitted inside instructions object for experiment \" + experiment.constructor.name.toLowerCase() + \". Must be \" +\r\n        \"either custom_html or custom_images.\");\r\n    }\r\n\r\n    // If there is custom html\r\n    if (condition_instructions.custom_html) {\r\n      return condition_instructions.custom_html;\r\n    }\r\n    // If there is custom images\r\n    else if (condition_instructions.custom_images) {\r\n      let images = condition_instructions.custom_images;\r\n\r\n      // Validation check that specified num of custom_images == num of default_images\r\n      if (images.length !== default_images.length) {\r\n        throw new Error(\"The default instruction for this experiment requires \" + default_images.length + \" image(s). \" + images.length + \" image(s) were specified for the condition instead.\");\r\n      }\r\n\r\n      return get_html_with_images(default_html, images);\r\n    } else {\r\n      throw new Error(\"No custom_html or custom_images defined in instructions object for this condition for experiment \" + experiment.constructor.name);\r\n    }\r\n\r\n  }\r\n}\r\n\r\n/**\r\n * Replaces any 'image1.png', 'image2.png' ... etc with each string \r\n * entry in images.\r\n *\r\n * NOTE: When defining default_html in experiments-config.js, need to name\r\n *       images as 'image1.png', 'image2.png' so this code knows what to replace\r\n *\r\n * @param   {string}   html\r\n * @param   {array}    images \r\n *\r\n * @return  {string}   html with any 'image1.png' etc replaced with entries in images\r\n */\r\nfunction get_html_with_images(html, images) {\r\n\r\n  let counter = 1;\r\n  console.log(images);\r\n  for (let image_url of images) {\r\n    let url_to_replace = \"image\" + counter + \".png\";\r\n\r\n    html = html.replace(url_to_replace, image_url);\r\n\r\n    counter++;\r\n  }\r\n\r\n  return html;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Transforms legacy HTML instructions in conditions-config to jsPsych trials.\r\n * They are html-keyboard-response trials to retain \"press any key to continue\"\r\n * functionality rather than use the \"next page\" mouse button.\r\n * \r\n * @param {string} experiment\r\n * @param {assoc array} html_instructions \r\n * @return {jsPsych trial}\r\n */\r\nfunction condition_custom_html_to_trial(condition_object, experiment_instructions) {\r\n  let custom_html = experiment_instructions.default_html;\r\n  if (condition_object) {\r\n    if (condition_object.custom_html && condition_object.custom_images) {\r\n      custom_html = get_html_with_images(condition_object.custom_html, condition_object.custom_images)\r\n    }\r\n    else if (condition_object.custom_images) {\r\n      custom_html = get_html_with_images(experiment_instructions.default_html, condition_object.custom_images)\r\n    }\r\n    else {\r\n      custom_html = condition_object.custom_html;\r\n    }\r\n  }\r\n\r\n  let instruction_trial = {\r\n    type: \"html-keyboard-response\",\r\n    data: { screen_id: \"instruction\", },\r\n    stimulus: custom_html,\r\n  }\r\n  return instruction_trial\r\n}\r\n\r\n/**\r\n * Transforms legacy HTML instructions in experiments-config to jsPsych trials.\r\n * They are html-keyboard-response trials to retain \"press any key to continue\"\r\n * functionality rather than use the \"next page\" mouse button.\r\n * \r\n * @param {object} instructions \r\n * @returns {jsPsych trial}\r\n */\r\nfunction experiment_custom_html_to_trial(instructions) {\r\n  let instruction_trial = {\r\n    type: \"html-keyboard-response\",\r\n    data: { screen_id: \"instruction\", },\r\n    stimulus: get_html_with_images(instructions.default_html, instructions.default_images),\r\n  }\r\n\r\n  return instruction_trial;\r\n}\r\n\r\n/**\r\n * Transforms legacy HTML instructions and custom block images in conditions-config to jsPsych trials.\r\n * They are html-keyboard-response trials to retain \"press any key to continue\"\r\n * functionality rather than use the \"next page\" mouse button.\r\n * \r\n * @param {string} experiment (in conditions-config)\r\n * @param {assoc array} html_instructions \r\n * @returns {jsPsych trial}\r\n */\r\nfunction condition_custom_block_html_to_trial(experiment, experiment_instructions) {\r\n  let first_block = get_first_block_name(experiment);\r\n  let experiment_name = experiment.constructor.name.toLowerCase();\r\n  if (experiment_name == \"hybrid\") {\r\n    experiment_name = experiment.current_experiment;\r\n  }\r\n\r\n\r\n  //get the custom block image paths\r\n  let condition_instructions = CONDITIONS[experiment.condition_name].instructions[experiment_name];\r\n  let block_images = condition_instructions.custom_block_images[`block_${first_block}_images`];\r\n\r\n  //generate default trial without custom images\r\n  let custom_html = experiment_instructions.default_html;\r\n  if (condition_instructions.custom_html) {\r\n    custom_html = get_html_with_images(condition_instructions.custom_html, block_images)\r\n  }\r\n  else {\r\n    custom_html = get_html_with_images(experiment_instructions.default_html, block_images)\r\n  }\r\n\r\n  let trial = {\r\n    type: \"html-keyboard-response\",\r\n    data: { screen_id: \"instruction\", },\r\n    stimulus: custom_html,\r\n  }\r\n\r\n  return trial;\r\n}\r\n\r\n/**\r\n * \r\n * @param {object} condition_instructions_object \r\n * @returns {boolean}\r\n */\r\nfunction is_custom_html_trial_instruction(condition_instructions_object, experiment_name) {\r\n  if (condition_instructions_object[experiment_name].custom_html || condition_instructions_object[experiment_name].custom_images) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\n/**\r\n * Generates the experiment's instruction blocks.\r\n * @param {object} experiment \r\n * @param {string} block_type\r\n * @returns {trial}\r\n */\r\nfunction generate_subcond_instruction_block(experiment, block_type) {\r\n  let instruction_trial = {\r\n    type: \"instructions\",\r\n    data: {},\r\n    key_forward: \" \",\r\n    pages: [],\r\n    on_start: function (trial) {\r\n      console.log(\"test\")\r\n      let index = correlation_dependencies.get_subcondition_index(experiment, block_type);\r\n      let constants = correlation_dependencies.get_constants(experiment, block_type, index);\r\n      let curr_block = constants.block;\r\n      let experiment_name = experiment.constructor.name.toLowerCase();\r\n      let current_instruction = get_subcondition_instruction_trial(experiment, experiment_name, curr_block);\r\n      let curr_pages = current_instruction.pages;\r\n      trial.pages = curr_pages;\r\n      trial.data = { screen_id: `${experiment_name}_${curr_block}_html` }\r\n    }\r\n  };\r\n  let subcond_instruction_block = {\r\n    timeline: [instruction_trial],\r\n    conditional_function: function () {\r\n      let index = correlation_dependencies.get_subcondition_index(experiment, block_type);\r\n      let constants = correlation_dependencies.get_constants(experiment, block_type, index);\r\n      return ((constants.block != undefined) && constants.subcondition_instructions === true &&\r\n        correlation_dependencies.is_start_of_subcondition(experiment, block_type) &&\r\n        correlation_dependencies.is_start_of_block(experiment, block_type))\r\n    },\r\n  }\r\n  return subcond_instruction_block;\r\n}\r\n\r\n/**\r\n * Gets the instruction trial defined for the current block/sub condition in the condition.\r\n * @param {object} experiment \r\n * @returns {trial}\r\n */\r\nfunction get_subcondition_instruction_trial(experiment, experiment_name, curr_block) {\r\n  let block_instruction_html_key = `${experiment_name}_${curr_block}_html`;\r\n  let block_instruction_image_key = `${experiment_name}_${curr_block}_images`;\r\n  let block_instructions_text = null;\r\n  let block_instructions_images = null;\r\n  console.log(block_instruction_html_key, block_instruction_image_key)\r\n\r\n  // Get jsPsych trial \r\n  if (CONDITIONS[experiment.condition_name][\"block_instructions\"]) {\r\n    if (CONDITIONS[experiment.condition_name][\"block_instructions\"][block_instruction_html_key]) {\r\n      block_instructions_text = CONDITIONS[experiment.condition_name][\"block_instructions\"][block_instruction_html_key];\r\n    }\r\n  }\r\n  else if (EXPERIMENTS[experiment_name][\"block_instructions\"]) {\r\n    if (EXPERIMENTS[experiment_name][\"block_instructions\"][block_instruction_html_key]) {\r\n      block_instructions_text = EXPERIMENTS[experiment_name][\"block_instructions\"][block_instruction_html_key];\r\n    }\r\n  }\r\n\r\n  // Get image names to replace (if they exist)\r\n  if (CONDITIONS[experiment.condition_name][\"block_instructions\"]) {\r\n    if (CONDITIONS[experiment.condition_name][\"block_instructions\"][block_instruction_image_key]) {\r\n      block_instructions_images = CONDITIONS[experiment.condition_name][\"block_instructions\"][block_instruction_image_key];\r\n    }\r\n  }\r\n  else if (EXPERIMENTS[experiment_name][\"block_instructions\"]) {\r\n    if (EXPERIMENTS[experiment_name][\"block_instructions\"][block_instruction_image_key]) {\r\n      block_instructions_images = EXPERIMENTS[experiment_name][\"block_instructions\"][block_instruction_image_key];\r\n    }\r\n  }\r\n\r\n  // Replace images if any\r\n  if (block_instructions_images != null) {\r\n    return replace_trial_images(block_instructions_text, block_instructions_images);\r\n  }\r\n\r\n  if (block_instructions_text != null) {\r\n    return block_instructions_text;\r\n  }\r\n  // stub jsPsych trial for no block instructions case\r\n  return { type: \"instructions\" }\r\n}\r\n\r\n/**\r\n * Replaces the image text in the jsPsych instruction trial html with the given image paths\r\n * make sure if you have multiple instructions, the images corresponding to the instructions have the same name, \r\n * plus naming convention: <instruction_name>_html, <instruction_name>_images\r\n * \r\n * @param {jsPsych trial} instruction_trial jsPsych instruction trial\r\n * @param {array} images array of image paths\r\n * @return {jsPsych trial}\r\n */\r\nfunction replace_trial_images(instruction_trial, images) {\r\n  for (let i = 0; i < instruction_trial.pages.length; i++) {\r\n    instruction_trial.pages[i] = get_html_with_images(instruction_trial.pages[i], images)\r\n  }\r\n  return instruction_trial;\r\n}\r\n\r\n/**\r\n * Checks if there is a block specific instruction image.\r\n * @param {object} experiment\r\n * @return {boolean}\r\n */\r\nfunction is_block_specific_image(experiment) {\r\n  let condition_name = experiment.condition_name;\r\n  let first_block = get_first_block_name(experiment);\r\n  let experiment_name = experiment.constructor.name.toLowerCase();\r\n  if (experiment_name == \"hybrid\") {\r\n    experiment_name = experiment.current_experiment.toLowerCase();\r\n  }\r\n\r\n  if (CONDITIONS[condition_name].instructions &&\r\n    CONDITIONS[condition_name].instructions[experiment_name].custom_block_images &&\r\n    CONDITIONS[condition_name].instructions[experiment_name].custom_block_images[`block_${first_block}_images`]) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the name of the first block in the experiment\r\n * @param {object} experiment\r\n * @return {boolean}\r\n */\r\nfunction get_first_block_name(experiment) {\r\n  let experiment_name = experiment.constructor.name.toLowerCase();\r\n  let constants = null;\r\n  if (experiment_name == \"hybrid\") {\r\n    let current_exp = `${experiment.current_experiment.toLowerCase()}_constants`;\r\n    constants = experiment[current_exp][0];\r\n  } else {\r\n    constants = experiment.sub_conditions_constants[0];\r\n  }\r\n  let first_block = constants.block;\r\n\r\n  //check if condition is multi_size_scatter_combined. If so, remove decimal in block name\r\n  if (experiment.condition_name == \"multi_size_scatter_combined\") {\r\n    first_block = first_block.replace(/\\./g, '');\r\n  }\r\n\r\n  return first_block;\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-properties/instructions/instructions_controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "function",
    "name": "get_custom_instructions",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~get_custom_instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": null,
    "description": "Generates custom instructions depending on whether custom_html is defined, or \ncustom_images is defined.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "condition_instructions_object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "default_html",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "default_images",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html for custom instructions"
    },
    "ignore": true
  },
  {
    "__docId__": 310,
    "kind": "function",
    "name": "get_html_with_images",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~get_html_with_images",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": null,
    "description": "Replaces any 'image1.png', 'image2.png' ... etc with each string \nentry in images.\n\nNOTE: When defining default_html in experiments-config.js, need to name\n      images as 'image1.png', 'image2.png' so this code knows what to replace",
    "lineNumber": 183,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html with any 'image1.png' etc replaced with entries in images"
    },
    "ignore": true
  },
  {
    "__docId__": 311,
    "kind": "function",
    "name": "condition_custom_html_to_trial",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~condition_custom_html_to_trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": null,
    "description": "Transforms legacy HTML instructions in conditions-config to jsPsych trials.\nThey are html-keyboard-response trials to retain \"press any key to continue\"\nfunctionality rather than use the \"next page\" mouse button.",
    "lineNumber": 209,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "html_instructions",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 312,
    "kind": "function",
    "name": "experiment_custom_html_to_trial",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~experiment_custom_html_to_trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": null,
    "description": "Transforms legacy HTML instructions in experiments-config to jsPsych trials.\nThey are html-keyboard-response trials to retain \"press any key to continue\"\nfunctionality rather than use the \"next page\" mouse button.",
    "lineNumber": 239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "instructions",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 313,
    "kind": "function",
    "name": "condition_custom_block_html_to_trial",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~condition_custom_block_html_to_trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": null,
    "description": "Transforms legacy HTML instructions and custom block images in conditions-config to jsPsych trials.\nThey are html-keyboard-response trials to retain \"press any key to continue\"\nfunctionality rather than use the \"next page\" mouse button.",
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "(in conditions-config)"
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "html_instructions",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 314,
    "kind": "function",
    "name": "is_custom_html_trial_instruction",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~is_custom_html_trial_instruction",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 293,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "condition_instructions_object",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 315,
    "kind": "function",
    "name": "get_subcondition_instruction_trial",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~get_subcondition_instruction_trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": null,
    "description": "Gets the instruction trial defined for the current block/sub condition in the condition.",
    "lineNumber": 342,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "trial"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 316,
    "kind": "function",
    "name": "replace_trial_images",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~replace_trial_images",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": null,
    "description": "Replaces the image text in the jsPsych instruction trial html with the given image paths\nmake sure if you have multiple instructions, the images corresponding to the instructions have the same name, \nplus naming convention: <instruction_name>_html, <instruction_name>_images",
    "lineNumber": 394,
    "params": [
      {
        "nullable": null,
        "types": [
          "jsPsych trial"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction_trial",
        "description": "jsPsych instruction trial"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "array of image paths"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 317,
    "kind": "function",
    "name": "is_block_specific_image",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~is_block_specific_image",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": null,
    "description": "Checks if there is a block specific instruction image.",
    "lineNumber": 406,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 318,
    "kind": "function",
    "name": "get_first_block_name",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~get_first_block_name",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": null,
    "description": "Returns the name of the first block in the experiment",
    "lineNumber": 428,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 319,
    "kind": "function",
    "name": "get_instructions",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~get_instructions",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": "{get_instructions}",
    "description": "Generates the instructions html for the given experiment.\nLoads default Instruction object from experiments-config.js\nand Condition Instruction object from conditions-config.js if it exists",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html for the instructions jsPsych block"
    }
  },
  {
    "__docId__": 320,
    "kind": "function",
    "name": "get_jspsych_instructions",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~get_jspsych_instructions",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": "{get_jspsych_instructions}",
    "description": "Generates a jsPsych instruction trial for the current condition if it has been defined for it, or\nthe default experiment instruction (which needs to be defined otherwise an error is thrown)\n\nIt handles the old instruction format where the instructions are a plain HTML string and image array that replaces\nthe image key words in the html string with get_html_with_images(). This is done through either entering no instruction name\n(the jnd timeline does this), which defaults to the old behavior, or \n\nIt also handles experiments with both type of instruction types such as new_sequencing by givin it the experiment name as\nthe instruction name. \n\nOtherwise (default) it gets the jsPsych trial instruction object with the given instruction_name",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction_name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "custom_instructions",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 321,
    "kind": "function",
    "name": "generate_subcond_instruction_block",
    "memberof": "scripts/experiment-properties/instructions/instructions_controller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-properties/instructions/instructions_controller.js~generate_subcond_instruction_block",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-properties/instructions/instructions_controller.js",
    "importStyle": "{generate_subcond_instruction_block}",
    "description": "Generates the experiment's instruction blocks.",
    "lineNumber": 306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 322,
    "kind": "file",
    "name": "scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "content": "import {get_instructions} from \"/scripts/experiment-properties/instructions/instructions_controller.js\";\r\nconst address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\n\r\n/**\r\n * \r\n * @param {string} address experiment address\r\n * @param {experiment} experiment Generated by the appropiate experiment.js constructor \r\n * @returns {jsPsych trial}\r\n */\r\nexport function generate_welcome(address, experiment){\r\n    let welcome = {\r\n      type: 'html-keyboard-response',\r\n      stimulus: `<div align = \"center\">` + `<img src=\"${address}/img/VCL_lab_logo.png\"></img><br><br>` +\r\n                `<b>Base:</b> Sequencing` + '<br>' +\r\n                `<b>Trial Type:</b> ${experiment.trial_structure}` + '<br>' +\r\n                `<b>Graph Type:</b> ${experiment.graph_type}` + '<br>' +\r\n                `<b>Condition:</b> ${experiment.condition_name}` +\r\n                '<br><br><br><p><font size = 15>Press any key to begin.<p></font>' +\r\n                '</div>',\r\n      data: {type: 'instruction'}\r\n    };\r\n    return welcome;\r\n};\r\n\r\n/**\r\n * \r\n * @param {experiment} experiment Generated by the appropiate experiment.js constructor \r\n * @returns {jsPscyh trial}\r\n */\r\nexport function generate_instructions(experiment){\r\n    let instructions = {\r\n        type: \"html-keyboard-response\",\r\n        stimulus: function(){\r\n            return get_instructions(experiment);\r\n        }\r\n    };\r\n    return instructions;\r\n}\r\n\r\nconst sittingDistancePage = `<div class=\"instructions\" align='center'>\r\n                           <p>\r\n                           Please sit about an arm's length distance away from the screen so that if you stretch out your arm you should be barely able to touch\r\n                           the screen. You should still be able to comfortably use your keyboard. \r\n                           </p>\r\n                           <p>\r\n                           Please also move your mouse off screen so that the cursor is no longer visible. \r\n                           </p>\r\n                           <br><br><p><b>Press any key to continue.</b></p></font></div>\r\n                           <img src=\"${address}/img/screening/screen_distance_instruction.jpg\" width=\"50%\" height=\"50%\"/>\r\n                          </div>`;\r\n\r\nexport function generate_sitting_distance_screen(){\r\n    let sitting_distance = {\r\n        type: 'html-keyboard-response',\r\n        stimulus: sittingDistancePage,\r\n        data: {type: 'instruction'}\r\n    }\r\n    return sitting_distance;\r\n}\r\n\r\n/**\r\n * \r\n * @returns {jsPsych trial}\r\n */\r\nexport function generate_ready_screen(){\r\n    let ready = {\r\n        type: 'html-keyboard-response',\r\n        stimulus: \"<div align = 'center'> <font size = 20><p>Ready? We will first do some practice trials. <p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\r\n        data: {type: 'instruction'}\r\n      }\r\n    return ready;\r\n};",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 323,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "static": true,
    "longname": "scripts/experiment-timeline/instruction_screen/instruction_screen.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 324,
    "kind": "function",
    "name": "generate_welcome",
    "memberof": "scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-timeline/instruction_screen/instruction_screen.js~generate_welcome",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "importStyle": "{generate_welcome}",
    "description": "",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "experiment address"
      },
      {
        "nullable": null,
        "types": [
          "experiment"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "Generated by the appropiate experiment.js constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 325,
    "kind": "function",
    "name": "generate_instructions",
    "memberof": "scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-timeline/instruction_screen/instruction_screen.js~generate_instructions",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "importStyle": "{generate_instructions}",
    "description": "",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPscyh trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "experiment"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "Generated by the appropiate experiment.js constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPscyh trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 326,
    "kind": "variable",
    "name": "sittingDistancePage",
    "memberof": "scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "static": true,
    "longname": "scripts/experiment-timeline/instruction_screen/instruction_screen.js~sittingDistancePage",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 327,
    "kind": "function",
    "name": "generate_sitting_distance_screen",
    "memberof": "scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-timeline/instruction_screen/instruction_screen.js~generate_sitting_distance_screen",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "importStyle": "{generate_sitting_distance_screen}",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "generate_ready_screen",
    "memberof": "scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-timeline/instruction_screen/instruction_screen.js~generate_ready_screen",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/instruction_screen/instruction_screen.js",
    "importStyle": "{generate_ready_screen}",
    "description": "",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych trial}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 329,
    "kind": "file",
    "name": "scripts/experiment-timeline/resolution_scaling/resolution_scaling.js",
    "content": "//jsPsych object for resolution scaling\r\n//These parameters resize elements to be 50 pixels per cm on the screen\r\n\r\nexport const resolution_scaling = {\r\n    type: 'resize',\r\n    item_width: 8.56, //width of credit card in cm\r\n    item_height: 5.397, //height of credit card in cm\r\n    prompt: \"<p>Please click and drag the lower right corner of the box until the box is the same size as a credit card held up to the screen.</p>\",\r\n    pixels_per_unit: 50,\r\n    starting_size: 300,\r\n};\r\n\r\nexport function manual_resolution_scaling(scale_factor){\r\n    const manual_resolution_scaling = {\r\n        type: 'html-keyboard-response',\r\n        stimulus: `<div align = \"center\">` + \r\n                    `<b>Base:</b> Manual Resolution Scaling Set` + '<br>' +\r\n                    `<b>Scale Factor:</b> ${scale_factor}` + '<br>' +\r\n                    '<br><br><br><p><font size = 15>Press any key to continue.<p></font>' +\r\n                    '</div>',\r\n        on_start: function(manual_resolution_scaling) {\r\n            document.getElementById(\"jspsych-content\").style.transform = \"scale(\" + scale_factor + \")\";\r\n        }\r\n    }\r\n    return manual_resolution_scaling;\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-timeline/resolution_scaling/resolution_scaling.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "variable",
    "name": "resolution_scaling",
    "memberof": "scripts/experiment-timeline/resolution_scaling/resolution_scaling.js",
    "static": true,
    "longname": "scripts/experiment-timeline/resolution_scaling/resolution_scaling.js~resolution_scaling",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/resolution_scaling/resolution_scaling.js",
    "importStyle": "{resolution_scaling}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"item_width\": number, \"item_height\": number, \"prompt\": string, \"pixels_per_unit\": number, \"starting_size\": number}"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "function",
    "name": "manual_resolution_scaling",
    "memberof": "scripts/experiment-timeline/resolution_scaling/resolution_scaling.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiment-timeline/resolution_scaling/resolution_scaling.js~manual_resolution_scaling",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/resolution_scaling/resolution_scaling.js",
    "importStyle": "{manual_resolution_scaling}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "scale_factor",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "file",
    "name": "scripts/experiment-timeline/screening/pcp_screening.js",
    "content": "const address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\nconst screeningFailedMessage = `We are sorry but you are not eligible to participate in our experiment. <br> <b>Please do not reattempt</b>.`;\r\n\r\n/**\r\n * Instruction Pages\r\n */\r\n\r\nconst instructionsPage1 = `<div class=\"instructions\">\r\n                           <p>\r\n                           A Parallel Coordinate Plot shows the relationship between two sets of data using two parallel axes, X and Y on the left and right respectively. \r\n                           The relationship between (X,Y) points is represented by a straight line connecting them between the two axes. \r\n                           For this study, the Y axis on the left will be inverted, with smaller Y values at the top and larger Y values at the bottom.\r\n                           </p>\r\n                           <img src=\"${address}/img/screening/parallel_plot_06.PNG\"/>\r\n                          </div>`;\r\n\r\nexport const screeningInstructions = {\r\n    type: 'instructions',\r\n    allow_backward: false,\r\n    pages: [instructionsPage1],\r\n    show_clickable_nav: true,\r\n    button_label_next: 'I understand'\r\n}\r\n \r\n/**\r\n * Screening Sort Strip Orientation Plot\r\n */\r\n\r\nconst imgScreeningPCP0 = `${address}/img/screening/screening_sort_pcp_inverted/pcp_03.PNG`;\r\nconst imgScreeningPCP1 = `${address}/img/screening/screening_sort_pcp_inverted/pcp_06.PNG`;\r\nconst imgScreeningPCP2 = `${address}/img/screening/screening_sort_pcp_inverted/pcp_09.PNG`;\r\n                          \r\nconst sortingStimuli = [\r\n    imgScreeningPCP1,\r\n    imgScreeningPCP0,\r\n    imgScreeningPCP2,\r\n];\r\n\r\nexport const screeningPCPInverted = {\r\n    type: 'image-sort',\r\n    image_class: 'image-sort-correlation',\r\n    stimuli: sortingStimuli,\r\n    button_label: 'I confirm the order',\r\n    condition_string: '102',\r\n    failed_message: screeningFailedMessage,\r\n    prompt: `<p>Please drag the scatterplots below in order from <strong>SMALLEST</strong> to <strong>LARGEST</strong> Pearson’s r correlation value:</p>\r\n            <div class=\"flex-container font-large\">\r\n              <div class=\"col-1-2 text-left\">Small correlation</div>\r\n              <div class=\"col-1-2 text-right\">Large correlation</div>\r\n            </div>\r\n            `\r\n};\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-timeline/screening/pcp_screening.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 333,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiment-timeline/screening/pcp_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/pcp_screening.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/pcp_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 334,
    "kind": "variable",
    "name": "screeningFailedMessage",
    "memberof": "scripts/experiment-timeline/screening/pcp_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/pcp_screening.js~screeningFailedMessage",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/pcp_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 335,
    "kind": "variable",
    "name": "instructionsPage1",
    "memberof": "scripts/experiment-timeline/screening/pcp_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/pcp_screening.js~instructionsPage1",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/pcp_screening.js",
    "importStyle": null,
    "description": "Instruction Pages",
    "lineNumber": 9,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 336,
    "kind": "variable",
    "name": "screeningInstructions",
    "memberof": "scripts/experiment-timeline/screening/pcp_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/pcp_screening.js~screeningInstructions",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/pcp_screening.js",
    "importStyle": "{screeningInstructions}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"allow_backward\": *, \"pages\": *, \"show_clickable_nav\": boolean, \"button_label_next\": string}"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "variable",
    "name": "imgScreeningPCP0",
    "memberof": "scripts/experiment-timeline/screening/pcp_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/pcp_screening.js~imgScreeningPCP0",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/pcp_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 338,
    "kind": "variable",
    "name": "imgScreeningPCP1",
    "memberof": "scripts/experiment-timeline/screening/pcp_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/pcp_screening.js~imgScreeningPCP1",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/pcp_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 339,
    "kind": "variable",
    "name": "imgScreeningPCP2",
    "memberof": "scripts/experiment-timeline/screening/pcp_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/pcp_screening.js~imgScreeningPCP2",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/pcp_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 340,
    "kind": "variable",
    "name": "sortingStimuli",
    "memberof": "scripts/experiment-timeline/screening/pcp_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/pcp_screening.js~sortingStimuli",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/pcp_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 341,
    "kind": "variable",
    "name": "screeningPCPInverted",
    "memberof": "scripts/experiment-timeline/screening/pcp_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/pcp_screening.js~screeningPCPInverted",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/pcp_screening.js",
    "importStyle": "{screeningPCPInverted}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"image_class\": string, \"stimuli\": *, \"button_label\": string, \"condition_string\": string, \"failed_message\": *, \"prompt\": *}"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "file",
    "name": "scripts/experiment-timeline/screening/screening.js",
    "content": "// Questions for users to test their understanding of correlation\r\n// It is used to filter users for online experiments\r\n// Failer to select the correct answer for one or more times will block user to conduct the experiment\r\n\r\nconst screeningFailedMessageProlific = `We are sorry but you are not eligible to participate in our experiment. <br> <b>Please do not reattempt</b>.`;\r\nconst screeningFailedMessageHSP = `We are sorry but you are not eligible to participate in our experiment. <br> <b>Please do not reattempt</b>.`;\r\nconst address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\n/**\r\n * Screening questions\r\n */\r\nexport const screeningQuestions = {\r\n  type: 'survey-html-form',\r\n  dataAsArray: true,\r\n  html: `<div class=\"question-block\">\r\n          <div class=\"question\">Are you familiar with the concept of correlation?</div>\r\n          <label><input type=\"radio\" name=\"correlation-familiarity\" value=\"true\" required> yes</label>\r\n          <label><input type=\"radio\" name=\"correlation-familiarity\" value=\"false\"> no</label>\r\n        </div>\r\n        <div class=\"question-block\">\r\n          <div class=\"question\">Are you familiar with scatterplots?</div>\r\n          <label><input type=\"radio\" name=\"scatterplots-familiarity\" value=\"true\" required> yes</label>\r\n          <label><input type=\"radio\" name=\"scatterplots-familiarity\" value=\"false\"> no</label>\r\n        </div>\r\n        <div class=\"question-block\">\r\n          <div class=\"question\">Education level (In School or completed)</div>\r\n          <label><input type=\"radio\" name=\"education\" value=\"ba\" required> BA</label>\r\n          <label><input type=\"radio\" name=\"education\" value=\"bs\"> BS</label>\r\n          <label><input type=\"radio\" name=\"education\" value=\"ma\"> MA</label>\r\n          <label><input type=\"radio\" name=\"education\" value=\"ms\"> MS</label>\r\n          <label><input type=\"radio\" name=\"education\" value=\"phd\"> PhD</label>\r\n          <label><input type=\"radio\" name=\"education\" value=\"other\"> Other</label>\r\n        </div>\r\n        <div class=\"question-block\">\r\n          <div class=\"question\">Number of Statistics classes taken?</div>\r\n          <label><input type=\"radio\" name=\"statistics-classes\" value=\"0\" required> 0</label>\r\n          <label><input type=\"radio\" name=\"statistics-classes\" value=\"1\"> 1</label>\r\n          <label><input type=\"radio\" name=\"statistics-classes\" value=\"2\"> 2</label>\r\n          <label><input type=\"radio\" name=\"statistics-classes\" value=\">2\"> >2</label>\r\n        </div>\r\n        <div class=\"question-block\">\r\n          <div class=\"question\">Vision</div>\r\n          <label><input type=\"radio\" name=\"vision\" value=\"normal\" required> Normal</label>\r\n          <label><input type=\"radio\" name=\"vision\" value=\"corrected-glasses\"> Corrected with Glasses</label>\r\n          <label><input type=\"radio\" name=\"vision\" value=\"corrected-contact-lenses\"> Corrected with Contact Lenses</label>\r\n        </div>\r\n         <div class=\"question-block\">\r\n          <div class=\"question\">Gender</div>\r\n          <label><input type=\"radio\" name=\"gender\" value=\"male\" required> Male</label>\r\n          <label><input type=\"radio\" name=\"gender\" value=\"female\"> Female</label>\r\n          <label><input type=\"radio\" name=\"gender\" value=\"non-binary\"> Non-Binary</label>\r\n        </div>\r\n       \r\n        <div class=\"question-block\">\r\n          <div class=\"question\">Age</div>\r\n          <label><input type=\"number\" min=\"18\" max=\"30\" name=\"age\" required> </label>\r\n        </div>\r\n        `,\r\n  // Prolific Requirements      \r\n  on_finish: data => {\r\n      //console.log(jsPsych.data)\r\n      //console.log(data.responses)\r\n\r\n      //const responses = JSON.parse(data.responses);\r\n      //responses.forEach(response => {\r\n          //if ((response.name == 'correlation-familiarity' || response.name == 'scatterplots-familiarity' || response.name == 'regression-familiarity')\r\n          // if ((response.name == 'correlation-familiarity' || response.name == 'scatterplots-familiarity')\r\n          //   && response.value != 'true') {\r\n          //     jsPsych.endExperiment(screeningFailedMessage);\r\n          // }\r\n      //})\r\n  },\r\n}\r\n\r\n{/* <div class=\"question-block\">\r\n<div class=\"question\">Are you familiar with regression lines?</div>\r\n<label><input type=\"radio\" name=\"regression-familiarity\" value=\"true\" required> yes</label>\r\n<label><input type=\"radio\" name=\"regression-familiarity\" value=\"false\"> no</label>\r\n</div> */}\r\n\r\n/**\r\n * Instructions page\r\n */\r\nconst instructionsPage1 = `<div class=\"instructions\">\r\n                            <p>\r\n                              Welcome to the Perception of Correlation in Scatterplots Experiment!\r\n                            </p>\r\n                            <p>\r\n                              You are going to read some instructions for the next few screens.\r\n                            </p>\r\n                           </div>`;\r\n\r\nconst instructionsPage2 = `<div class=\"instructions\">\r\n                            <p>\r\n                              This task takes about 30 minutes to complete, although participants with more correct answers will complete fewer trials and finish faster. It is advantageous to be correct as often as possible in this task.\r\n                            </p>\r\n                            <p>\r\n                              <strong>Make sure you can complete this task in one sitting, without walking away or changing tasks in your browser.</strong>\r\n                            </p>\r\n                           </div>`;\r\n\r\nconst instructionsPage3 = `<div class=\"instructions\">\r\n                            <p>\r\n                              Before you go any further, double check to make sure you are using <strong>Google Chrome</strong> as the browser for this task. You will not be able to complete this task on other browsers.\r\n                            </p>\r\n                            <p>\r\n                              Now, please maximize the browser by clicking the green button at the top left. Please also drag your cursor off the screen during the experiment.\r\n                            </p>\r\n                           </div>`;\r\n\r\nconst instructionsPage4 = `<div class=\"instructions\">\r\n                            <p>\r\n                              You also need to be familiar with the concepts of <strong>Pearson’s r correlation</strong>, scatterplots, and regression to complete this experiment.\r\n                            </p>\r\n                            <p>\r\n                              <em>If you are not, please exit and return the submission now to avoid a rejection penalty.</em>\r\n                            </p>\r\n                           </div>`;\r\n\r\nconst instructionsPage5 = `<div class=\"instructions\">\r\n                            <p>\r\n                              You will see the task instructions next, please read and follow these carefully.\r\n                            </p>\r\n                            <p>\r\n                              Note that the experiment will begin directly after the practice trials, so be sure you understand the instructions before proceeding to the practice.\r\n                            </p>\r\n                            <p>\r\n                              Thank you for your attention!\r\n                            </p>\r\n                            </div>`;\r\n\r\nconst instructionsPage6 = `<div class=\"instructions\">\r\n                            <p>\r\n                              Today, you will be asked some questions about scatterplots displaying <strong>Pearson’s r correlation</strong>.\r\n                              These scatterplots will show normally distributed data, and might look like the scatterplots below:\r\n                            </p>\r\n                            <img src=\"${address}/img/screening/instruction_scatterplots.jpg\"/>\r\n                           </div>`;\r\n\r\n// Use only on Prolofic not HSP\r\nconst instructionsPage7 = `<div class=\"instructions\">\r\n                            Just to make sure you are familiar with <strong>Pearson’s r correlation</strong>, we’re going to give you a few training tasks to complete. If you can complete these tasks accurately, you:\r\n                            <ul>\r\n                              <li>can participate in the experiment</li>\r\n                              <li>will be compensated for time spent on training upon experiment completion.</li>\r\n                            </ul>\r\n                           </div>`;\r\n\r\nconst instructionsPage7_HSP = `<div class=\"instructions\">\r\n                            Just to make sure you are familiar with <strong>Pearson’s r correlation</strong>, we’re going to give you a few training tasks to complete. If you can complete these tasks accurately, you:\r\n                            <ul>\r\n                              <li>can participate in the experiment</li>\r\n                            </ul>\r\n                            </div>`;\r\n\r\nexport const screeningInstructions = {\r\n    type: 'instructions',\r\n    allow_backward: false,\r\n    pages: [instructionsPage1, instructionsPage2, instructionsPage3, instructionsPage4, instructionsPage5, instructionsPage6, instructionsPage7_HSP],\r\n    show_clickable_nav: true,\r\n    button_label_next: 'I understand'\r\n}\r\n\r\n/**\r\n * Screening: Correlation Sort\r\n */\r\n\r\nconst imgScreeningCorrelation0 = `${address}/img/screening/screening_sort_correlation/0.png`;\r\nconst imgScreeningCorrelation1 = `${address}/img/screening/screening_sort_correlation/1.png`;\r\nconst imgScreeningCorrelation2 = `${address}/img/screening/screening_sort_correlation/2.png`;\r\n\r\nconst sortingStimuli = [\r\n  imgScreeningCorrelation0,\r\n  imgScreeningCorrelation1,\r\n  imgScreeningCorrelation2\r\n];\r\nexport const screeningCorrelationSort = {\r\n    type: 'image-sort',\r\n    image_class: 'image-sort-correlation',\r\n    stimuli: sortingStimuli,\r\n    button_label: 'I confirm the order',\r\n    condition_string: '201',\r\n    failed_message: screeningFailedMessageHSP,\r\n    prompt: `<p>Please drag the scatterplots below in order from <strong>SMALLEST</strong> to <strong>LARGEST</strong> Pearson’s r correlation value:</p>\r\n            <div class=\"flex-container font-large\">\r\n              <div class=\"col-1-2 text-left\">Small correlation</div>\r\n              <div class=\"col-1-2 text-right\">Large correlation</div>\r\n            </div>\r\n            `\r\n};\r\n\r\n\r\n/**\r\n * Screening: Select negative correlation\r\n */\r\n\r\nconst imgScreeningNegativeCorrelation0 = `${address}/img/screening/screening_select_negative_correlation/0.png`;\r\nconst imgScreeningNegativeCorrelation1 = `${address}/img/screening/screening_select_negative_correlation/1.png`;\r\nconst imgScreeningNegativeCorrelation2 = `${address}/img/screening/screening_select_negative_correlation/2.png`;\r\nconst imgScreeningNegativeCorrelation3 = `${address}/img/screening/screening_select_negative_correlation/3.png`;\r\nconst imgScreeningNegativeCorrelation4 = `${address}/img/screening/screening_select_negative_correlation/4.png`;\r\n\r\nconst selectCorrelationImageStimuli = [\r\n    imgScreeningNegativeCorrelation0,\r\n    imgScreeningNegativeCorrelation1,\r\n    imgScreeningNegativeCorrelation2,\r\n    imgScreeningNegativeCorrelation3,\r\n    imgScreeningNegativeCorrelation4\r\n];\r\nexport const screeningCorrelationSelect = {\r\n    type: 'image-select',\r\n    image_class: 'image-select-correlation',\r\n    stimuli: selectCorrelationImageStimuli,\r\n    button_label: 'I confirm the selection',\r\n    condition: [1,4],\r\n    failed_message: screeningFailedMessageHSP,\r\n    prompt: `<p>\r\n              Please indicate which of these plots are showing a <strong>NEGATIVE</strong> Pearson’s r correlation<br/>\r\n              (you can select more than one plot):\r\n            `\r\n};\r\n\r\n\r\n/**\r\n * Regression instructions page\r\n */\r\n\r\nconst imgInstructionRegression = `${address}/img/screening/instruction_regression.jpg`;\r\n\r\nexport const instructionsRegression = {\r\n    type: 'instructions',\r\n    allow_backward: false,\r\n    pages: [\r\n      `<div class=\"instructions\">\r\n        <p>\r\n          You can use a <strong>regression line</strong> to describe the magnitude of Pearson’s r correlation in a scatterplot.\r\n          As the correlation gets smaller, the slope of the regression line gets more shallow (less steep). Here are some examples:\r\n        </p>\r\n        <img src=\"${imgInstructionRegression}\" class=\"full-width\"/>\r\n      </div>`\r\n    ],\r\n    show_clickable_nav: true,\r\n    button_label_next: 'Continue'\r\n};\r\n\r\n\r\n/**\r\n * Screening: Regression\r\n */\r\n\r\nconst imgScreeningSelectRegression0 = `${address}/img/screening/screening_select_regression/0.png`;\r\nconst imgScreeningSelectRegression1 = `${address}/img/screening/screening_select_regression/1.png`;\r\nconst imgScreeningSelectRegression2 = `${address}/img/screening/screening_select_regression/2.png`;\r\nconst imgScreeningSelectRegressionLine = `${address}/img/screening/screening_select_regression/regression.png`;\r\n\r\nconst selectRegressionImageStimuli = [\r\n    imgScreeningSelectRegression0,\r\n    imgScreeningSelectRegression1,\r\n    imgScreeningSelectRegression2\r\n];\r\nexport const screeningRegressionSelect = {\r\n    type: 'image-select',\r\n    image_class: 'image-select-regression',\r\n    stimuli: selectRegressionImageStimuli,\r\n    button_label: 'I confirm the selection',\r\n    condition: [1],\r\n    multi_select: false,\r\n    failed_message: screeningFailedMessageHSP,\r\n    prompt: `<p>\r\n              Now we will make sure you understand how regression lines work. Please select the Pearson’s r correlation that corresponds to the given regression line:<br/>\r\n              <img src=\"${imgScreeningSelectRegressionLine}\" />\r\n            </p>\r\n            `\r\n};\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-timeline/screening/screening.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 343,
    "kind": "variable",
    "name": "screeningFailedMessageProlific",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~screeningFailedMessageProlific",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 344,
    "kind": "variable",
    "name": "screeningFailedMessageHSP",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~screeningFailedMessageHSP",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 345,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 346,
    "kind": "variable",
    "name": "screeningQuestions",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~screeningQuestions",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": "{screeningQuestions}",
    "description": "Screening questions",
    "lineNumber": 12,
    "type": {
      "types": [
        "{\"type\": string, \"dataAsArray\": boolean, \"html\": *, \"on_finish\": *}"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "variable",
    "name": "instructionsPage1",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~instructionsPage1",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": "Instructions page",
    "lineNumber": 84,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 348,
    "kind": "variable",
    "name": "instructionsPage2",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~instructionsPage2",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 349,
    "kind": "variable",
    "name": "instructionsPage3",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~instructionsPage3",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 350,
    "kind": "variable",
    "name": "instructionsPage4",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~instructionsPage4",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 351,
    "kind": "variable",
    "name": "instructionsPage5",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~instructionsPage5",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 352,
    "kind": "variable",
    "name": "instructionsPage6",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~instructionsPage6",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 353,
    "kind": "variable",
    "name": "instructionsPage7",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~instructionsPage7",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 354,
    "kind": "variable",
    "name": "instructionsPage7_HSP",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~instructionsPage7_HSP",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 355,
    "kind": "variable",
    "name": "screeningInstructions",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~screeningInstructions",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": "{screeningInstructions}",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"allow_backward\": *, \"pages\": *, \"show_clickable_nav\": boolean, \"button_label_next\": string}"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "variable",
    "name": "imgScreeningCorrelation0",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgScreeningCorrelation0",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 357,
    "kind": "variable",
    "name": "imgScreeningCorrelation1",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgScreeningCorrelation1",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 358,
    "kind": "variable",
    "name": "imgScreeningCorrelation2",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgScreeningCorrelation2",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 359,
    "kind": "variable",
    "name": "sortingStimuli",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~sortingStimuli",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 360,
    "kind": "variable",
    "name": "screeningCorrelationSort",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~screeningCorrelationSort",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": "{screeningCorrelationSort}",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"image_class\": string, \"stimuli\": *, \"button_label\": string, \"condition_string\": string, \"failed_message\": *, \"prompt\": *}"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "variable",
    "name": "imgScreeningNegativeCorrelation0",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgScreeningNegativeCorrelation0",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": "Screening: Select negative correlation",
    "lineNumber": 197,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 362,
    "kind": "variable",
    "name": "imgScreeningNegativeCorrelation1",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgScreeningNegativeCorrelation1",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 363,
    "kind": "variable",
    "name": "imgScreeningNegativeCorrelation2",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgScreeningNegativeCorrelation2",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 364,
    "kind": "variable",
    "name": "imgScreeningNegativeCorrelation3",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgScreeningNegativeCorrelation3",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 365,
    "kind": "variable",
    "name": "imgScreeningNegativeCorrelation4",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgScreeningNegativeCorrelation4",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 366,
    "kind": "variable",
    "name": "selectCorrelationImageStimuli",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~selectCorrelationImageStimuli",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 367,
    "kind": "variable",
    "name": "screeningCorrelationSelect",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~screeningCorrelationSelect",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": "{screeningCorrelationSelect}",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"image_class\": string, \"stimuli\": *, \"button_label\": string, \"condition\": *, \"failed_message\": *, \"prompt\": *}"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "variable",
    "name": "imgInstructionRegression",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgInstructionRegression",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": "Regression instructions page",
    "lineNumber": 228,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 369,
    "kind": "variable",
    "name": "instructionsRegression",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~instructionsRegression",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": "{instructionsRegression}",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"allow_backward\": *, \"pages\": *, \"show_clickable_nav\": boolean, \"button_label_next\": string}"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "variable",
    "name": "imgScreeningSelectRegression0",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgScreeningSelectRegression0",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": "Screening: Regression",
    "lineNumber": 251,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 371,
    "kind": "variable",
    "name": "imgScreeningSelectRegression1",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgScreeningSelectRegression1",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 372,
    "kind": "variable",
    "name": "imgScreeningSelectRegression2",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgScreeningSelectRegression2",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 253,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 373,
    "kind": "variable",
    "name": "imgScreeningSelectRegressionLine",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~imgScreeningSelectRegressionLine",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 374,
    "kind": "variable",
    "name": "selectRegressionImageStimuli",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~selectRegressionImageStimuli",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 375,
    "kind": "variable",
    "name": "screeningRegressionSelect",
    "memberof": "scripts/experiment-timeline/screening/screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/screening.js~screeningRegressionSelect",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/screening.js",
    "importStyle": "{screeningRegressionSelect}",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"image_class\": string, \"stimuli\": *, \"button_label\": string, \"condition\": *, \"multi_select\": *, \"failed_message\": *, \"prompt\": *}"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "file",
    "name": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "content": "const address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\nconst screeningFailedMessage = `We are sorry but you are not eligible to participate in our experiment. <br> <b>Please do not reattempt</b>.`;\r\n\r\n/**\r\n * Instruction Pages\r\n */\r\n\r\nconst instructionsPage1 = `<div class=\"instructions\">\r\n                           <p>\r\n                           An orientation strip plot’s correlation is determined by how neatly and evenly the lines converge towards the center of the graph. High correlation is denoted by a V-shaped structure while low correlation would be seen as a messy array with no particular shape.\r\n                           </p>\r\n                           <img src=\"${address}/img/screening/orientation_strip_plot.png\"/>\r\n                          </div>`;\r\n\r\nconst luminancePage = `<div class=\"instructions\">\r\n                          <p>\r\n                          Correlation for a luminance strip plot is determined by how well a gradient is represented. High correlation is denoted with the gradient going from left to right, brightest to darkest, while low correlation is identified by having no such pattern.\r\n                          </p>\r\n                          <img src=\"${address}/img/screening/luminance_strip_plot_06.PNG\"/>\r\n                         </div>`;\r\n\r\nconst colorYellowBluePage = `<div class=\"instructions\">\r\n                            <p>\r\n                            A color strip plot represents the relationship between X-Y data pairs using colored vertical lines over a horizonal axis. \r\n                            The position of the line on the horizontal axis represents the X value of the data pair, with lines to the left side being a low X value and lines to the right side being a high X value.\r\n                            The color of the line represents the Y value of the data pair, with yellow indicating a low Y value and blue represnting a high Y value.\r\n                            </p>\r\n                            <img src=\"${address}/img/screening/screening_sort_color_strip/colorstripplot.PNG\"/>\r\n                            </div>`;                            \r\n\r\nconst ignoreinstructions1 = `<div class=\"instructions\">\r\n                            <p>\r\n                            In some of the trials you may come across plots where both orientation and luminance have been affected. In these situations correlation will revolve around only one specific attribute depending on the plot.\r\n                            </p>\r\n                            </div>`;\r\n\r\nconst ignoreinstructions2 = `<div class=\"instructions\">\r\n                            <p>\r\n                            If the plot looks like this, focus on orientation not luminance\r\n                            </p>\r\n                            <img src=\"${address}/img/screening/screening_sort_strip_plot/ori.png\"/>\r\n                            </div>`;\r\n\r\nconst ignoreinstructions3 = `<div class=\"instructions\">                            \r\n                            <p>\r\n                            If the plot looks like this focus on luminance not orientation\r\n                            </p>\r\n                            <img src=\"${address}/img/screening/screening_sort_strip_plot/lum.png\"/>\r\n                            </div>`;\r\n\r\nexport const orientationScreeningInstructions = {\r\n    type: 'instructions',\r\n    allow_backward: false,\r\n    pages: [instructionsPage1],\r\n    show_clickable_nav: true,\r\n    button_label_next: 'I understand'\r\n}\r\n\r\nexport const luminanceScreeningInstructions = {\r\n    type: 'instructions',\r\n    allow_backward: false,\r\n    pages: [luminancePage],\r\n    show_clickable_nav: true,\r\n    button_label_next: 'I understand'\r\n}\r\n\r\nexport const colorScreeningInstructions = {\r\n    type: 'instructions',\r\n    allow_backward: false,\r\n    pages: [colorYellowBluePage],\r\n    show_clickable_nav: true,\r\n    button_label_next: 'I understand'\r\n\r\n}\r\n\r\nexport const ignoreScreeningInstructions = {\r\n    type: 'instructions',\r\n    allow_backward: false,\r\n    pages: [ignoreinstructions1, ignoreinstructions2, ignoreinstructions3],\r\n    show_clickable_nav: true,\r\n    button_label_next: 'I understand'\r\n}\r\n\r\n \r\n/**\r\n * Screening Sort Strip Orientation Plot\r\n */\r\n\r\nconst imgScreeningStripOrientation0 = `${address}/img/screening/screening_sort_strip_plot/0.png`;\r\nconst imgScreeningStripOrientation1= `${address}/img/screening/screening_sort_strip_plot/1.png`;\r\nconst imgScreeningStripOrientation2 = `${address}/img/screening/screening_sort_strip_plot/2.png`;\r\n                          \r\nconst sortingStimuli = [\r\n    imgScreeningStripOrientation2,\r\n    imgScreeningStripOrientation0,\r\n    imgScreeningStripOrientation1,\r\n];\r\n\r\nexport const screenningStripOrientationSort = {\r\n    type: 'image-sort',\r\n    image_class: 'image-sort-correlation',\r\n    stimuli: sortingStimuli,\r\n    button_label: 'I confirm the order',\r\n    condition_string: '120',\r\n    failed_message: screeningFailedMessage,\r\n    prompt: `<p>Please drag the scatterplots below in order from <strong>SMALLEST</strong> to <strong>LARGEST</strong> Pearson’s r correlation value:</p>\r\n            <div class=\"flex-container font-large\">\r\n              <div class=\"col-1-2 text-left\">Small correlation</div>\r\n              <div class=\"col-1-2 text-right\">Large correlation</div>\r\n            </div>\r\n            `\r\n};\r\n\r\n\r\nconst imgScreeningStripLuminance0 = `${address}/img/screening/screening_sort_luminance_strip/luminance_03.PNG`;\r\nconst imgScreeningStripLuminance1= `${address}/img/screening/screening_sort_luminance_strip/luminance_06.PNG`;\r\nconst imgScreeningStripLuminance2 = `${address}/img/screening/screening_sort_luminance_strip/luminance_09.PNG`;\r\n                          \r\nconst luminanceSortingStimuli = [\r\n    imgScreeningStripLuminance1,\r\n    imgScreeningStripLuminance2,\r\n    imgScreeningStripLuminance0,\r\n];\r\n\r\nexport const screenningStripLuminanceSort = {\r\n    type: 'image-sort',\r\n    image_class: 'image-sort-correlation',\r\n    stimuli: luminanceSortingStimuli,\r\n    button_label: 'I confirm the order',\r\n    condition_string: '201',\r\n    failed_message: screeningFailedMessage,\r\n    prompt: `<p>Please drag the scatterplots below in order from <strong>SMALLEST</strong> to <strong>LARGEST</strong> Pearson’s r correlation value:</p>\r\n            <div class=\"flex-container font-large\">\r\n              <div class=\"col-1-2 text-left\">Small correlation</div>\r\n              <div class=\"col-1-2 text-right\">Large correlation</div>\r\n            </div>\r\n            `\r\n};\r\n\r\nconst colorSortingStimuli = [\r\n    `${address}/img/screening/screening_sort_color_strip/strip_color_055.PNG`,\r\n    `${address}/img/screening/screening_sort_color_strip/strip_color_0965.PNG`,\r\n    `${address}/img/screening/screening_sort_color_strip/strip_color_0255.PNG`\r\n]\r\n\r\nexport const screeningStripColorYellowBlue = {\r\n    type: 'image-sort',\r\n    image_class: 'image-sort-correlation',\r\n    stimuli: colorSortingStimuli,\r\n    button_label: 'I confirm the order',\r\n    condition_string: '201',\r\n    failed_message: screeningFailedMessage,\r\n    prompt: `<p>Please drag the scatterplots below in order from <strong>SMALLEST</strong> to <strong>LARGEST</strong> Pearson’s r correlation value:</p>\r\n            <div class=\"flex-container font-large\">\r\n              <div class=\"col-1-2 text-left\">Small correlation</div>\r\n              <div class=\"col-1-2 text-right\">Large correlation</div>\r\n            </div>\r\n            `\r\n}\r\n\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 377,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 378,
    "kind": "variable",
    "name": "screeningFailedMessage",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~screeningFailedMessage",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 379,
    "kind": "variable",
    "name": "instructionsPage1",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~instructionsPage1",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": "Instruction Pages",
    "lineNumber": 9,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 380,
    "kind": "variable",
    "name": "luminancePage",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~luminancePage",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 381,
    "kind": "variable",
    "name": "colorYellowBluePage",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~colorYellowBluePage",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 382,
    "kind": "variable",
    "name": "ignoreinstructions1",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~ignoreinstructions1",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 383,
    "kind": "variable",
    "name": "ignoreinstructions2",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~ignoreinstructions2",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 384,
    "kind": "variable",
    "name": "ignoreinstructions3",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~ignoreinstructions3",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 385,
    "kind": "variable",
    "name": "orientationScreeningInstructions",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~orientationScreeningInstructions",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": "{orientationScreeningInstructions}",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"allow_backward\": *, \"pages\": *, \"show_clickable_nav\": boolean, \"button_label_next\": string}"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "variable",
    "name": "luminanceScreeningInstructions",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~luminanceScreeningInstructions",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": "{luminanceScreeningInstructions}",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"allow_backward\": *, \"pages\": *, \"show_clickable_nav\": boolean, \"button_label_next\": string}"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "variable",
    "name": "colorScreeningInstructions",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~colorScreeningInstructions",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": "{colorScreeningInstructions}",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"allow_backward\": *, \"pages\": *, \"show_clickable_nav\": boolean, \"button_label_next\": string}"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "variable",
    "name": "ignoreScreeningInstructions",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~ignoreScreeningInstructions",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": "{ignoreScreeningInstructions}",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"allow_backward\": *, \"pages\": *, \"show_clickable_nav\": boolean, \"button_label_next\": string}"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "variable",
    "name": "imgScreeningStripOrientation0",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~imgScreeningStripOrientation0",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 390,
    "kind": "variable",
    "name": "imgScreeningStripOrientation1",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~imgScreeningStripOrientation1",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 391,
    "kind": "variable",
    "name": "imgScreeningStripOrientation2",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~imgScreeningStripOrientation2",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 392,
    "kind": "variable",
    "name": "sortingStimuli",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~sortingStimuli",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 393,
    "kind": "variable",
    "name": "screenningStripOrientationSort",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~screenningStripOrientationSort",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": "{screenningStripOrientationSort}",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"image_class\": string, \"stimuli\": *, \"button_label\": string, \"condition_string\": string, \"failed_message\": *, \"prompt\": *}"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "variable",
    "name": "imgScreeningStripLuminance0",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~imgScreeningStripLuminance0",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 395,
    "kind": "variable",
    "name": "imgScreeningStripLuminance1",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~imgScreeningStripLuminance1",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 396,
    "kind": "variable",
    "name": "imgScreeningStripLuminance2",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~imgScreeningStripLuminance2",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 397,
    "kind": "variable",
    "name": "luminanceSortingStimuli",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~luminanceSortingStimuli",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 398,
    "kind": "variable",
    "name": "screenningStripLuminanceSort",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~screenningStripLuminanceSort",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": "{screenningStripLuminanceSort}",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"image_class\": string, \"stimuli\": *, \"button_label\": string, \"condition_string\": string, \"failed_message\": *, \"prompt\": *}"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "variable",
    "name": "colorSortingStimuli",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~colorSortingStimuli",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 400,
    "kind": "variable",
    "name": "screeningStripColorYellowBlue",
    "memberof": "scripts/experiment-timeline/screening/strip_plot_screening.js",
    "static": true,
    "longname": "scripts/experiment-timeline/screening/strip_plot_screening.js~screeningStripColorYellowBlue",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiment-timeline/screening/strip_plot_screening.js",
    "importStyle": "{screeningStripColorYellowBlue}",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"image_class\": string, \"stimuli\": *, \"button_label\": string, \"condition_string\": string, \"failed_message\": *, \"prompt\": *}"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "file",
    "name": "scripts/experiments/ensemble_average/ensemble_average.js",
    "content": "import { get_data } from \"/scripts/experiment-properties/data/data_controller.js\";\r\nimport { balance_subconditions } from \"/scripts/experiment-properties/balancing/balancing_controller.js\";\r\nimport { generateDistribution } from \"/scripts/experiment-properties/distribution/gaussian_distribution_generator.js\";\r\n\r\nexport default class Ensemble_Average {\r\n  /**\r\n   * Initializes a Ensemble Average experiment object.\r\n   *\r\n   * @param  {assoc array}  Parameters passed from routing.\r\n   */\r\n  constructor(params) {\r\n\r\n    // let trial_structure = params[\"trial_structure\"];\r\n    // let condition_name = params[\"condition\"];\r\n    // let graph_type = params[\"graph_type\"];\r\n    // let balancing_type = params[\"balancing\"];\r\n    let conversion_factor = params[\"conversion_factor\"];\r\n\r\n    // ========================================\r\n    // EXPERIMENT CONSTANTS\r\n\r\n    this.PIXELS_PER_CM = conversion_factor;\r\n\r\n\r\n    this.balancing_type = params[\"balancing\"];\r\n    this.condition_name = params[\"condition\"];\r\n    this.graph_type = params[\"graph_type\"];\r\n    this.subject_id = params[\"subject_id\"];\r\n    this.subject_initials = params[\"subject_initials\"];\r\n    this.trial_structure = params[\"trial_structure\"];\r\n\r\n    // Condition group used to classify the type of graph (e.g. distractor)\r\n    this.condition_group = this.condition_name.split(\"_\")[0];\r\n\r\n    // Coordinates\r\n    this.coordinates = [];\r\n    this.distractor_coordinates = [];\r\n\r\n    // Automation mode\r\n    this.auto_mode = false;\r\n\r\n    // Randomly ordered trials and its current index\r\n    this.trials = shuffle(this.balancing_type, this.constructor.name.toLowerCase(), get_data(this));\r\n    this.trial_index = 0;\r\n\r\n    // JsPsych trial_data for the current trial\r\n    // TODO\r\n    this.trial_data = \"\";\r\n\r\n    function shuffle(balancing_type, constructor_name, ordered_data) {\r\n      const random_order = balance_subconditions(\r\n        balancing_type,\r\n        constructor_name,\r\n        ordered_data.length\r\n      );\r\n      let shuffled_data = [];\r\n      for (let i = 0; i < random_order.length; i++) {\r\n        shuffled_data[i] = ordered_data[random_order[i]];\r\n      }\r\n      return shuffled_data;\r\n    }\r\n  }\r\n\r\n   /**\r\n   * Generates a graph of Ensemble Average for timeline to use\r\n   *\r\n   * @return trial {object}\r\n   */\r\n  generate_trial() {\r\n    // Initialize a variable for this so it is usable inside on_start\r\n    var ensemble_avg_exp = this;\r\n    var address = location.protocol + \"//\" + location.hostname + \":\" + location.port + \"/ensemble_average_trial\";\r\n\r\n    var trial = {\r\n      type: \"external-html-keyboard-response\",\r\n      url: address,\r\n      trial_duration: 1000,\r\n      choices: [\"t\"],\r\n      on_start: function (trial) {\r\n        // NOTE: on_start takes in trial var\r\n\r\n        if (ensemble_avg_exp.auto_mode) {\r\n          trial.post_trial_gap = 0;\r\n          trial.trial_duration = 0;\r\n        }\r\n\r\n        // Set the constants to be used:\r\n\r\n        var index = ensemble_avg_exp.trial_index;\r\n        var constants = ensemble_avg_exp.trials[index];\r\n\r\n        var base_coordinates = generateDistribution(\r\n          constants.base_correlation,\r\n          constants.error,\r\n          constants.num_points,\r\n          constants.num_SD,\r\n          constants.mean,\r\n          constants.SD\r\n        );\r\n\r\n        ensemble_avg_exp.coordinates = [base_coordinates];\r\n\r\n        var distractor_coordinates = generateDistribution(\r\n          constants.dist_base,\r\n          constants.error,\r\n          constants.num_points,\r\n          constants.num_SD,\r\n          constants.mean,\r\n          constants.SD\r\n        );\r\n\r\n        ensemble_avg_exp.distractor_coordinates = [distractor_coordinates];\r\n\r\n        ensemble_avg_exp.trial_data = constants;\r\n\r\n        console.log(\"constants\");\r\n        console.log(constants);\r\n      },\r\n    };\r\n\r\n    \r\n    return trial;\r\n  }\r\n\r\n   /**\r\n   * Generates a cue of Ensemble Average for timeline to use\r\n   *\r\n   * @return trial {object}\r\n   */\r\n  generate_cue() {\r\n\r\n    var ensemble_avg_exp = this;\r\n\r\n    var cue = {\r\n        type: \"html-keyboard-response\",\r\n        stimulus: \"\",\r\n        data: { type: \"cue\" },\r\n        on_start: function(trial) {\r\n          trial.stimulus = cue_selector();\r\n        }\r\n    };\r\n\r\n    return cue;\r\n    \r\n    function cue_selector() {\r\n        const no_cue = \r\n            `\r\n            <div style=\"text-align: center;\">\r\n                <p style=\"font-size: 50px; line-height: 70px;\">\r\n                    You are about to see a scatterplot with two populations of data.\r\n                </p>\r\n            </div>\r\n            `;\r\n\r\n        const cue_blue_color = \r\n            `\r\n            <div style=\"text-align: center;\">\r\n                <p style=\"font-size: 50px; line-height: 70px;\">\r\n                    You are about to see a scatterplot with two populations of data.\r\n                    </br>\r\n                    <b>\r\n                      Pay attention to the <font color=\"blue\">blue</font> dots.\r\n                    </b>\r\n                </p>\r\n            </div>\r\n            `;\r\n\r\n        const cue_orange_color = \r\n            `\r\n            <div style=\"text-align: center;\">\r\n                <p style=\"font-size: 50px; line-height: 70px;\">\r\n                    You are about to see a scatterplot with two populations of data.\r\n                    </br>\r\n                    <b>\r\n                      Pay attention to the <font color=\"orange\">orange</font> dots.\r\n                    </b>\r\n                </p>\r\n            </div>\r\n            `;\r\n        \r\n        const cue_more_correlated = \r\n            `\r\n            <div style=\"text-align: center;\">\r\n                <p style=\"font-size: 50px; line-height: 70px;\">\r\n                    You are about to see a scatterplot with two populations of data.\r\n                    </br>\r\n                    <b>\r\n                      Pay attention to the more correlated population.     \r\n                    </b>\r\n                </p>\r\n            </div>\r\n            `;\r\n\r\n        const cue_less_correlated = \r\n            `\r\n            <div style=\"text-align: center;\">\r\n                <p style=\"font-size: 50px; line-height: 70px;\">\r\n                    You are about to see a scatterplot with two populations of data.\r\n                    </br>\r\n                    <b>\r\n                      Pay attention to the less correlated population.      \r\n                    </b>  \r\n                </p>\r\n            </div>\r\n            `;\r\n\r\n        console.log(\"ensemble_avg_exp.trial_index:\" + ensemble_avg_exp.trial_index)\r\n        console.log(\"ensemble_avg_exp.trials[ensemble_avg_exp.trial_index]:\" + ensemble_avg_exp.trials[ensemble_avg_exp.trial_index])\r\n\r\n        const current_trial = ensemble_avg_exp.trials[ensemble_avg_exp.trial_index];\r\n\r\n\r\n        if (current_trial.cue == \"None\") {\r\n          return no_cue\r\n        } else if (current_trial.cue == \"blue\") {\r\n          return cue_blue_color;\r\n        } else if (current_trial.cue == \"orange\") {\r\n          return cue_orange_color;\r\n        } else if (current_trial.cue == \"more correlated\") {\r\n          return cue_more_correlated;\r\n        } else if (current_trial.cue == \"less correlated\") {\r\n          return cue_less_correlated;\r\n        } else {\r\n          console.error(\"Cue is neither on blue, orange, less correlated or more correlated dots\");\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates a first probe of Ensemble Average for timeline to use\r\n   *\r\n   * @return trial {object}\r\n   */\r\n  // TODO 1\r\n  generate_averaging_task() {\r\n\r\n    var ensemble_avg_exp = this;\r\n\r\n    var averaging_task = {\r\n        type: \"html-keyboard-response\",\r\n        choices: [77, 90, 32, 81], // m = 77 (up), z = 90 (down), 32 = spacebar, 81 = q (exit button for debugging)\r\n        trial_duration: 1000,\r\n        stimulus: \"\",\r\n        data: { type: \"averaging_task\"},\r\n        on_start: function(trial) {\r\n          var dots_radius_min = 0;\r\n          var dots_radius_max = 20;\r\n          var dots_radius_adjustment = 0.5\r\n\r\n          var last_trial_data = jsPsych.data.getLastTrialData().values()[0];\r\n          var last_dots_radius = last_trial_data.dots_radius;\r\n\r\n          if(last_dots_radius){\r\n            var last_key_press = last_trial_data.key_press;\r\n            if (last_key_press && (last_key_press == trial.choices[0] || last_key_press == trial.choices[1])){\r\n              if (last_key_press == trial.choices[0] && (last_dots_radius + dots_radius_adjustment) < dots_radius_max){ // up\r\n                trial.data.dots_radius = last_dots_radius + dots_radius_adjustment;\r\n              }else if (last_key_press == trial.choices[1] && (last_dots_radius - dots_radius_adjustment) > dots_radius_min){ // down\r\n                trial.data.dots_radius = last_dots_radius - dots_radius_adjustment;\r\n              }else{\r\n                trial.data.dots_radius = last_dots_radius;\r\n              }\r\n            }else{\r\n              trial.data.dots_radius = last_dots_radius;\r\n            }\r\n          }else{\r\n            trial.data.dots_radius = Math.random() * (dots_radius_max - dots_radius_min) + dots_radius_min;\r\n          }\r\n\r\n          trial.stimulus = probe_selector(trial.data.dots_radius);\r\n          console.log(\"dots radius: \" + trial.data.dots_radius)\r\n        }\r\n    };\r\n\r\n    return averaging_task;\r\n    \r\n    function probe_selector(dots_radius) {\r\n        const probe_blue_color = \r\n            `\r\n            <div style=\"text-align: center;\">\r\n                <p style=\"font-size: 50px; line-height: 70px;\">\r\n                Adjust the dot here until it shows the average size of the blue dots from the previous display.\r\n                </p>\r\n                <p style=\"font-size: 20px; line-height: 50px;\">\r\n                  (Note: press “z” to decrease the size; press “m” to increase the size; press “space” to confirm the size)\r\n                </p>\r\n            </div>\r\n            <svg width=\"100%\">\r\n              <circle cx=50% cy=50% r=\"${dots_radius}\"/>\r\n            </svg>\r\n            `;\r\n\r\n        const probe_orange_color = \r\n            `\r\n            <div style=\"text-align: center;\">\r\n                <p style=\"font-size: 50px; line-height: 70px;\">\r\n                  Adjust the dot here until it shows the average size of the orange dots from the previous display. \r\n                </p>\r\n                <p style=\"font-size: 20px; line-height: 50px;\">\r\n                  (Note: press “z” to decrease the size; press “m” to increase the size; press “space” to confirm the size)\r\n                </p>\r\n            </div>\r\n            <svg width=\"100%\">\r\n              <circle cx=50% cy=50% r=\"${dots_radius}\"/>\r\n            </svg>\r\n            `;\r\n        \r\n        const probe_more_correlated = \r\n            `\r\n            <div style=\"text-align: center;\">\r\n                <p style=\"font-size: 50px; line-height: 70px;\">\r\n                  Adjust the dot here until it shows the average size of the more correlated population from the previous display.      \r\n                </p>\r\n                <p style=\"font-size: 20px; line-height: 50px;\">\r\n                  (Note: press “z” to decrease the size; press “m” to increase the size; press “space” to confirm the size)\r\n                </p>\r\n            </div>\r\n            <svg width=\"100%\">\r\n              <circle cx=50% cy=50% r=\"${dots_radius}\"/>\r\n            </svg>\r\n            `;\r\n\r\n        const probe_less_correlated = \r\n            `\r\n            <div style=\"text-align: center;\">\r\n                <p style=\"font-size: 50px; line-height: 70px;\">\r\n                  Adjust the dot here until it shows the average size of the less correlated population from the previous display.\r\n                </p>\r\n                <p style=\"font-size: 20px; line-height: 50px;\">\r\n                  (Note: press “z” to decrease the size; press “m” to increase the size; press “space” to confirm the size)\r\n                </p>\r\n            </div>\r\n            <svg width=\"100%\">\r\n              <circle cx=50% cy=50% r=\"${dots_radius}\"/>\r\n            </svg>\r\n            `;\r\n\r\n        const current_trial = ensemble_avg_exp.trials[ensemble_avg_exp.trial_index];\r\n\r\n\r\n        if (current_trial.size_average_probe == \"blue\") {\r\n          return probe_blue_color;\r\n        } else if (current_trial.size_average_probe == \"orange\") {\r\n          return probe_orange_color;\r\n        } else if (current_trial.size_average_probe == \"more correlated\") {\r\n          return probe_more_correlated;\r\n        } else if (current_trial.size_average_probe == \"less correlated\") {\r\n          return probe_less_correlated;\r\n        } else {\r\n          console.error(\"Size averaging task is neither on blue, orange, less correlated or more correlated dots\");\r\n        }\r\n        \r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates a second probe of Ensemble Average for timeline to use\r\n   *\r\n   * @return trial {object}\r\n   */\r\n  // TODO 2\r\n  generate_correlation_probe() {\r\n    var correlation_probe = {\r\n        type: \"html-keyboard-response\",\r\n        choices: [77, 90], // m = 77 (orange), z = 90 (blue), 81 = q (exit button for debugging)\r\n        stimulus: \"\",\r\n        data: { type: \"correlation_probe\" },\r\n        on_start: function(trial) {\r\n            trial.stimulus = `\r\n            <div style=\"text-align: center;\">\r\n                <p style=\"font-size: 50px; line-height: 70px;\">\r\n                  Which color was showing the higher correlation value?\r\n                </p>\r\n            </div>\r\n            <svg width=\"100%\">\r\n              <circle cx=25% cy=50% r=\"30\" fill=\"blue\"/>\r\n              <text x=\"25%\" y=\"50%\" text-anchor=\"middle\" fill=\"white\" font-size=\"20\" dy=\".3em\">Z</text>\r\n              <circle cx=75% cy=50% r=\"30\" fill=\"orange\"/>\r\n              <text x=\"75%\" y=\"50%\" text-anchor=\"middle\" fill=\"white\" font-size=\"20\" dy=\".3em\">M</text>\r\n            </svg>\r\n            `\r\n        }\r\n    };\r\n    return correlation_probe;\r\n  }\r\n\r\n  generate_size_probe() {\r\n\r\n    var size_probe = {\r\n        type: \"html-keyboard-response\",\r\n        choices: [77, 90], // m = 77 (orange), z = 90 (blue), 81 = q (exit button for debugging)\r\n        stimulus: \"\",\r\n        data: { type: \"size_probe\" },\r\n        on_start: function(trial) {\r\n            trial.stimulus = `\r\n              <div style=\"text-align: center;\">\r\n                  <p style=\"font-size: 50px; line-height: 70px;\">\r\n                    Which color had a larger average size of dots?\r\n                  </p>\r\n              </div>\r\n              <svg width=\"100%\">\r\n                <circle cx=25% cy=50% r=\"30\" fill=\"blue\"/>\r\n                <text x=\"25%\" y=\"50%\" text-anchor=\"middle\" fill=\"white\" font-size=\"20\" dy=\".3em\">Z</text>\r\n                <circle cx=75% cy=50% r=\"30\" fill=\"orange\"/>\r\n                <text x=\"75%\" y=\"50%\" text-anchor=\"middle\" fill=\"white\" font-size=\"20\" dy=\".3em\">M</text>\r\n              </svg>\r\n              `;\r\n        }\r\n    };\r\n    return size_probe;\r\n  }\r\n\r\n\r\n  /**\r\n   * Generates confidence check for timeline to use\r\n   *\r\n   * @return trial {object}\r\n   */\r\n  generate_confidence_check() {\r\n\r\n    var slider_response = {\r\n      type: 'html-slider-response',\r\n      labels: [1,2,3,4,5],\r\n      min: 1,\r\n      max: 5,\r\n      start: 3,\r\n      stimulus: \"\",\r\n      prompt: \"\",\r\n      on_start: function(trial) {\r\n          trial.stimulus = `\r\n          <div style=\"text-align: center;\">\r\n              <p style=\"font-size: 30px; line-height: 70px;\">\r\n                How confident are you on your answers to the previous questions?\r\n              </p>\r\n          </div>\r\n          `;\r\n          trial.prompt = `\r\n          <div style=\"text-align: center;\">\r\n              <p style=\"font-size: 30px; line-height: 70px;\">\r\n              Select the number by sliding the bar\r\n              </p>\r\n          </div>\r\n          `\r\n        }\r\n    };\r\n\r\n    return slider_response;\r\n  }\r\n\r\n  trial_is_over() {\r\n    return this.trial_index == this.trials.length - 1;\r\n  }\r\n\r\n  go_next_trial() {\r\n    this.trial_index++;\r\n  }\r\n\r\n  // TODO 3 (data saving)\r\n  save_data(data) {\r\n    // var csv = 'target_correlation,distractor_correlation,target_mean_size,distractor_mean_size,target_color,distractor_color,cue,size_average_probe,averaging_task_ans,correlation_probe_ans,size_probe_ans,confidence_level\\n';\r\n    var ensemble_avg_exp = this\r\n    var raw_data = jsPsych.data.get()\r\n    var max_trial_index = raw_data.last(1).values()[0].trial_index\r\n    // var data = [];\r\n    var index = 0;\r\n    // for (let j = 0; j<=max_trial_index; j++){\r\n    //   //Data for a given trial of a sub condition\r\n    //   var trial_data = raw_data.filter({trial_index: j});\r\n    //   console.log(trial_data.last(1).values()[0])\r\n    //   if(trial_data.last(1).values()[0] && trial_data.last(1).values()[0].type == \"averaging_task\" && trial_data.last(1).values()[0].key_press == \"32\"){\r\n    //     // if this trial is the trial where the viewer pressed space when ask for the average dot size, \r\n    //     // then current trial has the averaging_task_ans, one trial after has the correlation_probe_ans, \r\n    //     var averaging_task_ans = raw_data.filter({trial_index: j}).last(1).values()[0].dots_radius\r\n    //     var correlation_probe_ans = raw_data.filter({trial_index: j+1}).last(1).values()[0].key_press\r\n    //     var size_probe_ans = raw_data.filter({trial_index: j+2}).last(1).values()[0].key_press\r\n    //     var confidence_level = raw_data.filter({trial_index: j+3}).last(1).values()[0].response\r\n\r\n    //     index++;\r\n    //     var row = []\r\n    //     var current_trial = ensemble_avg_exp.trials[index-1]\r\n    //     row.push(current_trial.base_correlation);\r\n    //     row.push(current_trial.dist_base);\r\n    //     row.push(current_trial.target_mean_size);\r\n    //     row.push(current_trial.distractor_mean_size);\r\n    //     row.push(current_trial.mix_by_target_array[0].point_color); //target color\r\n    //     row.push(current_trial.mix_by_distractor_array[0].point_color); //distractor color\r\n    //     row.push(current_trial.cue);\r\n    //     row.push(current_trial.size_average_probe);\r\n\r\n    //     row.push(averaging_task_ans);\r\n\r\n    //     //  z = 90 (blue), m = 77 (orange)\r\n    //     if(correlation_probe_ans == \"90\"){\r\n    //       row.push(\"BLUE\");\r\n    //     }else if(correlation_probe_ans == \"77\"){\r\n    //       row.push(\"ORANGE\");\r\n    //     }\r\n\r\n    //     //  z = 90 (blue), m = 77 (orange)\r\n    //     if(size_probe_ans == \"90\"){\r\n    //       row.push(\"BLUE\");\r\n    //     }else if(size_probe_ans == \"77\"){\r\n    //       row.push(\"ORANGE\");\r\n    //     }\r\n\r\n    //     row.push(confidence_level)\r\n\r\n    //     data.push(row);\r\n    //   }\r\n    // }\r\n\r\n    // // Append each row\r\n    // data.forEach(function(row){\r\n    //   csv += row.join(',');\r\n    //   csv += \"\\n\";\r\n    // });\r\n\r\n    // var hiddenElement = document.createElement('a');\r\n    // hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\r\n    // hiddenElement.target = '_blank';\r\n    // hiddenElement.download = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_ensemble_avg_trial_results.csv\";\r\n    // hiddenElement.click();\r\n\r\n    var data = \"\";\r\n    for (let j = 0; j<=max_trial_index; j++){\r\n      var trial_data = raw_data.filter({trial_index: j});\r\n      console.log(trial_data.last(1).values()[0])\r\n      if(trial_data.last(1).values()[0] && trial_data.last(1).values()[0].type == \"averaging_task\" && trial_data.last(1).values()[0].key_press == \"32\"){\r\n        // if this trial is the trial where the viewer pressed space when ask for the average dot size, \r\n        // then current trial has the averaging_task_ans, one trial after has the correlation_probe_ans, \r\n        var averaging_task_ans = raw_data.filter({trial_index: j}).last(1).values()[0].dots_radius\r\n        var correlation_probe_ans = raw_data.filter({trial_index: j+1}).last(1).values()[0].key_press\r\n        var size_probe_ans = raw_data.filter({trial_index: j+2}).last(1).values()[0].key_press\r\n        var confidence_level = raw_data.filter({trial_index: j+3}).last(1).values()[0].response\r\n\r\n        \r\n        index++;\r\n\r\n        var current_trial = ensemble_avg_exp.trials[index-1]\r\n        data += `[{\"target_correlation\": `\r\n        data += current_trial.base_correlation;\r\n\r\n        data += `, \"distractor_correlation\": `\r\n        data += current_trial.dist_base;\r\n\r\n        data += `, \"target_mean_size\": `\r\n        data += current_trial.target_mean_size;\r\n\r\n        data += `, \"distractor_mean_size\": `\r\n        data += current_trial.distractor_mean_size;\r\n\r\n        data += `, \"target_color\": \"`\r\n        data += current_trial.mix_by_target_array[0].point_color;\r\n        data += `\"`\r\n\r\n        data += `, \"distractor_color\": \"`\r\n        data += current_trial.mix_by_distractor_array[0].point_color;\r\n        data += `\"`\r\n\r\n        data += `, \"cue\": \"`\r\n        data += current_trial.cue;\r\n        data += `\"`\r\n\r\n        data += `, \"size_average_probe\": \"`\r\n        data += current_trial.size_average_probe;\r\n        data += `\"`\r\n\r\n        data += `, \"averaging_task_ans\": `\r\n        data += averaging_task_ans;\r\n\r\n        //  z = 90 (blue), m = 77 (orange)\r\n        if(correlation_probe_ans == `90`){\r\n          data += `, \"correlation_probe_ans\": \"BLUE\"`\r\n        }else if(correlation_probe_ans == `77`){\r\n          data += `, \"correlation_probe_ans\": \"ORANGE\"`\r\n        }\r\n\r\n        //  z = 90 (blue), m = 77 (orange)\r\n        if(size_probe_ans == `90`){\r\n          data += `, \"size_probe_ans\": \"BLUE\"`\r\n        }else if(size_probe_ans == `77`){\r\n          data += `, \"size_probe_ans\": \"ORANGE\"`\r\n        }\r\n\r\n        data += `, \"confidence_level\": `\r\n        data += confidence_level;\r\n\r\n        data += `}]`;\r\n      }\r\n    }\r\n\r\n    $.post(\"/api/experiment_data\",\r\n            // {json: raw_data.json(), experiment: \"JND\", condition: params[\"condition\"], prolific_pid: params[\"prolific_pid\"], study_id: params[\"study_id\"], session_id: params[\"session_id\"]},\r\n            {json: data, experiment: \"ENSEMBLE_AVERAGE\", condition: params[\"condition\"], prolific_pid: params[\"prolific_pid\"], study_id: params[\"study_id\"], session_id: params[\"session_id\"]},\r\n            function(data, status){\r\n              console.log(\"Data: \" + data + \"\\nStatus: \" + status);\r\n            }\r\n          );\r\n\r\n  }\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/ensemble_average/ensemble_average.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 402,
    "kind": "class",
    "name": "Ensemble_Average",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average.js",
    "importStyle": "Ensemble_Average",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 403,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#constructor",
    "access": "public",
    "description": "Initializes a Ensemble Average experiment object.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "Parameters",
        "description": "passed from routing."
      }
    ]
  },
  {
    "__docId__": 404,
    "kind": "member",
    "name": "PIXELS_PER_CM",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#PIXELS_PER_CM",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "condition_group",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#condition_group",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "coordinates",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "distractor_coordinates",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#distractor_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "member",
    "name": "auto_mode",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#auto_mode",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "trials",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#trials",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "trial_index",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#trial_index",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#generate_trial",
    "access": "public",
    "description": "Generates a graph of Ensemble Average for timeline to use",
    "lineNumber": 69,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    },
    "params": []
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "generate_cue",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#generate_cue",
    "access": "public",
    "description": "Generates a cue of Ensemble Average for timeline to use",
    "lineNumber": 130,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    },
    "params": []
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "generate_averaging_task",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#generate_averaging_task",
    "access": "public",
    "description": "Generates a first probe of Ensemble Average for timeline to use",
    "lineNumber": 235,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    },
    "params": []
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "generate_correlation_probe",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#generate_correlation_probe",
    "access": "public",
    "description": "Generates a second probe of Ensemble Average for timeline to use",
    "lineNumber": 362,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    },
    "params": []
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "generate_size_probe",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#generate_size_probe",
    "access": "public",
    "description": null,
    "lineNumber": 387,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "generate_confidence_check",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#generate_confidence_check",
    "access": "public",
    "description": "Generates confidence check for timeline to use",
    "lineNumber": 419,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    },
    "params": []
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "trial_is_over",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#trial_is_over",
    "access": "public",
    "description": null,
    "lineNumber": 450,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "go_next_trial",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#go_next_trial",
    "access": "public",
    "description": null,
    "lineNumber": 454,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "save_data",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average#save_data",
    "access": "public",
    "description": null,
    "lineNumber": 459,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 427,
    "kind": "file",
    "name": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "content": "import Ensemble_Average from '/scripts/experiments/ensemble_average/ensemble_average.js';\r\nimport { get_instructions } from '/scripts/experiment-properties/instructions/instructions_controller.js';\r\nimport { resolution_scaling } from '/scripts/experiment-timeline/resolution_scaling/resolution_scaling.js';\r\nimport * as screening from '/scripts/experiment-timeline/screening/screening.js';\r\n\r\nexport const ensemble_avg_exp = new Ensemble_Average(params);\r\n\r\nlet timeline = [];\r\n\r\n// =========================================================\r\n// RESOLUTION SCALING\r\ntimeline.push(resolution_scaling);\r\n\r\n// =========================================================\r\n// SCREENING\r\ntimeline.push(\r\n\tscreening.screeningQuestions,\r\n\tscreening.screeningInstructions,\r\n\tscreening.screeningCorrelationSort,\r\n\tscreening.screeningCorrelationSelect,\r\n\tscreening.instructionsRegression,\r\n\tscreening.screeningRegressionSelect\r\n);\r\n\r\n// =========================================================\r\n// INSTRUCTION\r\nconst instructions = {\r\n\ttype: 'html-keyboard-response',\r\n\tstimulus: function() {\r\n\t\treturn get_instructions(ensemble_avg_exp);\r\n\t}\r\n};\r\n\r\ntimeline.push(instructions);\r\n\r\n// =========================================================\r\n// START LOOP\r\n\r\nconst cue = ensemble_avg_exp.generate_cue();\r\n\r\nconst fixation_point = {\r\n\ttype: 'html-keyboard-response',\r\n\tstimulus: '<div><h1>+</h1></div>',\r\n\tchoices: [ 't' ],\r\n\ttrial_duration: 1000,\r\n\tdata: { type: 'instruction' }\r\n};\r\n\r\nconst trial = ensemble_avg_exp.generate_trial();\r\n\r\nconst averaging_task = {\r\n\ttimeline: [ ensemble_avg_exp.generate_averaging_task() ],\r\n\tloop_function: function(data) {\r\n\t\tif (32 == data.values()[0].key_press) {\r\n\t\t\treturn false;\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst correlation_probe = ensemble_avg_exp.generate_correlation_probe();\r\nconst size_probe = ensemble_avg_exp.generate_size_probe();\r\nconst confidence_check = ensemble_avg_exp.generate_confidence_check();\r\n\r\nconst experiment = {\r\n\ttimeline: [ cue, fixation_point, trial, averaging_task, correlation_probe, size_probe, confidence_check ],\r\n\tloop_function: function(data) {\r\n\t\t// For debugging, if you want to exit out of experiment, press q:\r\n\t\tif (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!ensemble_avg_exp.trial_is_over()) {\r\n\t\t\tensemble_avg_exp.go_next_trial();\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n};\r\n\r\ntimeline.push(experiment);\r\n\r\n// END LOOP\r\n\r\n// =========================================================\r\n// DATA DOWNLOADING\r\n\r\nlet passed = false;\r\n\r\nvar experiment_end = {\r\n\ttype: 'html-keyboard-response',\r\n\tstimulus:\r\n\t\t'<div align = \"center\">' +\r\n\t\t'<p><font size = 10>You have completed the experiment!<p></font>' +\r\n\t\t'<br>' +\r\n\t\t'<p><font size = 10>Press any key to be redirected to Prolific<p></font>' +\r\n\t\t'</div>',\r\n\ton_start: function() {\r\n\t\tensemble_avg_exp.save_data();\r\n\r\n\t\t// Reset background color to feedback\r\n\t\tdocument.body.style.backgroundColor = 'WHITE';\r\n\t},\r\n\ton_finish: function() {\r\n\t\t// jsPsych.data.displayData();\r\n    passed = true;\r\n    // Change the URL accordingly to the experiment\r\n\t\twindow.location.replace('https://app.prolific.co/submissions/complete?cc=6043DD08');\r\n\t}\r\n};\r\ntimeline.push(experiment_end);\r\n\r\n// =========================================================\r\n// START JSPSYCH\r\n\r\njsPsych.init({\r\n\ttimeline: timeline,\r\n\ton_finish() {\r\n\t\tif (!passed) {\r\n\t\t\t$.post(\r\n\t\t\t\t'/api/failedUser',\r\n\t\t\t\t// {json: raw_data.json(), experiment: \"JND\", condition: params[\"condition\"], prolific_pid: params[\"prolific_pid\"], study_id: params[\"study_id\"], session_id: params[\"session_id\"]},\r\n\t\t\t\t{\r\n\t\t\t\t\texperiment: 'ENSEMBLE_AVERAGE',\r\n\t\t\t\t\tcondition: params['condition'],\r\n\t\t\t\t\tprolific_pid: params['prolific_pid'],\r\n\t\t\t\t\tstudy_id: params['study_id'],\r\n\t\t\t\t\tsession_id: params['session_id']\r\n\t\t\t\t},\r\n\t\t\t\tfunction(data, status) {\r\n\t\t\t\t\tconsole.log('Data: ' + data + '\\nStatus: ' + status);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n});\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 428,
    "kind": "variable",
    "name": "ensemble_avg_exp",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~ensemble_avg_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": "{ensemble_avg_exp}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/ensemble_average/ensemble_average.js~Ensemble_Average"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 430,
    "kind": "variable",
    "name": "instructions",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 431,
    "kind": "variable",
    "name": "cue",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~cue",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 432,
    "kind": "variable",
    "name": "fixation_point",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~fixation_point",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": string, \"choices\": *, \"trial_duration\": number, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 433,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 434,
    "kind": "variable",
    "name": "averaging_task",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~averaging_task",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 435,
    "kind": "variable",
    "name": "correlation_probe",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~correlation_probe",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 436,
    "kind": "variable",
    "name": "size_probe",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~size_probe",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 437,
    "kind": "variable",
    "name": "confidence_check",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~confidence_check",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 438,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 439,
    "kind": "variable",
    "name": "passed",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~passed",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 440,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "static": true,
    "longname": "scripts/experiments/ensemble_average/ensemble_average_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/ensemble_average/ensemble_average_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 441,
    "kind": "file",
    "name": "scripts/experiments/estimation/estimation.js",
    "content": "import {balance_subconditions} from \"/scripts/experiment-properties/balancing/balancing_controller.js\";\r\nimport {get_data} from \"/scripts/experiment-properties/data/data_controller.js\";\r\nimport {randomize_position,\r\n        randomize_radius_position,\r\n        force_greater_right_position} from \"/scripts/helpers/experiment_helpers.js\";\r\n\r\nexport default class Estimation {\r\n    /**\r\n     * Initializes a Estimation experiment object.\r\n     *\r\n     * @param  params          {object}    Parameters passed in from routing\r\n     */\r\n    constructor(params) {\r\n\r\n        let trial_structure = params[\"trial_structure\"];\r\n        let condition_name = params[\"condition\"];\r\n        let graph_type = params[\"graph_type\"];\r\n        let balancing_type = params[\"balancing\"];\r\n\r\n        // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\r\n        if (!EXPERIMENTS[\"estimation\"][\"trial_structure\"].includes(trial_structure)) {\r\n          throw Error(trial_structure + \" is not supported.\");}\r\n        else {\r\n          this.trial_structure = trial_structure;\r\n        }\r\n\r\n        if (!EXPERIMENTS[\"estimation\"][\"graph_type\"].includes(graph_type)){\r\n          throw Error(graph_type + \" is not supported.\")} \r\n        else { \r\n          this.graph_type = graph_type;\r\n        };  \r\n\r\n        if (!EXPERIMENTS[\"estimation\"][\"balancing_type\"].includes(balancing_type)) {\r\n          throw Error(balancing_type + \" is not supported.\") }\r\n        else {\r\n          this.balancing_type = balancing_type;\r\n        }  \r\n\r\n        this.condition_name = condition_name;\r\n        this.subject_id = params[\"subject_id\"];\r\n        this.subject_initials = params[\"subject_initials\"];\r\n\r\n        // ========================================\r\n        // EXPERIMENT CONSTANTS\r\n        this.X_DISTANCE_BETWEEN_SHAPES = 12;\r\n        this.Y_DIVIATION_FROM_X_AXIS = 3;\r\n        this.MAX_STEP_INTERVAL = 10;\r\n        this.ROUNDS_PER_COND = 4;\r\n        this.MAX_Y_POS_JITTER = 0.1; // y axis can be shifted away from default (window / 2) by at most 0.1 * ImageHeight;\r\n        this.MAX_STEP_SIZE = 0.05; // how much can the size of shapes can be changed at one keypress\r\n\r\n        // PIXELS_PER_CM is defined in estimation_experiment.html\r\n        if (PIXELS_PER_CM) {\r\n            this.PIXEL_TO_CM = PIXELS_PER_CM;\r\n        } else {\r\n            // 1cm is 37.7952755906 pixels\r\n            this.PIXEL_TO_CM = 37.7952755906;\r\n            throw Error(\"PIXELS_PER_CM is not defined\");\r\n        }\r\n\r\n        // Margin from top and bottom of screen is set to at least 5cm\r\n        this.MARGIN = 5;\r\n        // ========================================\r\n        // EXPERIMENT VARIABLES\r\n        this.input_count_array= [0, 0, 0, 0];\r\n        this.curr_round_num = 0;\r\n        this.curr_condition_index = 0; // pointing to positions in this.curr_conditions_constants\r\n        this.is_practice = true;\r\n        // input_count_array has length equals to trials_per_round, each index representing num inputs per round\r\n        // for a given sub condition\r\n        this.curr_conditions_constants; // array of sub-conditions currently running\r\n        this.raw_sub_conds; // subconditions in estimation_data.js\r\n\r\n        this.curr_condition_index; // pointing to positions in this.curr_conditions_constants\r\n        this.round_end = true;\r\n        this.interf_shape_variables = {};\r\n\r\n        // ========================================\r\n        // PRACTICE EXPERIMENT VARIABLES\r\n\r\n        this.adjusted_midpoint_matrix = {};\r\n        this.practice_trial_data = [];\r\n        this.practice_end = false;\r\n\r\n        // ========================================\r\n        // TEST EXPERIMENT VARIABLES\r\n        this.sub_condition_order;\r\n\r\n        // ========================================\r\n        // CURRENT TRIAL DATA\r\n        this.curr_trial_data = {};\r\n\r\n        this.results = []; // trials are pushed to results at the end of trial;\r\n        // ========================================\r\n        // PREPARE EXPERIMENT\r\n\r\n        // Extract raw constants\r\n        // this.raw_sub_conds = generate_estimation_experiment_data(params.condition);\r\n        this.raw_sub_conds = get_data(this);\r\n        // console.log(\"raw sub conds\");\r\n        // Prepare experiment + practice data\r\n        this.practice_conditions_constants = [];\r\n        this.curr_conditions_constants = []; // array of sub-conditions currently running\r\n\r\n        this.experiment_conditions_constants = [];\r\n        this.prepare_experiment();\r\n        this.prepare_practice();\r\n    }\r\n\r\n    /**\r\n     * Orders the input data according to balancing type and\r\n     * initializes the Estimation object's variables.\r\n     *\r\n     */\r\n    prepare_experiment() {\r\n        let dataset = this.raw_sub_conds;\r\n        \r\n        this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length);\r\n\r\n        let ordered_dataset = [];\r\n        // Order the data set according to the randomly ordered array\r\n        for (let i = 0; i < this.sub_condition_order.length; i++) {\r\n            ordered_dataset[i] = dataset[this.sub_condition_order[i]];\r\n        }\r\n        // Set experiment trials\r\n        this.experiment_conditions_constants = ordered_dataset;\r\n    }\r\n\r\n    /**\r\n     * Creates the practice dataset by taking the first FOUR subconditions.\r\n     *\r\n     */\r\n    prepare_practice() {\r\n        let dataset = this.raw_sub_conds;\r\n        let practice_dataset = [];\r\n\r\n        for (let i = 0; i < 1; i++){\r\n            practice_dataset[i] = dataset[i];\r\n            this.practice_trial_data[i] = [];\r\n        }\r\n        // set variables to practice\r\n        this.practice_conditions_constants = practice_dataset;\r\n        this.curr_conditions_constants = practice_dataset;\r\n        this.curr_condition_index = 0;\r\n        this.current_practice_condition_index = 0;\r\n        this.input_count_array = new Array(this.curr_conditions_constants[0].trials_per_round).fill(0);\r\n        this.is_practice = true;\r\n    }\r\n\r\n    /**\r\n     * Resets all relevant variables to use that of the experiment.\r\n     * (input_count_array, curr_conditions_constants, and curr_condition_index\r\n     * are shared variables between the practice and test trials).\r\n     *\r\n     * This function is called once all the practice trials have run.\r\n     */\r\n    set_variables_to_experiment() {\r\n        console.log(\"set_variables_to_experiment\");\r\n        this.curr_conditions_constants = this.experiment_conditions_constants;\r\n        this.curr_condition_index = 0;\r\n        this.curr_round_num = 0;\r\n        this.input_count_array = new Array(this.curr_conditions_constants[0].trials_per_round).fill(0);\r\n        this.is_practice = false;\r\n    }\r\n\r\n    /**\r\n     * Generates a Estimation object for use in the JsPsych timeline.\r\n     *\r\n     * @param  block_type {string}     \"test\" or \"practice\"\r\n     * @return trial {object}\r\n     */\r\n    generate_trial(block_type) {\r\n\r\n        if ((block_type !== \"test\") && (block_type !== \"practice\")) {\r\n            throw Error(block_type + \" is not supported.\")\r\n        }\r\n       // Initialize a variable for this so it is usable inside on_start\r\n        var estimation_exp = this;\r\n        var address = location.protocol + \"//\" + location.hostname + \":\" + location.port + \"/estimation_trial\";\r\n\r\n        let group = {};\r\n        let is_ref_left = false;\r\n        let ready = {\r\n            type: 'html-keyboard-response',\r\n            choices: [32, 'q'],\r\n            stimulus: \"\",\r\n            on_start: function(trial) {\r\n                is_ref_left = Math.random() > 0.5;\r\n                trial.stimulus = \"\";\r\n                trial.stimulus += is_ref_left? \"<div align = 'center'><font size = 20>\" +\r\n                    \"<p>The modifiable shape will be on the <b>right.</b><p>\" +\r\n                    \"<br> <br> <p><b>Press space to continue.</b></p></font></div>\" :\r\n                    \"<div align = 'center'><font size = 20>\" +\r\n                    \"<p>The modifiable shape will be on the <b>left.</b><p>\" +\r\n                    \"<br> <br> <p><b>Press space to continue.</b></p></font></div>\" ;\r\n            },\r\n            data: {type: 'instruction'}\r\n        };\r\n        let trial = {\r\n            type:'external-html-keyboard-response',\r\n            url: address,\r\n            choices: [32, 'q'],  // 32 = spacebar, 81 = q (exit button for debugging)\r\n            execute_script: true,\r\n            response_ends_trial: true,\r\n            data: {\r\n                round_num: 0,\r\n                estimated_size: -1,\r\n                adjustments: [], // array of numbers representing the adjustments made to the shape\r\n                sub_condition_index: 0,\r\n                block_type: block_type\r\n            },\r\n            on_start: function(trial) {\r\n                console.log(\"====================on_start=======================\");\r\n                // Set the constants to be used:\r\n                let current_constants = estimation_exp.curr_conditions_constants[estimation_exp.curr_condition_index];\r\n                console.log(current_constants);\r\n                trial.data.sub_condition_index = estimation_exp.curr_condition_index;\r\n                trial.data.round_num = estimation_exp.curr_round_num;\r\n                trial.data = Object.assign({}, trial.data);\r\n                trial.data = Object.assign(trial.data, current_constants);\r\n                trial.data.is_ref_left = is_ref_left; // is the reference shape on the left\r\n\r\n                // Handing saving for data that is an assoc array\r\n                if (current_constants.mod_side_shapes && current_constants.ref_side_shapes) {\r\n\r\n                    trial.data.mod_side_shape_mod = current_constants.mod_side_shapes.mod;\r\n                    trial.data.mod_side_shape_ref = current_constants.mod_side_shapes.ref;\r\n\r\n                    trial.data.ref_side_shape_main = current_constants.ref_side_shapes.main;\r\n                    trial.data.ref_side_shape_sub = current_constants.ref_side_shapes.sub;\r\n\r\n                    delete trial.data.mod_side_shapes;\r\n                    delete trial.data.ref_side_shapes;\r\n                }\r\n\r\n                if (current_constants.flicker_ref_durations) {\r\n                    trial.data.flicker_ref_duration_on = current_constants.flicker_ref_durations.on;\r\n                    trial.data.flicker_ref_duration_off = current_constants.flicker_ref_durations.off;\r\n\r\n                    delete trial.data.flicker_ref_durations;\r\n                }\r\n\r\n                estimation_exp.curr_trial_data = trial.data;\r\n\r\n                // Save trial data for practice so can calculate exclusion criteria\r\n                if (trial.data.run_type === \"practice\") {\r\n                    estimation_exp.practice_trial_data[estimation_exp.curr_condition_index].push(trial.data);\r\n                }\r\n                // console.log(JSON.stringify(trial));\r\n            },\r\n            on_finish: function(data) { // NOTE: on_finish takes in data var\r\n                // save data here\r\n                console.log(\"====================on_finish=======================\");\r\n\r\n                // Save estimated ratio at end of round\r\n                console.log(\"REF SHAPE AREA: \" + data.ref_shape_area);\r\n                console.log(\"ESTIMATED AREA: \" + data.estimated_area);\r\n\r\n                // Assumption is that the ref ratio does small val/big val --> so need\r\n                // to do same when computing estimated ratio\r\n                if (data.ref_shape_area >= data.estimated_area) {\r\n                  data.estimated_ratio = data.estimated_area / data.ref_shape_area;\r\n                } else {\r\n                  data.estimated_ratio = data.ref_shape_area / data.estimated_area;\r\n                }\r\n\r\n                let curr_trial_data = JSON.parse(JSON.stringify((data)));\r\n                estimation_exp.results.push(curr_trial_data);\r\n                estimation_exp.update_curr_round_number(data);\r\n                estimation_exp.update_curr_cond_idx(data);\r\n                estimation_exp.update_input_array(data);\r\n            }\r\n        };\r\n        if (this.condition_name === \"absolute_area_ratio_bisection_variant_A\" ||\r\n            this.condition_name === \"absolute_area_ratio_bisection_variant_B\"){\r\n          group.timeline = [trial];\r\n        } else {\r\n          group.timeline = [ready, trial];\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    /**\r\n     * Set the current trial's number of inputs in the input_count_array\r\n     * @param data {object} the trial.data object from jsPsych\r\n     * */\r\n    update_input_array(data) {\r\n        if (data.round_num < 0 || data.round_num > 3) {\r\n            throw Error(\"trail number : \" + data.round_num + \" is out of range\");\r\n        }\r\n        this.input_count_array[data.round_num] = data.adjustments.length;\r\n    }\r\n\r\n    /**\r\n     * Update the current round number\r\n     * @param trial_data {object} the trial.data object from jsPsych\r\n     * */\r\n    update_curr_round_number(trial_data) {\r\n        if (trial_data.round_num === this.ROUNDS_PER_COND - 1) {\r\n            this.curr_round_num  = 0;\r\n        } else {\r\n            this.curr_round_num++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the index of the condition that is being referred to\r\n     * @param trial_data {object} the trail.data object from jsPsych\r\n     * */\r\n    update_curr_cond_idx(trial_data) {\r\n        if (trial_data.round_num === this.ROUNDS_PER_COND - 1) {\r\n            this.curr_condition_index++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends the adjustment to the curr_trial_data.adjustments.\r\n     *\r\n     * @param {double}   adjustment\r\n     */\r\n    save_adjustment(adjustment) {\r\n      this.curr_trial_data.adjustments.push(adjustment);\r\n    }\r\n\r\n    /**\r\n     * Saves the estimated size to the curr_trial_data.\r\n     *\r\n     * @param {double}   estimated_size\r\n     *        {string}   unit of the estimated_size\r\n     */\r\n    save_estimated_size(estimated_size, unit) {\r\n      this.curr_trial_data.estimated_size = estimated_size;\r\n      this.curr_trial_data.estimated_size_unit = unit;\r\n      // console.log(\"ESTIMATED SIZE: \" + estimated_size);\r\n    }\r\n\r\n    /**\r\n     * Saves the estimated area to the curr_trial_data.\r\n     *\r\n     * @param {double}   area\r\n     *        {string}   unit of the estimated_area\r\n     */\r\n    save_estimated_area(area) {\r\n      this.curr_trial_data.estimated_area = area;\r\n      // console.log(\"ESTIMATED AREA: \" + area);\r\n    }\r\n\r\n    /**\r\n     * Saves and computes the ref shape area to the curr_trial_data.\r\n     *\r\n     * - For normal estimation conditions (AKA one shape on mod and one shape on ref side),\r\n     *   will use the single shape on the ref side\r\n     * - For multi interference conditions, is using the main shape on the mod side\r\n     * - For interference conditions, is using the single shape on ref side\r\n     * - For bisection conditions, it is taking the midpoint between the left and right reference shape areas\r\n     *\r\n     * @param {object}   attributes\r\n     */\r\n    save_reference_shape_area(attributes) {\r\n      let name_array = this.condition_name.split(\"_\");\r\n      let ref_shape_attributes, area;\r\n\r\n      if (name_array.includes(\"interference\")) {\r\n        if (name_array.includes(\"multi\")){\r\n\r\n          // Taking main shape on mod side \r\n          ref_shape_attributes = this.curr_trial_data.is_ref_left ? attributes.right_shape : attributes.left_shape;\r\n          area = this.compute_shape_area(ref_shape_attributes.shape, ref_shape_attributes.size);\r\n\r\n        } else {\r\n          ref_shape_attributes = this.curr_trial_data.is_ref_left ? attributes.left_shape : attributes.right_shape;\r\n          area = this.compute_shape_area(ref_shape_attributes.shape, ref_shape_attributes.size);\r\n        }\r\n      }\r\n      else if (name_array.includes(\"bisection\")) {\r\n\r\n        let left_area = this.compute_shape_area(attributes.left_shape.shape, attributes.left_shape.size);\r\n        let right_area = this.compute_shape_area(attributes.right_shape.shape, attributes.right_shape.size);\r\n        area = (left_area + right_area) / 2;\r\n\r\n      } else {\r\n\r\n        ref_shape_attributes = this.curr_trial_data.is_ref_left ? attributes.left_shape : attributes.right_shape;\r\n        area = this.compute_shape_area(ref_shape_attributes.shape, ref_shape_attributes.size);\r\n\r\n      }\r\n\r\n      this.curr_trial_data.ref_shape_area = area;\r\n    }\r\n\r\n    /**\r\n     * Computes the area for a given shape and the size. \r\n     *\r\n     * @param  {string}   shape\r\n     *         {string}   size   (in pixels)\r\n     *\r\n     * @return {double}  area   (in CM^2)\r\n     */\r\n    compute_shape_area(shape, size) {\r\n      let area;\r\n\r\n      switch (shape) {\r\n        case \"square\": {\r\n          let length = size / this.PIXEL_TO_CM;\r\n          area = length * length;\r\n        } break;\r\n\r\n        case \"triangle\" : { //Assuming equilateral for now\r\n          let length = size / this.PIXEL_TO_CM;\r\n          area = (Math.sqrt(3)/4)*(length*length);\r\n        } break; \r\n\r\n        case \"circle\" : {\r\n          let radius = (size / 2) / this.PIXEL_TO_CM;  //Size = diameter\r\n          area = Math.PI*(radius*radius);\r\n        } break;\r\n\r\n        case \"line\" : {\r\n          let length = size / this.PIXEL_TO_CM;\r\n          let width = 1 / this.PIXEL_TO_CM; //Assuming stroke-width is 1px \r\n          area = length * width;\r\n        } break;\r\n\r\n        case \"rectangle\" : {\r\n          let short_side = size / this.PIXEL_TO_CM;\r\n          let long_side = short_side * this.curr_trial_data.width_height_ratio;\r\n          area = short_side * long_side;\r\n        } break;\r\n\r\n        default:\r\n          throw Error(\"Handling for computing area for shape \" + shape + \" has not been implemented.\");\r\n          break;\r\n      }\r\n      return area;\r\n    }\r\n\r\n    /**\r\n     * Computes the area for a fan.\r\n     *\r\n     * @param  {double}   angle  (in degrees)\r\n     *         {double}   radius (in pixels)\r\n     *\r\n     * @return {double}  area   (in CM^2)\r\n     */\r\n    compute_fan_area(angle, radius) {\r\n      let radius_in_cm = radius / this.PIXEL_TO_CM;\r\n      let area = Math.PI*(radius_in_cm*radius_in_cm)*(angle/360); // A = pi*r^2*(C/360)\r\n\r\n      return area;\r\n    }\r\n\r\n    /**\r\n     * Computes attributes for all estimation plots.\r\n     *\r\n     * @param {object}   experiment\r\n     */\r\n    compute_plot_attributes() {\r\n\r\n      let sub_cond = this.curr_conditions_constants[this.curr_condition_index];\r\n      let round_num = this.curr_round_num;\r\n\r\n      // ----------------------------------------------------------------------------\r\n      // COMPUTATION FOR ATTRIBUTES\r\n\r\n      // Disable jitter for multi interference conditions\r\n      let is_jitter = this.condition_name.split(\"_\").includes(\"multi\") ? false : true;\r\n\r\n      let width = window.innerWidth;\r\n      let height = window.innerHeight;\r\n\r\n      let mid_width = width / 2;\r\n      let mid_height = height / 2;\r\n\r\n      let left_x = mid_width - this.X_DISTANCE_BETWEEN_SHAPES * this.PIXEL_TO_CM / 2;\r\n      let right_x = mid_width + this.X_DISTANCE_BETWEEN_SHAPES * this.PIXEL_TO_CM / 2;\r\n\r\n      let ref_size = sub_cond.ref_size * this.PIXEL_TO_CM ;\r\n      let ref_y = this.calculate_y_position(ref_size, is_jitter);\r\n\r\n      // The size of the modifiable shape start from mod_min_size for trial 0 and 2, mod_max_size for 1 and 3;\r\n      let mod_size = (round_num % 2 === 1)?\r\n          sub_cond.mod_max_size * this.PIXEL_TO_CM  : sub_cond.mod_min_size * this.PIXEL_TO_CM;\r\n      let mod_y = this.calculate_y_position(mod_size, is_jitter);\r\n\r\n      let is_ref_left = this.curr_trial_data.is_ref_left;\r\n\r\n      let flicker_options;\r\n      if (sub_cond.flicker_ref_durations) {\r\n        flicker_options = {\"flicker\": {on: sub_cond.flicker_ref_durations.on, off: sub_cond.flicker_ref_durations.off}};\r\n      }\r\n\r\n      this.curr_trial_data.is_ref_smaller = (round_num % 2 === 1);\r\n\r\n      // ----------------------------------------------------------------------------\r\n      // ATTRIBUTE SET-UP\r\n\r\n      let attributes = {\r\n        chart: {\r\n          width:             width,\r\n          height:            height,\r\n          target_area_ratio: sub_cond.target_area_ratio ? sub_cond.target_area_ratio : null\r\n        },\r\n        core: {\r\n          ref_size:   ref_size,\r\n          ref_y:      ref_y,\r\n          mod_size:   mod_size,\r\n          mod_y:      mod_y,\r\n          left_size:  is_ref_left ? ref_size : mod_size,\r\n          right_size: is_ref_left ? mod_size : ref_size, \r\n        },\r\n        left_shape: {\r\n          shape:      is_ref_left ? sub_cond.ref_shape   : sub_cond.mod_shape,\r\n          size:       is_ref_left ? ref_size             : mod_size,\r\n          x:          left_x,\r\n          y:          is_ref_left ? ref_y                : mod_y,\r\n          outline:    is_ref_left ? sub_cond.ref_outline : sub_cond.mod_outline,\r\n          fill:       is_ref_left ? sub_cond.ref_fill    : sub_cond.mod_fill,\r\n          is_ref:     is_ref_left ? true                 : false,\r\n          options:    is_ref_left ? flicker_options      : null\r\n        },\r\n        right_shape: {\r\n          shape:      is_ref_left ? sub_cond.mod_shape   : sub_cond.ref_shape,\r\n          size:       is_ref_left ? mod_size             : ref_size,\r\n          x:          right_x,\r\n          y:          is_ref_left ? mod_y                : ref_y,\r\n          outline:    is_ref_left ? sub_cond.mod_outline : sub_cond.ref_outline,\r\n          fill:       is_ref_left ? sub_cond.mod_fill    : sub_cond.ref_fill,\r\n          is_ref:     is_ref_left ? false                : true,\r\n          options:    is_ref_left ? null                 : flicker_options\r\n        }\r\n      }\r\n\r\n      // ----------------------------------------------------------------------------\r\n      // ADD'L ATTRIBUTE PREP FOR INTERFERENCE CONDITIONS\r\n\r\n      let name_array = this.condition_name.split(\"_\");\r\n\r\n      if (name_array.includes(\"interference\")) {\r\n        \r\n        if (name_array.includes(\"multi\")) {\r\n          attributes = this.compute_estimation_multi_interference_attributes(sub_cond, attributes);\r\n        }\r\n        else {\r\n          attributes = this.compute_estimation_interference_attributes(sub_cond, attributes);\r\n        }\r\n\r\n      } \r\n      else if (name_array.includes(\"bisection\")) {\r\n        attributes = this.compute_bisection_attributes(sub_cond, attributes);\r\n      }\r\n\r\n      this.save_reference_shape_area(attributes);\r\n      return attributes;\r\n    }\r\n\r\n    /**\r\n     * Computes attributes for bisection conditions (AKA has \"bisection\" in condition name).\r\n     *\r\n     * @param {object}   sub_cond\r\n     *        {object}   attributes\r\n     */\r\n    compute_bisection_attributes(sub_cond, attributes) {\r\n\r\n      let x_adjustment = this.X_DISTANCE_BETWEEN_SHAPES * this.PIXEL_TO_CM / 4;\r\n      \r\n      let mid_width = window.innerWidth / 2;\r\n      let mid_height = window.innerHeight / 2;\r\n\r\n      // Alternate left/right of the sizes depending on trial number\r\n      let left_size, right_size;\r\n      if (this.curr_round_num % 2 === 1) {\r\n        left_size = sub_cond.ref_size[1];\r\n        right_size = sub_cond.ref_size[0];\r\n      } else {\r\n        left_size = sub_cond.ref_size[0];\r\n        right_size = sub_cond.ref_size[1];\r\n      }\r\n\r\n      let flicker_options;\r\n      if (sub_cond.flicker_ref_durations) {\r\n        flicker_options = {\"flicker\": {on: sub_cond.flicker_ref_durations.on, off: sub_cond.flicker_ref_durations.off}};\r\n      }\r\n\r\n      attributes.left_shape = {\r\n          shape:      sub_cond.ref_shape[0],\r\n          size:       left_size * this.PIXEL_TO_CM,\r\n          x:          attributes.left_shape.x -= x_adjustment,\r\n          y:          this.calculate_y_position(sub_cond.ref_size[0] * this.PIXEL_TO_CM, false),\r\n          outline:    sub_cond.ref_outline,\r\n          fill:       sub_cond.ref_fill,\r\n          is_ref:     true,\r\n          options:    flicker_options\r\n      };\r\n\r\n      attributes.right_shape = {\r\n          shape:      sub_cond.ref_shape[1],\r\n          size:       right_size * this.PIXEL_TO_CM,\r\n          x:          attributes.right_shape.x += x_adjustment,\r\n          y:          this.calculate_y_position(sub_cond.ref_size[1] * this.PIXEL_TO_CM, false),\r\n          outline:    sub_cond.ref_outline,\r\n          fill:       sub_cond.ref_fill,\r\n          is_ref:     true,\r\n          options:    flicker_options\r\n      };\r\n\r\n      attributes.middle_shape = {\r\n          shape:      sub_cond.mod_shape,\r\n          size:       sub_cond.mod_max_size * this.PIXEL_TO_CM, //doesn't matter if use max or min, they are set to be same\r\n          x:          mid_width,\r\n          y:          this.calculate_y_position(sub_cond.mod_max_size * this.PIXEL_TO_CM, false),\r\n          outline:    sub_cond.mod_outline,\r\n          fill:       sub_cond.mod_fill,\r\n          is_ref:     false,\r\n          options:    null\r\n      }\r\n\r\n      return attributes;\r\n    }\r\n\r\n    /**\r\n     * Computes attributes for single-interference conditions (AKA no \"multi\" in condition name).\r\n     *\r\n     * @param {object}   sub_cond\r\n     *        {object}   attributes\r\n     */\r\n    compute_estimation_interference_attributes(sub_cond, attributes) {\r\n\r\n      // Only prep attributes on sub_cond with interf variables\r\n      if (sub_cond.interf_shape && sub_cond.interf_fill && sub_cond.interf_outline && sub_cond.interf_ratio) {\r\n\r\n        let is_ref_left = this.curr_trial_data.is_ref_left;\r\n\r\n        let interf_radius = attributes.core.mod_size * sub_cond.interf_ratio;\r\n        let interf_x_pos = is_ref_left ? attributes.right_shape.x : attributes.left_shape.x;\r\n        let interf_y_pos = attributes.core.mod_y + attributes.core.mod_size*0.1;\r\n\r\n        if (sub_cond.mod_shape === \"triangle\" && sub_cond.interf_shape === \"circle\") {\r\n            interf_radius = interf_radius * 2;\r\n        } \r\n        \r\n        attributes.interf_shape = {\r\n          shape:    sub_cond.interf_shape,\r\n          size:     interf_radius,\r\n          x:        interf_x_pos,\r\n          y:        interf_y_pos,\r\n          outline:  sub_cond.interf_outline,\r\n          fill:     sub_cond.interf_fill,\r\n          is_ref:   true,\r\n          options:  {\"scaling\": \"scales_with_mod\"}\r\n        }\r\n\r\n        return attributes;\r\n\r\n      } else {\r\n\r\n        return attributes;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Computes attributes for multi-interference conditions (AKA has \"multi\" in condition name).\r\n     *\r\n     * @param {object}   sub_cond\r\n     *        {object}   attributes\r\n     */\r\n    compute_estimation_multi_interference_attributes(sub_cond, attributes) {\r\n\r\n      if (!sub_cond.mod_side_shapes    || !sub_cond.mod_ratio       || !sub_cond.interf_fill || !sub_cond.interf_outline ||\r\n          !sub_cond.mod_side_alignment || !sub_cond.ref_side_shapes || !sub_cond.ref_ratio   || !sub_cond.ref_side_alignment) {\r\n          throw Error(\"Missing attributes to run a multi-interference condition.\");\r\n      }\r\n\r\n      let is_ref_left = this.curr_trial_data.is_ref_left;\r\n\r\n      // ----------------------------------------------------------------------------\r\n      // FORCE LEFT/RIGHT SHAPES TO BE BASED ON REF-SIDE-MAIN AND MOD-SIDE-REF \r\n\r\n      let left_shape  = is_ref_left ? sub_cond.ref_side_shapes.main : sub_cond.mod_side_shapes.ref;\r\n      let right_shape = is_ref_left ? sub_cond.mod_side_shapes.ref : sub_cond.ref_side_shapes.main;\r\n\r\n      attributes.left_shape.shape  = left_shape; // Overwrite attributes\r\n      attributes.right_shape.shape = right_shape;\r\n\r\n      // Main shapes are automatically \"ref\"\r\n      attributes.left_shape.is_ref = true;\r\n      attributes.right_shape.is_ref = true;\r\n\r\n      // ----------------------------------------------------------------------------\r\n      // COMPUTE ATTRIBUTES FOR NON-MAIN SHAPES + PLOT\r\n\r\n      // Buffer to ensure shapes on ref and mod sides don't overlap with each other\r\n      let x_buffer = 3 * this.PIXEL_TO_CM; // 3 CM buffer\r\n      attributes.right_shape.x += x_buffer;\r\n      attributes.left_shape.x  -= x_buffer;\r\n\r\n      this.append_ref_sub_attributes(sub_cond, attributes, is_ref_left);\r\n      this.append_mod_attributes(sub_cond, attributes, is_ref_left);\r\n\r\n      console.log(attributes);\r\n\r\n      return attributes;\r\n    }\r\n\r\n    /**\r\n     * For 2 shapes S1 and S2, with an area ratio of S1:S2, computes the length\r\n     * for S2 to maintain this area ratio.\r\n     *\r\n     * @param {string}   S1_shape_type    \r\n     *        {double}   S1_length        (in pixels) \r\n     *        {double}   S1_S2_area_ratio (S1 area / S2 area)         \r\n     *        {string}   S2_shape_type\r\n     *\r\n     * @return {double}  S2_length        (in pixels)\r\n     */\r\n    calculate_length_from_area_ratio(S1_shape_type, S1_length, S1_S2_area_ratio, S2_shape_type) {\r\n\r\n      // Compute area (in CM^2) of the initial_length\r\n      let S1_area = this.compute_shape_area(S1_shape_type, S1_length);\r\n      let S2_area = S1_area * (1/S1_S2_area_ratio);\r\n\r\n      let S2_length_cm = this.compute_shape_length(S2_shape_type, S2_area);\r\n\r\n      console.log(\"RATIO: \" + S1_S2_area_ratio);\r\n      console.log(\"S1 LENGTH: \" + S1_length / this.PIXEL_TO_CM);\r\n      console.log(\"S1 AREA: \" + S1_area);\r\n      console.log(\"S2 LENGTH: \" + S2_length_cm);\r\n      console.log(\"S2 AREA: \" + S2_area);\r\n\r\n      return S2_length_cm * this.PIXEL_TO_CM;\r\n    }\r\n\r\n    /**\r\n     * Computes the shape length with the specified area.\r\n     *\r\n     * @param {string}   shape_type     \r\n     *        {double}   target area\r\n     *\r\n     * @return {double}  length\r\n     */\r\n    compute_shape_length(shape_type, area) {\r\n\r\n      let length;\r\n\r\n      switch (shape_type) {\r\n        case \"square\" : {\r\n          length = Math.sqrt(area);\r\n        } break;\r\n\r\n        case \"triangle\" : { //Assume equilateral for now\r\n          let inner = (4*area)/Math.sqrt(3);\r\n          length = Math.sqrt(inner);\r\n        } break;\r\n\r\n        case \"circle\" : {\r\n          let radius = Math.sqrt(area/Math.PI);\r\n          length = radius*2; //Return diameter b/c plotting code assumes it is taking diameter\r\n        } break;\r\n\r\n        default: \r\n          throw Error (\"Computations for determining length from area for shape \" + shape_type + \" has not been implemented.\");\r\n          break;\r\n      }\r\n\r\n      return length;\r\n    }\r\n\r\n    /**\r\n     * Computes attributes for the sub shape on the ref side for multi interference conditions.\r\n     * Additionally adjusts the main shape on the ref side depending on the alignment.\r\n     *\r\n     * @param {object}   sub_cond\r\n     *        {object}   attributes\r\n     *        {boolean}  is_ref_left\r\n     */\r\n    append_ref_sub_attributes(sub_cond, attributes, is_ref_left) {\r\n\r\n      let ref_radius, ref_x_pos, ref_y_pos;\r\n      let options = {};\r\n\r\n      switch (sub_cond.ref_side_alignment) {\r\n\r\n        case \"overlapping-bottom\": {\r\n\r\n          let main_ref_shape_type = is_ref_left ? attributes.left_shape.shape : attributes.right_shape.shape;\r\n          ref_radius = this.calculate_length_from_area_ratio(main_ref_shape_type, attributes.core.ref_size, sub_cond.ref_ratio, sub_cond.ref_side_shapes.sub);\r\n\r\n          // Same x as main shape\r\n          ref_x_pos = is_ref_left ? attributes.left_shape.x : attributes.right_shape.x;\r\n          // Shift down to bottom of main shape\r\n          ref_y_pos = attributes.core.ref_y - (ref_radius - attributes.core.ref_size)/2;\r\n\r\n        } break;\r\n\r\n        case \"vertical-left\": {\r\n          \r\n          let main_ref_shape_type = is_ref_left ? attributes.left_shape.shape : attributes.right_shape.shape;\r\n          ref_radius = this.calculate_length_from_area_ratio(main_ref_shape_type, attributes.core.ref_size, sub_cond.ref_ratio, sub_cond.ref_side_shapes.sub);\r\n\r\n          let x_pos_main_ref = is_ref_left ? attributes.left_shape.x : attributes.right_shape.x;\r\n          ref_x_pos = x_pos_main_ref + ref_radius/2 - attributes.core.ref_size/2;\r\n          ref_y_pos = attributes.core.ref_y + ref_radius/2 + attributes.core.ref_size * 0.5 + this.PIXEL_TO_CM * 2;\r\n\r\n          // Shift up so ref shapes are centered horizontally\r\n          let y_buffer = ((ref_y_pos + 0.5 * ref_radius) - (attributes.core.ref_y + 0.5 * attributes.core.left_size)) / 2;\r\n          ref_y_pos = ref_y_pos - y_buffer;\r\n\r\n          // Main ref shape needs to move up as well\r\n          if (is_ref_left) {\r\n            attributes.left_shape.y -= y_buffer;\r\n          } else {\r\n            attributes.right_shape.y -= y_buffer;\r\n          }\r\n\r\n        } break;   \r\n\r\n        case \"vertical-left-cutout\": {\r\n\r\n          if (sub_cond.ref_side_shapes.sub === \"square\") {\r\n\r\n            let main_ref_shape_type = is_ref_left ? attributes.left_shape.shape : attributes.right_shape.shape;\r\n            ref_radius = this.calculate_length_from_area_ratio(main_ref_shape_type, attributes.core.ref_size, sub_cond.ref_ratio, sub_cond.ref_side_shapes.sub);\r\n\r\n            let x_pos_main_ref = is_ref_left ? attributes.left_shape.x : attributes.right_shape.x;\r\n            ref_x_pos = x_pos_main_ref + ref_radius/2 - attributes.core.ref_size/2;\r\n            ref_y_pos = attributes.core.ref_y + ref_radius/2 + attributes.core.ref_size * 0.5 + this.PIXEL_TO_CM * 2;\r\n\r\n            // Shift up so ref shapes are centered horizontally\r\n            let y_buffer = ((ref_y_pos + 0.5 * ref_radius) - (attributes.core.ref_y + 0.5 * attributes.core.left_size)) / 2;\r\n            ref_y_pos = ref_y_pos - y_buffer;\r\n\r\n            // Main ref shape needs to move up as well\r\n            if (is_ref_left) {\r\n              attributes.left_shape.y -= y_buffer;\r\n            } else {\r\n              attributes.right_shape.y -= y_buffer;\r\n            }\r\n\r\n            let main_ref_size = is_ref_left ? attributes.left_shape.size : attributes.right_shape.size;\r\n            options = {\"cutout_radius\" :  main_ref_size};\r\n\r\n          } else {\r\n            throw Error(sub_cond.ref_side_shapes.sub + \" shape has not been handled for vertical-left-cutout side alignment.\");\r\n          }\r\n\r\n        } break;\r\n\r\n        case \"vertical-centered\": {\r\n\r\n          if (sub_cond.ref_side_shapes.sub === \"fan\") {\r\n            // Same radius and x pos\r\n            ref_radius = is_ref_left ? attributes.left_shape.size : attributes.right_shape.size;\r\n            ref_x_pos = is_ref_left ? attributes.left_shape.x : attributes.right_shape.x;  \r\n\r\n            // Shift up \r\n            ref_y_pos = attributes.core.ref_y - ref_radius - this.PIXEL_TO_CM * 2;\r\n\r\n            let angle_size = 360/(1/sub_cond.ref_ratio);\r\n            options = {\"fan-attributes\": {\"slice-alignment\": \"top\", \"angle_size\": angle_size}};\r\n          }\r\n          else {\r\n            throw Error(sub_cond.ref_side_shapes.sub + \" shape has not been handled for vertical-centered ref side alignment.\");\r\n          }\r\n\r\n        } break;\r\n\r\n        default: \r\n          throw Error(sub_cond.ref_side_alignment + \" ref side alignment is not supported.\");\r\n      }  \r\n\r\n      if (sub_cond.flicker_ref_durations){\r\n        options.flicker = {on: sub_cond.flicker_ref_durations.on, off: sub_cond.flicker_ref_durations.off};\r\n      }\r\n\r\n      attributes.ref_sub_shape = {\r\n                                    shape:    sub_cond.ref_side_shapes.sub,\r\n                                    size:     ref_radius,\r\n                                    x:        ref_x_pos,\r\n                                    y:        ref_y_pos,\r\n                                    outline:  sub_cond.interf_outline,\r\n                                    fill:     sub_cond.interf_fill,\r\n                                    is_ref:   true,\r\n                                    options:  options\r\n                                  };\r\n    }\r\n\r\n    /**\r\n     * Computes attributes for the modifiable shape for multi interference conditions.\r\n     * Additionally adjusts the main shape on the mod side depending on the alignment.\r\n     *\r\n     * @param {object}   sub_cond\r\n     *        {object}   attributes\r\n     *        {boolean}  is_ref_left\r\n     */\r\n    append_mod_attributes(sub_cond, attributes, is_ref_left) {\r\n\r\n      let mod_radius, mod_x_pos, mod_y_pos, options;\r\n\r\n      switch (sub_cond.mod_side_alignment) {\r\n\r\n        case \"overlapping-center\": {\r\n\r\n          if (sub_cond.mod_side_shapes.mod === \"fan\") {\r\n              mod_radius = attributes.core.mod_size;\r\n              mod_x_pos = is_ref_left ? attributes.right_shape.x : attributes.left_shape.x;\r\n              mod_y_pos = attributes.core.mod_y - 0.25*(mod_radius); \r\n\r\n              let angle_size = 360/(1/sub_cond.mod_ratio);\r\n              options = {\"fan-attributes\": {\"slice-alignment\": \"bottom\", \"angle_size\": angle_size}};\r\n          } else {\r\n              \r\n              let sub_shape_type = is_ref_left ? attributes.right_shape.shape : attributes.left_shape.shape;\r\n              mod_radius = this.calculate_length_from_area_ratio(sub_shape_type, attributes.core.mod_size, sub_cond.mod_ratio, sub_cond.mod_side_shapes.mod);\r\n\r\n              mod_x_pos = is_ref_left ? attributes.right_shape.x : attributes.left_shape.x;\r\n              mod_y_pos = attributes.core.mod_y;\r\n              options = {\"scaling\": \"scales_indep\"};\r\n          }\r\n\r\n        } break;\r\n\r\n        case \"diagonal\": {\r\n\r\n          let sub_shape_type = is_ref_left ? attributes.right_shape.shape : attributes.left_shape.shape;\r\n          mod_radius = this.calculate_length_from_area_ratio(sub_shape_type, attributes.core.mod_size, sub_cond.mod_ratio, sub_cond.mod_side_shapes.mod);\r\n          \r\n          mod_x_pos = is_ref_left ? attributes.right_shape.x : attributes.left_shape.x;\r\n          mod_y_pos = attributes.core.mod_y;\r\n          options = null;\r\n\r\n          // Shift down\r\n          let y_shift = sub_cond.mod_ratio < 1 ? mod_radius : (mod_radius*1.5 + this.PIXEL_TO_CM * 2);\r\n\r\n          // Manipulate alignment for main shapes on mod side\r\n          if (is_ref_left) {\r\n              attributes.right_shape.x += mod_radius;\r\n              attributes.right_shape.y -= y_shift;\r\n          } else {\r\n              attributes.left_shape.x += mod_radius;\r\n              attributes.left_shape.y -= y_shift;\r\n          }\r\n\r\n        } break;\r\n\r\n        case \"overlapping-bottom\": {\r\n\r\n          if (sub_cond.mod_side_shapes.mod === \"fan\") {\r\n            mod_radius = attributes.core.mod_size;\r\n            mod_x_pos = is_ref_left ? attributes.right_shape.x : attributes.left_shape.x;\r\n            mod_y_pos = attributes.core.mod_y;\r\n\r\n            let angle_size = 360/(1/sub_cond.mod_ratio);\r\n            options = {\"fan-attributes\": {\"slice-alignment\": \"bottom\", \"angle_size\": angle_size}};\r\n          }\r\n          else {\r\n              throw Error(sub_cond.mod_side_shapes.mod + \" shape has not been handled for overlapping-bottom mod side alignment.\");\r\n          }\r\n\r\n        } break;\r\n\r\n        case \"overlapping-bottom-edge\": {\r\n\r\n          if (sub_cond.mod_side_shapes.mod === \"fan\") {\r\n            mod_radius = attributes.core.mod_size;\r\n            mod_x_pos = is_ref_left ? attributes.right_shape.x : attributes.left_shape.x;\r\n            mod_y_pos = attributes.core.mod_y + mod_radius/4; // Shift down 1/4 of circle\r\n\r\n            let angle_size = 360/(1/sub_cond.mod_ratio);\r\n            options = {\"fan-attributes\": {\"slice-alignment\": \"bottom\", \"angle_size\": angle_size}};\r\n          }\r\n          else {\r\n              throw Error(sub_cond.mod_side_shapes.mod + \" shape has not been handled for overlapping-bottom-edge mod side alignment.\");\r\n          }\r\n\r\n        } break;\r\n\r\n        case \"slice-bottom\": {\r\n\r\n          if (sub_cond.mod_side_shapes.mod === \"fan\") {\r\n            mod_radius = attributes.core.mod_size;\r\n            mod_x_pos = is_ref_left ? attributes.right_shape.x : attributes.left_shape.x;\r\n            mod_y_pos = attributes.core.mod_y + mod_radius/4; // Shift down 1/4 of circle\r\n\r\n            let angle_size = 360/(1/sub_cond.mod_ratio);\r\n            options = {\"fan-attributes\": {\"slice-alignment\": \"bottom\", \"angle_size\": angle_size, \"ref_shape_adjusts\": true}};\r\n          }\r\n          else {\r\n              throw Error(sub_cond.mod_side_shapes.mod + \" shape has not been handled for slice-bottom mod side alignment.\");\r\n          }\r\n\r\n        } break;\r\n\r\n        case \"overlapping-top-left-corner\": {\r\n\r\n          if (sub_cond.mod_side_shapes.mod === \"square\") {\r\n            let sub_shape_type = is_ref_left ? attributes.right_shape.shape : attributes.left_shape.shape;\r\n            mod_radius = this.calculate_length_from_area_ratio(sub_shape_type, attributes.core.mod_size, sub_cond.mod_ratio, sub_cond.mod_side_shapes.mod);\r\n\r\n            // This centers it\r\n            mod_x_pos = is_ref_left ? attributes.right_shape.x : attributes.left_shape.x;\r\n            mod_y_pos = attributes.core.mod_y;\r\n\r\n            // Moves it to top left\r\n            let diff = attributes.core.mod_size - mod_radius*2;\r\n            mod_x_pos -= diff;\r\n            mod_y_pos -= diff;\r\n\r\n          } else {\r\n            throw Error(sub_cond.mod_side_shapes.mod + \" shape has not been handled for overlapping-top-left-corner mod side alignment.\");\r\n          }\r\n        } break;\r\n\r\n        default: \r\n            throw Error(sub_cond.mod_side_alignment + \" is not supported.\");\r\n\r\n      }\r\n\r\n      attributes.mod_shape = {\r\n                              shape: sub_cond.mod_side_shapes.mod,\r\n                              size: mod_radius,\r\n                              x: mod_x_pos,\r\n                              y: mod_y_pos,\r\n                              outline: sub_cond.interf_outline,\r\n                              fill: sub_cond.interf_fill,\r\n                              is_ref: false,\r\n                              options: options\r\n                            }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculates the y value of the position where the shape should be plotted\r\n     *\r\n     * @param   {number}  radius the radius of the shape\r\n     * @param   {boolean} whether to jitter the y pos or not\r\n     *\r\n     * @returns {number}\r\n     */\r\n    calculate_y_position(radius, with_jitter) {\r\n        // y_margin is the distance from\r\n        let y_margin = this.MARGIN * this.PIXEL_TO_CM;\r\n        // pick a random position inside the screen such the the shapes will not be displayed outside of the border\r\n        let range = [y_margin + radius / 2, window.innerHeight - y_margin - radius / 2];\r\n        let y_pos;\r\n        if (with_jitter) {\r\n            y_pos = Math.random() * (range[1] - range[0]) + range[0];\r\n        } else {\r\n            y_pos = (range[1] + range[0]) / 2;\r\n        }\r\n        return y_pos;\r\n    }\r\n\r\n    /*\r\n    * Saves experiment data as csv\r\n    * */\r\n    export_trial_data() {\r\n        let trial_data = jsPsych.data.get().filterCustom(function (row) {\r\n            return row.block_type === \"practice\" || row.block_type === \"test\";\r\n        })\r\n        // These are variables forced on by jsPsych\r\n            .ignore('stimulus')\r\n            .ignore('key_press')\r\n            .ignore('choices')\r\n            .ignore('trial_type')\r\n            .ignore('trial_index')\r\n            .ignore('time_elapsed')\r\n            .ignore('internal_node_id')\r\n            .ignore('rt');\r\n\r\n        let fileName = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_shape_estimation_trial_results.csv\";\r\n\r\n        trial_data.localSave('csv', fileName);\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/estimation/estimation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 442,
    "kind": "class",
    "name": "Estimation",
    "memberof": "scripts/experiments/estimation/estimation.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation.js",
    "importStyle": "Estimation",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 443,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#constructor",
    "access": "public",
    "description": "Initializes a Estimation experiment object.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "{object}    Parameters passed in from routing"
      }
    ]
  },
  {
    "__docId__": 444,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 445,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 450,
    "kind": "member",
    "name": "X_DISTANCE_BETWEEN_SHAPES",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#X_DISTANCE_BETWEEN_SHAPES",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "member",
    "name": "Y_DIVIATION_FROM_X_AXIS",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#Y_DIVIATION_FROM_X_AXIS",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "member",
    "name": "MAX_STEP_INTERVAL",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#MAX_STEP_INTERVAL",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "member",
    "name": "ROUNDS_PER_COND",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#ROUNDS_PER_COND",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "member",
    "name": "MAX_Y_POS_JITTER",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#MAX_Y_POS_JITTER",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "member",
    "name": "MAX_STEP_SIZE",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#MAX_STEP_SIZE",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "member",
    "name": "PIXEL_TO_CM",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#PIXEL_TO_CM",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "member",
    "name": "MARGIN",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#MARGIN",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "member",
    "name": "input_count_array",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#input_count_array",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 460,
    "kind": "member",
    "name": "curr_round_num",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#curr_round_num",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "member",
    "name": "curr_condition_index",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#curr_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "member",
    "name": "is_practice",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#is_practice",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "member",
    "name": "round_end",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#round_end",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "member",
    "name": "interf_shape_variables",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#interf_shape_variables",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "member",
    "name": "adjusted_midpoint_matrix",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#adjusted_midpoint_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "member",
    "name": "practice_trial_data",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#practice_trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "member",
    "name": "practice_end",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#practice_end",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "member",
    "name": "curr_trial_data",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#curr_trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "member",
    "name": "results",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#results",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "member",
    "name": "raw_sub_conds",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#raw_sub_conds",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "member",
    "name": "practice_conditions_constants",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#practice_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "member",
    "name": "curr_conditions_constants",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#curr_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "member",
    "name": "experiment_conditions_constants",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#experiment_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#prepare_experiment",
    "access": "public",
    "description": "Orders the input data according to balancing type and\ninitializes the Estimation object's variables.",
    "lineNumber": 115,
    "params": [],
    "return": null
  },
  {
    "__docId__": 475,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "prepare_practice",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#prepare_practice",
    "access": "public",
    "description": "Creates the practice dataset by taking the first FOUR subconditions.",
    "lineNumber": 133,
    "params": [],
    "return": null
  },
  {
    "__docId__": 481,
    "kind": "member",
    "name": "current_practice_condition_index",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#current_practice_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "set_variables_to_experiment",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#set_variables_to_experiment",
    "access": "public",
    "description": "Resets all relevant variables to use that of the experiment.\n(input_count_array, curr_conditions_constants, and curr_condition_index\nare shared variables between the practice and test trials).\n\nThis function is called once all the practice trials have run.",
    "lineNumber": 157,
    "params": [],
    "return": null
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#generate_trial",
    "access": "public",
    "description": "Generates a Estimation object for use in the JsPsych timeline.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": "{string}     \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    }
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "update_input_array",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#update_input_array",
    "access": "public",
    "description": "Set the current trial's number of inputs in the input_count_array",
    "lineNumber": 288,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{object} the trial.data object from jsPsych"
      }
    ],
    "return": null
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "update_curr_round_number",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#update_curr_round_number",
    "access": "public",
    "description": "Update the current round number",
    "lineNumber": 299,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_data",
        "description": "{object} the trial.data object from jsPsych"
      }
    ],
    "return": null
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "update_curr_cond_idx",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#update_curr_cond_idx",
    "access": "public",
    "description": "Update the index of the condition that is being referred to",
    "lineNumber": 311,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_data",
        "description": "{object} the trail.data object from jsPsych"
      }
    ],
    "return": null
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "save_adjustment",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#save_adjustment",
    "access": "public",
    "description": "Appends the adjustment to the curr_trial_data.adjustments.",
    "lineNumber": 322,
    "params": [
      {
        "nullable": null,
        "types": [
          "double"
        ],
        "spread": false,
        "optional": false,
        "name": "adjustment",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "save_estimated_size",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#save_estimated_size",
    "access": "public",
    "description": "Saves the estimated size to the curr_trial_data.",
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "double"
        ],
        "spread": false,
        "optional": false,
        "name": "estimated_size",
        "description": "{string}   unit of the estimated_size"
      }
    ],
    "return": null
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "save_estimated_area",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#save_estimated_area",
    "access": "public",
    "description": "Saves the estimated area to the curr_trial_data.",
    "lineNumber": 344,
    "params": [
      {
        "nullable": null,
        "types": [
          "double"
        ],
        "spread": false,
        "optional": false,
        "name": "area",
        "description": "{string}   unit of the estimated_area"
      }
    ],
    "return": null
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "save_reference_shape_area",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#save_reference_shape_area",
    "access": "public",
    "description": "Saves and computes the ref shape area to the curr_trial_data.\n\n- For normal estimation conditions (AKA one shape on mod and one shape on ref side),\n  will use the single shape on the ref side\n- For multi interference conditions, is using the main shape on the mod side\n- For interference conditions, is using the single shape on ref side\n- For bisection conditions, it is taking the midpoint between the left and right reference shape areas",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "attributes",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "compute_shape_area",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#compute_shape_area",
    "access": "public",
    "description": "Computes the area for a given shape and the size. ",
    "lineNumber": 400,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "shape",
        "description": "{string}   size   (in pixels)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "double"
      ],
      "spread": false,
      "description": "area   (in CM^2)"
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "compute_fan_area",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#compute_fan_area",
    "access": "public",
    "description": "Computes the area for a fan.",
    "lineNumber": 446,
    "params": [
      {
        "nullable": null,
        "types": [
          "double"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "(in degrees)\n        {double}   radius (in pixels)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "double"
      ],
      "spread": false,
      "description": "area   (in CM^2)"
    }
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "compute_plot_attributes",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#compute_plot_attributes",
    "access": "public",
    "description": "Computes attributes for all estimation plots.",
    "lineNumber": 458,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "compute_bisection_attributes",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#compute_bisection_attributes",
    "access": "public",
    "description": "Computes attributes for bisection conditions (AKA has \"bisection\" in condition name).",
    "lineNumber": 563,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sub_cond",
        "description": "{object}   attributes"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "compute_estimation_interference_attributes",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#compute_estimation_interference_attributes",
    "access": "public",
    "description": "Computes attributes for single-interference conditions (AKA no \"multi\" in condition name).",
    "lineNumber": 627,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sub_cond",
        "description": "{object}   attributes"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "compute_estimation_multi_interference_attributes",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#compute_estimation_multi_interference_attributes",
    "access": "public",
    "description": "Computes attributes for multi-interference conditions (AKA has \"multi\" in condition name).",
    "lineNumber": 667,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sub_cond",
        "description": "{object}   attributes"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "calculate_length_from_area_ratio",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#calculate_length_from_area_ratio",
    "access": "public",
    "description": "For 2 shapes S1 and S2, with an area ratio of S1:S2, computes the length\nfor S2 to maintain this area ratio.",
    "lineNumber": 716,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "S1_shape_type",
        "description": "{double}   S1_length        (in pixels) \n       {double}   S1_S2_area_ratio (S1 area / S2 area)         \n       {string}   S2_shape_type"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "double"
      ],
      "spread": false,
      "description": "S2_length        (in pixels)"
    }
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "compute_shape_length",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#compute_shape_length",
    "access": "public",
    "description": "Computes the shape length with the specified area.",
    "lineNumber": 741,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "shape_type",
        "description": "{double}   target area"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "double"
      ],
      "spread": false,
      "description": "length"
    }
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "append_ref_sub_attributes",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#append_ref_sub_attributes",
    "access": "public",
    "description": "Computes attributes for the sub shape on the ref side for multi interference conditions.\nAdditionally adjusts the main shape on the ref side depending on the alignment.",
    "lineNumber": 776,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sub_cond",
        "description": "{object}   attributes\n       {boolean}  is_ref_left"
      }
    ],
    "return": null
  },
  {
    "__docId__": 508,
    "kind": "method",
    "name": "append_mod_attributes",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#append_mod_attributes",
    "access": "public",
    "description": "Computes attributes for the modifiable shape for multi interference conditions.\nAdditionally adjusts the main shape on the mod side depending on the alignment.",
    "lineNumber": 895,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sub_cond",
        "description": "{object}   attributes\n       {boolean}  is_ref_left"
      }
    ],
    "return": null
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "calculate_y_position",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#calculate_y_position",
    "access": "public",
    "description": "Calculates the y value of the position where the shape should be plotted",
    "lineNumber": 1040,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "the radius of the shape"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "whether",
        "description": "to jitter the y pos or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/estimation/estimation.js~Estimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/estimation/estimation.js~Estimation#export_trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 1057,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 511,
    "kind": "file",
    "name": "scripts/experiments/estimation/estimation_timeline.js",
    "content": "import Estimation from \"/scripts/experiments/estimation/estimation.js\";\r\nimport {get_instructions} from \"/scripts/experiment-properties/instructions/instructions_controller.js\";\r\n\r\nexport var estimation_exp = new Estimation(params);\r\n\r\nvar timeline = [];\r\nvar address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\n// =========================================================\r\n// WELCOME TRIAL BLOCK\r\n\r\nvar welcome = {\r\n    type: 'html-keyboard-response',\r\n    stimulus: `<div align = \"center\">` + `<img src=\"${address}/img/VCL_lab_logo.png\"></img><br><br>` +\r\n    `<b>Base:</b> estimation` + '<br>' +\r\n    `<b>Trial Type:</b> ${estimation_exp.trial_structure}` + '<br>' +\r\n    `<b>Graph Type:</b> ${estimation_exp.graph_type}` + '<br>' +\r\n    `<b>Condition:</b> ${estimation_exp.condition_name}` +\r\n    '<br><br><br><p><font size = 15>Press any key to begin.<p></font>' +\r\n    '</div>',\r\n    data: {type: 'instruction'}\r\n};\r\ntimeline.push(welcome);\r\n\r\n// =========================================================\r\n// INSTRUCTION TRIAL BLOCKS\r\n\r\nvar ready = {\r\n    type: 'html-keyboard-response',\r\n    stimulus: \"<div align = 'center'> <font size = 20><p>Ready? We will first do some practice trials. <p>\" + \"<br> <br> <p><b>Press any key to begin.</b></p></font></div>\",\r\n    data: {type: 'instruction'}\r\n};\r\n\r\nvar instructions = {\r\n    type: \"html-keyboard-response\",\r\n    stimulus: function(){\r\n        return get_instructions(estimation_exp);\r\n    }\r\n};\r\n\r\nvar instruction_trials = {\r\n    timeline: [instructions, ready]\r\n};\r\n\r\ntimeline.push(instruction_trials);\r\n\r\n// =========================================================\r\n// PRACTICE TRIAL BLOCKS\r\n\r\n// ---------------------------------------------------------\r\n// PRACTICE TIMELINE\r\n\r\nvar practice_estimation = estimation_exp.generate_trial(\"practice\");\r\nvar trial_loop_function = function (data) {\r\n    console.log(\"====================loop_function=======================\");\r\n    let last_trial = jsPsych.data.get().last(1).values()[0];\r\n\r\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') === data.values()[0].key_press){\r\n        estimation_exp.set_variables_to_experiment();\r\n        console.log(\"Practice trials finished with key = q, set variables to experiment\");\r\n        return false;\r\n    }\r\n    else if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('space') === data.values()[0].key_press) {\r\n        let num_adjustments = last_trial.adjustments.length;\r\n        if (num_adjustments === 0) {\r\n            window.alert(\"Please make adjustments before pressing space bar\");\r\n            // repeat previous round\r\n            // if curr_round_num > 0, go back to previous round\r\n            if (estimation_exp.curr_round_num !== 0) {\r\n                estimation_exp.curr_round_num--;\r\n            }\r\n            // else go back to last round of previous condition\r\n            else if (estimation_exp.curr_round_num) {\r\n                estimation_exp.curr_condition_index--;\r\n                estimation_exp.curr_round_num = estimation_exp.ROUNDS_PER_COND - 1;\r\n            }\r\n            return true;\r\n        } else {\r\n            if (estimation_exp.curr_condition_index === estimation_exp.curr_conditions_constants.length) {\r\n                // all rounds of all sub_conditions has finished\r\n                if (estimation_exp.is_practice === false) {\r\n                    console.log(\"Experiment finished\");\r\n                } else {\r\n                    console.log(\"Practice finished\");\r\n                }\r\n                estimation_exp.set_variables_to_experiment();\r\n                return false;\r\n            } else {\r\n                console.log(\"Continue Experiment\");\r\n                return true;\r\n            }\r\n        }\r\n    } else {\r\n        console.log(\"error estimation_timeline.js 105\")\r\n    }\r\n};\r\nvar practice = {\r\n    timeline: [practice_estimation],\r\n    loop_function: trial_loop_function,\r\n    on_finish: function (data) {\r\n    }\r\n};\r\ntimeline.push(practice);\r\n\r\n// ---------------------------------------------------------\r\n// STOP BLOCK\r\n\r\nvar stop = {\r\n    type: 'html-keyboard-response',\r\n    stimulus: function() {\r\n        return \"<div align = 'center'> <font size = 6><p>This concludes the practice trials.<p>\" +\r\n            \"<p><b>Any questions?</b></p></font></div>\";\r\n    },\r\n    data: {type: 'instruction'},\r\n    on_start: function(stop){\r\n        // Reset background color to feedback\r\n        document.body.style.backgroundColor = 'WHITE';\r\n    }\r\n};\r\n\r\nvar ready_experiment = {\r\n    type: 'html-keyboard-response',\r\n    stimulus: \"<div align = 'center'> <font size = 20><p>Ready?<p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\r\n    data: {type: 'instruction'}\r\n};\r\n\r\nvar stop_trials = {\r\n    timeline: [stop, ready_experiment]\r\n};\r\n\r\ntimeline.push(stop_trials);\r\n\r\n\r\n// =========================================================\r\n// EXPERIMENT TRIAL BLOCKS\r\n\r\nvar trial = estimation_exp.generate_trial(\"test\");\r\nvar experiment = {\r\n    timeline: [trial],\r\n    loop_function: trial_loop_function,\r\n    on_start: function (data) {\r\n        console.log(\"Should only be excuted before all experiments\");\r\n    }\r\n};\r\n\r\ntimeline.push(experiment);\r\n\r\nconsole.log(\"======================\");\r\n\r\n// =========================================================\r\n// DATA DOWNLOADING \r\n\r\nvar experiment_end = {\r\n    type: 'html-keyboard-response',\r\n    stimulus: '<div align = \"center\">' +\r\n    '<p><font size = 10>You have completed the experiment!<p></font>' +\r\n    '<br>' +\r\n    'Trial and summary data files will now automatically download locally.' +\r\n    '</div>' ,\r\n    on_start: function(){\r\n        estimation_exp.export_trial_data();\r\n        // Reset background color to feedback\r\n        document.body.style.backgroundColor = 'WHITE';\r\n    }\r\n};\r\ntimeline.push(experiment_end);\r\n\r\n// =========================================================\r\n// START JSPSYCH\r\n\r\njsPsych.init({\r\n    timeline: timeline,\r\n    on_finish: function(){\r\n        jsPsych.data.displayData();\r\n    }\r\n});",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/estimation/estimation_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 512,
    "kind": "variable",
    "name": "estimation_exp",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~estimation_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": "{estimation_exp}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/estimation/estimation.js~Estimation"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 514,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 515,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 516,
    "kind": "variable",
    "name": "ready",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~ready",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 517,
    "kind": "variable",
    "name": "instructions",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 518,
    "kind": "variable",
    "name": "instruction_trials",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~instruction_trials",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 519,
    "kind": "variable",
    "name": "practice_estimation",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~practice_estimation",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 520,
    "kind": "function",
    "name": "trial_loop_function",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~trial_loop_function",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 521,
    "kind": "variable",
    "name": "practice",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~practice",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 522,
    "kind": "variable",
    "name": "stop",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~stop",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 523,
    "kind": "variable",
    "name": "ready_experiment",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~ready_experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 524,
    "kind": "variable",
    "name": "stop_trials",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~stop_trials",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 525,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 526,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 527,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/estimation/estimation_timeline.js",
    "static": true,
    "longname": "scripts/experiments/estimation/estimation_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/estimation/estimation_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 528,
    "kind": "file",
    "name": "scripts/experiments/hybrid/hybrid.js",
    "content": "import { balance_subconditions } from '/scripts/experiment-properties/balancing/balancing_controller.js'\r\nimport { get_data } from '/scripts/experiment-properties/data/data_controller.js'\r\nimport { EXPERIMENTS } from \"/config/experiments-config.js\";\r\n\r\nexport default class Hybrid{\r\n\r\n    constructor(params){\r\n        console.log(params)\r\n        let trial_structure = params[\"trial_structure\"];\r\n        let condition_name = params[\"condition\"];\r\n        let graph_type = params[\"graph_type\"];\r\n        let balancing_type = params[\"balancing\"];\r\n    \r\n        this.condition_name = condition_name;\r\n        this.subject_id = params[\"subject_id\"];\r\n        this.subject_initials = params[\"subject_initials\"];\r\n        this.auto_mode = false;\r\n    \r\n        this.is_practice_trials = params[\"is_practice_trials\"];\r\n        this.is_screening = params[\"is_screening\"];\r\n        this.is_local_save = params[\"is_local_save\"]\r\n        this.manual_scaling_factor = params[\"manual_scaling_factor\"]\r\n        this.custom_subcondition_order = params[\"custom_subcondition_order\"];\r\n\r\n\r\n        // ========================================\r\n        // PARAMETER CHECKING\r\n\r\n        // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\r\n        if (!EXPERIMENTS[\"hybrid\"][\"trial_structure\"].includes(trial_structure)) {\r\n            throw Error(trial_structure + \" is not supported.\");}\r\n        else {\r\n            this.trial_structure = trial_structure;\r\n        }\r\n    \r\n        if (!EXPERIMENTS[\"hybrid\"][\"graph_type\"].includes(graph_type)){\r\n            throw Error(graph_type + \" is not supported.\")}\r\n        else {\r\n            this.graph_type = graph_type;\r\n        };\r\n    \r\n        if (!EXPERIMENTS[\"hybrid\"][\"balancing_type\"].includes(balancing_type)) {\r\n            throw Error(balancing_type + \" is not supported.\") }\r\n        else {\r\n            this.balancing_type = balancing_type;\r\n        }\r\n       \r\n\r\n        \r\n        // Extract raw constants\r\n        this.raw_constants = get_data(this);\r\n        console.log(this.raw_constants)\r\n\r\n        this.current_experiment = \"Stevens\";\r\n        this.prepare_experiment()\r\n        this.super_condition_constants = [];\r\n    }\r\n    \r\n\r\n    prepare_experiment(){\r\n        let dataset = this.raw_constants;\r\n        this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length, dataset, \"block\", this.custom_subcondition_order);\r\n        this.custom_order_string = 'br' + this.sub_condition_order.toString().replaceAll(',','');\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns {assoc[]}\r\n     */\r\n    prepare_hybrid_order(){\r\n        let num_blocks = 5;\r\n        let stevens_block_size = 2;\r\n        let jnd_block_size = 3;\r\n        let total_block_size = stevens_block_size + jnd_block_size;\r\n        let hybrid_order_constants = []\r\n        for(let i = 0; i < num_blocks; i++){\r\n            let stevens_0_idx = i * stevens_block_size;\r\n            let stevens_1_idx = stevens_0_idx + 1;\r\n            let jnd_0_idx = i * jnd_block_size;\r\n            let jnd_1_idx = jnd_0_idx + 1;\r\n            let jnd_2_idx = jnd_1_idx + 1;\r\n            \r\n            hybrid_order_constants.push(this.stevens_constants[stevens_0_idx])\r\n            hybrid_order_constants.push(this.jnd_constants[jnd_0_idx])\r\n            hybrid_order_constants.push(this.jnd_constants[jnd_1_idx])\r\n            hybrid_order_constants.push(this.jnd_constants[jnd_2_idx])\r\n            hybrid_order_constants.push(this.stevens_constants[stevens_1_idx])\r\n        }\r\n\r\n        this.super_condition_constants = hybrid_order_constants;\r\n    }\r\n\r\n    /**\r\n     * When called, will save summary data and individual trial data into firebase.\r\n     * Parameters are passed on the timeline\r\n     */\r\n    export_trial_data(jnd_summary_data, stevens_summary_data) {\r\n        let summary_data = [];\r\n\r\n        let screening_json = jsPsych.data.get().filter({trial_type: 'survey-html-form'}).select('responses').values[0]\r\n        // Participant information\r\n        // indexing might need to be genralized better if there are previous trials before the start of the experiment\r\n        if(screening_json){\r\n            console.log('Saving Screening')\r\n            let screening_responses = JSON.parse(screening_json)\r\n            let screening_data = {};\r\n            screening_data.education = screening_responses[2].value\r\n            screening_data.stat_classes_take = screening_responses[3].value\r\n            screening_data.vision = screening_responses[4].value\r\n            screening_data.gender = screening_responses[5].value\r\n            screening_data.age = screening_responses[6].value\r\n            summary_data.push(screening_data);\r\n        }\r\n        //Get experiment's entire trial data \r\n        let trial_data = this.get_trial_data();\r\n        summary_data = summary_data.concat(stevens_summary_data);\r\n        summary_data = summary_data.concat(jnd_summary_data);\r\n        console.log(summary_data)\r\n\r\n        if(this.is_local_save === \"true\"){\r\n            trial_data.localSave('csv', 'hybrid_trial_data.csv');\r\n            // TODO fix the summary data to csv\r\n            // jnd_summary_data.localSave('csv', 'jnd_summary_data.csv')\r\n            // stevens_summary_data.localSave('csv', 'stevens_summary_data.csv')    \r\n        }\r\n        else{\r\n            let json_trial_data = JSON.parse(trial_data.json());\r\n            var data = summary_data.concat(json_trial_data);\r\n            data = JSON.stringify(data);\r\n            // Firebase upload\r\n            // Sends the data to the app.js listener\r\n            $.post(\"/api/experiment_data\",\r\n                    {\r\n                        trial_data: json_trial_data, \r\n                        summary_data: summary_data, \r\n                        experiment: \"hybrid\", \r\n                        condition: params[\"condition\"], \r\n                        prolific_pid: params[\"subject_id\"], \r\n                        study_id: params[\"study_id\"], \r\n                        session_id: params[\"session_id\"],\r\n                        subject_initials: params[\"subject_initials\"]\r\n                    },\r\n                    function(data, status) {\r\n                        console.log(\"Data: \" + data + \"\\nStatus: \" + status)\r\n                    }\r\n                );\r\n        }\r\n    }\r\n\r\n    // Getters\r\n\r\n    /**\r\n     * Gets jsPsych trial with given filters. Only returns 'blank'\r\n     * type trials since those are the only ones that save data.\r\n     * \r\n     * @param   {assoc array} filters \r\n     * @returns {jsPsych data} entire jsPsych data object. Needs to be furtherly filtered later to be useful\r\n     */\r\n    get_jsPsych_data(filters){\r\n        return jsPsych.data.get().filter(filters)\r\n                                .filterCustom(function(x) {\r\n                                    return (x.correct != -1);\r\n                                });\r\n    }\r\n\r\n    /**\r\n     * Returns the data of the last trial on the jsPsych data object\r\n     * @returns {assoc array} last jsPsych trial data object\r\n     */\r\n    get_last_trial_data(experiment){\r\n        return jsPsych.data.get().filter({type: experiment}).last(1).values()[0];\r\n    }\r\n\r\n    /**\r\n     * Returns releveant array of the experiment's trial data (in order from first to last)\r\n     * Non-relevant fields are ignored.\r\n     * \"Column order\" if downloaded to csv is \"randomized\" because trial data object is an unordered map\r\n     * \r\n     * @returns {array} [{trial_0},{trial_1},...,{trial_n}]\r\n     */\r\n    get_trial_data(){\r\n        return jsPsych.data.get().filter({run_type: 'test'})\r\n                                    .filterCustom(function(x){ //Don't include the exit trials\r\n                                        return x.correct != -1;\r\n                                    })\r\n                                    .filterCustom(function(x){\r\n                                        if (x.type === \"stevens\" || x.type === \"jnd\")  // return only stevens and jnd trials\r\n                                        return x;\r\n                                    })\r\n                                    .filterCustom(function(x){ //Don't include trials with no user input\r\n                                        return x.rt != null;\r\n                                        })\r\n                                    .filterCustom(function(x){ // Only include the round end steven trials\r\n                                        if(x.type===\"stevens\"){\r\n                                            return x.trial_end == 1;\r\n                                        }\r\n                                        return x\r\n                                        })\r\n                                    // Steven's trial variables\r\n                                    .ignore('run_type')\r\n                                    .ignore('left_correlation')\r\n                                    .ignore('right_correlation')\r\n                                    .ignore('round_refreshes')\r\n                                    .ignore('high_ref_is_right')\r\n                                    // JND's trial variables\r\n                                    .ignore('type')\r\n                                    .ignore('run_type')\r\n                                    .ignore('left_correlation')\r\n                                    .ignore('right_correlation')\r\n                                    // Experiment constants\r\n                                    .ignore('style_attributes')\r\n                                    .ignore('SD')\r\n                                    .ignore('background_color')\r\n                                    .ignore('feedback_background_color')\r\n                                    .ignore('initial_difference')\r\n                                    .ignore('mean')\r\n                                    .ignore('num_SD')\r\n                                    // These are variables forced on by jsPsych\r\n                                    .ignore('stimulus')\r\n                                    .ignore('key_press')\r\n                                    .ignore('choices')\r\n                                    .ignore('trial_type')\r\n                                    .ignore('trial_index')\r\n                                    .ignore('time_elapsed')\r\n                                    .ignore('internal_node_id');\r\n        } \r\n\r\n    /**\r\n     * Get's experiment relevant summary data.\r\n     * Relevant summary data includes: independent variables, overall JND, convergance JND (last 24), convergance results, trial count\r\n     * \r\n     * @returns {assoc[]} array of summary data\r\n     */\r\n    get_summary_data(){\r\n        let summary_data = [];\r\n        let screening_json = jsPsych.data.get().filter({trial_type: 'survey-html-form'}).select('responses').values[0]\r\n        // Participant information\r\n        // indexing might need to be genralized better if there are previous trials before the start of the experiment\r\n        if(screening_json){\r\n            console.log('Saving Screening')\r\n            let screening_responses = JSON.parse(screening_json)\r\n            let screening_data = {};\r\n            screening_data.education = screening_responses[2].value\r\n            screening_data.stat_classes_take = screening_responses[3].value\r\n            screening_data.vision = screening_responses[4].value\r\n            screening_data.gender = screening_responses[5].value\r\n            screening_data.age = screening_responses[6].value\r\n            summary_data.push(screening_data);\r\n            }\r\n\r\n        stevens_summary = [];\r\n\r\n\r\n        // Subcondition Data\r\n        for (let i = 0; i<this.super_condition_constants.length; i++) {\r\n            let summary_data_sub;\r\n\r\n\r\n            summary_data.push(summary_data_sub)\r\n        }\r\n\r\n        return summary_data;\r\n    }\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/hybrid/hybrid.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 529,
    "kind": "class",
    "name": "Hybrid",
    "memberof": "scripts/experiments/hybrid/hybrid.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid.js",
    "importStyle": "Hybrid",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 530,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 531,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "member",
    "name": "auto_mode",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#auto_mode",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "member",
    "name": "is_practice_trials",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#is_practice_trials",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "member",
    "name": "is_screening",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#is_screening",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "member",
    "name": "is_local_save",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#is_local_save",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "member",
    "name": "manual_scaling_factor",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#manual_scaling_factor",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "member",
    "name": "custom_subcondition_order",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#custom_subcondition_order",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 540,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 541,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 542,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 543,
    "kind": "member",
    "name": "raw_constants",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#raw_constants",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "member",
    "name": "current_experiment",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#current_experiment",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 545,
    "kind": "member",
    "name": "super_condition_constants",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#super_condition_constants",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#prepare_experiment",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 547,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 548,
    "kind": "member",
    "name": "custom_order_string",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#custom_order_string",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "prepare_hybrid_order",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#prepare_hybrid_order",
    "access": "public",
    "description": "",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#export_trial_data",
    "access": "public",
    "description": "When called, will save summary data and individual trial data into firebase.\nParameters are passed on the timeline",
    "lineNumber": 97,
    "params": [
      {
        "name": "jnd_summary_data",
        "types": [
          "*"
        ]
      },
      {
        "name": "stevens_summary_data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "get_jsPsych_data",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#get_jsPsych_data",
    "access": "public",
    "description": "Gets jsPsych trial with given filters. Only returns 'blank'\ntype trials since those are the only ones that save data.",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych data} entire jsPsych data object. Needs to be furtherly filtered later to be useful"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "filters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych data"
      ],
      "spread": false,
      "description": "entire jsPsych data object. Needs to be furtherly filtered later to be useful"
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "get_last_trial_data",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#get_last_trial_data",
    "access": "public",
    "description": "Returns the data of the last trial on the jsPsych data object",
    "lineNumber": 170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc array} last jsPsych trial data object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc array"
      ],
      "spread": false,
      "description": "last jsPsych trial data object"
    },
    "params": [
      {
        "name": "experiment",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "get_trial_data",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#get_trial_data",
    "access": "public",
    "description": "Returns releveant array of the experiment's trial data (in order from first to last)\nNon-relevant fields are ignored.\n\"Column order\" if downloaded to csv is \"randomized\" because trial data object is an unordered map",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} [{trial_0},{trial_1},...,{trial_n}]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "[{trial_0},{trial_1},...,{trial_n}]"
    },
    "params": []
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "get_summary_data",
    "memberof": "scripts/experiments/hybrid/hybrid.js~Hybrid",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/hybrid/hybrid.js~Hybrid#get_summary_data",
    "access": "public",
    "description": "Get's experiment relevant summary data.\nRelevant summary data includes: independent variables, overall JND, convergance JND (last 24), convergance results, trial count",
    "lineNumber": 234,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc[]} array of summary data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc[]"
      ],
      "spread": false,
      "description": "array of summary data"
    },
    "params": []
  },
  {
    "__docId__": 556,
    "kind": "file",
    "name": "scripts/experiments/hybrid/hybrid_timeline.js",
    "content": "import JND from \"/scripts/experiments/jnd/jnd.js\";\r\nimport Stevens from \"/scripts/experiments/stevens/stevens.js\";\r\nimport Hybrid from \"/scripts/experiments/hybrid/hybrid.js\";\r\nimport * as jnd_generators from '/scripts/experiments/jnd/jnd_timeline_generators.js'\r\nimport { correlation_dependencies } from \"../../helpers/correlation_dependencies.js\";\r\nimport {generate_welcome, generate_instructions, generate_ready_screen, generate_sitting_distance_screen} from '/scripts/experiment-timeline/instruction_screen/instruction_screen.js'\r\nimport { get_instructions, get_jspsych_instructions, generate_subcond_instruction_block } from \"/scripts/experiment-properties/instructions/instructions_controller.js\";\r\nimport { resolution_scaling, manual_resolution_scaling } from '/scripts/experiment-timeline/resolution_scaling/resolution_scaling.js';\r\nimport * as screening from '/scripts/experiment-timeline/screening/screening.js';\r\n\r\nconst JND_BLOCK_SIZE = 3;\r\nconst STEVENS_BLOCK_SIZE = 1;\r\n\r\n// =========================================================\r\n// INITIALIZING EXPERIMENT OBJECTS \r\nexport let hybrid_exp = new Hybrid(params);\r\nparams[\"custom_subcondition_order\"] = hybrid_exp.custom_order_string;\r\nexport let jnd_exp = new JND(params);\r\nexport let stevens_exp = new Stevens(params);\r\n\r\nhybrid_exp.jnd_constants = jnd_exp.sub_conditions_constants;\r\nhybrid_exp.stevens_constants = stevens_exp.sub_conditions_constants;\r\nhybrid_exp.prepare_hybrid_order();\r\n//console.log(hybrid_exp.super_condition_constants)\r\n\r\nlet timeline = [];\r\nconst address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\nconst STEVENS_EXCLUSION_VALUE = 0.75;\r\n\r\nconst isPractice = hybrid_exp.is_practice_trials;\r\nconst isScreening = hybrid_exp.is_screening;\r\nconst manual_scaling_factor = hybrid_exp.manual_scaling_factor;\r\n\r\njnd_exp.is_hybrid = true;\r\nstevens_exp.is_hybrid = true;\r\n\r\n// =========================================================\r\n// WELCOME TRIAL BLOCK\r\n\r\nlet welcome = generate_welcome(address, hybrid_exp);\r\n\r\n\r\ntimeline.push(welcome);\r\n\r\n// =========================================================\r\n// RESOLUTION SCALING\r\nif (manual_scaling_factor == \"none\") {\r\n  timeline.push(resolution_scaling);\r\n}\r\nelse {\r\n  console.log(\"Manual Scale Factor: \", manual_scaling_factor)\r\n  timeline.push(manual_resolution_scaling(manual_scaling_factor))\r\n}\r\n\r\n// =========================================================\r\n// SCREENING\r\n\r\n// CONDITIONAL: SKIP SCREENING IF FALSE\r\nif (isScreening == \"true\") {\r\n  timeline.push(screening.screeningQuestions);\r\n}\r\n\r\nlet ready = generate_ready_screen()\r\nlet hybrid_instructions = {\r\n  type: \"html-keyboard-response\",\r\n  stimulus: function () {\r\n    return get_instructions(hybrid_exp);\r\n  }\r\n}\r\n\r\nlet stevens_instructions = get_jspsych_instructions(stevens_exp);\r\n\r\nlet jnd_instructions = get_jspsych_instructions(jnd_exp);\r\n\r\n// CONDITIONAL: different timelines\r\nvar instruction_trials;\r\nif (isPractice == \"true\") {\r\n  let sample_steven_trials = stevens_exp.prepare_sample_trials();\r\n  let steven_sample_explanation = {\r\n    type: \"html-keyboard-response\",\r\n    choices: [32],\r\n    stimulus: `<font size=\"5\"> \r\n                <div align = 'center'>You will now see 5 sets of 3 graphs where the correlation value of the <b>middle</b> graph will vary.\r\n                <br> \r\n                <br>\r\n                The left and right graphs will have correlation values of either 0.0 or 1.0.\r\n                <br>\r\n                <br>\r\n                Each set of 3 graphs will be on-screen for 5 seconds.\r\n                <br>\r\n                <br> \r\n                <font size=\"5\"> Press Space to Continue`\r\n  }\r\n  instruction_trials = {\r\n    //timeline: [hybrid_instructions, stevens_instructions, steven_sample_explanation, ready]\r\n    timeline: [hybrid_instructions, stevens_instructions, ready]\r\n  };\r\n} else {\r\n  instruction_trials = {\r\n    timeline: [hybrid_instructions, stevens_instructions]\r\n  };\r\n  jnd_exp.practice_end = true;\r\n}\r\n\r\nlet jnd_instructions_timeline = {\r\n  timeline: [jnd_instructions, ready],\r\n  conditional_function: function () {\r\n    return !jnd_exp.practice_end;\r\n  }\r\n}\r\n\r\ntimeline.push(instruction_trials);\r\n\r\n\r\n\r\n\r\n// ---------------------------------------------------------\r\n// Stevens PRACTICE TIMELINE\r\nif (isPractice == \"true\") {\r\n\r\n  let sample_steven_trials = stevens_exp.prepare_sample_trials();\r\n  let stevens_practice_trial = stevens_exp.generate_trial(\"practice\");\r\n\r\n  let stevens_practice_timeline = {\r\n    timeline: [stevens_practice_trial],\r\n    loop_function: function (data) {\r\n      // For debugging, if you want to exit out of experiment, press q:\r\n      if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press) {\r\n        stevens_exp.end_practice_experiment();\r\n        stevens_exp.round_end = false;\r\n        console.log(\"!!!!!!!!!! Practice trials finished \");\r\n        return false;\r\n      }\r\n\r\n      if (stevens_exp.end_round()) {\r\n        console.log(\"Ending Round\")\r\n\r\n        // Save the midpoint for exclusion criteria calculations later\r\n        let curr_index = stevens_exp.curr_practice_condition_index;\r\n        stevens_exp.practice_trial_data[curr_index].push(stevens_exp.trial_data);\r\n        console.log(\"!!!!!!!!!!!!!!PRACTICE TRIAL DATA\")\r\n        console.log(stevens_exp.practice_trial_data[curr_index])\r\n        // If subcondtion should end\r\n        if (stevens_exp.end_sub_condition(\"practice\", curr_index)) {\r\n          // Check if there is another subcondition and increase the subcondition index\r\n          if (stevens_exp.curr_practice_condition_index < (stevens_exp.practice_conditions_constants.length - 1)) {\r\n            console.log(\"!!!!!!!!!! Moved to new sub condition at index \" + stevens_exp.curr_practice_condition_index + 1);\r\n          }\r\n          else {\r\n            // If there are no more subconditions, end the practice trials\r\n            console.log(\"!!!!!!!!!! Practice trials finished \");\r\n            stevens_exp.end_practice_experiment();\r\n            stevens_exp.round_end = false;\r\n          }\r\n          // Practice Timeline End. Goes to Practice End Trial to check exclusion criteria.\r\n          return false;\r\n        }\r\n        console.log(\"!!!!!!!! GO TO NEXT ROUND \");\r\n        stevens_exp.round_end = true;\r\n        return true;\r\n      }\r\n      // Else continue w/ current round:\r\n      return true;\r\n    }\r\n  };\r\n\r\n  let stop_stevens_practice = {\r\n    type: 'html-keyboard-response',\r\n    stimulus: \"\",\r\n    on_start: function (stop_stevens_practice) {\r\n      // Reset background color to feedback\r\n      document.body.style.backgroundColor = 'WHITE';\r\n\r\n      let practice_condition_data = stevens_exp.practice_trial_data[stevens_exp.curr_practice_condition_index];\r\n      let range = stevens_exp.calculate_exclusion_criteria_for_subcondition(practice_condition_data);\r\n      let results = `<div align = \"center\" style = \"text-align: left; float:left;\"> <font size = 6>\r\n                    Range: ${range}\r\n                    <br>\r\n                    </font>\r\n                    </div>`\r\n\r\n      let current_exlcusion = range < STEVENS_EXCLUSION_VALUE;\r\n      if (hybrid_exp.is_below_exclusion_0 == null) {\r\n        hybrid_exp.is_below_exclusion_0 = current_exlcusion;\r\n        // Test first practice sub condition\r\n        if (hybrid_exp.is_below_exclusion_0 && hybrid_exp.is_below_exclusion_1 == null) {\r\n          stevens_exp.num_trial_complete = 0;\r\n          stop_stevens_practice.stimulus = \"<div align = 'center'>\" + results + \"</div>\" +\r\n            \"<div align = 'center'> <font size = 6><br><br><p> This concludes the Stevens Task practice trials.</p>\" +\r\n            \"<br><br><p><b>Any questions?</b></p></font></div>\";\r\n          stevens_exp.end_practice_experiment();\r\n        }\r\n        else {\r\n          // Increase index here to avoid calculate_exclusion_criteria_for_subcondition() error\r\n          stevens_exp.curr_practice_condition_index++;\r\n          stop_stevens_practice.stimulus = \"<div align = 'center'>\" + results + \"</div>\" +\r\n            \"<div align = 'center'> <font size = 6><br><br><p> We will be doing one more practice round.</p>\" +\r\n            \"<br><br><p><b>Any questions?</b></p></font></div>\";\r\n        }\r\n      }\r\n      else {\r\n        hybrid_exp.is_below_exclusion_1 = current_exlcusion;\r\n        // Test for the second practice sub condition\r\n        if (hybrid_exp.is_below_exclusion_1) {\r\n          stop_stevens_practice.stimulus = \"<div align = 'center'>\" + results + \"</div>\" +\r\n            \"<div align = 'center'> <font size = 6><br><br><p> This concludes the Stevens Task practice trials. </p>\" +\r\n            \"<br><br><p><b>Any questions?</b></p></font></div>\";\r\n          stevens_exp.end_practice_experiment();\r\n        }\r\n        else {\r\n          stop_stevens_practice.stimulus = \"<div align = 'center'>\" + results + \"</div>\" +\r\n            \"<div align = 'center'> <font size = 6><br><br><p> You will be unable to participate in the experiment. Please exit the window.</p>\";\r\n          stop_stevens_practice.choices = jsPsych.NO_KEYS;\r\n        }\r\n      }\r\n    },\r\n    data: { type: 'instruction' }\r\n  }\r\n\r\n  let stevens_practice_timelines = {\r\n    timeline: [stevens_practice_timeline, stop_stevens_practice],\r\n    loop_function: function () {\r\n      if (hybrid_exp.is_below_exclusion_0 || hybrid_exp.is_below_exclusion_1) {\r\n        return false;\r\n      }\r\n      console.log(\"Repeat timeline\")\r\n\r\n      return true;\r\n    }\r\n  }\r\n\r\n  timeline.push(stevens_practice_timelines);\r\n\r\n}\r\n\r\nlet ready_experiment = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: \"<div align = 'center'> <font size = 20><p>Ready?<p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\r\n  data: { type: 'instruction' }\r\n}\r\n\r\ntimeline.push(ready_experiment);\r\n\r\n// JND Practice Timeline\r\n// ---------------------------------------------------------\r\n// PRE-SUBCONDITION INSTRUCTION BLOCK\r\nvar practice_jnd = jnd_exp.generate_trial(\"practice\");\r\n\r\n// This is a conditional block that will execute only if \r\n// the subcondition has a subcondition_instructions attribute \r\n// and it is the start of the subcondition.\r\nlet feedback = jnd_generators.generate_feedback_screen(jnd_exp);\r\n\r\n\r\nlet jnd_practice_finish = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: \"<div align = 'center'> <p>This concludes all Practice Trials. The experiment will continue alternating between both tasks.<p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\r\n  data: { type: 'instruction' }\r\n}\r\n\r\n\r\n// ---------------------------------------------------------\r\n// PRACTICE BLOCK\r\nlet subcond_practice_instruction_block = generate_subcond_instruction_block(jnd_exp, \"practice\");\r\n\r\nvar jnd_practice_block = {\r\n  timeline: [subcond_practice_instruction_block, practice_jnd, feedback], // We use same feedback block as that used in practice \r\n  loop_function: function (data) {\r\n    // Flag is always true for each trial since we display one trial for \r\n    // each condition on the practice                           \r\n\r\n    let key_presses = [];\r\n    data.values().forEach(function (elem) {\r\n      key_presses.push(elem.key_press);\r\n    });\r\n\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (key_presses.includes(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q'))) {\r\n      // Turn flag on \r\n      jnd_exp.converged = false;\r\n      jnd_exp.end_sub_condition_debug = false;\r\n      return false;\r\n    }\r\n\r\n    if (correlation_dependencies.is_end_of_sub_condition(jnd_exp, \"practice\")) {\r\n      jnd_exp.is_complete = true;\r\n      jnd_exp.end_sub_condition_debug = false;\r\n      // If there are still more practice conditions, increment current index\r\n      if (jnd_exp.current_practice_condition_index < (jnd_exp.practice_conditions_constants.length - 1)) {\r\n        jnd_exp.current_practice_condition_index++;\r\n        console.log(\"!!!!!!!!!! Moved to new practice condition at index \" + jnd_exp.current_practice_condition_index);\r\n        return true;\r\n      }\r\n      // Else end experiment\r\n      else {\r\n        // Turn flag on\r\n        jnd_exp.practice_end = true;\r\n        return false;\r\n      }\r\n    }\r\n    // continue with current practice condition\r\n    return true\r\n\r\n\r\n  }\r\n};\r\n\r\nlet jnd_practice_timeline = {\r\n  timeline: [jnd_practice_block, jnd_practice_finish],\r\n  conditional_function: function () {\r\n    console.log()\r\n    return !jnd_exp.practice_end;\r\n  }\r\n\r\n}\r\n\r\n\r\n// JND trials and blocks\r\nvar jnd_trial = jnd_exp.generate_trial(\"test\");\r\n\r\n// This is a conditional block that will execute only if \r\n// the subcondition has a subcondition_instructions attribute \r\n// and it is the start of the subcondition.\r\n\r\nlet subcond_instruction_block = generate_subcond_instruction_block(jnd_exp, \"test\");\r\n\r\nlet jnd_timeline = {\r\n  timeline: [subcond_instruction_block, jnd_trial, feedback],\r\n  loop_function: function (data) {\r\n    console.log(\"Current Experiment: \", hybrid_exp.current_experiment)\r\n    // Return true if timeline should continue\r\n    // Return false if timeline should end\r\n    let key_presses = [];\r\n    data.values().forEach(function (elem) {\r\n      key_presses.push(elem.key_press);\r\n    });\r\n\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (key_presses.includes(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q'))) {\r\n      return false;\r\n    }\r\n\r\n    // If subcondition should end:\r\n    if (correlation_dependencies.is_end_of_sub_condition(jnd_exp,\"test\")) {\r\n      jnd_exp.is_complete = true;\r\n      jnd_exp.end_sub_condition_debug = false;\r\n\r\n      // If there are still more subconditions, increment current index\r\n      if (jnd_exp.current_sub_condition_index < (jnd_exp.sub_conditions_constants.length - 1)) {\r\n        // If current block should end\r\n        //console.log(\"End Block?\")\r\n        //console.log((jnd_exp.current_sub_condition_index + 1) % JND_BLOCK_SIZE == 0)\r\n        jnd_exp.current_sub_condition_index++;\r\n\r\n        if ((jnd_exp.current_sub_condition_index) % JND_BLOCK_SIZE == 0) {\r\n          console.log(\"!!!!!! JND Block Ended Moving to Stevens Block\")\r\n          hybrid_exp.current_experiment = \"Stevens\";\r\n          return false;\r\n        }\r\n        console.log(\"!!!!!!!!!! Moved to new sub condition at index \" + jnd_exp.current_sub_condition_index);\r\n        return true;\r\n      }\r\n      else {\r\n        if ((jnd_exp.current_sub_condition_index + 1) % JND_BLOCK_SIZE == 0) {\r\n          console.log(\"!!!!!! JND Block Ended Moving to Stevens Block\")\r\n          hybrid_exp.current_experiment = \"Stevens\";\r\n        }\r\n        return false\r\n      }\r\n    }\r\n    // Else continue with current subcondition:\r\n    else {\r\n      return true;\r\n    }\r\n  },\r\n  on_finish: function (data) {\r\n\r\n    jnd_exp.trial_data = data;\r\n  }\r\n};\r\n\r\n// Stevens Trial\r\nlet stevens_trial = stevens_exp.generate_trial(\"test\");\r\n\r\nlet stevens_0_timeline = {\r\n  timeline: [stevens_trial],\r\n  loop_function: function (data) {\r\n    // Return true if timeline should continue\r\n    // Return false if timeline should end\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press) {\r\n      return false;\r\n    }\r\n    let curr_index = stevens_exp.current_sub_condition_index;\r\n    // If spacebar is pressed and we can end the round (there was at least 1 input)\r\n    if (stevens_exp.end_round()) {\r\n      // Save the midpoint data\r\n      stevens_exp.estimated_mid_values[curr_index].push(stevens_exp.trial_data.estimated_mid)\r\n      // If it is also the end of the subcondition move on to the next subcconditon \r\n      // or end the experiment if no more subconditions are left\r\n      if (stevens_exp.end_sub_condition(\"test\", curr_index)) {\r\n        console.log(\"Stevens End of Subconditon\")\r\n        if (stevens_exp.current_sub_condition_index < (stevens_exp.sub_conditions_constants.length - 1)) {\r\n          stevens_exp.input_count_array = new Array(stevens_exp.sub_conditions_constants[stevens_exp.current_sub_condition_index].trials_per_round).fill(0);\r\n          stevens_exp.current_sub_condition_index++;\r\n        }\r\n        console.log(\"Switching to JND\")\r\n        hybrid_exp.current_experiment = \"JND\";\r\n        return false;\r\n      }\r\n      else {\r\n        console.log(\"!!!!!!!! GO TO NEXT ROUND \");\r\n        stevens_exp.round_end = true;\r\n        return true;\r\n      }\r\n    }\r\n    // Else continue with current Round:\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nlet stevens_1_timeline = {\r\n  timeline: [stevens_trial],\r\n  loop_function: function (data) {\r\n    // Return true if timeline should continue\r\n    // Return false if timeline should end\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press) {\r\n      return false;\r\n    }\r\n    let curr_index = stevens_exp.current_sub_condition_index;\r\n    // If spacebar is pressed and we can end the round (there was at least 1 input)\r\n    if (stevens_exp.end_round()) {\r\n      // Save the midpoint data\r\n      console.log(stevens_exp.estimated_mid_values)\r\n      stevens_exp.estimated_mid_values[curr_index].push(stevens_exp.trial_data.estimated_mid)\r\n\r\n      // If it is also the end of the subcondition move on to the next subcconditon \r\n      // or end the experiment if no more subconditions are left\r\n      if (stevens_exp.end_sub_condition(\"test\", curr_index)) {\r\n        console.log(\"Stevens End of Subconditon\")\r\n        if (stevens_exp.current_sub_condition_index < (stevens_exp.sub_conditions_constants.length - 1)) {\r\n          stevens_exp.input_count_array = new Array(stevens_exp.sub_conditions_constants[stevens_exp.current_sub_condition_index].trials_per_round).fill(0);\r\n\r\n          stevens_exp.current_sub_condition_index++;\r\n          console.log(\"!!!!!!!!!! Moved to new sub condition at index \" + stevens_exp.current_sub_condition_index);\r\n        }\r\n        else {\r\n          stevens_exp.end = true;\r\n\r\n        }\r\n        return false;\r\n      }\r\n      else {\r\n        console.log(\"!!!!!!!! GO TO NEXT ROUND \");\r\n        stevens_exp.round_end = true;\r\n        return true;\r\n      }\r\n    }\r\n    // Else continue with current Round:\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n\r\nlet hybrid_timeline = {\r\n  timeline: [stevens_0_timeline, jnd_instructions_timeline, jnd_practice_timeline, jnd_timeline, stevens_1_timeline],\r\n  loop_function: function (data) {\r\n    // Return false if timeline should end\r\n    let key_presses = [];\r\n    data.values().forEach(function (elem) {\r\n      key_presses.push(elem.key_press);\r\n    });\r\n\r\n    console.log(\"Stevens index: \", stevens_exp.current_sub_condition_index)\r\n    console.log(\"JND index: \", jnd_exp.current_sub_condition_index);\r\n\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (key_presses.includes(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q'))) {\r\n      return false;\r\n    }\r\n    console.log(\"Current Experiment: \")\r\n    console.log(hybrid_exp.current_experiment)\r\n    if (stevens_exp.end) {\r\n      return false\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\ntimeline.push(hybrid_timeline);\r\n\r\nvar experiment_end = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: '<div align = \"center\">' +\r\n    '<p><font size = 10>You have completed the experiment!<p></font>' +\r\n    '<br>' +\r\n    'You will be redirected to an optional survey.' +\r\n    '</div>',\r\n  on_start: function () {\r\n    let jnd_summary_data = jnd_exp.get_summary_data();\r\n    let stevens_summary_data = stevens_exp.get_summary_data();\r\n    hybrid_exp.export_trial_data(jnd_summary_data, stevens_summary_data)\r\n\r\n    // Reset background color to feedback\r\n    document.body.style.backgroundColor = jnd_exp.trial_data.feedback_background_color;\r\n  }\r\n};\r\ntimeline.push(experiment_end);\r\n\r\n\r\n// =========================================================\r\n// START JSPSYCH\r\n\r\njsPsych.init({\r\n  timeline: timeline,\r\n  on_finish: function () {\r\n\r\n    // jsPsych.data.displayData();\r\n    if (jnd_exp.is_complete) {\r\n      window.location.replace(\"https://ubcarts.ca1.qualtrics.com/jfe/form/SV_eW1fbmxMHLoZFzf\");\r\n    } else {\r\n      window.location.replace(address);\r\n    }\r\n  }\r\n});\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/hybrid/hybrid_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 557,
    "kind": "variable",
    "name": "JND_BLOCK_SIZE",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~JND_BLOCK_SIZE",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 558,
    "kind": "variable",
    "name": "STEVENS_BLOCK_SIZE",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~STEVENS_BLOCK_SIZE",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 559,
    "kind": "variable",
    "name": "hybrid_exp",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~hybrid_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": "{hybrid_exp}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/hybrid/hybrid.js~Hybrid"
      ]
    }
  },
  {
    "__docId__": 560,
    "kind": "variable",
    "name": "jnd_exp",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~jnd_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": "{jnd_exp}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/jnd/jnd.js~JND"
      ]
    }
  },
  {
    "__docId__": 561,
    "kind": "variable",
    "name": "stevens_exp",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~stevens_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": "{stevens_exp}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/stevens/stevens.js~Stevens"
      ]
    }
  },
  {
    "__docId__": 562,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 563,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 564,
    "kind": "variable",
    "name": "STEVENS_EXCLUSION_VALUE",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~STEVENS_EXCLUSION_VALUE",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 565,
    "kind": "variable",
    "name": "isPractice",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~isPractice",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 566,
    "kind": "variable",
    "name": "isScreening",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~isScreening",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 567,
    "kind": "variable",
    "name": "manual_scaling_factor",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~manual_scaling_factor",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 568,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 569,
    "kind": "variable",
    "name": "ready",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~ready",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 570,
    "kind": "variable",
    "name": "hybrid_instructions",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~hybrid_instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 571,
    "kind": "variable",
    "name": "stevens_instructions",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~stevens_instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 572,
    "kind": "variable",
    "name": "jnd_instructions",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~jnd_instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 573,
    "kind": "variable",
    "name": "jnd_instructions_timeline",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~jnd_instructions_timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"conditional_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 574,
    "kind": "variable",
    "name": "ready_experiment",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~ready_experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 575,
    "kind": "variable",
    "name": "practice_jnd",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~practice_jnd",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 576,
    "kind": "variable",
    "name": "feedback",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~feedback",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 253,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 577,
    "kind": "variable",
    "name": "jnd_practice_finish",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~jnd_practice_finish",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 578,
    "kind": "variable",
    "name": "subcond_practice_instruction_block",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~subcond_practice_instruction_block",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 265,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 579,
    "kind": "variable",
    "name": "jnd_practice_block",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~jnd_practice_block",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 580,
    "kind": "variable",
    "name": "jnd_practice_timeline",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~jnd_practice_timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 309,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"conditional_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 581,
    "kind": "variable",
    "name": "jnd_trial",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~jnd_trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 320,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 582,
    "kind": "variable",
    "name": "subcond_instruction_block",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~subcond_instruction_block",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 326,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 583,
    "kind": "variable",
    "name": "jnd_timeline",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~jnd_timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 584,
    "kind": "variable",
    "name": "stevens_trial",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~stevens_trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 384,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 585,
    "kind": "variable",
    "name": "stevens_0_timeline",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~stevens_0_timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 386,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 586,
    "kind": "variable",
    "name": "stevens_1_timeline",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~stevens_1_timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 425,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 587,
    "kind": "variable",
    "name": "hybrid_timeline",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~hybrid_timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 470,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 588,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/hybrid/hybrid_timeline.js",
    "static": true,
    "longname": "scripts/experiments/hybrid/hybrid_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/hybrid/hybrid_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 497,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 589,
    "kind": "file",
    "name": "scripts/experiments/jnd/jnd.js",
    "content": "import { balance_subconditions } from '/scripts/experiment-properties/balancing/balancing_controller.js'\r\nimport { plot_distributions } from \"/scripts/experiment-properties/graphing/graphing_controller.js\";\r\nimport { print_curr_trial } from \"/scripts/experiment-properties/counter/counter_controller.js\";\r\nimport { initialize_random_order } from '/scripts/experiment-properties/balancing/generators/random_generator.js'\r\nimport { get_data } from '/scripts/experiment-properties/data/data_controller.js'\r\nimport { randomize_position, check_params } from '/scripts/helpers/experiment_helpers.js'\r\nimport { correlation_dependencies } from \"../../helpers/correlation_dependencies.js\";\r\nimport { generate_initial_distribution, generate_adjusted_distribution } from '../../experiment-properties/distribution/distribution_controller.js';\r\n\r\nexport default class JND {\r\n\r\n  /**\r\n   * Initializes a JND experiment object.\r\n   *\r\n   * @param  {assoc array}  Parameters passed from routing.\r\n   */\r\n  constructor(params) {\r\n\r\n    console.log(\"jnd.js log\", params)\r\n\r\n    let trial_structure = params[\"trial_structure\"];\r\n    let condition_name = params[\"condition\"];\r\n    let graph_type = params[\"graph_type\"];\r\n    let balancing_type = params[\"balancing\"];\r\n    let conversion_factor = params[\"conversion_factor\"];\r\n\r\n    this.condition_name = condition_name;\r\n    this.condition_group = this.condition_name.split('_')[0]; // Mostly to handle \"distractor\" conditions.\r\n                                                              // TODO: Should have a better flag for it.\r\n    this.subject_id = params[\"subject_id\"];\r\n    this.subject_initials = params[\"subject_initials\"];\r\n    this.auto_mode = false;\r\n\r\n    this.is_practice_trials = params[\"is_practice_trials\"];\r\n    this.is_screening = params[\"is_screening\"];\r\n    this.manual_scaling_factor = params[\"manual_scaling_factor\"]\r\n    this.custom_subcondition_order = params[\"custom_subcondition_order\"];\r\n\r\n    \r\n    this.is_complete = false; // whether completing at least ONE subcondition\r\n\r\n    // ========================================\r\n    // PARAMETER CHECKING\r\n\r\n    // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\r\n\r\n    check_params(this, \"jnd\", trial_structure, graph_type, balancing_type);\r\n\r\n    // ========================================\r\n    // EXPERIMENT CONSTANTS\r\n    this.EXPERIMENT_NAME = \"JND\";\r\n    this.PIXELS_PER_CM = conversion_factor;\r\n    this.MIN_CORRELATION = 0.0;\r\n    this.MAX_CORRELATION = 1.0;\r\n    this.MIN_TRIALS = 24;\r\n    this.MAX_TRIALS = 52;\r\n    this.WINDOW_SIZE = 24;\r\n    this.WINDOW_INTERVAL = 3;\r\n    this.CONVERGENCE_THRESHOLD = 0.75;\r\n    this.INCORRECT_MULTIPLIER = 3;\r\n    this.MAX_PRACTICE_TRIALS = 3;\r\n\r\n\r\n    // FLAGS\r\n    this.converged = false; // required for data saving logic\r\n    this.practice_end = false; // required for counter logic \r\n\r\n    // ========================================\r\n    // PRACTICE EXPERIMENT VARIABLES\r\n\r\n    this.practice_conditions_constants;\r\n    this.current_practice_condition_index;\r\n\r\n    // ========================================\r\n    // TEST EXPERIMENT VARIABLES\r\n\r\n    this.sub_condition_order;\r\n    this.sub_conditions_constants;\r\n    this.current_sub_condition_index;\r\n    this.adjusted_quantity_matrix = {};   // The matrix is in this format:\r\n                                          // { sub_condition_index : [adjusted_quantity1, adjusted_quantity2 ... ] }\r\n    this.adjusted_quantity_practice = [];\r\n\r\n\r\n    // ========================================\r\n    // DEBUG VARIABLES\r\n    this.end_sub_condition_debug = false;\r\n\r\n    // ========================================\r\n    // CURRENT TRIAL DATA\r\n\r\n    // Plotting-related vars\r\n    this.left_coordinates = \"\";\r\n    this.right_coordinates = \"\";\r\n    this.distractor_coordinates = \"\";\r\n\r\n    // JsPsych trial_data for the current trial\r\n    this.trial_data = \"\";\r\n\r\n    // ========================================\r\n    // PREPARE EXPERIMENT\r\n\r\n    // Extract raw constants\r\n    this.raw_constants = get_data(this);\r\n\r\n    // Prepare experiment + practice data\r\n    this.prepare_experiment();\r\n    this.prepare_practice();\r\n\r\n    // ========================================\r\n    // Adjusted Statistic Values\r\n    // ** Previously were set inside the get_next_adjusted_statistic method.\r\n    // ** Replacing constants into variables to be set inside the method.\r\n    let correct_statistic_increment;\r\n    let incorrect_statistic_increment;\r\n  }\r\n\r\n  /**\r\n   * Orders the input data according to balancing type and\r\n   * initializes the JND object's variables.\r\n   *\r\n   * @param  balancing_type {string}                             Type of balancing. Currently only latin_square\r\n   *                                                             is supported.\r\n   *         dataset {[{assoc array}, {assoc array}, ... ]}      The data to be ordered.\r\n   */\r\n  prepare_experiment() {\r\n\r\n    let dataset = this.raw_constants;\r\n\r\n    this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length, dataset, \"block\", this.custom_subcondition_order);\r\n\r\n    var ordered_dataset = [];\r\n\r\n    // Order the data set according to the latin square\r\n    // Initialize adjusted_quantity_matrix size\r\n    for (let i=0; i < this.sub_condition_order.length; i++){\r\n      ordered_dataset[i] = dataset[this.sub_condition_order[i]];\r\n      this.adjusted_quantity_matrix[i] = [];\r\n    }\r\n\r\n    this.sub_conditions_constants = ordered_dataset;\r\n    this.current_sub_condition_index = 0;\r\n  }\r\n\r\n  /**\r\n   * Orders the input dataset by randomizing it, and initializes the practice variables.\r\n   *\r\n   * @param  dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered.\r\n   */\r\n  prepare_practice() {\r\n\r\n    let dataset = this.raw_constants;\r\n\r\n    this.sub_condition_order = initialize_random_order(dataset.length);\r\n    let practice_dataset = [];\r\n    this.practice_conditions_constants = this.sub_conditions_constants.slice(0,1);\r\n    console.log(this.practice_conditions_constants)\r\n\r\n    // Order the data set according to the latin square\r\n    // Initialize adjusted_quantity_matrix size\r\n    for (let i=0; i < this.practice_conditions_constants.length; i++){\r\n      console.log('subcondition order length ' + this.sub_condition_order.length)\r\n      practice_dataset[i] = dataset[this.sub_condition_order[i]];\r\n      this.adjusted_quantity_practice[i] = [];\r\n    }\r\n\r\n    //practice_dataset[this.sub_condition_order.length] = dataset[this.sub_condition_order[1]]\r\n    //console.log('practice_dataset', practice_dataset)\r\n\r\n    // Set practice trials\r\n    this.current_practice_condition_index = 0;\r\n  }\r\n\r\n  /**\r\n   * Generates a JND trial object for use in the JsPsych timeline.\r\n   *\r\n   * @param  type {string}             \"test\" or \"practice\"\r\n   * @return trial {object}\r\n   */\r\n  generate_trial(block_type) {\r\n\r\n    if ((block_type !== \"test\") && (block_type !== \"practice\")) {throw Error(block_type + \" is not supported.\")};\r\n \r\n    // Initialize a variable for this so it is usable inside on_start\r\n    var jnd_exp = this;\r\n\r\n    var trial = {\r\n      type:'d3-plot-keyboard-response',\r\n      block_type: block_type,\r\n      choices:['z', 'm', 'q', 't','w'], //q is exit button (for debugging)\r\n      order: \"jnd\",\r\n      response_ends_trial: true,\r\n      post_trial_gap: 50,\r\n      exp_obj: jnd_exp,\r\n      plot_distributions: plot_distributions,\r\n      print_curr_trial: print_curr_trial,\r\n      data: {},\r\n      on_start: function(trial){ // NOTE: on_start takes in trial var\r\n        jnd_exp.cur_exp_type = block_type;\r\n        \r\n        if (jnd_exp.auto_mode) {\r\n          trial.post_trial_gap = 12;\r\n          trial.trial_duration = 12;\r\n        }\r\n\r\n        // Set the constants to be used:\r\n        var index = correlation_dependencies.get_subcondition_index(jnd_exp, block_type);\r\n        var constants = correlation_dependencies.get_constants(jnd_exp, block_type, index);\r\n\r\n        // Calculate adjusted value\r\n        var adjusted_value = correlation_dependencies.calculate_adjusted_value(jnd_exp, constants, block_type);\r\n\r\n        // Handling saving this trial's data:\r\n        jnd_exp.handle_data_saving(trial, block_type, constants, index, adjusted_value);\r\n\r\n        // Generate distributions\r\n        var base_coordinates = generate_initial_distribution(constants)\r\n        var adjusted_coordinates = generate_adjusted_distribution(constants, adjusted_value);\r\n\r\n        // trial block for symmetric jnd\r\n        if (jnd_exp.condition_group === \"symmetric\"){\r\n          var adjusted_value_high = constants.adjusted_correlation_high;\r\n          var adjusted_value_low = constants.adjusted_correlation_low;\r\n\r\n          jnd_exp.handle_data_saving(trial, block_type, constants, index, adjusted_value_high);\r\n          jnd_exp.handle_data_saving(trial, block_type, constants, index, adjusted_value_low);\r\n\r\n          var low_coordinates = generate_adjusted_distribution(constants, adjusted_value_low);\r\n          var high_coordinates = generate_adjusted_distribution(constants, adjusted_value_high)\r\n\r\n        }\r\n\r\n        if (jnd_exp.condition_group === \"distractor\"){\r\n          let dist_attributes = constants.dist_attributes;\r\n          let dist_correlation = constants.dist_attributes.correlation;\r\n          var left_dist_coordinates = generate_adjusted_distribution(dist_attributes, dist_correlation);\r\n          var right_dist_coordinates = generate_adjusted_distribution(dist_attributes, dist_correlation);\r\n\r\n          jnd_exp.distractor_coordinates = [left_dist_coordinates, right_dist_coordinates];\r\n        }\r\n\r\n        // Randomize position of the base and adjusted graphs\r\n        var result = randomize_position(trial,\r\n                                       base_coordinates,\r\n                                       adjusted_coordinates,\r\n                                       constants,\r\n                                       adjusted_value);\r\n        // // For testing purposes, can force R graph to have greater correlation\r\n        // var result = force_greater_right_position(trial,\r\n        //                                           base_coordinates,\r\n        //                                           adjusted_coordinates,\r\n        //                                           constants.base_correlation,\r\n        //                                           adjusted_correlation);\r\n\r\n        // Set up D3 variables for plotting\r\n        jnd_exp.coordinates = [result.left, result.right];\r\n\r\n        jnd_exp.trial_data = trial.data;\r\n\r\n        if (constants.task) {\r\n          console.log(\"[TASK TYPE]: \" + constants.task);\r\n        }\r\n        jnd_exp.trial_data = trial.data; \r\n        trial.exp_obj = jnd_exp;\r\n        console.log(\"[RIGHT] Correlation: \" + trial.data.right_correlation);\r\n        console.log(\"[RIGHT] Num points: \" + trial.data.right_num_points);\r\n\r\n        console.log(\"[LEFT] Correlation: \" + trial.data.left_correlation);\r\n        console.log(\"[LEFT] Num points: \" + trial.data.left_num_points);\r\n\r\n      },\r\n      on_finish: function(data){ // NOTE: on_finish takes in data var\r\n        // Set the constants to be used:\r\n        if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('t') || jnd_exp.auto_mode) {\r\n          // Turn on automation\r\n          jnd_exp.auto_mode = true;\r\n          console.log(Math.random() < 0.5 ? \"'z' pressed\" : \"'m' pressed\");\r\n          data.key_press = Math.random() < 0.5 ? jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z') : jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m');\r\n        }\r\n        let index = correlation_dependencies.get_subcondition_index(jnd_exp, block_type);\r\n        let constants = correlation_dependencies.get_constants(jnd_exp, block_type, index);\r\n\r\n        data.correct = jnd_exp.check_response(data, constants);\r\n        console.log(\"RESPONSE: \" + data.correct);\r\n      }\r\n    };\r\n\r\n\r\n    return trial;\r\n  }\r\n\r\n  /**\r\n * Generates conditional timeline instruction for JND and Stevens hybrid conditions.\r\n * @returns {jsPsych trial}\r\n */\r\n genereate_hybrid_instruction(){\r\n  let jnd_exp = this\r\n  let instructions = `<div align = 'center'>\r\n                        <p> Please exit full screen mode and switch to the Stevens Task.\r\n                          <br> Do not close this window. You will return to it when the Stevens Task is completed.\r\n                          <br> Enter full screen mode again and press any key to continue when you return.\r\n                        </p>\r\n                      </div>`\r\n\r\n  let instruction_trial = {\r\n    type: 'html-keyboard-response',\r\n    stimulus: instructions\r\n  };\r\n  // conditional timeline wrapper\r\n  let block_size = 3;\r\n  var hybrid_timeline = {\r\n    timeline: [instruction_trial],\r\n    conditional_function: function() {\r\n      console.log(\"Testing hybrid?!!!!!!!!!!\")\r\n      console.log(jnd_exp.end_sub_condition() && (jnd_exp.current_sub_condition_index + 1) % block_size == 0)\r\n      // if it is the end of the Sub Condition and the end of a block (assumes block size is 3 for hybrid tasks)\r\n      if (jnd_exp.end_sub_condition() && (jnd_exp.current_sub_condition_index + 1) % block_size == 0) {\r\n        console.log(\"Hybrid case!\")\r\n        return true;\r\n      }\r\n      return false; \r\n    }\r\n  };\r\n\r\n  return hybrid_timeline\r\n}\r\n\r\n  /**\r\n   * Handles saving the relevant data on a given trial.\r\n   *\r\n   * For reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\r\n   * trial_variables =\r\n   *       {type: 'jnd',\r\n   *       run_type: '',\r\n   *       left_correlation: '',\r\n   *       right_correlation: '',\r\n   *       };\r\n   *\r\n   * These are variables created WITHIN the trial logic that were not present in excel (but need to be\r\n   * outputted to results).\r\n   * export_variables =\r\n   *       {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\r\n   *        balanced_sub_condition: '',  // Index of sub_condition according to balancing order\r\n   *        jnd: '',\r\n   *        base_correlation: '',\r\n   *        adjusted_value: '',\r\n   *        correct: '',\r\n   *       };\r\n   *\r\n   * @param trial {object}\r\n   *        block_type {string}           \"test\" or \"practice\"\r\n   *        constants {assoc array}\r\n   *        index {integer}\r\n   *        adjusted_value {double}\r\n   */\r\n  handle_data_saving(trial, block_type, constants, index, adjusted_value) {\r\n\r\n    // Add all constants from excel\r\n    trial.data = constants;\r\n\r\n    // Adding constants that required computation (not from excel)\r\n    trial.data.type = \"jnd\";\r\n    trial.data.adjusted_value = adjusted_value;\r\n\r\n    if (constants.task) {\r\n\r\n      switch (constants.task) {\r\n        case \"numerosity\":\r\n          trial.data.adjusted_value_type = \"number of points\";\r\n          trial.data.jnd = Math.abs(adjusted_value - constants.num_points);\r\n          break;\r\n        case \"correlation\":\r\n          trial.data.adjusted_value_type = \"correlation\";\r\n          trial.data.jnd = Math.abs(adjusted_value - constants.base_correlation);\r\n          break;\r\n        default:\r\n          throw Error(\"Calculations for jnd has not been handled for task: \" + constants.task);\r\n      }\r\n\r\n    } else {\r\n      trial.data.jnd = Math.abs(adjusted_value - constants.base_correlation);\r\n    }\r\n\r\n    trial.data.sub_condition = index;\r\n    trial.data.balanced_sub_condition = this.sub_condition_order[index];\r\n\r\n    // Block specific saves\r\n    let adjusted_quantity_matrix = correlation_dependencies.get_adjusted_quantity_matrix(this, block_type, index);\r\n    adjusted_quantity_matrix[index].push(adjusted_value);\r\n    trial.data.run_type = block_type;\r\n  }\r\n\r\n\r\n  /**\r\n   * Given a JND trial data, determines whether response is\r\n   * correct or not.\r\n   *\r\n   * @param  {JsPsych.data}  data\r\n   * @param. {object}        constants\r\n   * @return {boolean}\r\n   */\r\n  check_response(data, constants) {\r\n\r\n    // For debugging purposes:\r\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q')){\r\n      //data.correct = -1;\r\n      return -1;\r\n    }\r\n    \r\n    // Skip current subcondition\r\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('w')){\r\n      this.end_sub_condition_debug = true;\r\n      //data.correct = -2; \r\n      return -2; // skip subcondition flag\r\n    }\r\n    \r\n\r\n    let right_greater_clause;\r\n    let left_greater_clause;\r\n\r\n    if (!constants.task || constants.task === \"correlation\") {\r\n\r\n      right_greater_clause = data.right_correlation > data.left_correlation;\r\n      left_greater_clause = data.left_correlation > data.right_correlation;\r\n\r\n    } else if (constants.task === \"numerosity\") {\r\n\r\n      right_greater_clause = data.right_num_points > data.left_num_points;\r\n      left_greater_clause = data.left_num_points > data.right_num_points;\r\n\r\n    } else {\r\n      throw Error(\"Check response function has not been handled for task: \" + constants.task);\r\n    }\r\n\r\n    if (right_greater_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m')) ||\r\n        left_greater_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z'))){\r\n\r\n      //data.correct = true;\r\n      return true;\r\n    }\r\n    // Assuming that if base_correlation = adjusted_correlation, at this point\r\n    // any user choice is wrong.\r\n    else {\r\n      //data.correct = false;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When called, will save individual trial data into a CSV.\r\n   */\r\n  export_trial_data() {\r\n\r\n    var summary_data = [];\r\n\r\n    let screening_json = jsPsych.data.get().filter({trial_type: 'survey-html-form'}).select('responses').values[0]\r\n    // Participant information\r\n    // indexing might need to be genralized better if there are previous trials before the start of the experiment\r\n    if(screening_json){\r\n      console.log('Saving Screening')\r\n      let screening_responses = JSON.parse(screening_json)\r\n      let screening_data = {};\r\n      screening_data.education = screening_responses[2].value\r\n      screening_data.stat_classes_take = screening_responses[3].value\r\n      screening_data.vision = screening_responses[4].value\r\n      screening_data.gender = screening_responses[5].value\r\n      screening_data.age = screening_responses[6].value\r\n      summary_data.push(screening_data);\r\n    }\r\n\r\n    summary_data = summary_data.concat(this.get_summary_data())\r\n\r\n    var trial_data = jsPsych.data.get().filter(this.condition_name=='test_hybrid_scatter'?{type: 'jnd'}:{type: 'jnd', run_type: 'test'})\r\n                                       .filterCustom(function(x){ //Don't include the exit trials\r\n                                         return x.correct != -1;\r\n                                       })\r\n                                       // JND's trial variables\r\n                                       .ignore('type')\r\n                                       .ignore('run_type')\r\n                                       .ignore('left_correlation')\r\n                                       .ignore('right_correlation')\r\n                                       // These are variables forced on by jsPsych\r\n                                       .ignore('stimulus')\r\n                                       .ignore('key_press')\r\n                                       .ignore('choices')\r\n                                       .ignore('trial_type')\r\n                                       .ignore('trial_index')\r\n                                       .ignore('time_elapsed')\r\n                                       .ignore('internal_node_id');\r\n    // // TODO: js converting key_string to use double quotes, needs to be single to pass into ignore() fxn\r\n    // //\r\n    // // for (var key in jnd_exp.trial_variables){\r\n    // //  var key_string = '${key}';\r\n    // //  trial_data.ignore(key);\r\n    // // }\r\n\r\n    if(this.is_local_save === \"true\"){\r\n      trial_data.localSave('csv', string);    \r\n    }\r\n    else{\r\n      trial_data = JSON.parse(trial_data.json());\r\n      var data = summary_data.concat(trial_data);\r\n      data = JSON.stringify(data);\r\n      // var string = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_jnd_trial_results.csv\";\r\n  \r\n      // // TEMPORARY: test file save locally \r\n      // trial_data.localSave('csv', string);\r\n  \r\n      // Firebase upload\r\n      $.post(\"/api/experiment_data\",\r\n              {trial_data: trial_data, \r\n                summary_data: summary_data, \r\n                experiment: \"JND\", \r\n                condition: params[\"condition\"], \r\n                prolific_pid: params[\"subject_id\"], \r\n                study_id: params[\"study_id\"], \r\n                session_id: params[\"session_id\"]},\r\n              function(data, status) {\r\n                console.log(\"Data: \" + data + \"\\nStatus: \" + status)\r\n              }\r\n            ); \r\n    }\r\n\r\n  }\r\n\r\n  /* SUMMARY DATA */\r\n\r\n  get_summary_data(){\r\n    let summary_data = []\r\n    const condition_num = this.sub_conditions_constants.length;\r\n    for (let i = 0; i<condition_num ; i++){\r\n      let summary_data_sub = this.get_summary_data_sub(i)\r\n      summary_data.push(summary_data_sub);\r\n    }\r\n    return summary_data;\r\n  }\r\n\r\n  get_summary_data_sub(i){\r\n    console.log(\"Getting summary index \", i)\r\n    var condition_data = jsPsych.data.get().filter({type: 'jnd', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                            .filterCustom(function(x){ //Don't include the exit trials\r\n                                              return x.correct != -1;\r\n                                            })\r\n    var constants = this.sub_conditions_constants[i];   \r\n    var summary_data_sub = {\"base\":constants.base_correlation,\r\n                            \"above\":constants.converge_from_above, \r\n                            \"block\":constants.block ,\r\n                            \"num_points\":constants.num_points,\r\n                            \"jnd\":condition_data.select('jnd').mean(),\r\n                            \"trials\":condition_data.count(),\r\n                            \"rt\":condition_data.select('rt').mean(),\r\n                            \"converged\": condition_data.last().select('converged').values[0]\r\n                          };\r\n    return summary_data_sub;\r\n  }\r\n\r\n  /**\r\n   * When called, will save aggregated trial data into a CSV.\r\n   */\r\n  export_summary_data() {\r\n    if (!confirm(\"Would you like to save the test summary?\")){\r\n        return;\r\n    }\r\n\r\n    var csv = 'SUBJECT_ID,SUBJECT_INITIALS,PLOT,BASE,ABOVE,NUM_POINTS,JND,TRIALS\\n';\r\n\r\n    var data = [];\r\n\r\n    // Organize each row of the csv\r\n    for (let i = 0; i<this.sub_conditions_constants.length; i++){\r\n      var row = [this.subject_id, this.subject_initials, this.condition_name];\r\n      var constants = this.sub_conditions_constants[i];\r\n      var condition_data = jsPsych.data.get().filter({type: 'jnd', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                             .filterCustom(function(x){ //Don't include the exit trials\r\n                                                return x.correct != -1;\r\n                                             })\r\n      \r\n\r\n      row.push(constants.base_correlation);\r\n      row.push(constants.converge_from_above);\r\n      row.push(constants.num_points);\r\n      row.push(condition_data.select('jnd').mean());\r\n      row.push(condition_data.count());\r\n      row.push(condition_data.select('rt').mean())\r\n      row.push(condition_data.last().select('converged').values[0])\r\n      console.log(row)\r\n\r\n      data.push(row);\r\n    }\r\n\r\n    // Append each row\r\n    data.forEach(function(row){\r\n      csv += row.join(',');\r\n      csv += \"\\n\";\r\n    });\r\n\r\n    var hiddenElement = document.createElement('a');\r\n    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\r\n    hiddenElement.target = '_blank';\r\n    hiddenElement.download = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_jnd_summary_results.csv\";\r\n    hiddenElement.click();\r\n  }\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/jnd/jnd.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 590,
    "kind": "class",
    "name": "JND",
    "memberof": "scripts/experiments/jnd/jnd.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd.js~JND",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd.js",
    "importStyle": "JND",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 591,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#constructor",
    "access": "public",
    "description": "Initializes a JND experiment object.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "Parameters",
        "description": "passed from routing."
      }
    ]
  },
  {
    "__docId__": 592,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 593,
    "kind": "member",
    "name": "condition_group",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#condition_group",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 594,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 595,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 596,
    "kind": "member",
    "name": "auto_mode",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#auto_mode",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 597,
    "kind": "member",
    "name": "is_practice_trials",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#is_practice_trials",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 598,
    "kind": "member",
    "name": "is_screening",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#is_screening",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 599,
    "kind": "member",
    "name": "manual_scaling_factor",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#manual_scaling_factor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 600,
    "kind": "member",
    "name": "custom_subcondition_order",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#custom_subcondition_order",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 601,
    "kind": "member",
    "name": "is_complete",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#is_complete",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 602,
    "kind": "member",
    "name": "EXPERIMENT_NAME",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#EXPERIMENT_NAME",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 603,
    "kind": "member",
    "name": "PIXELS_PER_CM",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#PIXELS_PER_CM",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 604,
    "kind": "member",
    "name": "MIN_CORRELATION",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#MIN_CORRELATION",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "member",
    "name": "MAX_CORRELATION",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#MAX_CORRELATION",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 606,
    "kind": "member",
    "name": "MIN_TRIALS",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#MIN_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 607,
    "kind": "member",
    "name": "MAX_TRIALS",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#MAX_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 608,
    "kind": "member",
    "name": "WINDOW_SIZE",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#WINDOW_SIZE",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 609,
    "kind": "member",
    "name": "WINDOW_INTERVAL",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#WINDOW_INTERVAL",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 610,
    "kind": "member",
    "name": "CONVERGENCE_THRESHOLD",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#CONVERGENCE_THRESHOLD",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "member",
    "name": "INCORRECT_MULTIPLIER",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#INCORRECT_MULTIPLIER",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 612,
    "kind": "member",
    "name": "MAX_PRACTICE_TRIALS",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#MAX_PRACTICE_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 613,
    "kind": "member",
    "name": "converged",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#converged",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 614,
    "kind": "member",
    "name": "practice_end",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#practice_end",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "member",
    "name": "adjusted_quantity_matrix",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#adjusted_quantity_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "member",
    "name": "adjusted_quantity_practice",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#adjusted_quantity_practice",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "member",
    "name": "end_sub_condition_debug",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#end_sub_condition_debug",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "member",
    "name": "left_coordinates",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#left_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 619,
    "kind": "member",
    "name": "right_coordinates",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#right_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 620,
    "kind": "member",
    "name": "distractor_coordinates",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#distractor_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 621,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 622,
    "kind": "member",
    "name": "raw_constants",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#raw_constants",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#prepare_experiment",
    "access": "public",
    "description": "Orders the input data according to balancing type and\ninitializes the JND object's variables.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "balancing_type",
        "description": "{string}                             Type of balancing. Currently only latin_square\n                                                            is supported.\n        dataset {[{assoc array}, {assoc array}, ... ]}      The data to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 624,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "member",
    "name": "sub_conditions_constants",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#sub_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 626,
    "kind": "member",
    "name": "current_sub_condition_index",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#current_sub_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 627,
    "kind": "method",
    "name": "prepare_practice",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#prepare_practice",
    "access": "public",
    "description": "Orders the input dataset by randomizing it, and initializes the practice variables.",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "{[{assoc array}, {assoc array}, ... ]}   The data to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 629,
    "kind": "member",
    "name": "practice_conditions_constants",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#practice_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 630,
    "kind": "member",
    "name": "current_practice_condition_index",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#current_practice_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 631,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#generate_trial",
    "access": "public",
    "description": "Generates a JND trial object for use in the JsPsych timeline.",
    "lineNumber": 180,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "{string}             \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    }
  },
  {
    "__docId__": 632,
    "kind": "method",
    "name": "genereate_hybrid_instruction",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#genereate_hybrid_instruction",
    "access": "public",
    "description": "Generates conditional timeline instruction for JND and Stevens hybrid conditions.",
    "lineNumber": 296,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych trial}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "handle_data_saving",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#handle_data_saving",
    "access": "public",
    "description": "Handles saving the relevant data on a given trial.\n\nFor reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\ntrial_variables =\n      {type: 'jnd',\n      run_type: '',\n      left_correlation: '',\n      right_correlation: '',\n      };\n\nThese are variables created WITHIN the trial logic that were not present in excel (but need to be\noutputted to results).\nexport_variables =\n      {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\n       balanced_sub_condition: '',  // Index of sub_condition according to balancing order\n       jnd: '',\n       base_correlation: '',\n       adjusted_value: '',\n       correct: '',\n      };",
    "lineNumber": 356,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}\n       block_type {string}           \"test\" or \"practice\"\n       constants {assoc array}\n       index {integer}\n       adjusted_value {double}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 634,
    "kind": "method",
    "name": "check_response",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#check_response",
    "access": "public",
    "description": "Given a JND trial data, determines whether response is\ncorrect or not.",
    "lineNumber": 402,
    "params": [
      {
        "nullable": null,
        "types": [
          "JsPsych.data"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "@param. {object}        constants"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#export_trial_data",
    "access": "public",
    "description": "When called, will save individual trial data into a CSV.",
    "lineNumber": 452,
    "params": [],
    "return": null
  },
  {
    "__docId__": 637,
    "kind": "method",
    "name": "get_summary_data",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#get_summary_data",
    "access": "public",
    "description": null,
    "lineNumber": 528,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "get_summary_data_sub",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#get_summary_data_sub",
    "access": "public",
    "description": null,
    "lineNumber": 538,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "method",
    "name": "export_summary_data",
    "memberof": "scripts/experiments/jnd/jnd.js~JND",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd/jnd.js~JND#export_summary_data",
    "access": "public",
    "description": "When called, will save aggregated trial data into a CSV.",
    "lineNumber": 560,
    "params": [],
    "return": null
  },
  {
    "__docId__": 640,
    "kind": "file",
    "name": "scripts/experiments/jnd/jnd_timeline.js",
    "content": "import JND from \"/scripts/experiments/jnd/jnd.js\";\r\nimport Stevens from \"/scripts/experiments/stevens/stevens.js\";\r\nimport * as generator from '/scripts/experiments/jnd/jnd_timeline_generators.js'\r\nimport { get_jspsych_instructions, generate_subcond_instruction_block } from \"/scripts/experiment-properties/instructions/instructions_controller.js\";\r\nimport {generate_welcome, generate_instructions, generate_ready_screen, generate_sitting_distance_screen} from '/scripts/experiment-timeline/instruction_screen/instruction_screen.js'\r\nimport { resolution_scaling, manual_resolution_scaling } from '/scripts/experiment-timeline/resolution_scaling/resolution_scaling.js';\r\nimport { correlation_dependencies } from \"../../helpers/correlation_dependencies.js\";\r\nimport * as screening from '/scripts/experiment-timeline/screening/screening.js';\r\n\r\nexport var jnd_exp = new JND(params);\r\nexport var stevens_exp_hybrid; \r\nif (params[\"condition\"]=='test_hybrid_scatter') {\r\n  stevens_exp_hybrid = new Stevens(params); \r\n}\r\nconsole.log('jnd_exp', jnd_exp)\r\n\r\nvar timeline = [];\r\nconst address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\nconst isPractice = jnd_exp.is_practice_trials;\r\nconst isScreening = jnd_exp.is_screening;\r\nconst manual_scaling_factor = jnd_exp.manual_scaling_factor;\r\n// console.log('isPractice', isPractice)\r\n\r\n// =========================================================\r\n// WELCOME TRIAL BLOCK\r\n\r\nlet welcome = generate_welcome(address, jnd_exp);\r\ntimeline.push(welcome);\r\n\r\n// =========================================================\r\n// RESOLUTION SCALING\r\nif(manual_scaling_factor == \"none\"){\r\n  timeline.push(resolution_scaling);\r\n}\r\nelse{\r\n  console.log(\"Manual Scale Factor: \", manual_scaling_factor)\r\n  timeline.push(manual_resolution_scaling(manual_scaling_factor))\r\n}\r\n\r\n\r\n\r\n// CONDITIONAL: SKIP SCREENING IF FALSE\r\nif (isScreening == \"true\") {\r\n  // =========================================================\r\n  // SCREENING\r\n  timeline.push(\r\n    screening.screeningQuestions,\r\n    // screening.screeningInstructions,\r\n    // screening.screeningCorrelationSort,\r\n    // screening.screeningCorrelationSelect,\r\n    // screening.instructionsRegression,\r\n    // screening.screeningRegressionSelect\r\n  );\r\n}\r\n\r\n// =========================================================\r\n// INSTRUCTION TRIAL BLOCKS\r\n\r\nlet ready = generate_ready_screen()\r\nvar instructions = get_jspsych_instructions(jnd_exp);\r\n\r\n// CONDITIONAL: different timelines\r\nvar instruction_trials = {\r\n  timeline: isPractice == \"true\" ? [instructions, ready] : [instructions]\r\n};\r\n\r\ntimeline.push(instruction_trials);\r\n\r\n// =========================================================\r\n// PRACTICE TRIAL BLOCKS\r\n\r\n// ---------------------------------------------------------\r\n// FEEDBACK\r\n\r\nvar feedback = generator.generate_feedback_screen(jnd_exp);\r\n// ---------------------------------------------------------\r\n// PRE-SUBCONDITION INSTRUCTION BLOCK\r\n\r\n// This is a conditional block that will execute only if\r\n// the subcondition has a subcondition_instructions attribute\r\n// and it is the start of the subcondition.\r\n\r\nlet subcond_instruction_block = generate_subcond_instruction_block(jnd_exp, \"test\");\r\nlet subcond_practice_instruction_block = generate_subcond_instruction_block(jnd_exp, \"practice\");\r\n\r\nvar ready_experiment = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: \"<div align = 'center'> <font size = 20><p>Ready?<p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\r\n  data: { type: 'instruction' },\r\n  on_start: function (stop_trials) {\r\n    // skip if automation mode is turned on\r\n    if (jnd_exp.auto_mode) {\r\n      stop_trials.trial_duration = 0;\r\n    }\r\n  }\r\n}\r\n\r\n// CONDITIONAL: DO NOT RUN PRACTICE BLOCK IF isPractice returns FALSE\r\nlet stop_trials;\r\nif (isPractice == \"true\") {\r\n  // ---------------------------------------------------------\r\n  // PRE-SUBCONDITION INSTRUCTION BLOCK\r\n  var practice_jnd = jnd_exp.generate_trial(\"practice\");\r\n\r\n  // ---------------------------------------------------------\r\n  // PRACTICE BLOCK\r\n  var practice = generator.generate_practice_block(jnd_exp, subcond_practice_instruction_block, practice_jnd, feedback);\r\n  timeline.push(practice);\r\n\r\n  // ---------------------------------------------------------\r\n  // STOP BLOCK\r\n\r\n  let stop = generator.generate_stop_block(jnd_exp);\r\n  stop_trials = {\r\n    timeline: [stop, ready_experiment]\r\n  };\r\n    \r\n}\r\nelse{\r\n  stop_trials = {\r\n    timeline: [ready_experiment]\r\n  }\r\n  jnd_exp.practice_end = true;\r\n}\r\n\r\ntimeline.push(stop_trials);\r\n\r\n// =========================================================\r\n// EXPERIMENT TRIAL BLOCKS\r\n\r\n// ---------------------------------------------------------\r\n// PRE-SUBCONDITION INSTRUCTION BLOCK\r\n\r\nvar trial = jnd_exp.generate_trial(\"test\");\r\n\r\n// ---------------------------------------------------------\r\n// EXPERIMENT BLOCK\r\n\r\nvar experiment = generator.generate_experiment_block(jnd_exp, subcond_instruction_block, trial, feedback);\r\n\r\ntimeline.push(experiment);\r\n\r\nconsole.log(\"======================\");\r\n\r\n// =========================================================\r\n// DATA DOWNLOADING \r\n\r\nlet experiment_end = generator.generate_experiment_end(jnd_exp)\r\ntimeline.push(experiment_end);\r\n\r\n// =========================================================\r\n// START JSPSYCH\r\n\r\njsPsych.init({\r\n    timeline: timeline,\r\n    on_finish: function(){ \r\n        // jsPsych.data.displayData();\r\n        window.location.replace(correlation_dependencies.is_end_of_sub_condition(jnd_exp, \"practice\") || correlation_dependencies.is_end_of_sub_condition(jnd_exp, \"test\") ? \"https://app.prolific.co/submissions/complete?cc=702E33AF\" : address);\r\n    }\r\n});",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/jnd/jnd_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 641,
    "kind": "variable",
    "name": "jnd_exp",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~jnd_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": "{jnd_exp}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/jnd/jnd.js~JND"
      ]
    }
  },
  {
    "__docId__": 642,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 643,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 644,
    "kind": "variable",
    "name": "isPractice",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~isPractice",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 645,
    "kind": "variable",
    "name": "isScreening",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~isScreening",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 646,
    "kind": "variable",
    "name": "manual_scaling_factor",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~manual_scaling_factor",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 647,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 648,
    "kind": "variable",
    "name": "ready",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~ready",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 649,
    "kind": "variable",
    "name": "instructions",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 650,
    "kind": "variable",
    "name": "instruction_trials",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~instruction_trials",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 651,
    "kind": "variable",
    "name": "feedback",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~feedback",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 652,
    "kind": "variable",
    "name": "subcond_instruction_block",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~subcond_instruction_block",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 653,
    "kind": "variable",
    "name": "subcond_practice_instruction_block",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~subcond_practice_instruction_block",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 654,
    "kind": "variable",
    "name": "ready_experiment",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~ready_experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 655,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 656,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 657,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/jnd/jnd_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 658,
    "kind": "file",
    "name": "scripts/experiments/jnd/jnd_timeline_generators.js",
    "content": "import {correlation_dependencies} from '/scripts/helpers/correlation_dependencies.js'\r\n\r\n\r\nexport function generate_feedback_screen(jnd_exp){\r\n    let feedback = {\r\n        type: 'html-keyboard-response',\r\n        choices: ['q', 32],\r\n        post_trial_gap: 300,\r\n        // trial_duration: 500,\r\n        data: { type: 'feedback' },\r\n        on_start: function (feedback) {\r\n          if (jnd_exp.auto_mode) {\r\n            feedback.trial_duration = 0;\r\n          }\r\n        },\r\n        stimulus: function () {\r\n      \r\n          document.body.style.backgroundColor = jnd_exp.trial_data.feedback_background_color;\r\n      \r\n          var last_trial = JSON.parse(jsPsych.data.getLastTrialData().json());\r\n          var last_trial_correct = last_trial[0][\"correct\"];\r\n      \r\n          // For debugging purposes:\r\n          if (last_trial_correct == -1) {\r\n            return '<p>' +\r\n              '<font style=\"font-size:50px; color:blue\">Exiting from experiment.<p></font>'\r\n          }\r\n          else if (last_trial_correct == -2){\r\n            return `<p>\r\n                    <font style=\"font-size:50px; color:blue\">Skipping from subcondtion.<p></font>\r\n                    <br>\r\n                    Press spacebar to continue.`\r\n                    \r\n          }\r\n          else if (last_trial_correct) {\r\n            return `<div align = \"center\">\r\n                    <p>\r\n                      <i class=\"fa fa-check-circle\" style=\"font-size:50px; color:green; margin-right: 10px;\"></i> \r\n                      <font style=\"font-size:50px; color:green\">\r\n                      Correct!\r\n                      </font>\r\n                    <p>\r\n                    <br>\r\n                    Press spacebar to continue.\r\n                    </div>`\r\n          }\r\n          else {\r\n            return `<div align = \"center\">\r\n                    <p>\r\n                      <i class=\"fa fa-close\" style=\"font-size:50px; color:red; margin-right: 10px;\"></i>\r\n                      <font style=\"font-size:50px; color:red;\"\">\r\n                      Incorrect!\r\n                      </font>\r\n                    <p>\r\n                    <br>\r\n                    Press spacebar to continue.\r\n                    </div>`\r\n          }\r\n        }\r\n      };\r\n    return feedback;\r\n}\r\n\r\nexport function generate_practice_block(jnd_exp, subcond_practice_instruction_block, practice_jnd, feedback){\r\n    let practice = {\r\n        timeline: [subcond_practice_instruction_block, practice_jnd, feedback], // We use same feedback block as that used in practice \r\n        loop_function: function (data) { // Return true if timeline should continue\r\n          // Return false if timeline should end\r\n        \r\n          let key_presses = [];\r\n          data.values().forEach(function (elem) {\r\n            key_presses.push(elem.key_press);\r\n          });\r\n        \r\n          // For debugging, if you want to exit out of experiment, press q:\r\n          if (key_presses.includes(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q'))) {\r\n            // Turn flag on \r\n            jnd_exp.converged = false;\r\n            jnd_exp.end_sub_condition_debug = false;\r\n            return false;\r\n          }\r\n        \r\n          if (correlation_dependencies.is_end_of_sub_condition(jnd_exp, \"practice\")) {\r\n            jnd_exp.end_sub_condition_debug = false;\r\n            // If there are still more practice conditions, increment current index\r\n            if (jnd_exp.current_practice_condition_index < (jnd_exp.practice_conditions_constants.length - 1)) {\r\n              jnd_exp.current_practice_condition_index++;\r\n              console.log(\"!!!!!!!!!! Moved to new practice condition at index \" + jnd_exp.current_practice_condition_index);\r\n              return true;\r\n            }\r\n            else{\r\n              jnd_exp.practice_end = true; \r\n            }\r\n            return false;\r\n          }\r\n          // continue with current practice condition\r\n          return true\r\n      \r\n        }\r\n      };\r\n\r\n    return practice;\r\n}\r\n\r\nexport function generate_stop_block(jnd_exp){\r\n    let stop = {\r\n        type: 'html-keyboard-response',\r\n        stimulus: \"<div align = 'center'> <font size = 20><p>This concludes the practice trials.<p>\" + \"<br><br><p><b>Any questions?</b></p></font></div>\",\r\n        data: { type: 'instruction' },\r\n        on_start: function (stop) {\r\n          // Reset background color to feedback\r\n          document.body.style.backgroundColor = jnd_exp.trial_data.feedback_background_color;\r\n          // skip if automation mode is turned on\r\n          if (jnd_exp.auto_mode) {\r\n            stop.trial_duration = 0;\r\n          }\r\n        }\r\n      }\r\n\r\n    return stop;\r\n}\r\n\r\nexport function generate_ready_experiment(jnd_exp){\r\n    let ready_experiment = {\r\n        type: 'html-keyboard-response',\r\n        stimulus: \"<div align = 'center'> <font size = 20><p>Ready?<p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\r\n        data: { type: 'instruction' },\r\n        on_start: function (stop_trials) {\r\n          // skip if automation mode is turned on\r\n          if (jnd_exp.auto_mode) {\r\n            stop_trials.trial_duration = 0;\r\n          }\r\n        }\r\n    }\r\n\r\n    return ready_experiment;\r\n}\r\n\r\nexport function generate_experiment_block(jnd_exp, subcond_instruction_block, trial, feedback){\r\n  let experiment = {\r\n    timeline: [subcond_instruction_block, trial, feedback],\r\n    loop_function: function (data) { // Return true if timeline should continue\r\n      // Return false if timeline should end\r\n      let key_presses = [];\r\n      data.values().forEach(function (elem) {\r\n        key_presses.push(elem.key_press);\r\n      });\r\n  \r\n      // For debugging, if you want to exit out of experiment, press q:\r\n      if (key_presses.includes(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q'))) {\r\n        return false;\r\n      }\r\n  \r\n      // If subcondition should end:\r\n      if (correlation_dependencies.is_end_of_sub_condition(jnd_exp, \"test\")) {\r\n        jnd_exp.end_sub_condition_debug = false;\r\n        if (jnd_exp.current_sub_condition_index < (jnd_exp.sub_conditions_constants.length - 1)) {\r\n          jnd_exp.current_sub_condition_index++;\r\n          console.log(\"!!!!!!!!!! Moved to new sub condition at index \" + jnd_exp.current_sub_condition_index);\r\n          return true;\r\n        } // If there are still more subconditions, increment current index\r\n        // Else end experiment\r\n        return false;\r\n      }\r\n      // Else continue w/ current subcondition:\r\n      return true;\r\n    },\r\n    on_finish: function (data) {\r\n      //console.log(jnd_exp.trial_data)\r\n      jnd_exp.trial_data = data;\r\n    }\r\n  };\r\n  return experiment;\r\n}\r\n\r\nexport function generate_experiment_end(jnd_exp){\r\n  let experiment_end = {\r\n    type: 'html-keyboard-response',\r\n    stimulus: '<div align = \"center\">' +\r\n      '<p><font size = 10>You have completed the experiment!<p></font>' +\r\n      '<br>' +\r\n      'Please proceed to Prolific by using the link provided on the next screen.' +\r\n      '</div>',\r\n    on_start: function () {\r\n      jnd_exp.export_trial_data();\r\n      // jnd_exp.export_summary_data();\r\n     \r\n      // Reset background color to feedback\r\n      document.body.style.backgroundColor = jnd_exp.trial_data.feedback_background_color;\r\n    }\r\n  };\r\n  return experiment_end;\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/jnd/jnd_timeline_generators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 659,
    "kind": "function",
    "name": "generate_feedback_screen",
    "memberof": "scripts/experiments/jnd/jnd_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline_generators.js~generate_feedback_screen",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline_generators.js",
    "importStyle": "{generate_feedback_screen}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "jnd_exp",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 660,
    "kind": "function",
    "name": "generate_practice_block",
    "memberof": "scripts/experiments/jnd/jnd_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline_generators.js~generate_practice_block",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline_generators.js",
    "importStyle": "{generate_practice_block}",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "jnd_exp",
        "types": [
          "*"
        ]
      },
      {
        "name": "subcond_practice_instruction_block",
        "types": [
          "*"
        ]
      },
      {
        "name": "practice_jnd",
        "types": [
          "*"
        ]
      },
      {
        "name": "feedback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 661,
    "kind": "function",
    "name": "generate_stop_block",
    "memberof": "scripts/experiments/jnd/jnd_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline_generators.js~generate_stop_block",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline_generators.js",
    "importStyle": "{generate_stop_block}",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "jnd_exp",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 662,
    "kind": "function",
    "name": "generate_ready_experiment",
    "memberof": "scripts/experiments/jnd/jnd_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline_generators.js~generate_ready_experiment",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline_generators.js",
    "importStyle": "{generate_ready_experiment}",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "jnd_exp",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 663,
    "kind": "function",
    "name": "generate_experiment_block",
    "memberof": "scripts/experiments/jnd/jnd_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline_generators.js~generate_experiment_block",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline_generators.js",
    "importStyle": "{generate_experiment_block}",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "jnd_exp",
        "types": [
          "*"
        ]
      },
      {
        "name": "subcond_instruction_block",
        "types": [
          "*"
        ]
      },
      {
        "name": "trial",
        "types": [
          "*"
        ]
      },
      {
        "name": "feedback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 664,
    "kind": "function",
    "name": "generate_experiment_end",
    "memberof": "scripts/experiments/jnd/jnd_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/jnd/jnd_timeline_generators.js~generate_experiment_end",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/jnd/jnd_timeline_generators.js",
    "importStyle": "{generate_experiment_end}",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [
      {
        "name": "jnd_exp",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 665,
    "kind": "file",
    "name": "scripts/experiments/jnd_radius/jnd_radius.js",
    "content": "// import {generateDistribution} from \"/scripts/generators/gaussian_distribution_generator.js\";\r\nimport {balance_subconditions} from \"/scripts/experiment-properties/balancing/balancing_controller.js\";\r\nimport {get_data, \r\n        get_data_subset} from \"/scripts/experiment-properties/data/data_controller.js\";\r\nimport {randomize_position,\r\n        randomize_radius_position,\r\n        force_greater_right_position} from \"/scripts/helpers/experiment_helpers.js\";\r\n\r\nexport default class JND_Radius {\r\n\r\n  /**\r\n   * Initializes a JND_Radius experiment object. \r\n   *\r\n   * @param  params {assoc array}  Parameters passed from routing.\r\n   */\r\n  constructor(params) {\r\n\r\n    let trial_structure = params[\"trial_structure\"];\r\n    let condition_name = params[\"condition\"];\r\n    let graph_type = params[\"graph_type\"];\r\n    let balancing_type = params[\"balancing\"];\r\n    let conversion_factor = params[\"conversion_factor\"];\r\n\r\n    this.condition_name = condition_name; \r\n    this.subject_id = params[\"subject_id\"];\r\n    this.subject_initials = params[\"subject_initials\"];\r\n\r\n    // ========================================\r\n    // PARAMETER CHECKING\r\n\r\n    // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\r\n    if (!EXPERIMENTS[\"jnd_radius\"][\"trial_structure\"].includes(trial_structure)) {\r\n      throw Error(trial_structure + \" is not supported.\");}\r\n    else {\r\n      this.trial_structure = trial_structure;\r\n    }\r\n\r\n    if (!EXPERIMENTS[\"jnd_radius\"][\"graph_type\"].includes(graph_type)){\r\n      throw Error(graph_type + \" is not supported.\")} \r\n    else { \r\n      this.graph_type = graph_type;\r\n    };  \r\n\r\n    if (!EXPERIMENTS[\"jnd_radius\"][\"balancing_type\"].includes(balancing_type)) {\r\n      throw Error(balancing_type + \" is not supported.\") }\r\n    else {\r\n      this.balancing_type = balancing_type;\r\n    }  \r\n\r\n    // ========================================\r\n    // EXPERIMENT CONSTANTS\r\n\r\n    this.PIXELS_PER_CM = conversion_factor;\r\n    this.MIN_RADIUS = 2;\r\n    this.MAX_RADIUS = 6;\r\n    this.MIN_TRIALS = 24;\r\n    this.MAX_TRIALS = 52;\r\n    this.WINDOW_SIZE = 24;\r\n    this.WINDOW_INTERVAL = 3;\r\n    this.CONVERGENCE_THRESHOLD = 0.75; \r\n    this.INCORRECT_MULTIPLIER = 3;\r\n\r\n    // ========================================\r\n    // PRACTICE EXPERIMENT VARIABLES\r\n\r\n    this.practice_conditions_constants;\r\n    this.current_practice_condition_index; \r\n\r\n    // ========================================\r\n    // TEST EXPERIMENT VARIABLES\r\n\r\n    this.first_trial_of_sub_condition = true;\r\n    this.sub_condition_order;\r\n    this.sub_conditions_constants;\r\n    this.current_sub_condition_index;\r\n    this.adjusted_quantity_matrix = {};   // The matrix is in this format:\r\n                                          // { sub_condition_index : [adjusted_quantity1, adjusted_quantity2 ... ] }\r\n\r\n    // ========================================\r\n    // CURRENT TRIAL DATA\r\n\r\n    // Plotting-related vars\r\n    this.left_radius = \"\";\r\n    this.right_radius = \"\";\r\n\r\n    // JsPsych trial_data for the current trial\r\n    this.trial_data = \"\";\r\n\r\n    // ========================================\r\n    // PREPARE EXPERIMENT\r\n\r\n    // Extract raw constants\r\n    this.raw_constants = get_data(this);\r\n\r\n    // Prepare experiment\r\n    this.prepare_experiment();\r\n  }\r\n\r\n  /**\r\n   * Orders the input data according to balancing type and\r\n   * initializes the JND object's variables.  \r\n   *\r\n   * @param  balancing_type {string}                             Type of balancing. Currently only latin_square\r\n   *                                                             is supported.\r\n   *         data_set {[{assoc array}, {assoc array}, ... ]}     The data to be ordered. \r\n   *         practice_set {[{assoc array}, {assoc array}, ... ]} The practice data. \r\n   */ \r\n  prepare_experiment() {\r\n\r\n    let dataset = this.raw_constants;\r\n\r\n    this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length);\r\n\r\n    var ordered_data_set = [];\r\n\r\n    // Order the data set according to the latin square\r\n    // Initialize adjusted_quantity_matrix size \r\n    for (let i=0; i < this.sub_condition_order.length; i++){\r\n      ordered_data_set[i] = dataset[this.sub_condition_order[i]];\r\n      this.adjusted_quantity_matrix[i] = [];\r\n    }\r\n\r\n    // Set experiment trials \r\n    this.sub_conditions_constants = ordered_data_set;\r\n    this.current_sub_condition_index = 0; \r\n\r\n  }\r\n\r\n  /**\r\n   * Generates a JND trial object for use in the JsPsych timeline.\r\n   *\r\n   * @param  type {string}             \"test\" or \"practice\"\r\n   * @return trial {object}\r\n   */ \r\n  generate_trial(block_type) {\r\n\r\n    if ((block_type !== \"test\") && (block_type !== \"practice\")) {throw Error(block_type + \" is not supported.\")};\r\n\r\n    // Initialize a variable for this so it is usable inside on_start\r\n    var jnd_radius_exp = this; \r\n    var address = location.protocol + \"//\" + location.hostname + \":\" + location.port + \"/jnd_radius_trial\"; \r\n\r\n    var trial = {\r\n      type:'external-html-keyboard-response',\r\n      url: address,\r\n      choices:['z', 'm', 'q'], //q is exit button (for debugging)\r\n      execute_script: true,\r\n      response_ends_trial: true,\r\n      on_start: function(trial){ // NOTE: on_start takes in trial var \r\n\r\n        // Set the constants to be used:\r\n        if (block_type == \"test\"){ \r\n          var index = jnd_radius_exp.current_sub_condition_index; \r\n          var constants = jnd_radius_exp.sub_conditions_constants[index];\r\n        }\r\n        else { \r\n          var index = jnd_radius_exp.current_practice_condition_index; \r\n          var constants = jnd_radius_exp.practice_conditions_constants[index];\r\n        }\r\n\r\n        // Calculate adjusted radius\r\n        var adjusted_radius = jnd_radius_exp.calculate_adjusted_radius(constants);\r\n\r\n        // Handling saving this trial's data: \r\n        jnd_radius_exp.handle_data_saving(trial, block_type, constants, index, adjusted_radius);\r\n\r\n        // Randomize position of the base and adjusted graphs\r\n        var result = randomize_radius_position(trial, constants.base_radius, adjusted_radius);\r\n\r\n        // Randomize position of the shapes\r\n        let random = Math.floor(Math.random() * Math.floor(2));\r\n        let shape1 = constants.shapes[0];\r\n        let shape2 = constants.shapes[1];\r\n\r\n        trial.data.shapes = random <= 0.5 ? [shape1, shape2] : [shape2, shape1];\r\n\r\n        // // For testing purposes, can force R graph to have greater correlation\r\n        // var result = force_greater_right_position(trial,\r\n        //                                           base_coordinates,\r\n        //                                           adjusted_coordinates,\r\n        //                                           constants.base_correlation,\r\n        //                                           adjusted_correlation);\r\n\r\n        jnd_radius_exp.left_radius = result.left;\r\n        jnd_radius_exp.right_radius = result.right;\r\n        jnd_radius_exp.trial_data = trial.data; \r\n\r\n        let left_radius_conv = result.left * jnd_radius_exp.PIXELS_PER_CM;\r\n        let right_radius_conv = result.right * jnd_radius_exp.PIXELS_PER_CM;\r\n        jnd_radius_exp.radii = [left_radius_conv, right_radius_conv];\r\n\r\n        console.log(\"[RIGHT] Radius: \" + trial.data.right_radius);\r\n        console.log(\"[LEFT] Radius: \" + trial.data.left_radius);\r\n        \r\n      },\r\n      on_finish: function(data){ // NOTE: on_finish takes in data var \r\n        jnd_radius_exp.check_response(data);\r\n        console.log(\"RESPONSE: \" + data.correct);\r\n      } \r\n    };\r\n\r\n    return trial; \r\n  }\r\n\r\n  /**\r\n   * Handles saving the relevant data on a given trial.\r\n   *\r\n   * For reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\r\n   * trial_variables =         \r\n   *       {type: 'jnd',\r\n   *       run_type: '',\r\n   *       left_radius: '',\r\n   *       right_radius: '',\r\n   *       };\r\n   *\r\n   * These are variables created WITHIN the trial logic that were not present in excel (but need to be\r\n   * outputted to results).     \r\n   * export_variables = \r\n   *       {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\r\n   *        balanced_sub_condition: '',  // Index of sub_condition according to balancing order\r\n   *        jnd: '',\r\n   *        base_radius: '',\r\n   *        adjusted_radius: '',\r\n   *        correct: '',\r\n   *       };\r\n   *\r\n   * @param trial {object}\r\n   *        block_type {string}           \"test\" or \"practice\"\r\n   *        constants {assoc array}\r\n   *        index {integer}\r\n   *        adjusted_correlation {double}\r\n   */\r\n  handle_data_saving(trial, block_type, constants, index, adjusted_radius) {\r\n\r\n    // Add all constants from excel\r\n    trial.data = constants;\r\n\r\n    // Adding constants that required computation (not from excel)\r\n    trial.data.type = \"jnd\";\r\n    trial.data.adjusted_radius = adjusted_radius;\r\n    trial.data.jnd = Math.abs(adjusted_radius - constants.base_radius);\r\n    trial.data.sub_condition = index; \r\n    trial.data.balanced_sub_condition = this.sub_condition_order[index];\r\n\r\n    // Block specific saves \r\n    if (block_type == \"test\"){\r\n      this.adjusted_quantity_matrix[index].push(adjusted_radius);\r\n      trial.data.run_type = \"test\";\r\n    }\r\n    else{\r\n      trial.data.run_type = \"practice\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines whether the current sub condition can end or not.\r\n   * \r\n   * @return {boolean}            True if sub condition should end.\r\n   */\r\n  end_sub_condition() {\r\n\r\n    if (this.adjusted_quantity_matrix[this.current_sub_condition_index].length == this.MAX_TRIALS ||\r\n          this.is_converged_in_window()){\r\n      return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines whether current subcondition has converged or not.\r\n   *\r\n   * @return {boolean}            True if converged.\r\n   */\r\n  is_converged_in_window() {\r\n    \r\n    var converged = false;\r\n    var num_completed_trials = this.adjusted_quantity_matrix[this.current_sub_condition_index].length;\r\n\r\n    // Check if we have completed the minimum number of trials\r\n    // and if the number of completed trials is greater than the window size\r\n    if (num_completed_trials >= this.MIN_TRIALS && num_completed_trials >= this.WINDOW_SIZE) {\r\n\r\n      // 2D Matrix of windows of adjusted quantities\r\n      var adjusted_quantity_windows = [];\r\n\r\n      // The index of the last trial\r\n      var last_trial = num_completed_trials - 1;\r\n\r\n      // Compute the interval size and remainder\r\n      // The remainder is computed in case the window size isn't divisible by the # intervals\r\n      var interval_size = this.WINDOW_SIZE / this.WINDOW_INTERVAL;\r\n      var interval_remainder = this.WINDOW_SIZE % this.WINDOW_INTERVAL;\r\n\r\n      // This is the first trial in the window\r\n      // For example:\r\n      // numCompletedTrials = 5\r\n      // windowSize = 3\r\n      // [ 0 1 2 3 4 5 6 7 8 9 ]\r\n      // windowStart would be at index: 5 - 3 = 2\r\n      var window_start = num_completed_trials - this.WINDOW_SIZE;\r\n      console.log(\"num completed: \" + num_completed_trials);\r\n      console.log(\"window start: \" + window_start);\r\n\r\n      // Iterate over all of the trials from the start of the window to the last trial\r\n      // and organize them into the 2D adjustedQuantityWindows matrix\r\n      while (window_start < last_trial) {\r\n\r\n        // While we have extra elements that don't fit into an interval\r\n        // add one extra to each window interval\r\n        var current_interval_size = interval_remainder > 0 ? interval_size + 1 : interval_size;\r\n        if (interval_remainder > 0) {\r\n          interval_remainder--;\r\n        }\r\n\r\n        // Collect the adjusted quantity values from the trials into the double[]\r\n        var adjusted_quantities = [];\r\n        for (let i = 0; i < current_interval_size; ++i) {\r\n          var adjusted_quantity = this.adjusted_quantity_matrix[this.current_sub_condition_index][i + window_start];\r\n          adjusted_quantities.push(adjusted_quantity);\r\n        }\r\n\r\n        // Set the window start to the next interval\r\n        window_start += current_interval_size;\r\n        adjusted_quantity_windows.push(adjusted_quantities);\r\n      }\r\n\r\n      console.log(adjusted_quantity_windows);\r\n\r\n      var variance = [];\r\n      var mean = [];\r\n      for (let i = 0; i < adjusted_quantity_windows.length; i++){\r\n        variance.push(math.var(adjusted_quantity_windows[i]));\r\n        mean.push(math.mean(adjusted_quantity_windows[i]));\r\n      }\r\n\r\n      var mean_of_variances = math.mean(variance);\r\n      var variance_of_means = math.var(mean);\r\n      var F = variance_of_means/mean_of_variances;\r\n      console.log(\"F: \" + F);\r\n      // Convergence if the F value is < 1 - convergenceThreshold\r\n      // if the F is greater than 0.25, then converge \r\n      converged = F < (1 - this.CONVERGENCE_THRESHOLD);\r\n    }\r\n\r\n    if (converged) {console.log(\"CONVERGED!!!!\")};\r\n\r\n    return converged;\r\n\r\n  }\r\n\r\n  /**\r\n   * Calculates the adjusted radius depending on whether this is the\r\n   * first trial of the sub condition or not.\r\n   *\r\n   * @param  constants {assoc array}\r\n   * @return adjusted_radius {double}          \r\n   */\r\n  calculate_adjusted_radius(constants) {\r\n\r\n    // For the first trial, we need to initialize the adjusted correlation:\r\n    if (this.first_trial_of_sub_condition){\r\n      var adjusted_radius = this\r\n                                .initialize_adjusted_statistic(constants.converge_from_above,\r\n                                                               constants.base_radius,\r\n                                                               constants.initial_difference);\r\n      // Set flag to false\r\n      this.first_trial_of_sub_condition = false;\r\n    }\r\n    else{\r\n      var last_JND_trial = jsPsych.data.get().filter({type: \"jnd\"}).last(1).values()[0];\r\n\r\n      var adjusted_radius = this\r\n                                 .get_next_adjusted_statistic(last_JND_trial.correct,\r\n                                                              constants.converge_from_above,\r\n                                                              last_JND_trial.adjusted_radius,\r\n                                                              constants.base_radius);\r\n    }\r\n    return adjusted_radius; \r\n  }\r\n\r\n  /**\r\n   * Initializes the adjusted radius for the first time.\r\n   *\r\n   * @param  converge_from_above {boolean}    \r\n   *         base_radius {double}         \r\n   *         initial_difference {double}\r\n   * @return adjusted_radius {double}          \r\n   */\r\n  initialize_adjusted_statistic(converge_from_above, base_radius, initial_difference) {\r\n    var adjusted_radius;\r\n\r\n    if (converge_from_above) {\r\n      adjusted_radius = base_radius + initial_difference;\r\n    } else {\r\n      adjusted_radius = base_radius - initial_difference;\r\n    }\r\n\r\n    return adjusted_radius; \r\n  }\r\n\r\n  /**\r\n   * Calculates the next adjusted correlation/statistic.\r\n   *\r\n   * @param  correct {boolean}\r\n   *         converge_from_above {boolean}    \r\n   *         adjusted_quantity {double}         \r\n   *         base_correlation {double}\r\n   *         initial_difference {double}\r\n   *\r\n   * @return adjusted_correlation {double}          \r\n   */\r\n  get_next_adjusted_statistic(correct, converge_from_above, adjusted_quantity, base_radius) {\r\n    const CORRECT_STEP_SIZE = 0.002;\r\n    const INCORRECT_STEP_SIZE = 0.006;\r\n\r\n    var next_adjusted_statistic;\r\n\r\n    var initial_difference = base_radius;\r\n\r\n    if (converge_from_above) {\r\n      if (correct) {\r\n        next_adjusted_statistic = adjusted_quantity - CORRECT_STEP_SIZE;\r\n      } else {\r\n        next_adjusted_statistic = adjusted_quantity + INCORRECT_STEP_SIZE;\r\n      }\r\n    } else {\r\n      if (correct) {\r\n        next_adjusted_statistic = adjusted_quantity + CORRECT_STEP_SIZE;\r\n      } else {\r\n        next_adjusted_statistic = adjusted_quantity - INCORRECT_STEP_SIZE;\r\n      }\r\n    }\r\n\r\n    return next_adjusted_statistic;\r\n  }\r\n\r\n  /**\r\n   * Given a JND trial data, determines whether response is \r\n   * correct or not.\r\n   *\r\n   * @param  data {JsPsych.data}\r\n   * @return {boolean}          \r\n   */ \r\n  check_response(data) {\r\n\r\n    // For debugging purposes:\r\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q')){\r\n      data.correct = -1;\r\n      return -1; \r\n    }\r\n\r\n    let right_area = 0.25*Math.PI*(this.right_radius * this.right_radius);\r\n    let left_area = 0.25*Math.PI*(this.left_radius * this.left_radius);\r\n\r\n    if ((right_area > left_area) \r\n          && data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m') ||\r\n          (left_area > right_area)\r\n          && data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z')){\r\n\r\n      data.correct = true;\r\n      return true;\r\n    }\r\n    // Assuming that if base_correlation = adjusted_correlation, at this point \r\n    // any user choice is wrong.\r\n    else {\r\n      data.correct = false;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When called, will save individual trial data into a CSV.     \r\n   */\r\n  export_trial_data() {\r\n\r\n    var trial_data = jsPsych.data.get().filter({type: 'jnd', run_type: 'test'})\r\n                                       .filterCustom(function(x){ //Don't include the exit trials\r\n                                         return x.correct != -1; \r\n                                       })\r\n                                       // JND's trial variables\r\n                                       .ignore('type')\r\n                                       .ignore('run_type')\r\n                                       .ignore('left_radius')\r\n                                       .ignore('right_radius')\r\n                                       // These are variables forced on by jsPsych\r\n                                       .ignore('stimulus')\r\n                                       .ignore('key_press')\r\n                                       .ignore('choices')\r\n                                       .ignore('trial_type')\r\n                                       .ignore('trial_index')\r\n                                       .ignore('time_elapsed')\r\n                                       .ignore('internal_node_id');\r\n\r\n    // TODO: js converting key_string to use double quotes, needs to be single to pass into ignore() fxn\r\n    //\r\n    // for (var key in jnd_exp.trial_variables){\r\n    //  var key_string = '${key}';\r\n    //  trial_data.ignore(key);\r\n    // }\r\n\r\n    var string = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_jnd_slice_trial_results.csv\";\r\n\r\n    trial_data.localSave('csv', string);\r\n  }\r\n\r\n  /**\r\n   * When called, will save aggregated trial data into a CSV.     \r\n   */\r\n  export_summary_data() {\r\n    var csv = 'SUBJECT_ID,SUBJECT_INITIALS,PLOT,BASE,ABOVE,JND,TRIALS\\n';\r\n\r\n    var data = [];\r\n    \r\n    // Organize each row of the csv\r\n    for (let i = 0; i<this.sub_conditions_constants.length; i++){\r\n      var row = [this.subject_id, this.subject_initials, this.condition_name];\r\n      var constants = this.sub_conditions_constants[i];\r\n      var condition_data = jsPsych.data.get().filter({type: 'jnd', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                             .filterCustom(function(x){ //Don't include the exit trials\r\n                                                return x.correct != -1; \r\n                                             })\r\n\r\n      row.push(constants.base_radius);\r\n      row.push(constants.converge_from_above);\r\n      row.push(condition_data.select('jnd').mean());\r\n      row.push(condition_data.count());\r\n\r\n      data.push(row);\r\n    }\r\n\r\n    // Append each row\r\n    data.forEach(function(row){\r\n      csv += row.join(',');\r\n      csv += \"\\n\";\r\n    });\r\n\r\n    var hiddenElement = document.createElement('a');\r\n    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\r\n    hiddenElement.target = '_blank';\r\n    hiddenElement.download = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_jnd_slice_summary_results.csv\";\r\n    hiddenElement.click();\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/jnd_radius/jnd_radius.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 666,
    "kind": "class",
    "name": "JND_Radius",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/jnd_radius/jnd_radius.js",
    "importStyle": "JND_Radius",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 667,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#constructor",
    "access": "public",
    "description": "Initializes a JND_Radius experiment object. ",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "{assoc array}  Parameters passed from routing."
      }
    ]
  },
  {
    "__docId__": 668,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 669,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 670,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 671,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 672,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 673,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 674,
    "kind": "member",
    "name": "PIXELS_PER_CM",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#PIXELS_PER_CM",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 675,
    "kind": "member",
    "name": "MIN_RADIUS",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#MIN_RADIUS",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 676,
    "kind": "member",
    "name": "MAX_RADIUS",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#MAX_RADIUS",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 677,
    "kind": "member",
    "name": "MIN_TRIALS",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#MIN_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 678,
    "kind": "member",
    "name": "MAX_TRIALS",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#MAX_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 679,
    "kind": "member",
    "name": "WINDOW_SIZE",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#WINDOW_SIZE",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 680,
    "kind": "member",
    "name": "WINDOW_INTERVAL",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#WINDOW_INTERVAL",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 681,
    "kind": "member",
    "name": "CONVERGENCE_THRESHOLD",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#CONVERGENCE_THRESHOLD",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 682,
    "kind": "member",
    "name": "INCORRECT_MULTIPLIER",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#INCORRECT_MULTIPLIER",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 683,
    "kind": "member",
    "name": "first_trial_of_sub_condition",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#first_trial_of_sub_condition",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 684,
    "kind": "member",
    "name": "adjusted_quantity_matrix",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#adjusted_quantity_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 685,
    "kind": "member",
    "name": "left_radius",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#left_radius",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 686,
    "kind": "member",
    "name": "right_radius",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#right_radius",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 687,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 688,
    "kind": "member",
    "name": "raw_constants",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#raw_constants",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 689,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#prepare_experiment",
    "access": "public",
    "description": "Orders the input data according to balancing type and\ninitializes the JND object's variables.  ",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "balancing_type",
        "description": "{string}                             Type of balancing. Currently only latin_square\n                                                            is supported.\n        data_set {[{assoc array}, {assoc array}, ... ]}     The data to be ordered. \n        practice_set {[{assoc array}, {assoc array}, ... ]} The practice data."
      }
    ],
    "return": null
  },
  {
    "__docId__": 690,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 691,
    "kind": "member",
    "name": "sub_conditions_constants",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#sub_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 692,
    "kind": "member",
    "name": "current_sub_condition_index",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#current_sub_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 693,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#generate_trial",
    "access": "public",
    "description": "Generates a JND trial object for use in the JsPsych timeline.",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "{string}             \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    }
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "handle_data_saving",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#handle_data_saving",
    "access": "public",
    "description": "Handles saving the relevant data on a given trial.\n\nFor reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\ntrial_variables =         \n      {type: 'jnd',\n      run_type: '',\n      left_radius: '',\n      right_radius: '',\n      };\n\nThese are variables created WITHIN the trial logic that were not present in excel (but need to be\noutputted to results).     \nexport_variables = \n      {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\n       balanced_sub_condition: '',  // Index of sub_condition according to balancing order\n       jnd: '',\n       base_radius: '',\n       adjusted_radius: '',\n       correct: '',\n      };",
    "lineNumber": 233,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}\n       block_type {string}           \"test\" or \"practice\"\n       constants {assoc array}\n       index {integer}\n       adjusted_correlation {double}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "end_sub_condition",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#end_sub_condition",
    "access": "public",
    "description": "Determines whether the current sub condition can end or not.",
    "lineNumber": 260,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition should end."
    },
    "params": []
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "is_converged_in_window",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#is_converged_in_window",
    "access": "public",
    "description": "Determines whether current subcondition has converged or not.",
    "lineNumber": 276,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if converged."
    },
    "params": []
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "calculate_adjusted_radius",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#calculate_adjusted_radius",
    "access": "public",
    "description": "Calculates the adjusted radius depending on whether this is the\nfirst trial of the sub condition or not.",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": "{assoc array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "adjusted_radius {double}"
    }
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "initialize_adjusted_statistic",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#initialize_adjusted_statistic",
    "access": "public",
    "description": "Initializes the adjusted radius for the first time.",
    "lineNumber": 391,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "converge_from_above",
        "description": "{boolean}    \n        base_radius {double}         \n        initial_difference {double}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "adjusted_radius {double}"
    }
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "get_next_adjusted_statistic",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#get_next_adjusted_statistic",
    "access": "public",
    "description": "Calculates the next adjusted correlation/statistic.",
    "lineNumber": 414,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "correct",
        "description": "{boolean}\n        converge_from_above {boolean}    \n        adjusted_quantity {double}         \n        base_correlation {double}\n        initial_difference {double}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "adjusted_correlation {double}"
    }
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "check_response",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#check_response",
    "access": "public",
    "description": "Given a JND trial data, determines whether response is \ncorrect or not.",
    "lineNumber": 446,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{JsPsych.data}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#export_trial_data",
    "access": "public",
    "description": "When called, will save individual trial data into a CSV.     ",
    "lineNumber": 476,
    "params": [],
    "return": null
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "export_summary_data",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius#export_summary_data",
    "access": "public",
    "description": "When called, will save aggregated trial data into a CSV.     ",
    "lineNumber": 511,
    "params": [],
    "return": null
  },
  {
    "__docId__": 704,
    "kind": "file",
    "name": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "content": "import JND_Radius from \"/scripts/experiments/jnd_radius/jnd_radius.js\";\r\nimport { get_instructions } from \"/scripts/experiment-properties/instructions/instructions_controller.js\";\r\nimport { scaling_input } from \"/scripts/experiment-properties/resolution_scaling/resolution_scaling.js\";\r\n\r\nexport var jnd_radius_exp = new JND_Radius(params);\r\n\r\nvar timeline = [];\r\nvar address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\n// Firefox check for formatting\r\nif (typeof InstallTrigger !== 'undefined') {\r\n  var isFirefox = true;\r\n} else {\r\n  var isFirefox = false;\r\n}\r\n\r\n// =========================================================\r\n// WELCOME TRIAL BLOCK\r\n\r\nlet shape_names = jnd_radius_exp.condition_name.split(\"_\");\r\n\r\nvar welcome = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: `<div align = \"center\" style=\"margin-top: ${isFirefox ? \"25vh\" : \"0\"}\">` + `<img src=\"${address}/img/VCL_lab_logo.png\"></img><br><br>` +\r\n    `<b>Base:</b> ${jnd_radius_exp.constructor.name}` + '<br>' +\r\n    `<b>Trial Type:</b> ${jnd_radius_exp.trial_structure}` + '<br>' +\r\n    `<b>Condition:</b> ${shape_names[0]}, ${shape_names[1]}` +\r\n    '<br><br><br><p><font size = 15>Press any key to begin.<p></font>' +\r\n    '</div>',\r\n  data: { type: 'instruction' }\r\n};\r\ntimeline.push(welcome);\r\n\r\n// =========================================================\r\n// RESOLUTION SCALING\r\ntimeline.push(scaling_input);\r\n\r\n// =========================================================\r\n// INSTRUCTION TRIAL BLOCKS\r\n\r\nvar instructions = {\r\n  type: \"html-keyboard-response\",\r\n  stimulus: function () {\r\n    return get_instructions(jnd_radius_exp);\r\n  }\r\n};\r\n\r\ntimeline.push(instructions);\r\n\r\n// =========================================================\r\n// FEEDBACK\r\n\r\nvar feedback = {\r\n  type: 'html-keyboard-response',\r\n  choices: jsPsych.NO_KEYS, //No responses will be accepted as a valid response.\r\n  trial_duration: 500,\r\n  data: { type: 'feedback' },\r\n  stimulus: function () {\r\n\r\n    document.body.style.backgroundColor = jnd_radius_exp.trial_data.feedback_background_color;\r\n\r\n    var last_trial = JSON.parse(jsPsych.data.getLastTrialData().json());\r\n    var last_trial_correct = last_trial[0][\"correct\"];\r\n\r\n    // For debugging purposes:\r\n    if (last_trial_correct == -1) {\r\n      return '<p>' +\r\n        `<div style = \"margin-top: ${isFirefox ? \"45vh\" : \"0\"};\"><font style=\"font-size:50px; color:blue\">Exiting from experiment.<p></font></div>`\r\n    }\r\n\r\n    else if (last_trial_correct) {\r\n      return `<p><div style = \"margin-top: ${isFirefox ? \"45vh\" : \"0\"};\"><i class=\"fa fa-check-circle\" style=\"font-size:50px; color:green; margin-right: 10px;\"></i>` +\r\n        '<font style=\"font-size:50px; color:green\">Correct!<p></font></div>'\r\n    }\r\n    else {\r\n      return `<p><div style = \"margin-top: ${isFirefox ? \"45vh\" : \"0\"};\"><i class=\"fa fa-close\" style=\"font-size:50px; color:red; margin-right: 10px;\"></i>` +\r\n        '<font style=\"font-size:50px; color:red;\"\">Incorrect!<p></font></div>'\r\n    }\r\n  }\r\n};\r\n\r\n// =========================================================\r\n// EXPERIMENT TRIAL BLOCKS\r\n\r\nvar trial = jnd_radius_exp.generate_trial(\"test\");\r\n\r\nvar experiment = {\r\n  timeline: [trial, feedback], // We use same feedback block as that used in practice \r\n  loop_function: function (data) { // Return true if timeline should continue\r\n    // Return false if timeline should end\r\n\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press) {\r\n      return false;\r\n    }\r\n\r\n    // If subcondition should end:\r\n    if (jnd_radius_exp.end_sub_condition()) {\r\n      jnd_radius_exp.first_trial_of_sub_condition = true;\r\n      // If there are still more subconditions, increment current index\r\n      if (jnd_radius_exp.current_sub_condition_index < (jnd_radius_exp.sub_conditions_constants.length - 1)) {\r\n        jnd_radius_exp.current_sub_condition_index++;\r\n        console.log(\"!!!!!!!!!! Moved to new sub condition at index \"\r\n          + jnd_radius_exp.current_sub_condition_index);\r\n        return true;\r\n      }\r\n      // Else end experiment\r\n      else {\r\n        return false;\r\n      }\r\n    }\r\n    // Else continue w/ current subcondition:\r\n    else {\r\n      return true;\r\n    }\r\n  },\r\n  on_finish: function (data) {\r\n    jnd_radius_exp.trial_data = data;\r\n  }\r\n};\r\n\r\ntimeline.push(experiment);\r\n\r\nconsole.log(\"======================\");\r\n\r\n// =========================================================\r\n// DATA DOWNLOADING \r\n\r\nvar experiment_end = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: `<div align = \"center\" style = \"margin-top: ${isFirefox ? \"45vh\" : \"0\"};\">` +\r\n    '<p><font size = 10>You have completed the experiment!<p></font>' +\r\n    '<br>' +\r\n    'Trial and summary data files will now automatically download locally.' +\r\n    '</div>',\r\n  on_start: function () {\r\n\r\n    jnd_radius_exp.export_trial_data();\r\n    jnd_radius_exp.export_summary_data();\r\n\r\n    // Reset background color to feedback\r\n    document.body.style.backgroundColor = jnd_radius_exp.trial_data.feedback_background_color;\r\n  }\r\n};\r\ntimeline.push(experiment_end);\r\n\r\n// =========================================================\r\n// START JSPSYCH\r\n\r\njsPsych.init({\r\n  timeline: timeline,\r\n  on_finish: function () {\r\n    jsPsych.data.displayData();\r\n  }\r\n});\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 705,
    "kind": "variable",
    "name": "jnd_radius_exp",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~jnd_radius_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": "{jnd_radius_exp}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/jnd_radius/jnd_radius.js~JND_Radius"
      ]
    }
  },
  {
    "__docId__": 706,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 707,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 708,
    "kind": "variable",
    "name": "shape_names",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~shape_names",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 709,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 710,
    "kind": "variable",
    "name": "instructions",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 711,
    "kind": "variable",
    "name": "feedback",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~feedback",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"choices\": *, \"trial_duration\": number, \"data\": *, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 712,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 713,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 714,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "static": true,
    "longname": "scripts/experiments/jnd_radius/jnd_radius_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/jnd_radius/jnd_radius_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 715,
    "kind": "file",
    "name": "scripts/experiments/numerosity/numerosity.js",
    "content": "import {generateRandomDistribution} from \"/scripts/experiment-properties/distribution/random_distribution_generator.js\";\r\nimport {balance_subconditions} from \"/scripts/experiment-properties/balancing/balancing_controller.js\";\r\nimport {get_data} from \"/scripts/experiment-properties/data/data_controller.js\";\r\n\r\nexport default class Numerosity {\r\n  /**\r\n   * Initializes a Numerosity experiment object.\r\n   *\r\n   * @param  params          {object}    Parameters passed in from routing\r\n   */\r\n  constructor(params) {\r\n\r\n    var address = location.protocol + \"//\" + location.hostname + \":\" + location.port; \r\n\r\n    let trial_structure = params[\"trial_structure\"];\r\n    let condition_name = params[\"condition\"];\r\n    let graph_type = params[\"graph_type\"];\r\n    let balancing_type = params[\"balancing\"];\r\n    this.condition_name = condition_name;\r\n    this.condition_group = this.condition_name.split('_')[0];\r\n\r\n    // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\r\n    if (!EXPERIMENTS[\"numerosity\"][\"trial_structure\"].includes(trial_structure)) {\r\n      throw Error(trial_structure + \" is not supported.\");}\r\n    else {\r\n      this.trial_structure = trial_structure;\r\n    }\r\n\r\n    if (!EXPERIMENTS[\"numerosity\"][\"graph_type\"].includes(graph_type)){\r\n      throw Error(graph_type + \" is not supported.\")} \r\n    else { \r\n      this.graph_type = graph_type;\r\n    };  \r\n\r\n    if (!EXPERIMENTS[\"numerosity\"][\"balancing_type\"].includes(balancing_type)) {\r\n      throw Error(balancing_type + \" is not supported.\") }\r\n    else {\r\n      this.balancing_type = balancing_type;\r\n    }  \r\n\r\n    this.condition_name = condition_name;\r\n    this.subject_id = params[\"subject_id\"];\r\n    this.subject_initials = params[\"subject_initials\"];\r\n\r\n    // ========================================\r\n    // EXPERIMENT VARIABLES \r\n    this.raw_sub_conds; // subconditions in estimation_data.js\r\n    this.target_color = \"#dbc667\";\r\n\r\n    // ========================================\r\n    // TEST EXPERIMENT VARIABLES\r\n    this.sub_condition_order;\r\n    this.experiment_conditions_constants = [];\r\n    this.current_sub_condition_index;\r\n    this.trial_responses = [];\r\n\r\n    /// ========================================\r\n    // CURRENT TRIAL DATA\r\n\r\n    // Plotting-related vars\r\n    this.target_coordinates = \"\";\r\n    this.distractor_coordinates = \"\";\r\n    \r\n    // JsPsych trial_data for the current trial\r\n    this.trial_data = \"\";\r\n    // ========================================\r\n    // PREPARE EXPERIMENT\r\n\r\n    // Extract raw constants\r\n    this.raw_sub_conds = get_data(this);\r\n    // Prepare experiment\r\n    this.prepare_experiment();\r\n  }\r\n\r\n  /**\r\n   * Orders the input data according to balancing type and\r\n   * initializes the Estimation object's variables.\r\n   *\r\n   */\r\n  prepare_experiment() {\r\n      let dataset = this.raw_sub_conds;\r\n      \r\n      this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length);\r\n\r\n      let ordered_dataset = [];\r\n      // Order the data set according to the randomly ordered array\r\n      for (let i = 0; i < this.sub_condition_order.length; i++) {\r\n          ordered_dataset[i] = dataset[this.sub_condition_order[i]];\r\n      }\r\n      // Set experiment trials\r\n      this.experiment_conditions_constants = ordered_dataset;\r\n      this.current_sub_condition_index = 0;  \r\n  }\r\n\r\n  /**\r\n   * Generates a Numerosity object for use in the JsPsych timeline.\r\n   * Numerosity currently does not support practice trials\r\n   * \r\n   * Each trial begins with a fixation trial block,\r\n   * followed by the stimulus,\r\n   * ended by a feedback trial block where the subject must estimate the\r\n   * number of target stimuli via the slider\r\n   *\r\n   * @param  block_type {string}     \"test\" or \"practice\"\r\n   * @return trial {object}\r\n   */\r\n  generate_trial(block_type) {\r\n\r\n    if ((block_type !== \"test\") && (block_type !== \"practice\")) {\r\n        throw Error(block_type + \" is not supported.\")\r\n    }\r\n    // Initialize a variable for this so it is usable inside on_start\r\n    var numerosity_exp = this;\r\n    var address = location.protocol + \"//\" + location.hostname + \":\" + location.port + \"/numerosity_trial\";\r\n\r\n\r\n    let group = {};\r\n    var fixation = {\r\n      type: 'html-keyboard-response',\r\n      stimulus: '<div style=\"font-size:60px;\">+</div>',\r\n      choices: jsPsych.NO_KEYS,\r\n      trial_duration: 1000,\r\n      data: {type: 'fixation'}\r\n    };\r\n\r\n    var trial = {\r\n      type:'external-html-keyboard-response',\r\n      url: address,\r\n      choices: jsPsych.NO_KEYS,\r\n      trial_duration: 2000,\r\n      execute_script: true,\r\n      on_start: function(trial){ // NOTE: on_start takes in trial var\r\n        var index = numerosity_exp.current_sub_condition_index; \r\n        var constants = numerosity_exp.experiment_conditions_constants[index];\r\n\r\n        trial.data = constants;\r\n        numerosity_exp.set_target_color(constants);\r\n\r\n        var base_coordinates = generateRandomDistribution(constants.row, constants.col, constants.target_num_points, null);\r\n        numerosity_exp.coordinates = [base_coordinates];\r\n\r\n        if (numerosity_exp.condition_group === \"distractor\") {\r\n          var distractor_coordinates = generateRandomDistribution(constants.row, constants.col, constants.dist_num_points, base_coordinates);\r\n          numerosity_exp.distractor_coordinates = [distractor_coordinates];\r\n        }\r\n\r\n        numerosity_exp.trial_data = trial.data;\r\n      }\r\n    };\r\n    var slider_response = {\r\n      type: 'html-slider-response',\r\n      labels: [8,62],\r\n      min: 8,\r\n      max: 62,\r\n      start: 35,\r\n      stimulus:   \r\n          \"<p>How many of this square did you see?\",\r\n      prompt: '<p>Select the number by sliding the bar</p>',\r\n      on_start: function(slider_response) {\r\n        slider_response.stimulus =  \"<p>How many of this square did you see?\" +\r\n        \"<div align = 'center' style='height: 200px; display: block;'>\"+\r\n        `<img src='http://localhost:8080/img/instructions/numerosity/${numerosity_exp.target_color}.png'></img>`+\r\n        \"</div>\" + \r\n        \"<div align = 'center' style='height: 25px; display: block;'>\"+\r\n        \"</div><p>  </p>\";\r\n\r\n        var index = numerosity_exp.current_sub_condition_index; \r\n        var constants = numerosity_exp.experiment_conditions_constants[index];\r\n        slider_response.data = constants;\r\n        numerosity_exp.handle_data_saving(slider_response, block_type, constants, index);\r\n      }\r\n    };\r\n\r\n    //trial.data.slider_response = slider_response.data.response;\r\n    group.timeline = [fixation, trial, slider_response];\r\n    return group;\r\n  }\r\n\r\n  /*\r\n    Fetches and sets target color from subcondition constants\r\n    for use in the response/feedback trial block.\r\n  */\r\n  set_target_color(target) {\r\n    console.log(target);\r\n    var target_hex;\r\n    if (target.point_color) {\r\n      console.log(\"targetpointcolor\");\r\n      target_hex = target.point_color.substring(1); //removing the # symbol from the target.point_color\r\n    }\r\n    if (target.target_color) {\r\n      console.log(\"targettargetcolor\");\r\n      target_hex = target.target_color.substring(1);\r\n    }\r\n    if (target.mix_by_attribute) {\r\n      if (target.mix_by_attribute.point_color) {\r\n        target_hex = target.mix_by_attribute.point_color[0].substring(1);\r\n      }\r\n    }\r\n \r\n    this.target_color = \"num_\" + target_hex;\r\n    console.log(this.target_color);\r\n  }\r\n\r\n  /**\r\n * Handles saving the relevant data on a given trial.\r\n *\r\n */\r\n  handle_data_saving(trial, block_type, constants, index) {\r\n\r\n    // Add all constants from excel\r\n    trial.data = constants;\r\n\r\n    // Adding constants that required computation (not from excel)\r\n    trial.data.type = \"numerosity\";\r\n\r\n    trial.data.sub_condition = index; \r\n\r\n    // Block specific saves \r\n    if (block_type == \"test\"){\r\n      trial.data.run_type = \"test\";\r\n    }\r\n    else{\r\n      trial.data.run_type = \"practice\";\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Saves experiment data as csv\r\n  * */\r\n  export_trial_data() {\r\n      var trial_data = jsPsych.data.get().filter({type: 'numerosity', run_type: 'test'})\r\n      .ignore('type')\r\n      .ignore('run_type')\r\n      .ignore('left_correlation')\r\n      .ignore('right_correlation')\r\n      // These are variables forced on by jsPsych\r\n      .ignore('stimulus')\r\n      .ignore('key_press')\r\n      .ignore('choices')\r\n      .ignore('trial_type')\r\n      .ignore('trial_index')\r\n      .ignore('time_elapsed')\r\n      .ignore('internal_node_id');\r\n\r\n\r\n      var string = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_numerosity_trial_results.csv\";\r\n\r\n      trial_data.localSave('csv', string);\r\n  }\r\n\r\n  /**\r\n  * When called, will save aggregated trial data into a CSV.     \r\n  */\r\n  export_summary_data() {\r\n    var csv = 'SUBJECT_ID,SUBJECT_INITIALS,CONDITION_NAME,NUM_TARGET_POINTS,ROW,COL,TRIALS\\n';\r\n\r\n    var data = [];\r\n    \r\n    // Organize each row of the csv\r\n    for (let i = 0; i<this.experiment_conditions_constants.length; i++){\r\n      var row = [this.subject_id, this.subject_initials, this.condition_name];\r\n      var constants = this.experiment_conditions_constants[i];\r\n      var condition_data = jsPsych.data.get();\r\n\r\n      row.push(constants.target_num_points);\r\n      row.push(constants.row);\r\n      row.push(constants.col);\r\n      row.push(condition_data.count());\r\n\r\n      data.push(row);\r\n    }\r\n\r\n    // Append each row\r\n    data.forEach(function(row){\r\n      csv += row.join(',');\r\n      csv += \"\\n\";\r\n    });\r\n\r\n    var hiddenElement = document.createElement('a');\r\n    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\r\n    hiddenElement.target = '_blank';\r\n    hiddenElement.download = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_numerosity_summary_results.csv\";\r\n    hiddenElement.click();\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/numerosity/numerosity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 716,
    "kind": "class",
    "name": "Numerosity",
    "memberof": "scripts/experiments/numerosity/numerosity.js",
    "static": true,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/numerosity/numerosity.js",
    "importStyle": "Numerosity",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 717,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#constructor",
    "access": "public",
    "description": "Initializes a Numerosity experiment object.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "{object}    Parameters passed in from routing"
      }
    ]
  },
  {
    "__docId__": 718,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 719,
    "kind": "member",
    "name": "condition_group",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#condition_group",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 720,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 721,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 722,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 724,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 725,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "member",
    "name": "target_color",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#target_color",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 727,
    "kind": "member",
    "name": "experiment_conditions_constants",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#experiment_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 728,
    "kind": "member",
    "name": "trial_responses",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#trial_responses",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 729,
    "kind": "member",
    "name": "target_coordinates",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#target_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 730,
    "kind": "member",
    "name": "distractor_coordinates",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#distractor_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 731,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 732,
    "kind": "member",
    "name": "raw_sub_conds",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#raw_sub_conds",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#prepare_experiment",
    "access": "public",
    "description": "Orders the input data according to balancing type and\ninitializes the Estimation object's variables.",
    "lineNumber": 80,
    "params": [],
    "return": null
  },
  {
    "__docId__": 734,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 736,
    "kind": "member",
    "name": "current_sub_condition_index",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#current_sub_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#generate_trial",
    "access": "public",
    "description": "Generates a Numerosity object for use in the JsPsych timeline.\nNumerosity currently does not support practice trials\n\nEach trial begins with a fixation trial block,\nfollowed by the stimulus,\nended by a feedback trial block where the subject must estimate the\nnumber of target stimuli via the slider",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": "{string}     \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    }
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "set_target_color",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#set_target_color",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "handle_data_saving",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#handle_data_saving",
    "access": "public",
    "description": "Handles saving the relevant data on a given trial.",
    "lineNumber": 208,
    "params": [
      {
        "name": "trial",
        "types": [
          "*"
        ]
      },
      {
        "name": "block_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "constants",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#export_trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "export_summary_data",
    "memberof": "scripts/experiments/numerosity/numerosity.js~Numerosity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/numerosity/numerosity.js~Numerosity#export_summary_data",
    "access": "public",
    "description": "When called, will save aggregated trial data into a CSV.     ",
    "lineNumber": 254,
    "params": [],
    "return": null
  },
  {
    "__docId__": 743,
    "kind": "file",
    "name": "scripts/experiments/numerosity/numerosity_timeline.js",
    "content": "import Numerosity from \"/scripts/experiments/numerosity/numerosity.js\";\r\nimport { get_instructions } from \"/scripts/experiment-properties/instructions/instructions_controller.js\";\r\nimport { scaling_input } from \"/scripts/experiment-properties/resolution_scaling/resolution_scaling.js\";\r\n\r\nexport var numerosity_exp = new Numerosity(params);\r\n\r\nvar timeline = [];\r\nvar address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\n// Firefox check for formatting\r\nif (typeof InstallTrigger !== 'undefined') {\r\n  var isFirefox = true;\r\n} else {\r\n  var isFirefox = false;\r\n}\r\n\r\n// =========================================================\r\n// WELCOME TRIAL BLOCK\r\n\r\nlet welcome = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: '<div align = \"center\">' + `<img src=\"${address}/img/VCL_lab_logo.png\"></img> <br>` +\r\n    'Welcome to the <b>Numerosity Task</b> Experiment.' +\r\n    '<br><br><p><font size = 15>Press any key to begin.<p></font>' +\r\n    '</div>',\r\n  data: { type: 'instruction' }\r\n};\r\ntimeline.push(welcome);\r\n\r\n// =========================================================\r\n// RESOLUTION SCALING\r\ntimeline.push(scaling_input);\r\n\r\n// =========================================================\r\n// INSTRUCTION TRIAL BLOCKS\r\nvar instructions = {\r\n  type: \"html-keyboard-response\",\r\n  stimulus: function () {\r\n    return get_instructions(numerosity_exp);\r\n  }\r\n};\r\n\r\ntimeline.push(instructions);\r\n\r\n// =========================================================\r\n// EXPERIMENT TRIAL BLOCKS\r\n\r\nvar trial = numerosity_exp.generate_trial(\"test\");\r\n\r\nvar experiment = {\r\n  timeline: [trial],\r\n  loop_function: function (data) { // Return true if timeline should continue\r\n    // Return false if timeline should end\r\n\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press) {\r\n      return false;\r\n    }\r\n    if (numerosity_exp.current_sub_condition_index < (numerosity_exp.experiment_conditions_constants.length - 1)) {\r\n      numerosity_exp.current_sub_condition_index++;\r\n      console.log(\"!!!!!!!!!! Moved to new sub condition at index \"\r\n        + numerosity_exp.current_sub_condition_index);\r\n      return true;\r\n    }\r\n    // Else end experiment\r\n    else {\r\n      return false;\r\n    }\r\n  },\r\n  on_finish: function (data) {\r\n    numerosity_exp.trial_data = data;\r\n  }\r\n};\r\n\r\ntimeline.push(experiment);\r\n\r\nconsole.log(\"======================\");\r\n\r\n// =========================================================\r\n// DATA DOWNLOADING \r\n\r\nvar experiment_end = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: '<div align = \"center\">' +\r\n    '<p><font size = 10>You have completed the experiment!<p></font>' +\r\n    '<br>' +\r\n    'Trial and summary data files will now automatically download locally.' +\r\n    '</div>',\r\n  on_start: function () {\r\n\r\n    numerosity_exp.export_trial_data();\r\n    numerosity_exp.export_summary_data();\r\n\r\n    // Reset background color to feedback\r\n    document.body.style.backgroundColor = numerosity_exp.trial_data.feedback_background_color;\r\n  }\r\n};\r\ntimeline.push(experiment_end);\r\n\r\n// =========================================================\r\n// START JSPSYCH\r\n\r\njsPsych.init({\r\n  timeline: timeline,\r\n  on_finish: function () {\r\n    jsPsych.data.displayData();\r\n  }\r\n});\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/numerosity/numerosity_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 744,
    "kind": "variable",
    "name": "numerosity_exp",
    "memberof": "scripts/experiments/numerosity/numerosity_timeline.js",
    "static": true,
    "longname": "scripts/experiments/numerosity/numerosity_timeline.js~numerosity_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/numerosity/numerosity_timeline.js",
    "importStyle": "{numerosity_exp}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/numerosity/numerosity.js~Numerosity"
      ]
    }
  },
  {
    "__docId__": 745,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/numerosity/numerosity_timeline.js",
    "static": true,
    "longname": "scripts/experiments/numerosity/numerosity_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/numerosity/numerosity_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 746,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/numerosity/numerosity_timeline.js",
    "static": true,
    "longname": "scripts/experiments/numerosity/numerosity_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/numerosity/numerosity_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 747,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/numerosity/numerosity_timeline.js",
    "static": true,
    "longname": "scripts/experiments/numerosity/numerosity_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/numerosity/numerosity_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 748,
    "kind": "variable",
    "name": "instructions",
    "memberof": "scripts/experiments/numerosity/numerosity_timeline.js",
    "static": true,
    "longname": "scripts/experiments/numerosity/numerosity_timeline.js~instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/numerosity/numerosity_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 749,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/numerosity/numerosity_timeline.js",
    "static": true,
    "longname": "scripts/experiments/numerosity/numerosity_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/numerosity/numerosity_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 750,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/numerosity/numerosity_timeline.js",
    "static": true,
    "longname": "scripts/experiments/numerosity/numerosity_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/numerosity/numerosity_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 751,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/numerosity/numerosity_timeline.js",
    "static": true,
    "longname": "scripts/experiments/numerosity/numerosity_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/numerosity/numerosity_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 752,
    "kind": "file",
    "name": "scripts/experiments/sequencing/sequencing.js",
    "content": "import { balance_subconditions } from '/scripts/experiment-properties/balancing/balancing_controller.js'\r\nimport { initialize_random_order } from '/scripts/experiment-properties/balancing/generators/random_generator.js'\r\nimport { get_data } from '/scripts/experiment-properties/data/data_controller.js'\r\nimport { generate_initial_distribution } from '/scripts/experiment-properties/distribution/distribution_controller.js'\r\nimport { generate_adjusted_distribution} from '/scripts/experiment-properties/distribution/distribution_controller.js'\r\nimport { randomize_position } from '/scripts/helpers/experiment_helpers.js'\r\nimport { EXPERIMENTS } from \"/config/experiments-config.js\";\r\n\r\nexport { IMAGE_PATH };\r\n\r\n\r\nconst IMAGE_PATH = location.protocol + \"//\" + location.hostname + \":\" + location.port + '/scripts/experiments/sequencing/img/noisemask.png';\r\n\r\nexport default class Sequencing {\r\n  /**\r\n   * Initializes a Sequencing experiment object.\r\n   *\r\n   * @param  {assoc array}  Parameters passed from routing.\r\n   */\r\n  constructor(params) {\r\n\r\n    let trial_structure = params[\"trial_structure\"];\r\n    let condition_name = params[\"condition\"];\r\n    let graph_type = params[\"graph_type\"];\r\n    let balancing_type = params[\"balancing\"];\r\n    let conversion_factor = params[\"conversion_factor\"];\r\n\r\n    this.condition_name = condition_name;\r\n    this.condition_group = this.condition_name.split('_')[0]; // Mostly to handle \"distractor\" conditions.\r\n                                                              // TODO: Should have a better flag for it.\r\n    this.subject_id = params[\"subject_id\"];\r\n    this.subject_initials = params[\"subject_initials\"];\r\n    this.auto_mode = false;\r\n\r\n    // ========================================\r\n    // PARAMETER CHECKING\r\n\r\n    // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\r\n    if (!EXPERIMENTS[\"sequencing\"][\"trial_structure\"].includes(trial_structure)) {\r\n      throw Error(trial_structure + \" is not supported.\");}\r\n    else {\r\n      this.trial_structure = trial_structure;\r\n    }\r\n\r\n    if (!EXPERIMENTS[\"sequencing\"][\"graph_type\"].includes(graph_type)){\r\n      throw Error(graph_type + \" is not supported.\")}\r\n    else {\r\n      this.graph_type = graph_type;\r\n    };\r\n\r\n    if (!EXPERIMENTS[\"sequencing\"][\"balancing_type\"].includes(balancing_type)) {\r\n      throw Error(balancing_type + \" is not supported.\") }\r\n    else {\r\n      this.balancing_type = balancing_type;\r\n    }\r\n\r\n    // ========================================\r\n    // EXPERIMENT CONSTANTS\r\n\r\n    this.PIXELS_PER_CM = conversion_factor;\r\n    this.MIN_CORRELATION = 0.0;\r\n    this.MAX_CORRELATION = 1.0;\r\n    this.MIN_TRIALS = 24;\r\n    this.MAX_TRIALS = 52;\r\n    this.WINDOW_SIZE = 24;\r\n    this.WINDOW_INTERVAL = 3;\r\n    this.CONVERGENCE_THRESHOLD = 0.75;\r\n    this.INCORRECT_MULTIPLIER = 3;\r\n    this.MAX_REPETITIONS = 5;\r\n    this.SCREEN_HEIGHT = this.getScreenHeight();\r\n\r\n\r\n    // ========================================\r\n    // PRACTICE EXPERIMENT VARIABLES\r\n\r\n    this.MAX_PRACTICE_TRIALS = 50;\r\n    this.PRACTICE_CORRELATION = 0.6;\r\n    this.PRACTICE_STIMULUS_DURATION = 400;\r\n    this.practice_conditions_constants;\r\n    this.current_practice_condition_index;\r\n    this.practice_selection_matrix = [];\r\n    this.adjusted_quantity_practice = {};\r\n    this.PRACTICE_PARAMTERS = {distribution_type: \"gaussian\", base_correlation: 0.6,\r\n                               stimulus_duration:500 , distractor_duration:200, error: 0.0001,\r\n                               max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1,\r\n                               num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK',\r\n                               axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE',\r\n                               background_color: 'WHITE', point_size: 6};\r\n\r\n\r\n    // ========================================\r\n    // TEST EXPERIMENT VARIABLES\r\n\r\n    this.first_above_trial = true;\r\n    this.first_below_trial = true;\r\n    this.converge_from_above = false;\r\n    this.converge_from_below = false;\r\n    this.first_to_converge = \"none\";\r\n    this.sub_condition_order;\r\n    this.sub_conditions_constants;\r\n    this.current_sub_condition_index;     // Index used to keep track of the current subcondition. Starts at 0, goes to 8\r\n    this.trial_selection_matrix = [];\r\n    this.adjusted_quantity_matrix = {};   // The matrix is in this format:\r\n                                          // { sub_condition_index : [below_track, above_track ] }\r\n                                          // below_track : [below_adjusted_quantity1, below_adjusted_quantity2 ...]\r\n                                          // above_track : [above_adjusted_quantity1, above_adjusted_quantity2 ...]\r\n\r\n    // ========================================\r\n    // DEBUG VARIABLES\r\n    this.end_sub_condition_debug = false;\r\n\r\n    // ========================================\r\n    // CURRENT TRIAL DATA\r\n\r\n    // Plotting-related vars\r\n    this.left_coordinates = \"\";\r\n    this.right_coordinates = \"\";\r\n    this.distractor_coordinates = \"\";\r\n\r\n    // JsPsych trial_data for the current trial\r\n    this.trial_data = \"\";\r\n\r\n    // ========================================\r\n    // PREPARE EXPERIMENT\r\n\r\n    // Extract raw constants\r\n    this.raw_constants = get_data(this);\r\n\r\n    // Prepare experiment + practice data\r\n    this.prepare_experiment();\r\n    this.prepare_practice();\r\n\r\n    // ========================================\r\n    // Adjusted Statistic Values\r\n    // ** Previously were set inside the get_next_adjusted_statistic method.\r\n    // ** Replacing constants into variables to be set inside the method.\r\n    let correct_statistic_increment;\r\n    let incorrect_statistic_increment;\r\n  }\r\n\r\n\r\n  /**\r\n   * Orders the input data according to balancing type and\r\n   * initializes the Sequencing object's variables.\r\n   *\r\n   * @param  balancing_type {string}                             Type of balancing. Currently only latin_square\r\n   *                                                             is supported.\r\n   *         dataset {[{assoc array}, {assoc array}, ... ]}      The data to be ordered.\r\n   */\r\n  prepare_experiment() {\r\n\r\n    let dataset = this.raw_constants;\r\n    // it gets scrambled for some reason.  put it back in order, according to the hardcoded subcond numbers\r\n\r\n    this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length, dataset, \"stimulus_duration\");\r\n\r\n    var ordered_dataset = [];\r\n\r\n    // Order the data set according to the latin square\r\n    // Initialize adjusted_quantity_matrix size\r\n    for (let i=0; i < this.sub_condition_order.length; i++){\r\n      ordered_dataset[i] = dataset[this.sub_condition_order[i]];\r\n      this.adjusted_quantity_matrix[i] = [];\r\n      this.adjusted_quantity_matrix[i][0] = []; //below track\r\n      this.adjusted_quantity_matrix[i][1] = []; //above track\r\n      this.trial_selection_matrix[i] = [];\r\n      this.generate_random_trial_array(i,this.trial_selection_matrix,this.MAX_TRIALS);\r\n    }\r\n\r\n    // Set experiment trials\r\n    this.sub_conditions_constants = ordered_dataset;\r\n    this.current_sub_condition_index = 0;\r\n  }\r\n\r\n  /**\r\n   * Orders the input dataset by randomizing it, and initializes the practice variables.\r\n   *\r\n   * @param  dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered.\r\n   */\r\n  prepare_practice() {\r\n\r\n    let dataset = this.raw_constants;\r\n\r\n    //this.sub_condition_order = initialize_random_order(dataset.length);\r\n    let practice_dataset = [];\r\n\r\n    practice_dataset[0] = this.PRACTICE_PARAMTERS;\r\n    this.adjusted_quantity_practice[0] = [];\r\n    this.adjusted_quantity_practice[0][0] = []; //below track\r\n    this.adjusted_quantity_practice[0][1] = []; //above track\r\n    this.practice_selection_matrix[0] = [];\r\n    this.generate_random_trial_array(0,this.practice_selection_matrix,this.MAX_PRACTICE_TRIALS);\r\n\r\n    // Set practice trials\r\n    this.practice_conditions_constants = practice_dataset;\r\n    this.current_practice_condition_index = 0;\r\n  }\r\n\r\n  /* Create randomized array of each track type, above or below, such that there\r\n   is not more than MAX_REPETITIONS of the same track in a row\r\n   *\r\n   * @param  index {int}\r\n             array {array of arrays}\r\n             max_length {int}\r\n   */\r\n  generate_random_trial_array(index,array,max_length){\r\n    while(array[index].length < 2 * max_length){\r\n\r\n      // remaining_trials will always be even: 2*this.MAX_TRIALS is even,\r\n      // this.trial_selection_matrix[index].length grows in 2s in the push(above/blow) lines so its also even\r\n      // 2k - 2m = 2(k-m) where k and m are interger, k-m = j where j is an integer\r\n      // remaining_trials / 2 = 2j / 2 = j\r\n      var remaining_trials = 2 * max_length - array[index].length;\r\n\r\n      // Base case when remaining number of trials is less than sub_block size\r\n      // eg with MAX_TRIALS = 52 and MAX_REPETITIONS = 5, the 11th iteration of the while loop will\r\n      // have 4 \"spots\" remaining in the trial_selection_matrix[index] array (52 * 2 = 104) so, you\r\n      // can't fill it with 2 * MAX_REPETITIONS = 10 trials\r\n      if( remaining_trials  < 2 * this.MAX_REPETITIONS){\r\n        var sub_block = [];\r\n        for (var i = 0; i < remaining_trials / 2; i++){\r\n          sub_block.push(\"above\");\r\n          sub_block.push(\"below\");\r\n        }\r\n        this.shuffleArray(sub_block);\r\n        array[index].push(...sub_block);\r\n      }\r\n      // Normal case, above/below trial added at the same time, sub_block will be of size 2 * MAX_REPETITIONS\r\n      else{\r\n        var sub_block = [];\r\n        for(var i = 0; i < this.MAX_REPETITIONS; i++){\r\n          sub_block.push(\"above\");\r\n          sub_block.push(\"below\");\r\n        }\r\n        this.shuffleArray(sub_block);\r\n        array[index].push(...sub_block);\r\n      }\r\n    }\r\n    console.log(array[index]);\r\n  }\r\n\r\n  /**\r\n   * Generates a Sequencing trial object for use in the JsPsych timeline.\r\n   *\r\n   * @param  type {string}             \"test\" or \"practice\"\r\n   * @return trial {object}\r\n   */\r\n  generate_trial(block_type) {\r\n\r\n    if ((block_type !== \"test\") && (block_type !== \"practice\")) {throw Error(block_type + \" is not supported.\")};\r\n\r\n    // Initialize a variable for this so it is usable inside on_start\r\n    var sequencing_exp = this;\r\n    var address = location.protocol + \"//\" + location.hostname + \":\" + location.port + \"/sequencing_trial\";\r\n   // var imgaddress = location.protocol + \"//\" + location.hostname + \":\" + location.port + IMAGE_PATH;\r\n    // local variables so base trial can access it too\r\n    var adjusted_value;\r\n    var direction;\r\n\r\n    // let participants know which number subcondition block they are about to perform\r\n    var subcond_num = {\r\n      stimulus: '',\r\n      type: 'html-keyboard-response',\r\n      choices: [' '],\r\n      on_start: function(subcond_num) {\r\n        if (block_type === \"test\"){\r\n          var index = sequencing_exp.current_sub_condition_index;\r\n        }\r\n        else {\r\n          var index = sequencing_exp.current_practice_condition_index;\r\n        }\r\n        subcond_num.stimulus = `<div align=\"center\" style=\"font-size:20px\"><p><b>Ready? Experiment block ${index + 1} of ${sequencing_exp.raw_constants.length} will now begin.</b></p><br><p>Press the spacebar to continue.</p></div>`;\r\n      }\r\n    }\r\n\r\n    // conditional timeline wrapper\r\n    var subcond_num_timeline = {\r\n      timeline: [subcond_num],\r\n      conditional_function: function() {\r\n        if (sequencing_exp.is_start_of_subcondition() && block_type === \"test\") {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Getting test/practice subcondition parameters\r\n    var difference = {\r\n      type:'sequencing-graph',\r\n      block_type: block_type,\r\n      //url: address,\r\n      choices: jsPsych.NO_KEYS,\r\n      //execute_script: true,\r\n      trial_duration: 1000,\r\n\r\n      on_start: function(difference){\r\n        // if (sequencing_exp.auto_mode) {\r\n        //   difference.post_trial_gap = 0;\r\n        //   difference.trial_duration = 0;\r\n        // }\r\n        if (block_type == \"test\"){\r\n          var index = sequencing_exp.current_sub_condition_index;\r\n          var constants = sequencing_exp.sub_conditions_constants[index];\r\n\r\n          // Get track direction\r\n          var curr_trial_index = sequencing_exp.adjusted_quantity_matrix[index][0].length + sequencing_exp.adjusted_quantity_matrix[index][1].length;\r\n          direction = sequencing_exp.trial_selection_matrix[index][curr_trial_index];\r\n        }\r\n        else {\r\n          var index = 0;\r\n          var constants = sequencing_exp.practice_conditions_constants[index];\r\n          // constants.stimulus_duration = sequencing_exp.PRACTICE_STIMULUS_DURATION;\r\n          // constants.base_correlation = sequencing_exp.PRACTICE_CORRELATION;\r\n\r\n          // Get Track direction\r\n          var curr_trial_index = sequencing_exp.adjusted_quantity_practice[index][0].length + sequencing_exp.adjusted_quantity_practice[index][1].length;\r\n          direction = sequencing_exp.trial_selection_matrix[index][curr_trial_index];\r\n        }\r\n\r\n        difference.trial_duration = constants.stimulus_duration;\r\n        adjusted_value = sequencing_exp.calculate_adjusted_value(constants, direction);\r\n        sequencing_exp.handle_data_saving(difference, block_type, constants, index, adjusted_value, \"difference\" , direction);\r\n        var adjusted_coordinates = generate_adjusted_distribution(constants, adjusted_value);\r\n\r\n        // Set up D3 variables for plotting\r\n        sequencing_exp.coordinates = [adjusted_coordinates];\r\n        sequencing_exp.trial_data = difference.data;\r\n        difference.exp_obj = sequencing_exp;\r\n      },\r\n    };\r\n\r\n    var distractor = {\r\n      type: 'html-keyboard-response',\r\n      stimulus: `<div align = \"center\">` + `<img src=\"${IMAGE_PATH}\" width=\"${sequencing_exp.SCREEN_HEIGHT/13}px\"></img><br><br><br></div>`,\r\n      choices: jsPsych.NO_KEYS,\r\n      trial_duration: 1000,\r\n      on_start: function(distractor) {\r\n        if (block_type == \"test\"){\r\n          var index = sequencing_exp.current_sub_condition_index;\r\n          var constants = sequencing_exp.sub_conditions_constants[index];\r\n        }\r\n        else {\r\n          var index = sequencing_exp.current_practice_condition_index;\r\n          var constants = sequencing_exp.practice_conditions_constants[index];\r\n        }\r\n        distractor.trial_duration = constants.distractor_duration;\r\n      }\r\n    };\r\n\r\n    var base = {\r\n      type:'sequencing-graph',\r\n      block_type: block_type,\r\n      //url: address,\r\n      //execute_script: true,\r\n      choices:['z', 'm', 'q', 't', 'w'], //q is exit button (for debugging)\r\n      on_start: function(base){\r\n        if (sequencing_exp.auto_mode) {\r\n          base.post_trial_gap = 12;\r\n          base.trial_duration = 12;\r\n        }\r\n        if (block_type == \"test\"){\r\n          var index = sequencing_exp.current_sub_condition_index;\r\n          var constants = sequencing_exp.sub_conditions_constants[index];\r\n        }\r\n        else {\r\n          var index = sequencing_exp.current_practice_condition_index;\r\n          var constants = sequencing_exp.practice_conditions_constants[index];\r\n          //constants.base_correlation = sequencing_exp.PRACTICE_CORRELATION;\r\n        }\r\n\r\n        // Handling saving this trial's data:\r\n        sequencing_exp.handle_data_saving(base, block_type, constants, index, adjusted_value, \"base\", direction);\r\n\r\n        // Generate distributions\r\n        var base_coordinates = generate_initial_distribution(constants);\r\n        // TODO: DELETE WHEN DONE DEBUGGING\r\n        console.log(\"[DIFFERENCE] Correlation: \" + adjusted_value);\r\n        console.log(\"[BASE] Correlation: \" + constants.base_correlation);\r\n        console.log(\"stimulus duration\", constants.stimulus_duration)\r\n        console.log(\"subcond no\", constants.subcondition_number)\r\n\r\n        // Set up D3 variables for plotting\r\n        sequencing_exp.coordinates = [base_coordinates];\r\n        sequencing_exp.trial_data = base.data;\r\n        difference.exp_obj = sequencing_exp;\r\n        base.exp_obj = sequencing_exp;\r\n      },\r\n      on_finish: function(data){\r\n        // Set the constants to be used:\r\n        let index;\r\n        let constants;\r\n        if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('t') || sequencing_exp.auto_mode) {\r\n          // Turn on automation\r\n          sequencing_exp.auto_mode = true;\r\n          if (Math.random() < 0.5) {\r\n            console.log(\"'z' pressed\");\r\n            data.key_press = jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z');\r\n          } else {\r\n            console.log(\"'m' pressed\");\r\n            data.key_press = jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m');\r\n          }\r\n        }\r\n\r\n        sequencing_exp.check_response_sequencing(data);\r\n        console.log(\"RESPONSE: \" + data.correct);\r\n      },\r\n    };\r\n\r\n    var likert = {\r\n      type: 'survey-likert',\r\n      questions: [\r\n        {prompt: \"<div align='center'>Please rate your confidence in your estimates for the previous block,<br> with 1 being a pure guess, and 5 being complete certainty.</div>\", labels: [\"1\",\"2\",\"3\",\"4\",\"5\"]}\r\n      ],\r\n      on_start: function(likert) {\r\n\r\n        if (sequencing_exp.auto_mode) {\r\n          likert.post_trial_gap = 100;\r\n          //likert.trial_duration = 12;\r\n          sequencing_exp.auto_mode = false;\r\n          console.log(\"Automode off\");\r\n        }\r\n\r\n        if (block_type === \"test\"){\r\n          var index = sequencing_exp.current_sub_condition_index;\r\n          var constants = sequencing_exp.sub_conditions_constants[index];\r\n        }\r\n        else {\r\n          var index = sequencing_exp.current_practice_condition_index;\r\n          var constants = sequencing_exp.practice_conditions_constants[index];\r\n        }\r\n\r\n        // Handling saving this trial's data:\r\n        sequencing_exp.handle_data_saving(likert, block_type, constants, index, adjusted_value, \"likert\", direction);\r\n      }\r\n    };\r\n\r\n    // conditional likert timeline wrapper\r\n    var likert_timeline = {\r\n      timeline: [likert],\r\n      conditional_function: function() {\r\n        // if subcondition should end, add likert scale\r\n        if (sequencing_exp.end_sub_condition(\"test\")) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    };\r\n\r\n    // initialize trial to return\r\n    var trial = [];\r\n    trial = [subcond_num_timeline, difference, distractor, base, likert_timeline];\r\n\r\n    return trial;\r\n  };\r\n\r\n  /**\r\n   * Handles saving the relevant data on a given trial.\r\n   *\r\n   * For reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\r\n   * trial_variables =\r\n   *       {type: 'sequencing',\r\n   *       run_type: '',\r\n   *       left_correlation: '',\r\n   *       right_correlation: '',\r\n   *       };\r\n   *\r\n   * These are variables created WITHIN the trial logic that were not present in excel (but need to be\r\n   * outputted to results).\r\n   * export_variables =\r\n   *       {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\r\n   *        balanced_sub_condition: '',  // Index of sub_condition according to balancing order\r\n   *        jnd: '',\r\n   *        direction '',\r\n   *        base_correlation: '',\r\n   *        adjusted_value: '',\r\n   *        correct: '',\r\n   *       };\r\n   *\r\n   * @param trial {object}\r\n   *        block_type {string}           \"test\" or \"practice\"\r\n   *        constants {assoc array}\r\n   *        index {integer}\r\n   *        adjusted_value {double}\r\n   *        order_type {sring}            \"base\" or \"difference\"\r\n   *        direction {string}            \"above\" or \"below\"\r\n   */\r\n  handle_data_saving(trial, block_type, constants, index, adjusted_value, order_type, direction) {\r\n    // Add all constants from excel\r\n    trial.data = constants;\r\n    // Adding constants that required computation (not from excel)\r\n    trial.data.type = \"sequencing\";\r\n    trial.data.graph_type = this.graph_type;\r\n    trial.data.order = order_type;\r\n    trial.data.direction = direction;\r\n    trial.data.adjusted_value = adjusted_value;\r\n    trial.data.adjusted_value_type = \"correlation\";\r\n    trial.data.jnd = Math.abs(adjusted_value - constants.base_correlation);\r\n    trial.data.sub_condition = index;\r\n    trial.data.balanced_sub_condition = this.sub_condition_order[index];\r\n\r\n    // console.log(\"[ABOVE] converge \" + this.converge_from_above );\r\n    // console.log(\"[BELOW] converge \" + this.converge_from_below );\r\n\r\n    // Only \"base\" trials are saved as they are the last one in the sequence\r\n    if(order_type === \"base\" || order_type === \"likert\"){\r\n      switch(block_type){\r\n        case \"test\":\r\n          this.save_to_matrix(trial, block_type, index, adjusted_value, direction, constants, this.adjusted_quantity_matrix);\r\n          // trial.data.first_to_converge = this.first_to_converge;\r\n          trial.data.converge_from_above = this.converge_from_above;\r\n          trial.data.converge_from_below = this.converge_from_below;\r\n          break;\r\n        case \"practice\":\r\n          this.save_to_matrix(trial, block_type, index, adjusted_value, direction, constants, this.adjusted_quantity_practice);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Generic function to save data into different matrices, either the practice matrix\r\n  (so that it doesn't affect the rest of the experiment) or the proper experiment matrix\r\n  * @param trial {object}\r\n  *        block_type {string}           \"test\" or \"practice\"\r\n  *        constants {assoc array}\r\n  *        index {integer}\r\n  *        adjusted_value {double}\r\n  *        direction {string}            \"above\" or \"below\"\r\n  *        matrix {matrix array}         \"adjusted_quantity_matrix\" or \"adjusted_quantity_practice\"\r\n  */\r\n  save_to_matrix(trial, block_type, index, adjusted_value, direction, constants, matrix){\r\n    trial.data.run_type = block_type;\r\n    if (direction === \"below\") {\r\n      matrix[index][0].push(adjusted_value);\r\n      console.log(\"Pushed below trial \"  + matrix[index][0].length + \" into matrix with index \" + index);\r\n    }\r\n    else if (direction === \"above\") {\r\n      matrix[index][1].push(adjusted_value);\r\n      console.log(\"Pushed above trial \"  + matrix[index][1].length + \" into matrix with index \" + index);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Determines whether the current sub condition can end or not.\r\n   *\r\n   * @return {boolean}            True if sub condition should end.\r\n   */\r\n  end_sub_condition(block_type) {\r\n    if (block_type === \"test\") {\r\n\r\n      if(this.end_sub_condition_debug){\r\n        console.log(\"Skiping Sub Condition\")\r\n        return true;\r\n      }\r\n\r\n      var max_above = this.adjusted_quantity_matrix[this.current_sub_condition_index][1].length >= this.MAX_TRIALS;\r\n      var max_below = this.adjusted_quantity_matrix[this.current_sub_condition_index][0].length >= this.MAX_TRIALS;\r\n\r\n\r\n      if(max_above && max_below){\r\n        console.log(\"Ending sub_condition due to max number of trials reached\");\r\n        return true;\r\n      }\r\n\r\n      // Each track only needs to converge once\r\n      if(!this.converge_from_above){\r\n        this.converge_from_above = this.is_converged_in_window(\"above\");\r\n      }\r\n      if(!this.converge_from_below){\r\n        this.converge_from_below = this.is_converged_in_window(\"below\");\r\n      }\r\n\r\n      if ((this.converge_from_below && max_below) ||\r\n          (this.converge_from_above && max_above) ||\r\n          (this.converge_from_above && this.converge_from_below)){\r\n        console.log(\"Ending sub_condition\");\r\n        return true;\r\n      }\r\n      else{\r\n        return false;\r\n      }\r\n    }\r\n    else {\r\n      // Convergance is not tested for practice\r\n      var max_above = this.adjusted_quantity_practice[0][1].length >= this.MAX_PRACTICE_TRIALS;\r\n      var max_below = this.adjusted_quantity_practice[0][0].length >= this.MAX_PRACTICE_TRIALS;\r\n\r\n      console.log(\"Number of Above Practice trials: \" + this.adjusted_quantity_practice[0][1].length );\r\n      console.log(\"Number of Below Practice trials: \" + this.adjusted_quantity_practice[0][0].length );\r\n\r\n      return max_above && max_above;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Checks whether we have just started a subcondition.\r\n   *\r\n   * @return {boolean}            True if sub condition has just started.\r\n   */\r\n  is_start_of_subcondition() {\r\n\r\n    if (this.adjusted_quantity_matrix[this.current_sub_condition_index][0].length === 0 &&\r\n        this.adjusted_quantity_matrix[this.current_sub_condition_index][1].length === 0 ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Determines whether current subcondition has converged or not.\r\n   * @param  direction {string} \"above\" or \"below\"\r\n   * @return {boolean}            True if converged.\r\n   */\r\n  is_converged_in_window(direction) {\r\n\r\n    var converged = false;\r\n    var num_completed_trials;\r\n    var direction_index;\r\n\r\n    if (direction === \"below\"){\r\n      num_completed_trials = this.adjusted_quantity_matrix[this.current_sub_condition_index][0].length;\r\n      direction_index = 0;\r\n    }\r\n    else if (direction === \"above\") {\r\n      num_completed_trials = this.adjusted_quantity_matrix[this.current_sub_condition_index][1].length;\r\n      direction_index = 1;\r\n    }\r\n\r\n    // Check if we have completed the minimum number of trials\r\n    // and if the number of completed trials is greater than the window size\r\n    if (num_completed_trials >= this.MIN_TRIALS && num_completed_trials >= this.WINDOW_SIZE) {\r\n\r\n      // 2D Matrix of windows of adjusted quantities\r\n      var adjusted_quantity_windows = [];\r\n\r\n      // The index of the last trial\r\n      var last_trial = num_completed_trials - 1;\r\n\r\n      // Compute the interval size and remainder\r\n      // The remainder is computed in case the window size isn't divisible by the # intervals\r\n      var interval_size = this.WINDOW_SIZE / this.WINDOW_INTERVAL;\r\n      var interval_remainder = this.WINDOW_SIZE % this.WINDOW_INTERVAL;\r\n\r\n      // This is the first trial in the window\r\n      // For example:\r\n      // numCompletedTrials = 5\r\n      // windowSize = 3\r\n      // [ 0 1 2 3 4 5 6 7 8 9 ]\r\n      // windowStart would be at index: 5 - 3 = 2\r\n      var window_start = num_completed_trials - this.WINDOW_SIZE;\r\n      console.log(\"num completed: \" + num_completed_trials);\r\n      console.log(\"window start: \" + window_start);\r\n\r\n      // Iterate over all of the trials from the start of the window to the last trial\r\n      // and organize them into the 2D adjustedQuantityWindows matrix\r\n      while (window_start < last_trial) {\r\n\r\n        // While we have extra elements that don't fit into an interval\r\n        // add one extra to each window interval\r\n        var current_interval_size = interval_remainder > 0 ? interval_size + 1 : interval_size;\r\n        if (interval_remainder > 0) {\r\n          interval_remainder--;\r\n        }\r\n\r\n        // Collect the adjusted quantity values from the trials into the double[]\r\n        var adjusted_quantities = [];\r\n        for (let i = 0; i < current_interval_size; ++i) {\r\n          var adjusted_quantity = this.adjusted_quantity_matrix[this.current_sub_condition_index][direction_index][i + window_start];\r\n          adjusted_quantities.push(adjusted_quantity);\r\n        }\r\n\r\n        // Set the window start to the next interval\r\n        window_start += current_interval_size;\r\n        adjusted_quantity_windows.push(adjusted_quantities);\r\n      }\r\n\r\n      console.log(adjusted_quantity_windows);\r\n\r\n      var variance = [];\r\n      var mean = [];\r\n      for (let i = 0; i < adjusted_quantity_windows.length; i++){\r\n        variance.push(math.var(adjusted_quantity_windows[i]));\r\n        mean.push(math.mean(adjusted_quantity_windows[i]));\r\n      }\r\n\r\n      var mean_of_variances = math.mean(variance);\r\n      var variance_of_means = math.var(mean);\r\n      var F = variance_of_means/mean_of_variances;\r\n      console.log(\"F: \" + F);\r\n      // Convergence if the F value is < 1 - convergenceThreshold\r\n      // if the F is greater than 0.25, then converge\r\n      converged = F < (1 - this.CONVERGENCE_THRESHOLD);\r\n    }\r\n\r\n    if (converged) {\r\n      if (this.first_to_converge === \"none\"){\r\n          this.first_to_converge = direction;\r\n          console.log(\"First to converge: \" , this.first_to_converge);\r\n\r\n      }\r\n      console.log(\"CONVERGED!!!!\")\r\n    };\r\n    return converged;\r\n  }\r\n\r\n  /**\r\n   * Calculates the adjusted value depending on whether this is the\r\n   * first trial of the sub condition or not.\r\n   *\r\n   * @param  constants {assoc array}\r\n   * @param  type {string} \"above\" or \"below\"\r\n\r\n   * @return adjusted_value {double}\r\n   */\r\n  calculate_adjusted_value(constants, direction) {\r\n    console.log(\"Getting adjusted value\");\r\n\r\n    // For the first trial of each type, we need to initialize the adjusted correlation:\r\n    if (direction === \"above\"){\r\n      if (this.first_above_trial){\r\n        console.log(\"First Above Trial\");\r\n        var adjusted_value = this.initialize_adjusted_statistic(constants , \"above\");\r\n        // Set flag to false\r\n        this.first_above_trial = false;\r\n      }\r\n      else{\r\n        var last_Sequencing_trial = jsPsych.data.get().filter({ order:\"base\", direction: \"above\"}).last(1).values()[0];\r\n        var adjusted_value = this.get_next_adjusted_statistic(last_Sequencing_trial, constants, direction);\r\n      }\r\n    }\r\n    if (direction === \"below\"){\r\n      if(this.first_below_trial){\r\n        console.log(\"First Below Trial\")\r\n        var adjusted_value = this.initialize_adjusted_statistic(constants , \"below\");\r\n        this.first_below_trial = false;\r\n      }\r\n      else{\r\n        var last_Sequencing_trial = jsPsych.data.get().filter({ order:\"base\", direction: \"below\"}).last(1).values()[0];\r\n        var adjusted_value = this.get_next_adjusted_statistic(last_Sequencing_trial, constants, direction);\r\n      }\r\n    }\r\n\r\n    return adjusted_value;\r\n  }\r\n\r\n  /**\r\n   * Initializes the adjusted value for the first time.\r\n   *\r\n   * @param  {object}             constants\r\n   * @param {string}              type \"above\" or \"below\"\r\n   * @return {double}             adjusted_value\r\n   */\r\n  initialize_adjusted_statistic(constants, type) {\r\n    let adjusted_value;\r\n\r\n    // if (constants.reference_start) {\r\n    //   adjusted_value = constants.reference_start;\r\n    // }\r\n\r\n    if (type == \"above\"){\r\n      adjusted_value = Math.min(this.MAX_CORRELATION, constants.base_correlation + constants.initial_difference);\r\n    }\r\n    else {\r\n      adjusted_value = Math.max(this.MIN_CORRELATION, constants.base_correlation - constants.initial_difference);\r\n    };\r\n\r\n    return adjusted_value;\r\n  }\r\n\r\n  /**\r\n   * Calculates the next adjusted value.\r\n   *\r\n   * @param  {object} last_Sequencing_trial\r\n   *.        {object} constants\r\n             {string} direction \"above\" or \"below\"\r\n   * @return {double} next_adjusted_statistic\r\n   */\r\n  get_next_adjusted_statistic(last_Sequencing_trial, constants, direction){\r\n    let next_adjusted_statistic;\r\n    // For num_corr conditions, guard to force adjusted stat to be use this calculation instead of the\r\n    // traditional min/max AKA what is in get_next_adjusted_correlation\r\n    // switch statement structure left for possible future expansion\r\n    if (direction === \"above\") {\r\n      console.log(\"Getting [ABOVE] adjustment\");\r\n      if (last_Sequencing_trial.correct) {\r\n        this.correct_statistic_increment = 0.01;\r\n        next_adjusted_statistic = Math.max(last_Sequencing_trial.adjusted_value - this.correct_statistic_increment, this.MIN_CORRELATION);\r\n      } else {\r\n        this.incorrect_statistic_increment = 0.03;\r\n        next_adjusted_statistic = Math.min(last_Sequencing_trial.adjusted_value + this.incorrect_statistic_increment, this.MAX_CORRELATION);\r\n      }\r\n    }\r\n    if (direction === \"below\") {\r\n      console.log(\"Getting [BELOW] adjustment\");\r\n      if (last_Sequencing_trial.correct) {\r\n        this.correct_statistic_increment = 0.01;\r\n        next_adjusted_statistic = Math.min(last_Sequencing_trial.adjusted_value + this.correct_statistic_increment, this.MAX_CORRELATION );\r\n      } else {\r\n        this.incorrect_statistic_increment = 0.03;\r\n        next_adjusted_statistic = Math.max(last_Sequencing_trial.adjusted_value - this.incorrect_statistic_increment, this.MIN_CORRELATION);\r\n      }\r\n    }\r\n\r\n\r\n    return next_adjusted_statistic;\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Given a Sequencing trial data, determines whether response is\r\n   * correct or not.\r\n   *\r\n   * @param  {JsPsych.data}  data\r\n   * @param. {object}        constants\r\n   * @return {boolean}\r\n   */\r\n  check_response(data, constants) {\r\n\r\n    // For debugging purposes:\r\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q')){\r\n      data.correct = -1;\r\n      return -1;\r\n    }\r\n\r\n    let right_greater_clause;\r\n    let left_greater_clause;\r\n\r\n    if (!constants.task || constants.task === \"correlation\") {\r\n\r\n      right_greater_clause = data.right_correlation > data.left_correlation;\r\n      left_greater_clause = data.left_correlation > data.right_correlation;\r\n\r\n    } else {\r\n      throw Error(\"Check response function has not been handled for task: \" + constants.task);\r\n    }\r\n\r\n    if (right_greater_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m')) ||\r\n        left_greater_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z'))){\r\n\r\n      data.correct = true;\r\n      return true;\r\n    }\r\n    // Assuming that if base_correlation = adjusted_correlation, at this point\r\n    // any user choice is wrong.\r\n    else {\r\n      data.correct = false;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a Sequencing trial data, determines whether response is\r\n   * correct or not.\r\n   *\r\n   * @param  {JsPsych.data}  data\r\n   * @return {boolean}\r\n   */\r\n  check_response_sequencing(data) {\r\n    // For debugging purposes:\r\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q')){\r\n      data.correct = -1; // debug flag\r\n      return -1;\r\n    }\r\n    // Skip current subcondition\r\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('w')){\r\n      this.end_sub_condition_debug = true;\r\n      data.correct = -1; // skip subcondition flag\r\n      return -1;\r\n    }\r\n\r\n    let base_greater_clause;\r\n    let diff_greater_clause;\r\n\r\n\r\n    var alpha = 0.000001; // Alpha value to compare doubles\r\n    var are_equal = Math.abs(data.base_correlation - data.adjusted_value) <= alpha;\r\n\r\n    // Assuming that if base_correlation = adjusted_correlation, at this point\r\n    // any user choice is wrong.\r\n    if(are_equal){\r\n      data.correct = false;\r\n      data.jnd = 0;\r\n\r\n      return false;\r\n    }\r\n\r\n    base_greater_clause = data.base_correlation > data.adjusted_value;\r\n    diff_greater_clause = data.adjusted_value > data.base_correlation;\r\n\r\n    if (base_greater_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m')) ||\r\n        diff_greater_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z'))){\r\n\r\n      data.correct = true;\r\n      return true;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * When called, will save individual trial data into a CSV.\r\n   */\r\n  export_trial_data() {\r\n\r\n    const trial_data = jsPsych.data.get().filter({type: 'sequencing', run_type: 'test'})\r\n                                       .filterCustom(function(x){ //Don't include the exit trials\r\n                                         return x.correct != -1;\r\n                                       })\r\n                                       .filterCustom(function(x){\r\n                                         if (x.order === \"base\" || x.order === \"likert\")  // filter for only base and likert trials\r\n                                         return x;\r\n                                       })\r\n                                       // Sequencing's trial variables\r\n                                       .ignore('type')\r\n                                       .ignore('run_type')\r\n                                       .ignore('left_correlation')\r\n                                       .ignore('right_correlation')\r\n                                       // These are variables forced on by jsPsych\r\n                                       .ignore('stimulus')\r\n                                       .ignore('key_press')\r\n                                       .ignore('choices')\r\n                                       .ignore('trial_type')\r\n                                       .ignore('trial_index')\r\n                                       .ignore('time_elapsed')\r\n                                       .ignore('internal_node_id');\r\n\r\n    //console.log(\"trial data: \",trial_data.json());\r\n    //console.log(\"stringified trial data: \", JSON.stringify(JSON.parse(trial_data.json())));\r\n\r\n    // TODO: js converting key_string to use double quotes, needs to be single to pass into ignore() fxn\r\n    //\r\n    // for (var key in sequencing_exp.trial_variables){\r\n    //  var key_string = '${key}';\r\n    //  trial_data.ignore(key);\r\n    // }\r\n    //\r\n    //\r\n    // Local save\r\n    // var string = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_sequencing_trial_results.csv\";\r\n    // trial_data.localSave('csv', string);\r\n\r\n    //Firebase upload\r\n\r\n    let summary_data = [];\r\n\r\n    for (let i = 0; i<this.sub_conditions_constants.length; i++) {\r\n      let sub_data = {};\r\n\r\n      const constants = this.sub_conditions_constants[i];\r\n\r\n      const condition_data = jsPsych.data.get().filter({type: 'sequencing', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                               .filterCustom(function(x) {\r\n                                                 return (x.correct != -1\r\n                                                      && x.order === \"base\");\r\n                                                    });\r\n\r\n\r\n\r\n      const condition_data_above = jsPsych.data.get().filter({type: 'sequencing', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                                  .filterCustom(function(x) {\r\n                                                  return (x.correct != -1\r\n                                                       && x.order === \"base\"\r\n                                                       && x.direction === \"above\");\r\n                                                  });\r\n\r\n      const condition_data_below = jsPsych.data.get().filter({type: 'sequencing', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                                  .filterCustom(function(x) {\r\n                                                  return (x.correct != -1\r\n                                                       && x.order === \"base\"\r\n                                                       && x.direction === \"below\");\r\n                                                  });\r\n\r\n      // the last 24 values of the first track before it converged\r\n      // the last 24 values before the second track before it converged\r\n\r\n      const above_before_first = jsPsych.data.get().filter({type: 'sequencing', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                               .filterCustom(function(x) {\r\n                                                 return (x.correct != -1\r\n                                                      && x.order === \"base\"\r\n                                                      && x.direction === \"above\"\r\n                                                      && x.converge_from_above == false); // trials before track converged\r\n                                               });\r\n\r\n      const below_before_first = jsPsych.data.get().filter({type: 'sequencing', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                               .filterCustom(function(x) {\r\n                                                 return (x.correct != -1\r\n                                                      && x.order === \"base\"\r\n                                                      && x.direction === \"below\"\r\n                                                      && x.converge_from_below == false); // trials before track converged\r\n                                               });\r\n\r\n      const likert_data = jsPsych.data.get().filter({type: 'sequencing', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                               .filterCustom(function(x) {\r\n                                                return (x.order === \"likert\");\r\n                                                });\r\n\r\n      console.log(\"First to converge: \" + this.first_to_converge);\r\n      sub_data.first_to_converge = this.first_to_converge;\r\n\r\n      var above_before_second = above_before_first;\r\n      var below_before_second = below_before_first;\r\n\r\n      // the last 24 values of both tracks before the second track converged\r\n      if(this.first_to_converge === \"above\"){\r\n        above_before_second = jsPsych.data.get().filter({type: 'sequencing', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                                    .filterCustom(function(x) {\r\n                                                    return (x.correct != -1\r\n                                                         && x.order === \"base\"\r\n                                                         && x.direction === \"above\"\r\n                                                         && x.converge_from_below == false);\r\n                                                    });\r\n        below_before_second = jsPsych.data.get().filter({type: 'sequencing', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                                    .filterCustom(function(x) {\r\n                                                    return (x.correct != -1\r\n                                                         && x.order === \"base\"\r\n                                                         && x.direction === \"below\"\r\n                                                         && x.converge_from_below == false);\r\n                                                    });\r\n      }\r\n      else if (this.first_to_converge === \"below\"){\r\n        above_before_second = jsPsych.data.get().filter({type: 'sequencing', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                                    .filterCustom(function(x) {\r\n                                                    return (x.correct != -1\r\n                                                         && x.order === \"base\"\r\n                                                         && x.direction === \"above\"\r\n                                                         && x.converge_from_above == false);\r\n                                                    });\r\n        below_before_second = jsPsych.data.get().filter({type: 'sequencing', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                                    .filterCustom(function(x) {\r\n                                                    return (x.correct != -1\r\n                                                         && x.order === \"base\"\r\n                                                         && x.direction === \"below\"\r\n                                                         && x.converge_from_above == false);\r\n                                                    });\r\n      }\r\n\r\n      sub_data.base_correlation = constants.base_correlation;\r\n      sub_data.stimulus_duration = constants.stimulus_duration;\r\n      sub_data.num_points = constants.num_points;\r\n      sub_data.trial_count = condition_data.count();\r\n\r\n      sub_data.total_above_trials = condition_data_above.count();\r\n      sub_data.total_below_trials = condition_data_below.count();\r\n      sub_data.above_trials_before_converge = above_before_first.count();\r\n      sub_data.below_trials_before_converge = below_before_first.count();\r\n\r\n      sub_data.last_24_above_before_first = above_before_first.last(24).select('jnd').mean();\r\n      sub_data.last_24_below_before_first = below_before_first.last(24).select('jnd').mean();\r\n\r\n      sub_data.last_24_above_before_second = above_before_second.last(24).select('jnd').mean();\r\n      sub_data.last_24_below_before_second = below_before_second.last(24).select('jnd').mean();\r\n\r\n      sub_data.converge_from_above = likert_data.select('converge_from_above').values[0];\r\n      sub_data.converge_from_below = likert_data.select('converge_from_below').values[0];\r\n      console.log(\"Converge from above: \" + sub_data.converge_from_above );\r\n      console.log(\"Converge from below: \" + sub_data.converge_from_below );\r\n\r\n      sub_data.likert_data = JSON.stringify(likert_data.select('responses').values[0]);\r\n\r\n      summary_data.push(sub_data);\r\n      console.log(\"index success \" + i);\r\n\r\n    }\r\n\r\n    $.post(\"/api/experiment_data\",\r\n            {trial_data: JSON.parse(trial_data.json()), summary_data: summary_data, experiment: \"sequencing\", condition: params[\"condition\"], prolific_pid: params[\"subject_id\"], study_id: params[\"study_id\"], session_id: params[\"session_id\"]},\r\n            function(data, status) {\r\n              console.log(\"Data: \" + data + \"\\nStatus: \" + status)\r\n            }\r\n          );\r\n  }\r\n\r\n  /* Randomize array in-place using Durstenfeld shuffle algorithm\r\n  * Kindly taken from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n  * @param array {array}\r\n  */\r\n  shuffleArray(array) {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n        var j = Math.floor(Math.random() * (i + 1));\r\n        var temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n  }\r\n\r\n  /* Get the height of the screen\r\n  * Kindly taken from https://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code\r\n  */\r\n  getScreenHeight() {\r\n    return Math.max(\r\n      document.body.scrollHeight,\r\n      document.documentElement.scrollHeight,\r\n      document.body.offsetHeight,\r\n      document.documentElement.offsetHeight,\r\n      document.documentElement.clientHeight\r\n    );\r\n  }\r\n\r\n  /**\r\n * Get constants of block type.\r\n *\r\n * @param {String} block_type - Either \"test\" or \"practice\"\r\n * @returns {String} constants - Ex) {SD: 0.2, adjusted_value: 0.8, dist_base: 0.3, error: 0.0001, num_points: 100, type: \"jnd\", ...}\r\n * @author Jake Moh\r\n */\r\n  get_constants_of_block_type(block_type) {\r\n  // Error handling\r\n  if (block_type != \"test\" && block_type != \"practice\") {\r\n    throw Error(`Invalid experiment type of ${block_type}`);\r\n  }\r\n\r\n  let constants;\r\n  if (block_type == \"test\"){\r\n    constants = this.get_practice_conditions_constants_at_current_index();\r\n  } else {\r\n    constants = this.get_experience_conditions_constants_at_current_index();\r\n  }\r\n\r\n  return constants;\r\n}\r\n\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/sequencing/sequencing.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 753,
    "kind": "class",
    "name": "Sequencing",
    "memberof": "scripts/experiments/sequencing/sequencing.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing.js",
    "importStyle": "Sequencing",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 754,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#constructor",
    "access": "public",
    "description": "Initializes a Sequencing experiment object.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "Parameters",
        "description": "passed from routing."
      }
    ]
  },
  {
    "__docId__": 755,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 756,
    "kind": "member",
    "name": "condition_group",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#condition_group",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 757,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 758,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 759,
    "kind": "member",
    "name": "auto_mode",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#auto_mode",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 760,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 761,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 762,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 763,
    "kind": "member",
    "name": "PIXELS_PER_CM",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#PIXELS_PER_CM",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 764,
    "kind": "member",
    "name": "MIN_CORRELATION",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#MIN_CORRELATION",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 765,
    "kind": "member",
    "name": "MAX_CORRELATION",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#MAX_CORRELATION",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 766,
    "kind": "member",
    "name": "MIN_TRIALS",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#MIN_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 767,
    "kind": "member",
    "name": "MAX_TRIALS",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#MAX_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 768,
    "kind": "member",
    "name": "WINDOW_SIZE",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#WINDOW_SIZE",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 769,
    "kind": "member",
    "name": "WINDOW_INTERVAL",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#WINDOW_INTERVAL",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 770,
    "kind": "member",
    "name": "CONVERGENCE_THRESHOLD",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#CONVERGENCE_THRESHOLD",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 771,
    "kind": "member",
    "name": "INCORRECT_MULTIPLIER",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#INCORRECT_MULTIPLIER",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 772,
    "kind": "member",
    "name": "MAX_REPETITIONS",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#MAX_REPETITIONS",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 773,
    "kind": "member",
    "name": "SCREEN_HEIGHT",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#SCREEN_HEIGHT",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 774,
    "kind": "member",
    "name": "MAX_PRACTICE_TRIALS",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#MAX_PRACTICE_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 775,
    "kind": "member",
    "name": "PRACTICE_CORRELATION",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#PRACTICE_CORRELATION",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 776,
    "kind": "member",
    "name": "PRACTICE_STIMULUS_DURATION",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#PRACTICE_STIMULUS_DURATION",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 777,
    "kind": "member",
    "name": "practice_selection_matrix",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#practice_selection_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 778,
    "kind": "member",
    "name": "adjusted_quantity_practice",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#adjusted_quantity_practice",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 779,
    "kind": "member",
    "name": "PRACTICE_PARAMTERS",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#PRACTICE_PARAMTERS",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "{\"distribution_type\": string, \"base_correlation\": number, \"stimulus_duration\": number, \"distractor_duration\": number, \"error\": number, \"max_step_size\": number, \"converge_from_above\": *, \"initial_difference\": number, \"num_points\": number, \"mean\": number, \"SD\": number, \"num_SD\": number, \"point_color\": string, \"axis_color\": string, \"text_color\": string, \"feedback_background_color\": string, \"background_color\": string, \"point_size\": number}"
      ]
    }
  },
  {
    "__docId__": 780,
    "kind": "member",
    "name": "first_above_trial",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#first_above_trial",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 781,
    "kind": "member",
    "name": "first_below_trial",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#first_below_trial",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 782,
    "kind": "member",
    "name": "converge_from_above",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#converge_from_above",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 783,
    "kind": "member",
    "name": "converge_from_below",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#converge_from_below",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 784,
    "kind": "member",
    "name": "first_to_converge",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#first_to_converge",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 785,
    "kind": "member",
    "name": "trial_selection_matrix",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#trial_selection_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 786,
    "kind": "member",
    "name": "adjusted_quantity_matrix",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#adjusted_quantity_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 787,
    "kind": "member",
    "name": "end_sub_condition_debug",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#end_sub_condition_debug",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 788,
    "kind": "member",
    "name": "left_coordinates",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#left_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 789,
    "kind": "member",
    "name": "right_coordinates",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#right_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 790,
    "kind": "member",
    "name": "distractor_coordinates",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#distractor_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 791,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 792,
    "kind": "member",
    "name": "raw_constants",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#raw_constants",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#prepare_experiment",
    "access": "public",
    "description": "Orders the input data according to balancing type and\ninitializes the Sequencing object's variables.",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "balancing_type",
        "description": "{string}                             Type of balancing. Currently only latin_square\n                                                            is supported.\n        dataset {[{assoc array}, {assoc array}, ... ]}      The data to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 794,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 795,
    "kind": "member",
    "name": "sub_conditions_constants",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#sub_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 796,
    "kind": "member",
    "name": "current_sub_condition_index",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#current_sub_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 797,
    "kind": "method",
    "name": "prepare_practice",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#prepare_practice",
    "access": "public",
    "description": "Orders the input dataset by randomizing it, and initializes the practice variables.",
    "lineNumber": 180,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "{[{assoc array}, {assoc array}, ... ]}   The data to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 798,
    "kind": "member",
    "name": "practice_conditions_constants",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#practice_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 799,
    "kind": "member",
    "name": "current_practice_condition_index",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#current_practice_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 800,
    "kind": "method",
    "name": "generate_random_trial_array",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#generate_random_trial_array",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "max_length",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 801,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#generate_trial",
    "access": "public",
    "description": "Generates a Sequencing trial object for use in the JsPsych timeline.",
    "lineNumber": 248,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "{string}             \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    }
  },
  {
    "__docId__": 802,
    "kind": "method",
    "name": "handle_data_saving",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#handle_data_saving",
    "access": "public",
    "description": "Handles saving the relevant data on a given trial.\n\nFor reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\ntrial_variables =\n      {type: 'sequencing',\n      run_type: '',\n      left_correlation: '',\n      right_correlation: '',\n      };\n\nThese are variables created WITHIN the trial logic that were not present in excel (but need to be\noutputted to results).\nexport_variables =\n      {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\n       balanced_sub_condition: '',  // Index of sub_condition according to balancing order\n       jnd: '',\n       direction '',\n       base_correlation: '',\n       adjusted_value: '',\n       correct: '',\n      };",
    "lineNumber": 489,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}\n       block_type {string}           \"test\" or \"practice\"\n       constants {assoc array}\n       index {integer}\n       adjusted_value {double}\n       order_type {sring}            \"base\" or \"difference\"\n       direction {string}            \"above\" or \"below\""
      }
    ],
    "return": null
  },
  {
    "__docId__": 803,
    "kind": "method",
    "name": "save_to_matrix",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#save_to_matrix",
    "access": "public",
    "description": "Generic function to save data into different matrices, either the practice matrix\n(so that it doesn't affect the rest of the experiment) or the proper experiment matrix",
    "lineNumber": 534,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}\n       block_type {string}           \"test\" or \"practice\"\n       constants {assoc array}\n       index {integer}\n       adjusted_value {double}\n       direction {string}            \"above\" or \"below\"\n       matrix {matrix array}         \"adjusted_quantity_matrix\" or \"adjusted_quantity_practice\""
      }
    ],
    "return": null
  },
  {
    "__docId__": 804,
    "kind": "method",
    "name": "end_sub_condition",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#end_sub_condition",
    "access": "public",
    "description": "Determines whether the current sub condition can end or not.",
    "lineNumber": 552,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition should end."
    },
    "params": [
      {
        "name": "block_type",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 807,
    "kind": "method",
    "name": "is_start_of_subcondition",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#is_start_of_subcondition",
    "access": "public",
    "description": "Checks whether we have just started a subcondition.",
    "lineNumber": 605,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition has just started."
    },
    "params": []
  },
  {
    "__docId__": 808,
    "kind": "method",
    "name": "is_converged_in_window",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#is_converged_in_window",
    "access": "public",
    "description": "Determines whether current subcondition has converged or not.",
    "lineNumber": 619,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "{string} \"above\" or \"below\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if converged."
    }
  },
  {
    "__docId__": 810,
    "kind": "method",
    "name": "calculate_adjusted_value",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#calculate_adjusted_value",
    "access": "public",
    "description": "Calculates the adjusted value depending on whether this is the\nfirst trial of the sub condition or not.",
    "lineNumber": 720,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": "{assoc array}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "{string} \"above\" or \"below\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "adjusted_value {double}"
    }
  },
  {
    "__docId__": 813,
    "kind": "method",
    "name": "initialize_adjusted_statistic",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#initialize_adjusted_statistic",
    "access": "public",
    "description": "Initializes the adjusted value for the first time.",
    "lineNumber": 758,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "\"above\" or \"below\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "double"
      ],
      "spread": false,
      "description": "adjusted_value"
    }
  },
  {
    "__docId__": 814,
    "kind": "method",
    "name": "get_next_adjusted_statistic",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#get_next_adjusted_statistic",
    "access": "public",
    "description": "Calculates the next adjusted value.",
    "lineNumber": 783,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "last_Sequencing_trial",
        "description": ".        {object} constants\n{string} direction \"above\" or \"below\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "double"
      ],
      "spread": false,
      "description": "next_adjusted_statistic"
    }
  },
  {
    "__docId__": 815,
    "kind": "member",
    "name": "correct_statistic_increment",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#correct_statistic_increment",
    "access": "public",
    "description": null,
    "lineNumber": 791,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 816,
    "kind": "member",
    "name": "incorrect_statistic_increment",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#incorrect_statistic_increment",
    "access": "public",
    "description": null,
    "lineNumber": 794,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "check_response",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#check_response",
    "access": "public",
    "description": "Given a Sequencing trial data, determines whether response is\ncorrect or not.",
    "lineNumber": 824,
    "params": [
      {
        "nullable": null,
        "types": [
          "JsPsych.data"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "@param. {object}        constants"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "check_response_sequencing",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#check_response_sequencing",
    "access": "public",
    "description": "Given a Sequencing trial data, determines whether response is\ncorrect or not.",
    "lineNumber": 865,
    "params": [
      {
        "nullable": null,
        "types": [
          "JsPsych.data"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 822,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#export_trial_data",
    "access": "public",
    "description": "When called, will save individual trial data into a CSV.",
    "lineNumber": 909,
    "params": [],
    "return": null
  },
  {
    "__docId__": 823,
    "kind": "method",
    "name": "shuffleArray",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#shuffleArray",
    "access": "public",
    "description": null,
    "lineNumber": 1083,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 824,
    "kind": "method",
    "name": "getScreenHeight",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#getScreenHeight",
    "access": "public",
    "description": null,
    "lineNumber": 1095,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 825,
    "kind": "method",
    "name": "get_constants_of_block_type",
    "memberof": "scripts/experiments/sequencing/sequencing.js~Sequencing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing/sequencing.js~Sequencing#get_constants_of_block_type",
    "access": "public",
    "description": "Get constants of block type.",
    "lineNumber": 1112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} constants - Ex) {SD: 0.2, adjusted_value: 0.8, dist_base: 0.3, error: 0.0001, num_points: 100, type: \"jnd\", ...}"
      },
      {
        "tagName": "@author",
        "tagValue": "Jake Moh"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": "Either \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "constants - Ex) {SD: 0.2, adjusted_value: 0.8, dist_base: 0.3, error: 0.0001, num_points: 100, type: \"jnd\", ...}"
    }
  },
  {
    "__docId__": 826,
    "kind": "variable",
    "name": "IMAGE_PATH",
    "memberof": "scripts/experiments/sequencing/sequencing.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing.js~IMAGE_PATH",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing.js",
    "importStyle": "{IMAGE_PATH}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 827,
    "kind": "file",
    "name": "scripts/experiments/sequencing/sequencing_timeline.js",
    "content": "import Sequencing from \"/scripts/experiments/sequencing/sequencing.js\";\r\nimport {IMAGE_PATH} from \"/scripts/experiments/sequencing/sequencing.js\";\r\nimport {get_instructions} from \"/scripts/experiment-properties/instructions/instructions_controller.js\";\r\nimport { resolution_scaling } from '/scripts/experiment-timeline/resolution_scaling/resolution_scaling.js';\r\nimport * as screening from '/scripts/experiment-timeline/screening/screening.js';\r\n\r\nexport var sequencing_exp = new Sequencing(params);\r\n\r\nvar timeline = [];\r\nvar address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\n// =========================================================\r\n// WELCOME TRIAL BLOCK\r\n\r\nvar welcome = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: `<div align = \"center\">` + `<img src=\"${address}/img/VCL_lab_logo.png\"></img><br><br>` +\r\n            `<b>Base:</b> Sequencing` + '<br>' +\r\n            `<b>Trial Type:</b> ${sequencing_exp.trial_structure}` + '<br>' +\r\n            `<b>Graph Type:</b> ${sequencing_exp.graph_type}` + '<br>' +\r\n            `<b>Condition:</b> ${sequencing_exp.condition_name}` +\r\n            '<br><br><br><p><font size = 15>Press any key to begin.<p></font>' +\r\n            '</div>',\r\n  data: {type: 'instruction'}\r\n};\r\ntimeline.push(welcome);\r\n\r\n\r\n// =========================================================\r\n// RESOLUTION SCALING\r\n\r\ntimeline.push(resolution_scaling);\r\n\r\n// =========================================================\r\n// SCREENING\r\n//\r\n// timeline.push(\r\n// \tscreening.screeningQuestions,\r\n// \tscreening.screeningInstructions,\r\n// \tscreening.screeningCorrelationSort,\r\n// \tscreening.screeningCorrelationSelect,\r\n// \tscreening.instructionsRegression,\r\n// \tscreening.screeningRegressionSelect\r\n// );\r\n\r\n// =========================================================\r\n// INSTRUCTION TRIAL BLOCKS\r\n\r\nvar ready = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: \"<div align = 'center'> <font size = 20><p>Ready? We will first do some practice trials. <p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\r\n  data: {type: 'instruction'}\r\n}\r\n\r\nvar instructions = {\r\n    type: \"html-keyboard-response\",\r\n    stimulus: function(){\r\n        return get_instructions(sequencing_exp);\r\n    }\r\n};\r\n\r\nvar instruction_trials = {\r\n  timeline: [instructions, ready]\r\n};\r\n\r\ntimeline.push(instruction_trials);\r\n\r\n// =========================================================\r\n// PRACTICE TRIAL BLOCKS\r\n\r\n// ---------------------------------------------------------\r\n// FEEDBACK\r\n\r\nvar feedback = {\r\n  type: 'html-keyboard-response',\r\n  choices: ['q'],\r\n  post_trial_gap: 300,\r\n  // trial_duration: 500,\r\n  data: {type: 'feedback'},\r\n  trial_duration: 500,\r\n  on_start: function(feedback) {\r\n    if (sequencing_exp.auto_mode) {\r\n      feedback.trial_duration = 0;\r\n    }\r\n  },\r\n  stimulus: function(){\r\n\r\n    document.body.style.backgroundColor = sequencing_exp.trial_data.feedback_background_color;\r\n\r\n    var last_trial = JSON.parse(jsPsych.data.getLastTrialData().json());\r\n    var last_trial_correct = last_trial[0][\"correct\"];\r\n\r\n    // For debugging purposes:\r\n    if (last_trial_correct == -1){\r\n      return '<p>' +\r\n             '<font style=\"font-size:50px; color:blue\">Exiting from experiment.<p></font>'\r\n    }\r\n    else if (last_trial_correct == -2){\r\n      return '<p>' +\r\n             '<font style=\"font-size:50px; color:blue\">Skipping from subcondtion.<p></font>'\r\n    }\r\n\r\n    else if (last_trial_correct){\r\n      return `<div align = \"center\">\r\n              <p>\r\n                <i class=\"fa fa-check-circle\" style=\"font-size:50px; color:green; margin-right: 10px;\"></i>\r\n                <font style=\"font-size:50px; color:green\">\r\n                Correct!\r\n                </font>\r\n              <p>\r\n              <br>\r\n              </div>`\r\n    }\r\n    else{\r\n      return `<div align = \"center\">\r\n              <p>\r\n                <i class=\"fa fa-close\" style=\"font-size:50px; color:red; margin-right: 10px;\"></i>\r\n                <font style=\"font-size:50px; color:red;\"\">\r\n                Incorrect!\r\n                </font>\r\n              <p>\r\n              <br>\r\n              </div>`\r\n    }\r\n  }\r\n};\r\n\r\nvar feedback_wrapper = {\r\n  timeline: [feedback],\r\n  conditional_function: function() {\r\n    if (sequencing_exp.end_sub_condition(\"test\")) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  },\r\n}\r\n\r\n// ---------------------------------------------------------\r\n// PRE-SUBCONDITION INSTRUCTION BLOCK\r\nvar practice_sequencing = sequencing_exp.generate_trial(\"practice\");\r\n\r\n// This is a conditional block that will execute only if\r\n// the subcondition has a subcondition_instructions attribute\r\n// and it is the start of the subcondition.\r\nvar subcond_practice_instruction = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: function(){\r\n\r\n    let index = sequencing_exp.current_practice_condition_index;\r\n    let constants = sequencing_exp.practice_conditions_constants[index];\r\n\r\n    return constants.subcondition_instructions;\r\n  }\r\n}\r\n\r\nvar subcond_practice_instruction_block = {\r\n  timeline: [subcond_practice_instruction],\r\n  conditional_function: function() {\r\n\r\n    let index = sequencing_exp.current_practice_condition_index;\r\n    let constants = sequencing_exp.practice_conditions_constants[index];\r\n\r\n    if (constants.subcondition_instructions){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// ---------------------------------------------------------\r\n// PRACTICE BLOCK\r\n\r\nvar practice = {\r\n  timeline: [subcond_practice_instruction_block, ...practice_sequencing, feedback], // We use same feedback block as that used in practice\r\n  loop_function: function(data){ // Return true if timeline should continue\r\n                                 // Return false if timeline should end\r\n\r\n\r\n    let key_presses = [];\r\n    data.values().forEach(function(elem){\r\n                          key_presses.push(elem.key_press);\r\n                          });\r\n\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (key_presses.includes(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q'))){\r\n      // Turn flag on\r\n      sequencing_exp.first_above_trial = true;\r\n      sequencing_exp.first_below_trial = true;\r\n      sequencing_exp.converge_from_above = false;\r\n      sequencing_exp.converge_from_below = false;\r\n      sequencing_exp.first_to_converge = \"none\";\r\n      return false;\r\n    }\r\n\r\n    if(sequencing_exp.end_sub_condition(\"practice\")){\r\n      // End practice\r\n      sequencing_exp.first_trial_of_sub_condition = true;\r\n      sequencing_exp.first_above_trial = true;\r\n      sequencing_exp.first_below_trial = true;\r\n      sequencing_exp.converge_from_above = false;\r\n      sequencing_exp.converge_from_below = false;\r\n      sequencing_exp.first_to_converge = \"none\";\r\n      return false;\r\n    }\r\n    // Else continue w/ current subcondition:\r\n    else {\r\n      return true;\r\n    }\r\n\r\n  }\r\n};\r\n\r\ntimeline.push(practice);\r\n\r\n// ---------------------------------------------------------\r\n// STOP BLOCK\r\n\r\nvar stop = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: \"<div align = 'center'> <font size = 20><p>This concludes the practice trials.<p>\" + \"<br><br><p><b>Any questions?</b></p></font></div>\",\r\n  data: {type: 'instruction'},\r\n  on_start: function(stop){\r\n    // Reset background color to feedback\r\n    document.body.style.backgroundColor = sequencing_exp.trial_data.feedback_background_color;\r\n    // skip if automation mode is turned on\r\n    if (sequencing_exp.auto_mode) {\r\n      stop.trial_duration = 0;\r\n    }\r\n  }\r\n}\r\n\r\nvar stop_trials = {\r\n  timeline: [stop]\r\n};\r\n\r\ntimeline.push(stop_trials);\r\n\r\n// =========================================================\r\n// EXPERIMENT TRIAL BLOCKS\r\n\r\n// ---------------------------------------------------------\r\n// PRE-SUBCONDITION INSTRUCTION BLOCK\r\n\r\nvar trial = sequencing_exp.generate_trial(\"test\");\r\n\r\n// This is a conditional block that will execute only if\r\n// the subcondition has a subcondition_instructions attribute\r\n// and it is the start of the subcondition.\r\nvar subcond_instruction = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: function(){\r\n\r\n    let index = sequencing_exp.current_sub_condition_index;\r\n    let constants = sequencing_exp.sub_conditions_constants[index];\r\n\r\n    return constants.subcondition_instructions;\r\n  }\r\n}\r\n\r\nvar subcond_instruction_block = {\r\n  timeline: [subcond_instruction],\r\n  conditional_function: function() {\r\n\r\n    let index = sequencing_exp.current_sub_condition_index;\r\n    let constants = sequencing_exp.sub_conditions_constants[index];\r\n\r\n    if (constants.subcondition_instructions && sequencing_exp.is_start_of_subcondition()){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// ---------------------------------------------------------\r\n// EXPERIMENT BLOCK\r\n\r\nvar experiment = {\r\n  timeline: [subcond_instruction_block, ...trial, feedback_wrapper],\r\n  loop_function: function(data){ // Return true if timeline should continue\r\n                                 // Return false if timeline should end\r\n\r\n    let key_presses = [];\r\n    data.values().forEach(function(elem){\r\n                          key_presses.push(elem.key_press);\r\n                          });\r\n\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (key_presses.includes(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q'))){\r\n      return false;\r\n    }\r\n    // If subcondition should end:\r\n    if(sequencing_exp.end_sub_condition(\"test\")){\r\n      sequencing_exp.first_trial_of_sub_condition = true;\r\n      sequencing_exp.first_above_trial = true;\r\n      sequencing_exp.first_below_trial = true;\r\n      sequencing_exp.converge_from_above = false;\r\n      sequencing_exp.converge_from_below = false;\r\n      sequencing_exp.end_sub_condition_debug = false;\r\n      sequencing_exp.first_to_converge = \"none\";\r\n\r\n      // If there are still more subconditions, increment current index\r\n      if (sequencing_exp.current_sub_condition_index < (sequencing_exp.sub_conditions_constants.length-1)){\r\n        sequencing_exp.current_sub_condition_index++;\r\n        console.log(\"!!!!!!!!!! Moved to new sub condition at index \"\r\n                    + sequencing_exp.current_sub_condition_index);\r\n        return true;\r\n      }\r\n      // Else end experiment\r\n      else {\r\n        return false;\r\n      }\r\n    }\r\n    // Else continue w/ current subcondition:\r\n    else {\r\n      return true;\r\n    }\r\n  },\r\n  on_finish: function(data) {\r\n    sequencing_exp.trial_data = data;\r\n  }\r\n};\r\n\r\n\r\ntimeline.push(experiment);\r\n\r\nconsole.log(\"======================\");\r\n\r\n// =========================================================\r\n// DATA DOWNLOADING\r\n\r\n// Try to save likert scale data\r\n// var likert_data = jsPsych.data.get().filter({trial_type: 'survey-likert'});\r\n// var likert_data_name = \"S_likert_results.csv\";\r\n// likert_data.localSave('csv', likert_data_name);\r\n\r\nvar experiment_end = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: '<div align = \"center\">' +\r\n            '<p><font size = 10>You have completed the experiment!<p></font>' +\r\n            '</div>' ,\r\n  on_start: function(){\r\n\r\n    sequencing_exp.export_trial_data();\r\n    //sequencing_exp.export_summary_data();\r\n\r\n    // Reset background color to feedback\r\n    document.body.style.backgroundColor = sequencing_exp.trial_data.feedback_background_color;\r\n  }\r\n};\r\ntimeline.push(experiment_end);\r\n\r\n// =========================================================\r\n// START JSPSYCH\r\n\r\n// preload images so they aren't delayed online\r\nvar noisemask = [IMAGE_PATH];\r\n\r\njsPsych.init({\r\n    timeline: timeline,\r\n    preload_images: noisemask,\r\n    on_finish: function(){\r\n        jsPsych.data.displayData();\r\n    }\r\n});\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/sequencing/sequencing_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 828,
    "kind": "variable",
    "name": "sequencing_exp",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~sequencing_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": "{sequencing_exp}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/sequencing/sequencing.js~Sequencing"
      ]
    }
  },
  {
    "__docId__": 829,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 830,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 831,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 832,
    "kind": "variable",
    "name": "ready",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~ready",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 833,
    "kind": "variable",
    "name": "instructions",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 834,
    "kind": "variable",
    "name": "instruction_trials",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~instruction_trials",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 835,
    "kind": "variable",
    "name": "feedback",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~feedback",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"choices\": *, \"post_trial_gap\": number, \"data\": *, \"trial_duration\": number, \"on_start\": *, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 836,
    "kind": "variable",
    "name": "feedback_wrapper",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~feedback_wrapper",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"conditional_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 837,
    "kind": "variable",
    "name": "practice_sequencing",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~practice_sequencing",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 838,
    "kind": "variable",
    "name": "subcond_practice_instruction",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~subcond_practice_instruction",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 839,
    "kind": "variable",
    "name": "subcond_practice_instruction_block",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~subcond_practice_instruction_block",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"conditional_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 840,
    "kind": "variable",
    "name": "practice",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~practice",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 841,
    "kind": "variable",
    "name": "stop",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~stop",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 842,
    "kind": "variable",
    "name": "stop_trials",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~stop_trials",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 843,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 246,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 844,
    "kind": "variable",
    "name": "subcond_instruction",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~subcond_instruction",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 251,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 845,
    "kind": "variable",
    "name": "subcond_instruction_block",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~subcond_instruction_block",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"conditional_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 846,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 847,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 339,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 848,
    "kind": "variable",
    "name": "noisemask",
    "memberof": "scripts/experiments/sequencing/sequencing_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing/sequencing_timeline.js~noisemask",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing/sequencing_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 849,
    "kind": "file",
    "name": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js",
    "content": "import { balance_subconditions } from '/scripts/experiment-properties/balancing/balancing_controller.js'\r\nimport { initialize_random_order } from '/scripts/experiment-properties/balancing/generators/random_generator.js'\r\nimport { get_data } from '/scripts/experiment-properties/data/data_controller.js'\r\nimport { generate_initial_distribution } from '/scripts/experiment-properties/distribution/distribution_controller.js'\r\nimport { generate_adjusted_distribution} from '/scripts/experiment-properties/distribution/distribution_controller.js'\r\nimport { randomize_position } from '/scripts/helpers/experiment_helpers.js'\r\nimport { EXPERIMENTS } from \"/config/experiments-config.js\";\r\n\r\nexport { IMAGE_PATH };\r\n\r\n\r\nconst IMAGE_PATH = location.protocol + \"//\" + location.hostname + \":\" + location.port + '/scripts/experiments/sequencing_side_by_side/img/noisemask.png';\r\n\r\nexport default class Sequencing_Side_by_Side {\r\n  /**\r\n   * Initializes a Sequencing experiment object.\r\n   *\r\n   * @param  {assoc array}  Parameters passed from routing.\r\n   */\r\n  constructor(params) {\r\n    console.log(\"Entered constructor\")\r\n    let trial_structure = params[\"trial_structure\"];\r\n    let condition_name = params[\"condition\"];\r\n    let graph_type = params[\"graph_type\"];\r\n    let balancing_type = params[\"balancing\"];\r\n    let conversion_factor = params[\"conversion_factor\"];\r\n\r\n    this.condition_name = condition_name;\r\n    this.condition_group = this.condition_name.split('_')[0]; // Mostly to handle \"distractor\" conditions.\r\n                                                              // TODO: Should have a better flag for it.\r\n    this.subject_id = params[\"subject_id\"];\r\n    this.subject_initials = params[\"subject_initials\"];\r\n    this.auto_mode = false;\r\n\r\n    // ========================================\r\n    // PARAMETER CHECKING\r\n\r\n    // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\r\n    if (!EXPERIMENTS[\"sequencing_side_by_side\"][\"trial_structure\"].includes(trial_structure)) {\r\n      throw Error(trial_structure + \" is not supported.\");}\r\n    else {\r\n      this.trial_structure = trial_structure;\r\n    }\r\n\r\n    if (!EXPERIMENTS[\"sequencing_side_by_side\"][\"graph_type\"].includes(graph_type)){\r\n      throw Error(graph_type + \" is not supported.\")}\r\n    else {\r\n      this.graph_type = graph_type;\r\n    };\r\n\r\n    if (!EXPERIMENTS[\"sequencing_side_by_side\"][\"balancing_type\"].includes(balancing_type)) {\r\n      throw Error(balancing_type + \" is not supported.\") }\r\n    else {\r\n      this.balancing_type = balancing_type;\r\n    }\r\n\r\n    // ========================================\r\n    // EXPERIMENT CONSTANTS\r\n\r\n    this.PIXELS_PER_CM = conversion_factor;\r\n    this.MIN_CORRELATION = 0.0;\r\n    this.MAX_CORRELATION = 1.0;\r\n    this.MIN_TRIALS = 24;\r\n    this.MAX_TRIALS = 52;\r\n    this.WINDOW_SIZE = 24;\r\n    this.WINDOW_INTERVAL = 3;\r\n    this.CONVERGENCE_THRESHOLD = 0.75;\r\n    this.INCORRECT_MULTIPLIER = 3;\r\n    this.MAX_REPETITIONS = 5;\r\n    this.SCREEN_HEIGHT = this.getScreenHeight();\r\n\r\n\r\n    // ========================================\r\n    // PRACTICE EXPERIMENT VARIABLES\r\n\r\n    this.MAX_PRACTICE_TRIALS = 50;\r\n    this.PRACTICE_CORRELATION = 0.6;\r\n    this.PRACTICE_STIMULUS_DURATION = 800;\r\n    this.practice_conditions_constants;\r\n    this.current_practice_condition_index;\r\n    this.practice_selection_matrix = [];\r\n    this.adjusted_quantity_practice = [];\r\n    this.PRACTICE_PARAMTERS = {distribution_type: \"gaussian\", base_correlation: 0.6,\r\n                               stimulus_duration:500 , distractor_duration:200, error: 0.0001,\r\n                               max_step_size: 0.01, converge_from_above: false, initial_difference: 0.1,\r\n                               num_points: 100, mean: 0.5, SD: 0.2, num_SD: 2.5, point_color: 'BLACK',\r\n                               axis_color: 'BLACK', text_color: 'BLACK', feedback_background_color: 'WHITE',\r\n                               background_color: 'WHITE', point_size: 6};\r\n\r\n    // ========================================\r\n    // TEST EXPERIMENT VARIABLES\r\n\r\n    this.first_trial_of_sub_condition = true;\r\n    //this.converged = false;\r\n    this.sub_condition_order;\r\n    this.sub_conditions_constants;\r\n    this.current_sub_condition_index;     // Index used to keep track of the current subcondition. Starts at 0, goes to 8\r\n    this.adjusted_quantity_matrix = {};   // The matrix is in this format:\r\n                                          // { sub_condition_index : [adjusted_quantity1, adjusted_quantity2 ... ] }\r\n\r\n    // ========================================\r\n    // DEBUG VARIABLES\r\n    this.end_sub_condition_debug = false;\r\n\r\n    // ========================================\r\n    // CURRENT TRIAL DATA\r\n\r\n    // Plotting-related vars\r\n    this.left_coordinates = \"\";\r\n    this.right_coordinates = \"\";\r\n    this.distractor_coordinates = \"\";\r\n\r\n    // JsPsych trial_data for the current trial\r\n    this.trial_data = \"\";\r\n\r\n    // ========================================\r\n    // PREPARE EXPERIMENT\r\n\r\n    // Extract raw constants\r\n    this.raw_constants = get_data(this);\r\n\r\n    // Prepare experiment + practice data\r\n    this.prepare_experiment();\r\n    this.prepare_practice();\r\n\r\n    // ========================================\r\n    // Adjusted Statistic Values\r\n    // ** Previously were set inside the get_next_adjusted_statistic method.\r\n    // ** Replacing constants into variables to be set inside the method.\r\n    let correct_statistic_increment;\r\n    let incorrect_statistic_increment;\r\n    console.log(\"Finished constructor\")\r\n  }\r\n\r\n\r\n  /**\r\n   * Orders the input data according to balancing type and\r\n   * initializes the Sequencing object's variables.\r\n   *\r\n   * @param  balancing_type {string}                             Type of balancing. Currently only latin_square\r\n   *                                                             is supported.\r\n   *         dataset {[{assoc array}, {assoc array}, ... ]}      The data to be ordered.\r\n   */\r\n  prepare_experiment() {\r\n    console.log(\"Entered prepare_experiment()\")\r\n    let dataset = this.raw_constants;\r\n    // it gets scrambled for some reason.  put it back in order, according to the hardcoded subcond numbers\r\n\r\n    this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length, dataset, \"stimulus_duration\");\r\n\r\n    var ordered_dataset = [];\r\n\r\n    // Order the data set according to the latin square\r\n    // Initialize adjusted_quantity_matrix size\r\n    for (let i=0; i < this.sub_condition_order.length; i++){\r\n      ordered_dataset[i] = dataset[this.sub_condition_order[i]];\r\n      this.adjusted_quantity_matrix[i] = [];\r\n    }\r\n\r\n    // Set experiment trials\r\n    this.sub_conditions_constants = ordered_dataset;\r\n    this.current_sub_condition_index = 0;\r\n    console.log(\"Finished prepare_experiment()\")\r\n  }\r\n\r\n  /**\r\n   * Orders the input dataset by randomizing it, and initializes the practice variables.\r\n   *\r\n   * @param  dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered.\r\n   */\r\n  prepare_practice() {\r\n\r\n    let dataset = this.raw_constants;\r\n\r\n    this.sub_condition_order = initialize_random_order(dataset.length);\r\n    let practice_dataset = [];\r\n    practice_dataset[0] = this.PRACTICE_PARAMTERS;\r\n    // // Order the data set according to the latin square\r\n    // // Initialize adjusted_quantity_matrix size\r\n    // for (let i=0; i < this.sub_condition_order.length; i++){\r\n    //   console.log('subcondition order length ' + this.sub_condition_order.length)\r\n    //   practice_dataset[i] = dataset[this.sub_condition_order[i]];\r\n    // }\r\n\r\n    //practice_dataset[this.sub_condition_order.length] = dataset[this.sub_condition_order[1]]\r\n    console.log('practice_dataset', practice_dataset)\r\n\r\n    // Set practice trials\r\n    this.practice_conditions_constants = practice_dataset;\r\n    this.current_practice_condition_index = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * Generates a Sequencing trial object for use in the JsPsych timeline.\r\n   *\r\n   * @param  type {string}             \"test\" or \"practice\"\r\n   * @return trial {object}\r\n   */\r\n  generate_trial(block_type) {\r\n\r\n    if ((block_type !== \"test\") && (block_type !== \"practice\")) {throw Error(block_type + \" is not supported.\")};\r\n\r\n    // Initialize a variable for this so it is usable inside on_start\r\n    var sequencing_side_by_side_exp = this;\r\n    var address = location.protocol + \"//\" + location.hostname + \":\" + location.port + \"/sequencing_side_by_side_trial\";\r\n\r\n    // local variables so likert trial can access it too\r\n    var adjusted_value;\r\n    var index;\r\n    var constants\r\n\r\n    // let participants know which number subcondition block they are about to perform\r\n    var subcond_num = {\r\n      stimulus: '',\r\n      type: 'html-keyboard-response',\r\n      choices: [' '],\r\n      on_start: function(subcond_num) {\r\n        if (block_type === \"test\"){\r\n          var index = sequencing_side_by_side_exp.current_sub_condition_index;\r\n        }\r\n        else {\r\n          var index = sequencing_side_by_side_exp.current_practice_condition_index;\r\n        }\r\n        subcond_num.stimulus = `<div align=\"center\" style=\"font-size:20px\"><p><b>Ready? Experiment block ${index + 1} of ${sequencing_side_by_side_exp.raw_constants.length} will now begin.</b></p><br><p>Press the spacebar to continue.</p></div>`;\r\n      }\r\n    }\r\n\r\n    // conditional timeline wrapper\r\n    var subcond_num_timeline = {\r\n      timeline: [subcond_num],\r\n      conditional_function: function() {\r\n        if (sequencing_side_by_side_exp.is_start_of_subcondition() && block_type === \"test\") {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // \"First\" trial in the sequence. Contains the two side-by-side plots.\r\n    var first = {\r\n      type:'sequencing-graph',\r\n      block_type: block_type,\r\n      //url: address,\r\n      choices: jsPsych.NO_KEYS,\r\n      //execute_script: true,\r\n      //trial_duration: 1000,\r\n\r\n      on_start: function(first){\r\n        sequencing_side_by_side_exp.cur_exp_type = block_type;\r\n        if (block_type == \"test\"){\r\n          index = sequencing_side_by_side_exp.current_sub_condition_index;\r\n          constants = sequencing_side_by_side_exp.sub_conditions_constants[index];\r\n          sequencing_side_by_side_exp.practice_end = true;\r\n        }\r\n        else {\r\n          index = sequencing_side_by_side_exp.current_practice_condition_index;\r\n          constants = sequencing_side_by_side_exp.practice_conditions_constants[index];\r\n          //console.log(\"Trial Number: \" + adjusted_quantity_practice.size)\r\n        }\r\n        // Get parameters\r\n        first.trial_duration = constants.stimulus_duration;\r\n\r\n        // Calculate adjusted value and distribution\r\n        adjusted_value = sequencing_side_by_side_exp.calculate_adjusted_value(constants);\r\n        console.log(\"Base Correlation: \" + constants.base_correlation);\r\n        console.log(\"Adjusted Value: \" + adjusted_value);\r\n        // Save data into matrix and jsPsych data object\r\n        sequencing_side_by_side_exp.handle_data_saving(first, block_type, constants, index, adjusted_value, \"first\");\r\n\r\n        // Generate distributions\r\n        var base_coordinates = generate_initial_distribution(constants);\r\n        var adjusted_coordinates = generate_adjusted_distribution(constants, adjusted_value);\r\n\r\n        // Randomize position of the base and adjusted graphs\r\n        var result = randomize_position(first,\r\n                                       base_coordinates,\r\n                                       adjusted_coordinates,\r\n                                       constants,\r\n                                       adjusted_value);\r\n\r\n        // Set up D3 variables for plotting\r\n        sequencing_side_by_side_exp.coordinates = [result.left, result.right];\r\n\r\n\r\n        sequencing_side_by_side_exp.trial_data = first.data;\r\n\r\n        // Custom jsPsych type requirement\r\n        first.exp_obj = sequencing_side_by_side_exp;\r\n\r\n        // Console log\r\n        if (constants.task) {\r\n          console.log(\"[TASK TYPE]: \" + constants.task);\r\n        }\r\n        console.log(\"[RIGHT] Correlation: \" + first.data.right_correlation);\r\n        console.log(\"[RIGHT] Num points: \" + first.data.right_num_points);\r\n\r\n        console.log(\"[LEFT] Correlation: \" + first.data.left_correlation);\r\n        console.log(\"[LEFT] Num points: \" + first.data.left_num_points);\r\n      },\r\n    };\r\n    var distractor_size = sequencing_side_by_side_exp.getScreenHeight() / (4.3)\r\n    console.log(distractor_size)\r\n    var distractor = {\r\n      type: 'html-keyboard-response',\r\n      stimulus: `<div align = \"center\">` + `<img src=\"${IMAGE_PATH}\" width=\"${distractor_size}px\" style=\"margin: 0px 50px;\" ></img><img src=\"${IMAGE_PATH}\" width=\"${distractor_size}px\" style=\"margin: 50px 0px;\"></img><br><br><br></div>`,\r\n      choices: jsPsych.NO_KEYS,\r\n      trial_duration: 1000,\r\n      on_start: function(distractor) {\r\n        if (block_type == \"test\"){\r\n          var index = sequencing_side_by_side_exp.current_sub_condition_index;\r\n          var constants = sequencing_side_by_side_exp.sub_conditions_constants[index];\r\n        }\r\n        else {\r\n          var index = sequencing_side_by_side_exp.current_practice_condition_index;\r\n          var constants = sequencing_side_by_side_exp.practice_conditions_constants[index];\r\n        }\r\n        distractor.trial_duration = constants.distractor_duration;\r\n      }\r\n    };\r\n\r\n    var blank = {\r\n      type:'sequencing-graph',\r\n      block_type: block_type,\r\n      //url: address,\r\n      //execute_script: true,\r\n      choices:['z', 'm', 'q', 't', 'w'], //q is exit button (for debugging)\r\n      on_start: function(blank){\r\n        sequencing_side_by_side_exp.coordinates = [];\r\n        console.log(\"Entered on_start\")\r\n        if (sequencing_side_by_side_exp.auto_mode) {\r\n          blank.post_trial_gap = 12;\r\n          blank.trial_duration = 12;\r\n        }\r\n        console.log(\"blank data.adjusted value \" + adjusted_value);\r\n        sequencing_side_by_side_exp.handle_data_saving(blank, block_type, constants, index, adjusted_value, \"blank\");\r\n        console.log(\"Data adjusted value \" + blank.data.adjusted_value);\r\n        blank.stimulus = \"<div align='center'></div>\";\r\n        blank.exp_obj = sequencing_side_by_side_exp;\r\n\r\n      },\r\n      on_finish: function(data){\r\n        console.log(\"Entered on_finish \")\r\n        // Set the constants to be used:\r\n        let index;\r\n        let constants;\r\n        if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('t') || sequencing_side_by_side_exp.auto_mode) {\r\n          // Turn on automation\r\n          sequencing_side_by_side_exp.auto_mode = true;\r\n          if (Math.random() < 0.5) {\r\n            console.log(\"'z' pressed\");\r\n            data.key_press = jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z');\r\n          } else {\r\n            console.log(\"'m' pressed\");\r\n            data.key_press = jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m');\r\n          }\r\n        }\r\n\r\n        sequencing_side_by_side_exp.check_response_sequencing(data);\r\n        console.log(\"RESPONSE: \" + data.correct);\r\n      },\r\n    };\r\n\r\n    var likert = {\r\n      type: 'survey-likert',\r\n      questions: [\r\n        {prompt: \"<div align='center'>Please rate your confidence in your estimates for the previous three blocks,<br> with 1 being a pure guess, and 5 being complete certainty.</div>\", labels: [\"1\",\"2\",\"3\",\"4\",\"5\"]}\r\n      ],\r\n      on_start: function(likert) {\r\n\r\n        if (sequencing_side_by_side_exp.auto_mode) {\r\n          likert.post_trial_gap = 100;\r\n          //likert.trial_duration = 12;\r\n          sequencing_side_by_side_exp.auto_mode = false;\r\n          console.log(\"Automode off\");\r\n        }\r\n\r\n        if (block_type === \"test\"){\r\n          var index = sequencing_side_by_side_exp.current_sub_condition_index;\r\n          var constants = sequencing_side_by_side_exp.sub_conditions_constants[index];\r\n        }\r\n        else {\r\n          var index = sequencing_side_by_side_exp.current_practice_condition_index;\r\n          var constants = sequencing_side_by_side_exp.practice_conditions_constants[index];\r\n        }\r\n\r\n        // Handling saving this trial's data:\r\n        sequencing_side_by_side_exp.handle_data_saving(likert, block_type, constants, index, adjusted_value, \"likert\");\r\n      }\r\n    };\r\n\r\n    // conditional likert timeline wrapper\r\n    var likert_timeline = {\r\n      timeline: [likert],\r\n      conditional_function: function() {\r\n        // if subcondition should end, add likert scale\r\n        if (sequencing_side_by_side_exp.end_sub_condition() && (sequencing_side_by_side_exp.current_sub_condition_index + 1) % 3 == 0) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    };\r\n\r\n    // initialize trial to return\r\n    var trial = [];\r\n    trial = [subcond_num_timeline, first, distractor, blank, likert_timeline];\r\n\r\n    return trial;\r\n  };\r\n\r\n  /**\r\n   * Handles saving the relevant data on a given trial.\r\n   *\r\n   * For reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\r\n   * trial_variables =\r\n   *       {type: 'sequencing',\r\n   *       run_type: '',\r\n   *       left_correlation: '',\r\n   *       right_correlation: '',\r\n   *       };\r\n   *\r\n   * These are variables created WITHIN the trial logic that were not present in excel (but need to be\r\n   * outputted to results).\r\n   * export_variables =\r\n   *       {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\r\n   *        balanced_sub_condition: '',  // Index of sub_condition according to balancing order\r\n   *        jnd: '',\r\n   *        direction '',\r\n   *        base_correlation: '',\r\n   *        adjusted_value: '',\r\n   *        correct: '',\r\n   *       };\r\n   *\r\n   * @param trial {object}\r\n   *        block_type {string}           \"test\" or \"practice\"\r\n   *        constants {assoc array}\r\n   *        index {integer}\r\n   *        adjusted_value {double}\r\n   *        order_type {sring}            \"first\", \"blank\", \"likert\"\r\n   */\r\n  handle_data_saving(trial, block_type, constants, index, adjusted_value, order_type) {\r\n    // Add all constants from excel\r\n    trial.data = constants;\r\n    // Adding constants that required computation (not from excel)\r\n    trial.data.type = \"sequencing_side_by_side\";\r\n    trial.data.graph_type = this.graph_type;\r\n    trial.data.order = order_type;\r\n\r\n    trial.data.adjusted_value = adjusted_value;\r\n    console.log(\"Handle Data Saving Adjusted value: \" + trial.data.adjusted_value);\r\n    //trial.data.adjusted_value_type = \"correlation\";\r\n    trial.data.sub_condition = index;\r\n    trial.data.balanced_sub_condition = this.sub_condition_order[index];\r\n\r\n    // Sequence Order specific saves\r\n    // Only \"first\" trials are saved as they are the last one in the sequence\r\n    // \"likert\" are saved for likert data, treated as the last one of the subcondition\r\n    if(order_type === \"first\" || order_type === \"likert\"){\r\n      // Task type switch\r\n      if (constants.task) {\r\n        switch (constants.task) {\r\n          case \"numerosity\":\r\n            trial.data.adjusted_value_type = \"number of points\";\r\n            trial.data.jnd = Math.abs(adjusted_value - constants.num_points);\r\n            break;\r\n          case \"correlation\":\r\n            trial.data.adjusted_value_type = \"correlation\";\r\n            trial.data.jnd = Math.abs(adjusted_value - constants.base_correlation);\r\n            break;\r\n          default:\r\n            throw Error(\"Calculations for jnd has not been handled for task: \" + constants.task);\r\n        }\r\n      } else {\r\n        trial.data.jnd = Math.abs(adjusted_value - constants.base_correlation);\r\n      }\r\n\r\n      // Block specific saves\r\n      if (block_type == \"test\"){\r\n        this.adjusted_quantity_matrix[index].push(adjusted_value);\r\n        trial.data.run_type = \"test\";\r\n        //trial.data.converged = this.converged;\r\n      }\r\n      else{\r\n        this.adjusted_quantity_practice.push(adjusted_value);\r\n        trial.data.run_type = \"practice\";\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines whether the current sub condition can end or not.\r\n   *\r\n   * @return {boolean}            True if sub condition should end.\r\n   */\r\n  end_sub_condition() {\r\n    if(this.end_sub_condition_debug){\r\n      console.log(\"Skiping Sub Condition\")\r\n      return true;\r\n    }\r\n\r\n    if (this.adjusted_quantity_matrix[this.current_sub_condition_index].length >= this.MIN_TRIALS &&\r\n          this.is_converged_in_window()){\r\n      console.log(\"Subcondtion Converged\" + this.adjusted_quantity_matrix[this.current_sub_condition_index].length)\r\n      return true;\r\n    }\r\n\r\n    if (this.adjusted_quantity_matrix[this.current_sub_condition_index].length >= this.MAX_TRIALS){\r\n      console.log(\"end_sub_condition MAX_TRIALS reached\" + this.adjusted_quantity_matrix[this.current_sub_condition_index].length)\r\n      return true;\r\n    }\r\n\r\n    if(this.adjusted_quantity_practice.length >= this.MAX_PRACTICE_TRIALS){\r\n      console.log(\"Max number of practice trials reached\")\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n\r\n  }\r\n\r\n  /**\r\n   * Checks whether we have just started a subcondition.\r\n   *\r\n   * @return {boolean}            True if sub condition has just started.\r\n   */\r\n  is_start_of_subcondition() {\r\n\r\n    if (this.adjusted_quantity_matrix[this.current_sub_condition_index].length === 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Determines whether current subcondition has converged or not.\r\n   *\r\n   * @return {boolean}            True if converged.\r\n   */\r\n  is_converged_in_window() {\r\n\r\n    var converged = false;\r\n    var num_completed_trials = this.adjusted_quantity_matrix[this.current_sub_condition_index].length;\r\n\r\n    // Check if we have completed the minimum number of trials\r\n    // and if the number of completed trials is greater than the window size\r\n    if (num_completed_trials >= this.MIN_TRIALS && num_completed_trials >= this.WINDOW_SIZE) {\r\n\r\n      // 2D Matrix of windows of adjusted quantities\r\n      var adjusted_quantity_windows = [];\r\n\r\n      // The index of the last trial\r\n      var last_trial = num_completed_trials - 1;\r\n\r\n      // Compute the interval size and remainder\r\n      // The remainder is computed in case the window size isn't divisible by the # intervals\r\n      var interval_size = this.WINDOW_SIZE / this.WINDOW_INTERVAL;\r\n      var interval_remainder = this.WINDOW_SIZE % this.WINDOW_INTERVAL;\r\n\r\n      // This is the first trial in the window\r\n      // For example:\r\n      // numCompletedTrials = 5\r\n      // windowSize = 3\r\n      // [ 0 1 2 3 4 5 6 7 8 9 ]\r\n      // windowStart would be at index: 5 - 3 = 2\r\n      var window_start = num_completed_trials - this.WINDOW_SIZE;\r\n      console.log(\"num completed: \" + num_completed_trials);\r\n      console.log(\"window start: \" + window_start);\r\n\r\n      // Iterate over all of the trials from the start of the window to the last trial\r\n      // and organize them into the 2D adjustedQuantityWindows matrix\r\n      while (window_start < last_trial) {\r\n\r\n        // While we have extra elements that don't fit into an interval\r\n        // add one extra to each window interval\r\n        var current_interval_size = interval_remainder > 0 ? interval_size + 1 : interval_size;\r\n        if (interval_remainder > 0) {\r\n          interval_remainder--;\r\n        }\r\n\r\n        // Collect the adjusted quantity values from the trials into the double[]\r\n        var adjusted_quantities = [];\r\n        for (let i = 0; i < current_interval_size; ++i) {\r\n          var adjusted_quantity = this.adjusted_quantity_matrix[this.current_sub_condition_index][i + window_start];\r\n          adjusted_quantities.push(adjusted_quantity);\r\n        }\r\n\r\n        // Set the window start to the next interval\r\n        window_start += current_interval_size;\r\n        adjusted_quantity_windows.push(adjusted_quantities);\r\n      }\r\n\r\n      console.log(adjusted_quantity_windows);\r\n\r\n      var variance = [];\r\n      var mean = [];\r\n      for (let i = 0; i < adjusted_quantity_windows.length; i++){\r\n        variance.push(math.var(adjusted_quantity_windows[i]));\r\n        mean.push(math.mean(adjusted_quantity_windows[i]));\r\n      }\r\n\r\n      var mean_of_variances = math.mean(variance);\r\n      var variance_of_means = math.var(mean);\r\n      var F = variance_of_means/mean_of_variances;\r\n      console.log(\"F: \" + F);\r\n      // Convergence if the F value is < 1 - convergenceThreshold\r\n      // if the F is greater than 0.25, then converge\r\n      converged = F < (1 - this.CONVERGENCE_THRESHOLD);\r\n    }\r\n\r\n    if (converged) {console.log(\"CONVERGED!!!!\")};\r\n\r\n    return converged;\r\n  }\r\n\r\n  /**\r\n   * Calculates the adjusted value depending on whether this is the\r\n   * first trial of the sub condition or not.\r\n   *\r\n   * @param  constants {assoc array}\r\n   * @return adjusted_value {double}\r\n   */\r\n  calculate_adjusted_value(constants) {\r\n\r\n    // For the first trial, we need to initialize the adjusted correlation:\r\n    if (this.first_trial_of_sub_condition){\r\n      var adjusted_value = this.initialize_adjusted_statistic(constants);\r\n      // Set flag to false\r\n      this.first_trial_of_sub_condition = false;\r\n    }\r\n    else{\r\n      var last_trial = jsPsych.data.get().filter({type: \"sequencing_side_by_side\"}).last(1).values()[0];\r\n\r\n      var adjusted_value = this.get_next_adjusted_statistic(last_trial, constants);\r\n    }\r\n    return adjusted_value;\r\n  }\r\n\r\n  /**\r\n   * Initializes the adjusted value for the first time.\r\n   *\r\n   * @param  {object}             constants\r\n   * @return {double}             adjusted_value\r\n   */\r\n  initialize_adjusted_statistic(constants) {\r\n    let adjusted_value;\r\n\r\n    if (constants.reference_start) {\r\n      adjusted_value = constants.reference_start;\r\n    }\r\n    else {\r\n      if (constants.converge_from_above){\r\n        adjusted_value = Math.min(this.MAX_CORRELATION, constants.base_correlation + constants.initial_difference);\r\n      }\r\n      else {\r\n        adjusted_value = Math.max(this.MIN_CORRELATION, constants.base_correlation - constants.initial_difference);\r\n      };\r\n    }\r\n    return adjusted_value;\r\n  }\r\n\r\n  /**\r\n   * Calculates the next adjusted value.\r\n   *\r\n   * @param  {object} last_trial\r\n   *.        {object} constants\r\n   * @return {double} next_adjusted_statistic\r\n   */\r\n  get_next_adjusted_statistic(last_trial, constants){\r\n    let next_adjusted_statistic;\r\n\r\n    if (constants.task){\r\n      switch (constants.task) {\r\n        case \"numerosity\":\r\n          if (last_trial.correct) {\r\n            let correct_numerosity_statistic_increment = 1;\r\n            next_adjusted_statistic = last_trial.adjusted_value + correct_numerosity_statistic_increment;\r\n          } else {\r\n            let incorrect_numerosity_statistic_increment = 3;\r\n            next_adjusted_statistic = last_trial.adjusted_value - incorrect_numerosity_statistic_increment;\r\n          }\r\n          break;\r\n        case \"correlation\":\r\n          // For num_corr conditions, guard to force adjusted stat to be use this calculation instead of the\r\n          // traditional min/max AKA what is in get_next_adjusted_correlation\r\n          if (this.condition_name.split(\"_\").includes(\"num\") && this.condition_name.split(\"_\").includes(\"corr\")) {\r\n            if (last_trial.correct) {\r\n              this.correct_statistic_increment = 0.01;\r\n              next_adjusted_statistic = last_trial.adjusted_value + this.correct_statistic_increment;\r\n                if (next_adjusted_statistic >= constants.reference_start + 0.1) {\r\n                  next_adjusted_statistic = constants.reference_start + 0.1;\r\n                }\r\n            } else {\r\n              this.incorrect_statistic_increment = 0.03;\r\n              next_adjusted_statistic = last_trial.adjusted_value - this.incorrect_statistic_increment;\r\n                if (next_adjusted_statistic <= 0.00) {\r\n                  next_adjusted_statistic = 0.00;\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            next_adjusted_statistic = this.get_next_adjusted_correlation(last_trial, constants);\r\n          }\r\n          break;\r\n\r\n        default:\r\n          throw Error(\"Calculations for getting next adjusted statistic has not been handled for task: \" + constants.task);\r\n          break;\r\n      }\r\n    }\r\n    else {\r\n      let initial_difference = constants.base_correlation;\r\n      next_adjusted_statistic = this.get_next_adjusted_correlation(last_trial, constants);\r\n    }\r\n    return next_adjusted_statistic;\r\n  }\r\n\r\n  /**\r\n   * Calculates the next adjusted correlation (the traditional way).\r\n   *\r\n   * @param  {object} last_JND_trial\r\n   *.        {object} constants\r\n   * @return {double} next_adjusted_statistic\r\n   */\r\n  get_next_adjusted_correlation(last_JND_trial, constants){\r\n    let next_adjusted_statistic;\r\n    let initial_difference = constants.base_correlation;\r\n\r\n    if (constants.converge_from_above) {\r\n      if (last_JND_trial.correct) {\r\n        next_adjusted_statistic = Math.max(initial_difference, last_JND_trial.adjusted_value - constants.max_step_size);\r\n      } else {\r\n        next_adjusted_statistic = Math.min(this.MAX_CORRELATION, last_JND_trial.adjusted_value + constants.max_step_size\r\n                                  * this.INCORRECT_MULTIPLIER);\r\n      }\r\n    } else {\r\n      if (last_JND_trial.correct) {\r\n        next_adjusted_statistic = Math.min(initial_difference, last_JND_trial.adjusted_value + constants.max_step_size);\r\n      } else {\r\n        next_adjusted_statistic = Math.max(this.MIN_CORRELATION, last_JND_trial.adjusted_value - constants.max_step_size\r\n                                  * this.INCORRECT_MULTIPLIER);\r\n      }\r\n    }\r\n    return next_adjusted_statistic;\r\n  }\r\n\r\n  /**\r\n   * Given a JND trial data, determines whether response is\r\n   * correct or not.\r\n   *\r\n   * @param  {JsPsych.data}  data\r\n   * @param. {object}        constants\r\n   * @return {boolean}\r\n   */\r\n  check_response(data, constants) {\r\n\r\n    // For debugging purposes:\r\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q')){\r\n      data.correct = -1;\r\n      return -1;\r\n    }\r\n\r\n    let right_greater_clause;\r\n    let left_greater_clause;\r\n\r\n    if (!constants.task || constants.task === \"correlation\") {\r\n\r\n      right_greater_clause = data.right_correlation > data.left_correlation;\r\n      left_greater_clause = data.left_correlation > data.right_correlation;\r\n\r\n    } else if (constants.task === \"numerosity\") {\r\n\r\n      right_greater_clause = data.right_num_points > data.left_num_points;\r\n      left_greater_clause = data.left_num_points > data.right_num_points;\r\n\r\n    } else {\r\n      throw Error(\"Check response function has not been handled for task: \" + constants.task);\r\n    }\r\n\r\n    if (right_greater_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m')) ||\r\n        left_greater_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z'))){\r\n\r\n      data.correct = true;\r\n      return true;\r\n    }\r\n    // Assuming that if base_correlation = adjusted_correlation, at this point\r\n    // any user choice is wrong.\r\n    else {\r\n      data.correct = false;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a Sequencing trial data, determines whether response is\r\n   * correct or not.\r\n   *\r\n   * @param  {JsPsych.data}  data\r\n   * @return {boolean}\r\n   */\r\n  check_response_sequencing(data) {\r\n    // For debugging purposes:\r\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q')){\r\n      data.correct = -1; // debug flag\r\n      return -1;\r\n    }\r\n    // Skip current subcondition\r\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('w')){\r\n      this.end_sub_condition_debug = true;\r\n      data.correct = -1; // skip subcondition flag\r\n      return -1;\r\n    }\r\n\r\n    let right_greater_clause;\r\n    let left_greater_clause;\r\n\r\n    var alpha = 0.000001; // Alpha value to compare doubles\r\n    var are_equal = Math.abs(data.base_correlation - data.adjusted_value) <= alpha;\r\n\r\n    // Assuming that if base_correlation = adjusted_correlation, at this point\r\n    // any user choice is wrong.\r\n    if(are_equal){\r\n      data.correct = false;\r\n      data.jnd = 0;\r\n\r\n      return false;\r\n    }\r\n\r\n    right_greater_clause = data.right_correlation > data.left_correlation;\r\n    left_greater_clause = data.left_correlation > data.right_correlation;\r\n\r\n    if (right_greater_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m')) ||\r\n        left_greater_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z'))){\r\n\r\n      data.correct = true;\r\n      return true;\r\n    }\r\n    else{\r\n      data.correct = false;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When called, will save individual trial data into a CSV.\r\n   */\r\n  export_trial_data() {\r\n\r\n    const trial_data = jsPsych.data.get().filter({type: 'sequencing_side_by_side', run_type: 'test'})\r\n                                       .filterCustom(function(x){ //Don't include the exit trials\r\n                                         return x.correct != -1;\r\n                                       })\r\n                                       .filterCustom(function(x){\r\n                                         if (x.order === \"blank\" || x.order === \"likert\")  // filter for only base and likert trials\r\n                                         return x;\r\n                                       })\r\n                                       // Sequencing's trial variables\r\n                                       .ignore('type')\r\n                                       .ignore('run_type')\r\n                                       .ignore('left_correlation')\r\n                                       .ignore('right_correlation')\r\n                                       // These are variables forced on by jsPsych\r\n                                       .ignore('stimulus')\r\n                                       .ignore('key_press')\r\n                                       .ignore('choices')\r\n                                       .ignore('trial_type')\r\n                                       .ignore('trial_index')\r\n                                       .ignore('time_elapsed')\r\n                                       .ignore('internal_node_id');\r\n\r\n    //console.log(\"trial data: \",trial_data.json());\r\n    //console.log(\"stringified trial data: \", JSON.stringify(JSON.parse(trial_data.json())));\r\n\r\n    // TODO: js converting key_string to use double quotes, needs to be single to pass into ignore() fxn\r\n    //\r\n    // for (var key in sequencing_exp.trial_variables){\r\n    //  var key_string = '${key}';\r\n    //  trial_data.ignore(key);\r\n    // }\r\n    //\r\n    //\r\n    // Local save\r\n    // var string = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_sequencing_trial_results.csv\";\r\n    // trial_data.localSave('csv', string);\r\n\r\n    //Firebase upload\r\n\r\n    let summary_data = [];\r\n\r\n    for (let i = 0; i<this.sub_conditions_constants.length; i++) {\r\n      let sub_data = {};\r\n\r\n      const constants = this.sub_conditions_constants[i];\r\n\r\n      const condition_data = jsPsych.data.get().filter({type: 'sequencing_side_by_side', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                               .filterCustom(function(x) {\r\n                                                 return (x.correct != -1\r\n                                                      && x.order === \"blank\");\r\n                                                    });\r\n\r\n      const likert_data = jsPsych.data.get().filter({type: 'sequencing_side_by_side', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                               .filterCustom(function(x) {\r\n                                                return (x.order === \"likert\");\r\n                                                });\r\n\r\n      sub_data.jnd = condition_data.select('jnd').mean();\r\n      sub_data.last_24 = condition_data.last(24).select('jnd').mean();\r\n      sub_data.base_correlation = constants.base_correlation;\r\n      sub_data.stimulus_duration = constants.stimulus_duration;\r\n      sub_data.num_points = constants.num_points;\r\n      sub_data.trial_count = condition_data.count();\r\n      sub_data.likert_data = JSON.stringify(likert_data.select('responses').values[0]);\r\n\r\n      summary_data.push(sub_data);\r\n      console.log(\"index success \" + i);\r\n\r\n    }\r\n\r\n    $.post(\"/api/experiment_data\",\r\n            {trial_data: JSON.parse(trial_data.json()), summary_data: summary_data, experiment: \"sequencing_side_by_side\", condition: params[\"condition\"], prolific_pid: params[\"subject_id\"], study_id: params[\"study_id\"], session_id: params[\"session_id\"]},\r\n            function(data, status) {\r\n              console.log(\"Data: \" + data + \"\\nStatus: \" + status)\r\n            }\r\n          );\r\n  }\r\n\r\n  /* Randomize array in-place using Durstenfeld shuffle algorithm\r\n  * Kindly taken from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n  * @param array {array}\r\n  */\r\n  shuffleArray(array) {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n        var j = Math.floor(Math.random() * (i + 1));\r\n        var temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n  }\r\n\r\n  /* Get the height of the screen\r\n  * Kindly taken from https://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code\r\n  */\r\n  getScreenHeight() {\r\n    return screen.height\r\n\r\n  }\r\n\r\n  /**\r\n * Get constants of block type.\r\n *\r\n * @param {String} block_type - Either \"test\" or \"practice\"\r\n * @returns {String} constants - Ex) {SD: 0.2, adjusted_value: 0.8, dist_base: 0.3, error: 0.0001, num_points: 100, type: \"jnd\", ...}\r\n * @author Jake Moh\r\n */\r\n  get_constants_of_block_type(block_type) {\r\n  // Error handling\r\n  if (block_type != \"test\" && block_type != \"practice\") {\r\n    throw Error(`Invalid experiment type of ${block_type}`);\r\n  }\r\n\r\n  let constants;\r\n  if (block_type == \"test\"){\r\n    constants = this.get_practice_conditions_constants_at_current_index();\r\n  } else {\r\n    constants = this.get_experience_conditions_constants_at_current_index();\r\n  }\r\n\r\n  return constants;\r\n}\r\n\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 850,
    "kind": "class",
    "name": "Sequencing_Side_by_Side",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js",
    "importStyle": "Sequencing_Side_by_Side",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 851,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#constructor",
    "access": "public",
    "description": "Initializes a Sequencing experiment object.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "Parameters",
        "description": "passed from routing."
      }
    ]
  },
  {
    "__docId__": 852,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 853,
    "kind": "member",
    "name": "condition_group",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#condition_group",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 854,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 855,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 856,
    "kind": "member",
    "name": "auto_mode",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#auto_mode",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 857,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 858,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 859,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 860,
    "kind": "member",
    "name": "PIXELS_PER_CM",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#PIXELS_PER_CM",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 861,
    "kind": "member",
    "name": "MIN_CORRELATION",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#MIN_CORRELATION",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 862,
    "kind": "member",
    "name": "MAX_CORRELATION",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#MAX_CORRELATION",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 863,
    "kind": "member",
    "name": "MIN_TRIALS",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#MIN_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 864,
    "kind": "member",
    "name": "MAX_TRIALS",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#MAX_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 865,
    "kind": "member",
    "name": "WINDOW_SIZE",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#WINDOW_SIZE",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 866,
    "kind": "member",
    "name": "WINDOW_INTERVAL",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#WINDOW_INTERVAL",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 867,
    "kind": "member",
    "name": "CONVERGENCE_THRESHOLD",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#CONVERGENCE_THRESHOLD",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 868,
    "kind": "member",
    "name": "INCORRECT_MULTIPLIER",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#INCORRECT_MULTIPLIER",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 869,
    "kind": "member",
    "name": "MAX_REPETITIONS",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#MAX_REPETITIONS",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 870,
    "kind": "member",
    "name": "SCREEN_HEIGHT",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#SCREEN_HEIGHT",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 871,
    "kind": "member",
    "name": "MAX_PRACTICE_TRIALS",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#MAX_PRACTICE_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 872,
    "kind": "member",
    "name": "PRACTICE_CORRELATION",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#PRACTICE_CORRELATION",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 873,
    "kind": "member",
    "name": "PRACTICE_STIMULUS_DURATION",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#PRACTICE_STIMULUS_DURATION",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 874,
    "kind": "member",
    "name": "practice_selection_matrix",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#practice_selection_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 875,
    "kind": "member",
    "name": "adjusted_quantity_practice",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#adjusted_quantity_practice",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 876,
    "kind": "member",
    "name": "PRACTICE_PARAMTERS",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#PRACTICE_PARAMTERS",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "{\"distribution_type\": string, \"base_correlation\": number, \"stimulus_duration\": number, \"distractor_duration\": number, \"error\": number, \"max_step_size\": number, \"converge_from_above\": *, \"initial_difference\": number, \"num_points\": number, \"mean\": number, \"SD\": number, \"num_SD\": number, \"point_color\": string, \"axis_color\": string, \"text_color\": string, \"feedback_background_color\": string, \"background_color\": string, \"point_size\": number}"
      ]
    }
  },
  {
    "__docId__": 877,
    "kind": "member",
    "name": "first_trial_of_sub_condition",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#first_trial_of_sub_condition",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 878,
    "kind": "member",
    "name": "adjusted_quantity_matrix",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#adjusted_quantity_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 879,
    "kind": "member",
    "name": "end_sub_condition_debug",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#end_sub_condition_debug",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 880,
    "kind": "member",
    "name": "left_coordinates",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#left_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 881,
    "kind": "member",
    "name": "right_coordinates",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#right_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 882,
    "kind": "member",
    "name": "distractor_coordinates",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#distractor_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 883,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 884,
    "kind": "member",
    "name": "raw_constants",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#raw_constants",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 885,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#prepare_experiment",
    "access": "public",
    "description": "Orders the input data according to balancing type and\ninitializes the Sequencing object's variables.",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "balancing_type",
        "description": "{string}                             Type of balancing. Currently only latin_square\n                                                            is supported.\n        dataset {[{assoc array}, {assoc array}, ... ]}      The data to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 886,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 887,
    "kind": "member",
    "name": "sub_conditions_constants",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#sub_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 888,
    "kind": "member",
    "name": "current_sub_condition_index",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#current_sub_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 889,
    "kind": "method",
    "name": "prepare_practice",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#prepare_practice",
    "access": "public",
    "description": "Orders the input dataset by randomizing it, and initializes the practice variables.",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "{[{assoc array}, {assoc array}, ... ]}   The data to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 891,
    "kind": "member",
    "name": "practice_conditions_constants",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#practice_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 892,
    "kind": "member",
    "name": "current_practice_condition_index",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#current_practice_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 893,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#generate_trial",
    "access": "public",
    "description": "Generates a Sequencing trial object for use in the JsPsych timeline.",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "{string}             \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    }
  },
  {
    "__docId__": 894,
    "kind": "method",
    "name": "handle_data_saving",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#handle_data_saving",
    "access": "public",
    "description": "Handles saving the relevant data on a given trial.\n\nFor reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\ntrial_variables =\n      {type: 'sequencing',\n      run_type: '',\n      left_correlation: '',\n      right_correlation: '',\n      };\n\nThese are variables created WITHIN the trial logic that were not present in excel (but need to be\noutputted to results).\nexport_variables =\n      {sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\n       balanced_sub_condition: '',  // Index of sub_condition according to balancing order\n       jnd: '',\n       direction '',\n       base_correlation: '',\n       adjusted_value: '',\n       correct: '',\n      };",
    "lineNumber": 443,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}\n       block_type {string}           \"test\" or \"practice\"\n       constants {assoc array}\n       index {integer}\n       adjusted_value {double}\n       order_type {sring}            \"first\", \"blank\", \"likert\""
      }
    ],
    "return": null
  },
  {
    "__docId__": 895,
    "kind": "method",
    "name": "end_sub_condition",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#end_sub_condition",
    "access": "public",
    "description": "Determines whether the current sub condition can end or not.",
    "lineNumber": 497,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition should end."
    },
    "params": []
  },
  {
    "__docId__": 896,
    "kind": "method",
    "name": "is_start_of_subcondition",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#is_start_of_subcondition",
    "access": "public",
    "description": "Checks whether we have just started a subcondition.",
    "lineNumber": 529,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition has just started."
    },
    "params": []
  },
  {
    "__docId__": 897,
    "kind": "method",
    "name": "is_converged_in_window",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#is_converged_in_window",
    "access": "public",
    "description": "Determines whether current subcondition has converged or not.",
    "lineNumber": 542,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if converged."
    },
    "params": []
  },
  {
    "__docId__": 898,
    "kind": "method",
    "name": "calculate_adjusted_value",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#calculate_adjusted_value",
    "access": "public",
    "description": "Calculates the adjusted value depending on whether this is the\nfirst trial of the sub condition or not.",
    "lineNumber": 625,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": "{assoc array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "adjusted_value {double}"
    }
  },
  {
    "__docId__": 900,
    "kind": "method",
    "name": "initialize_adjusted_statistic",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#initialize_adjusted_statistic",
    "access": "public",
    "description": "Initializes the adjusted value for the first time.",
    "lineNumber": 647,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "double"
      ],
      "spread": false,
      "description": "adjusted_value"
    }
  },
  {
    "__docId__": 901,
    "kind": "method",
    "name": "get_next_adjusted_statistic",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#get_next_adjusted_statistic",
    "access": "public",
    "description": "Calculates the next adjusted value.",
    "lineNumber": 671,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "last_trial",
        "description": ".        {object} constants"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "double"
      ],
      "spread": false,
      "description": "next_adjusted_statistic"
    }
  },
  {
    "__docId__": 902,
    "kind": "member",
    "name": "correct_statistic_increment",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#correct_statistic_increment",
    "access": "public",
    "description": null,
    "lineNumber": 690,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 903,
    "kind": "member",
    "name": "incorrect_statistic_increment",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#incorrect_statistic_increment",
    "access": "public",
    "description": null,
    "lineNumber": 696,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 904,
    "kind": "method",
    "name": "get_next_adjusted_correlation",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#get_next_adjusted_correlation",
    "access": "public",
    "description": "Calculates the next adjusted correlation (the traditional way).",
    "lineNumber": 727,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "last_JND_trial",
        "description": ".        {object} constants"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "double"
      ],
      "spread": false,
      "description": "next_adjusted_statistic"
    }
  },
  {
    "__docId__": 905,
    "kind": "method",
    "name": "check_response",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#check_response",
    "access": "public",
    "description": "Given a JND trial data, determines whether response is\ncorrect or not.",
    "lineNumber": 757,
    "params": [
      {
        "nullable": null,
        "types": [
          "JsPsych.data"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "@param. {object}        constants"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 906,
    "kind": "method",
    "name": "check_response_sequencing",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#check_response_sequencing",
    "access": "public",
    "description": "Given a Sequencing trial data, determines whether response is\ncorrect or not.",
    "lineNumber": 803,
    "params": [
      {
        "nullable": null,
        "types": [
          "JsPsych.data"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 908,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#export_trial_data",
    "access": "public",
    "description": "When called, will save individual trial data into a CSV.",
    "lineNumber": 849,
    "params": [],
    "return": null
  },
  {
    "__docId__": 909,
    "kind": "method",
    "name": "shuffleArray",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#shuffleArray",
    "access": "public",
    "description": null,
    "lineNumber": 933,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 910,
    "kind": "method",
    "name": "getScreenHeight",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#getScreenHeight",
    "access": "public",
    "description": null,
    "lineNumber": 945,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 911,
    "kind": "method",
    "name": "get_constants_of_block_type",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side#get_constants_of_block_type",
    "access": "public",
    "description": "Get constants of block type.",
    "lineNumber": 957,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} constants - Ex) {SD: 0.2, adjusted_value: 0.8, dist_base: 0.3, error: 0.0001, num_points: 100, type: \"jnd\", ...}"
      },
      {
        "tagName": "@author",
        "tagValue": "Jake Moh"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": "Either \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "constants - Ex) {SD: 0.2, adjusted_value: 0.8, dist_base: 0.3, error: 0.0001, num_points: 100, type: \"jnd\", ...}"
    }
  },
  {
    "__docId__": 912,
    "kind": "variable",
    "name": "IMAGE_PATH",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~IMAGE_PATH",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js",
    "importStyle": "{IMAGE_PATH}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 913,
    "kind": "file",
    "name": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "content": "import Sequencing_Side_by_Side from \"/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js\";\r\nimport {IMAGE_PATH} from \"/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js\";\r\nimport {get_instructions} from \"/scripts/experiment-properties/instructions/instructions_controller.js\";\r\nimport { resolution_scaling } from '/scripts/experiment-timeline/resolution_scaling/resolution_scaling.js';\r\nimport * as screening from '/scripts/experiment-timeline/screening/screening.js';\r\n\r\nexport var sequencing_side_by_side_exp = new Sequencing_Side_by_Side(params);\r\n\r\nvar timeline = [];\r\nvar address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\n// =========================================================\r\n// WELCOME TRIAL BLOCK\r\n\r\nvar welcome = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: `<div align = \"center\">` + `<img src=\"${address}/img/VCL_lab_logo.png\"></img><br><br>` +\r\n            `<b>Base:</b> Sequencing` + '<br>' +\r\n            `<b>Trial Type:</b> ${sequencing_side_by_side_exp.trial_structure}` + '<br>' +\r\n            `<b>Graph Type:</b> ${sequencing_side_by_side_exp.graph_type}` + '<br>' +\r\n            `<b>Condition:</b> ${sequencing_side_by_side_exp.condition_name}` +\r\n            '<br><br><br><p><font size = 15>Press any key to begin.<p></font>' +\r\n            '</div>',\r\n  data: {type: 'instruction'}\r\n};\r\ntimeline.push(welcome);\r\n\r\n\r\n// =========================================================\r\n// RESOLUTION SCALING\r\n\r\ntimeline.push(resolution_scaling);\r\n\r\n\r\n// =========================================================\r\n// SCREENING\r\n//\r\n// timeline.push(\r\n// \tscreening.screeningQuestions,\r\n// \tscreening.screeningInstructions,\r\n// \tscreening.screeningCorrelationSort,\r\n// \tscreening.screeningCorrelationSelect,\r\n// \tscreening.instructionsRegression,\r\n// \tscreening.screeningRegressionSelect\r\n// );\r\n//\r\n// =========================================================\r\n// INSTRUCTION TRIAL BLOCKS\r\n\r\nvar ready = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: \"<div align = 'center'> <font size = 20><p>Ready? We will first do some practice trials. <p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\r\n  data: {type: 'instruction'}\r\n}\r\n\r\nvar instructions = {\r\n    type: \"html-keyboard-response\",\r\n    stimulus: function(){\r\n        return get_instructions(sequencing_side_by_side_exp);\r\n    }\r\n};\r\n\r\nvar instruction_trials = {\r\n  timeline: [instructions, ready]\r\n};\r\n\r\ntimeline.push(instruction_trials);\r\n\r\n// =========================================================\r\n// PRACTICE TRIAL BLOCKS\r\n\r\n// ---------------------------------------------------------\r\n// FEEDBACK\r\n\r\nvar feedback = {\r\n  type: 'html-keyboard-response',\r\n  choices: ['q'],\r\n  post_trial_gap: 300,\r\n  // trial_duration: 500,\r\n  data: {type: 'feedback'},\r\n  trial_duration: 500,\r\n  on_start: function(feedback) {\r\n    if (sequencing_side_by_side_exp.auto_mode) {\r\n      feedback.trial_duration = 0;\r\n    }\r\n  },\r\n  stimulus: function(){\r\n\r\n    document.body.style.backgroundColor = sequencing_side_by_side_exp.trial_data.feedback_background_color;\r\n\r\n    var last_trial = JSON.parse(jsPsych.data.getLastTrialData().json());\r\n    var last_trial_correct = last_trial[0][\"correct\"];\r\n\r\n    // For debugging purposes:\r\n    if (last_trial_correct == -1){\r\n      return '<p>' +\r\n             '<font style=\"font-size:50px; color:blue\">Exiting from experiment.<p></font>'\r\n    }\r\n    else if (last_trial_correct == -2){\r\n      return '<p>' +\r\n             '<font style=\"font-size:50px; color:blue\">Skipping from subcondtion.<p></font>'\r\n    }\r\n\r\n    else if (last_trial_correct){\r\n      return `<div align = \"center\">\r\n              <p>\r\n                <i class=\"fa fa-check-circle\" style=\"font-size:50px; color:green; margin-right: 10px;\"></i>\r\n                <font style=\"font-size:50px; color:green\">\r\n                Correct!\r\n                </font>\r\n              <p>\r\n              <br>\r\n              </div>`\r\n    }\r\n    else{\r\n      return `<div align = \"center\">\r\n              <p>\r\n                <i class=\"fa fa-close\" style=\"font-size:50px; color:red; margin-right: 10px;\"></i>\r\n                <font style=\"font-size:50px; color:red;\"\">\r\n                Incorrect!\r\n                </font>\r\n              <p>\r\n              <br>\r\n              </div>`\r\n    }\r\n  }\r\n};\r\n\r\nvar feedback_wrapper = {\r\n  timeline: [feedback],\r\n  conditional_function: function() {\r\n    if (sequencing_side_by_side_exp.end_sub_condition()) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  },\r\n}\r\n\r\n// ---------------------------------------------------------\r\n// PRE-SUBCONDITION INSTRUCTION BLOCK\r\nvar practice_sequencing = sequencing_side_by_side_exp.generate_trial(\"practice\");\r\n\r\n// This is a conditional block that will execute only if\r\n// the subcondition has a subcondition_instructions attribute\r\n// and it is the start of the subcondition.\r\nvar subcond_practice_instruction = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: function(){\r\n\r\n    let index = sequencing_side_by_side_exp.current_practice_condition_index;\r\n    let constants = sequencing_side_by_side_exp.practice_conditions_constants[index];\r\n\r\n    return constants.subcondition_instructions;\r\n  }\r\n}\r\n\r\nvar subcond_practice_instruction_block = {\r\n  timeline: [subcond_practice_instruction],\r\n  conditional_function: function() {\r\n\r\n    let index = sequencing_side_by_side_exp.current_practice_condition_index;\r\n    let constants = sequencing_side_by_side_exp.practice_conditions_constants[index];\r\n\r\n    if (constants.subcondition_instructions){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// ---------------------------------------------------------\r\n// PRACTICE BLOCK\r\n\r\nvar practice = {\r\n  timeline: [subcond_practice_instruction_block, ...practice_sequencing, feedback], // We use same feedback block as that used in practice\r\n  loop_function: function(data){ // Return true if timeline should continue\r\n                                 // Return false if timeline should end\r\n\r\n\r\n    let key_presses = [];\r\n    data.values().forEach(function(elem){\r\n                          key_presses.push(elem.key_press);\r\n                          });\r\n\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (key_presses.includes(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q'))){\r\n      // Turn flag on\r\n      sequencing_side_by_side_exp.first_trial_of_sub_condition = true;\r\n      sequencing_side_by_side_exp.converged = false;\r\n      sequencing_side_by_side_exp.end_sub_condition_debug = false;\r\n      return false;\r\n    }\r\n\r\n    if(sequencing_side_by_side_exp.end_sub_condition()){\r\n      // End practice\r\n      sequencing_side_by_side_exp.first_trial_of_sub_condition = true;\r\n      sequencing_side_by_side_exp.converged = false;\r\n      sequencing_side_by_side_exp.end_sub_condition_debug = false;\r\n      sequencing_side_by_side_exp.adjusted_quantity_practice = [];\r\n      return false;\r\n    }\r\n    // Else continue w/ current subcondition:\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n\r\ntimeline.push(practice);\r\n\r\n// ---------------------------------------------------------\r\n// STOP BLOCK\r\n\r\nvar stop = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: \"<div align = 'center'> <font size = 20><p>This concludes the practice trials.<p>\" + \"<br><br><p><b>Any questions?</b></p></font></div>\",\r\n  data: {type: 'instruction'},\r\n  on_start: function(stop){\r\n    // Reset background color to feedback\r\n    document.body.style.backgroundColor = sequencing_side_by_side_exp.trial_data.feedback_background_color;\r\n    // skip if automation mode is turned on\r\n    if (sequencing_side_by_side_exp.auto_mode) {\r\n      stop.trial_duration = 0;\r\n    }\r\n  }\r\n}\r\n\r\nvar stop_trials = {\r\n  timeline: [stop]\r\n};\r\n\r\n//timeline.push(stop_trials);\r\n\r\n// =========================================================\r\n// EXPERIMENT TRIAL BLOCKS\r\n\r\n// ---------------------------------------------------------\r\n// PRE-SUBCONDITION INSTRUCTION BLOCK\r\n\r\nvar trial = sequencing_side_by_side_exp.generate_trial(\"test\");\r\n\r\n// This is a conditional block that will execute only if\r\n// the subcondition has a subcondition_instructions attribute\r\n// and it is the start of the subcondition.\r\nvar subcond_instruction = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: function(){\r\n\r\n    let index = sequencing_side_by_side_exp.current_sub_condition_index;\r\n    let constants = sequencing_side_by_side_exp.sub_conditions_constants[index];\r\n\r\n    return constants.subcondition_instructions;\r\n  }\r\n}\r\n\r\nvar subcond_instruction_block = {\r\n  timeline: [subcond_instruction],\r\n  conditional_function: function() {\r\n\r\n    let index = sequencing_side_by_side_exp.current_sub_condition_index;\r\n    let constants = sequencing_side_by_side_exp.sub_conditions_constants[index];\r\n\r\n    if (constants.subcondition_instructions && sequencing_side_by_side_exp.is_start_of_subcondition()){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// ---------------------------------------------------------\r\n// EXPERIMENT BLOCK\r\n\r\nvar experiment = {\r\n  timeline: [subcond_instruction_block, ...trial, feedback_wrapper],\r\n  loop_function: function(data){ // Return true if timeline should continue\r\n                                 // Return false if timeline should end\r\n\r\n    let key_presses = [];\r\n    data.values().forEach(function(elem){\r\n                          key_presses.push(elem.key_press);\r\n                          });\r\n\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (key_presses.includes(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q'))){\r\n      return false;\r\n    }\r\n    // If subcondition should end:\r\n    if(sequencing_side_by_side_exp.end_sub_condition()){\r\n      sequencing_side_by_side_exp.first_trial_of_sub_condition = true;\r\n      sequencing_side_by_side_exp.converged = false;\r\n      sequencing_side_by_side_exp.end_sub_condition_debug = false;\r\n\r\n      // If there are still more subconditions, increment current index\r\n      if (sequencing_side_by_side_exp.current_sub_condition_index < (sequencing_side_by_side_exp.sub_conditions_constants.length-1)){\r\n        sequencing_side_by_side_exp.current_sub_condition_index++;\r\n        console.log(\"!!!!!!!!!! Moved to new sub condition at index \"\r\n                    + sequencing_side_by_side_exp.current_sub_condition_index);\r\n        return true;\r\n      }\r\n      // Else end experiment\r\n      else {\r\n        return false;\r\n      }\r\n    }\r\n    // Else continue w/ current subcondition:\r\n    else {\r\n      return true;\r\n    }\r\n  },\r\n  on_finish: function(data) {\r\n    sequencing_side_by_side_exp.trial_data = data;\r\n  }\r\n};\r\n\r\n\r\ntimeline.push(experiment);\r\n\r\nconsole.log(\"======================\");\r\n\r\n// =========================================================\r\n// DATA DOWNLOADING\r\n\r\n// Try to save likert scale data\r\n// var likert_data = jsPsych.data.get().filter({trial_type: 'survey-likert'});\r\n// var likert_data_name = \"S_likert_results.csv\";\r\n// likert_data.localSave('csv', likert_data_name);\r\n\r\nvar experiment_end = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: '<div align = \"center\">' +\r\n            '<p><font size = 10>You have completed the experiment!<p></font>' +\r\n            '</div>' ,\r\n  on_start: function(){\r\n\r\n    sequencing_side_by_side_exp.export_trial_data();\r\n    //sequencing_side_by_side_exp.export_summary_data();\r\n\r\n    // Reset background color to feedback\r\n    document.body.style.backgroundColor = sequencing_side_by_side_exp.trial_data.feedback_background_color;\r\n  }\r\n};\r\ntimeline.push(experiment_end);\r\n\r\n// =========================================================\r\n// START JSPSYCH\r\n\r\n// preload images so they aren't delayed online\r\nvar noisemask = [IMAGE_PATH];\r\n\r\njsPsych.init({\r\n    timeline: timeline,\r\n    preload_images: noisemask,\r\n    // on_finish: function(){\r\n    //     jsPsych.data.displayData();\r\n    // }\r\n});\r\nconsole.log(\"Resolution Scale\")\r\nconsole.log(resolution_scaling.scale_factor)\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 914,
    "kind": "variable",
    "name": "sequencing_side_by_side_exp",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~sequencing_side_by_side_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": "{sequencing_side_by_side_exp}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side.js~Sequencing_Side_by_Side"
      ]
    }
  },
  {
    "__docId__": 915,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 916,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 917,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 918,
    "kind": "variable",
    "name": "ready",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~ready",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 919,
    "kind": "variable",
    "name": "instructions",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 920,
    "kind": "variable",
    "name": "instruction_trials",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~instruction_trials",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 921,
    "kind": "variable",
    "name": "feedback",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~feedback",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"choices\": *, \"post_trial_gap\": number, \"data\": *, \"trial_duration\": number, \"on_start\": *, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 922,
    "kind": "variable",
    "name": "feedback_wrapper",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~feedback_wrapper",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"conditional_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 923,
    "kind": "variable",
    "name": "practice_sequencing",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~practice_sequencing",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 924,
    "kind": "variable",
    "name": "subcond_practice_instruction",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~subcond_practice_instruction",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 925,
    "kind": "variable",
    "name": "subcond_practice_instruction_block",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~subcond_practice_instruction_block",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"conditional_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 926,
    "kind": "variable",
    "name": "practice",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~practice",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 927,
    "kind": "variable",
    "name": "stop",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~stop",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 928,
    "kind": "variable",
    "name": "stop_trials",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~stop_trials",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 929,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 930,
    "kind": "variable",
    "name": "subcond_instruction",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~subcond_instruction",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 931,
    "kind": "variable",
    "name": "subcond_instruction_block",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~subcond_instruction_block",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"conditional_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 932,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 933,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 331,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 934,
    "kind": "variable",
    "name": "noisemask",
    "memberof": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js~noisemask",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_side_by_side/sequencing_side_by_side_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 351,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 935,
    "kind": "file",
    "name": "scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "content": "import { balance_subconditions} from '/scripts/experiment-properties/balancing/balancing_controller.js'\r\nimport { plot_distributions } from \"/scripts/experiment-properties/graphing/graphing_controller.js\";\r\nimport { get_data } from '/scripts/experiment-properties/data/data_controller.js'\r\nimport { generate_adjusted_distribution, generate_initial_distribution, generate_random_distribution} from '/scripts/experiment-properties/distribution/distribution_controller.js'\r\nimport { check_params, is_converged_in_window, randomize_position_symmetric, randomize_graph_attributes_mixed, above_and_below_generate_random_trial_array, \r\n         get_mixed_masks, get_single_mask, get_mixed_graph_styles, get_single_graph_style, bundle_z_values, repeat_y_values, get_num_blocks, get_running_average} from '/scripts/helpers/experiment_helpers.js'\r\nimport {correlation_dependencies} from '/scripts/helpers/correlation_dependencies.js'\r\nexport { SQUARE_MASK_PATH,  RECTANGLE_MASK_PATH};\r\nconst ADDRESS = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\nconst SQUARE_MASK_PATH = ADDRESS + '/scripts/experiments/sequencing_symbols/img/noisemask.png';\r\n\r\nconst RECTANGLE_MASK_PATH = ADDRESS + '/scripts/experiments/sequencing_symbols/img/noisemask_wide.png';\r\nconst RECNTANGLE_BLACK_BG_PATH = ADDRESS + '/scripts/experiments/sequencing_symbols/img/noisemask_wide_black.png';\r\nconst MASK_PATHS = {\r\n  square: '/scripts/experiments/sequencing_symbols/img/noisemask.png',\r\n  square_black: '/scripts/experiments/sequencing_symbols/img/noisemask_black.png',\r\n  rectangle: '/scripts/experiments/sequencing_symbols/img/noisemask_wide.png',\r\n  rectangle_black: '/scripts/experiments/sequencing_symbols/img/noisemask_wide_black.png'\r\n}\r\n\r\nexport default class Sequencing_Symbols {\r\n  /**\r\n   * Initializes a Sequencing experiment object.\r\n   *\r\n   * @param  {assoc array}  Parameters passed from routing.\r\n   */\r\n  constructor(params) {\r\n    //console.log(\"Entered constructor\")\r\n    console.log(params);\r\n    let experiment_name = params[\"experiment_name\"]\r\n    let trial_structure = params[\"trial_structure\"];\r\n    let condition_name = params[\"condition\"];\r\n    let graph_type = params[\"graph_type\"];\r\n    let balancing_type = params[\"balancing\"];\r\n    //let conversion_factor = params[\"conversion_factor\"]\r\n\r\n    // ========================================\r\n    // PARAMETER CHECKING\r\n    let sequencing_symbols_exp = this;\r\n    check_params(sequencing_symbols_exp, experiment_name, trial_structure, graph_type, balancing_type)\r\n\r\n    this.condition_name = condition_name;\r\n    this.condition_group = this.condition_name.split('_')[0]; // Mostly to handle \"distractor\" conditions.\r\n                                                              // TODO: Should have a better flag for it.\r\n    this.subject_id = params[\"subject_id\"];\r\n    this.subject_initials = params[\"subject_initials\"];\r\n    this.auto_mode = false;\r\n\r\n    this.is_practice_trials = params[\"is_practice_trials\"];\r\n    this.is_screening = params[\"is_screening\"];\r\n    this.is_local_save = params[\"is_local_save\"]\r\n    this.manual_scaling_factor = params[\"manual_scaling_factor\"];\r\n    this.custom_subcondition_order = params[\"custom_subcondition_order\"];\r\n   \r\n    // ========================================\r\n    // EXPERIMENT CONSTANTS\r\n\r\n    this.MIN_CORRELATION = 0.0;\r\n    this.MAX_CORRELATION = 1.0;\r\n    this.MIN_TRIALS = 24;\r\n    this.MAX_TRIALS = 52;\r\n    this.WINDOW_SIZE = 24;\r\n    this.WINDOW_INTERVAL = 3;\r\n    this.CONVERGENCE_THRESHOLD = 0.75;\r\n    this.INCORRECT_MULTIPLIER = 3;\r\n    this.MAX_REPETITIONS = 5;\r\n    //this.SCREEN_HEIGHT = this.getScreenHeight(); //deprecated\r\n\r\n    // ========================================\r\n    // EXPERIMENT FLAGS\r\n\r\n    this.converged = false; // used to store subcondition data info\r\n    //this.first_trial_of_sub_condition = true; \r\n\r\n    // ========================================\r\n    // PRACTICE EXPERIMENT VARIABLES\r\n\r\n    this.MAX_PRACTICE_TRIALS = 2;\r\n    this.practice_conditions_constants;\r\n    this.current_practice_condition_index;\r\n    this.practice_selection_matrix = [];\r\n    this.adjusted_quantity_practice = [];\r\n    this.practice_condition_ended = false;\r\n\r\n    // ========================================\r\n    // TEST EXPERIMENT VARIABLES \r\n    this.sub_condition_order;\r\n    this.sub_conditions_constants;\r\n    this.current_sub_condition_index;     // Index used to keep track of the current subcondition. Starts at 0, goes to 8\r\n    this.adjusted_quantity_matrix = {};   // The matrix is in this format:\r\n                                          // { sub_condition_index : [below_track, above_track ] }\r\n                                          // bot track : [below_adjusted_quantity1, below_adjusted_quantity2 ...]\r\n                                          // top track : [above_adjusted_quantity1, above_adjusted_quantity2 ...]\r\n    this.trial_selection_matrix = [];     // Used in above and below tracks to determine above/below display order\r\n\r\n    // ========================================\r\n    // DEBUG VARIABLES\r\n    this.end_sub_condition_debug = false;\r\n\r\n    // ========================================\r\n    // CURRENT TRIAL DATA\r\n\r\n    // Plotting-related vars\r\n    this.left_coordinates = \"\";\r\n    this.right_coordinates = \"\";\r\n    this.distractor_coordinates = \"\";\r\n\r\n    // JsPsych trial_data for the current trial\r\n    this.trial_data = \"\";\r\n\r\n    // Graph dimension and margin information for graphing controller and mask\r\n    this.style_attributes = {};\r\n\r\n    // ========================================\r\n    // PREPARE EXPERIMENT\r\n\r\n    // Extract raw constants\r\n    this.raw_constants = get_data(this);\r\n    console.log(this.raw_constants[0])\r\n    if(this.raw_constants[0][\"block\"]){\r\n      this.num_blocks = get_num_blocks(this.raw_constants, \"block\");\r\n      this.block_size = this.raw_constants.length / this.num_blocks;\r\n    }\r\n\r\n    // Prepare experiment + practice data\r\n    this.prepare_experiment();\r\n    this.prepare_practice();\r\n\r\n    // ========================================\r\n    // Adjusted Statistic Values\r\n    // ** Previously were set inside the get_next_adjusted_statistic method.\r\n    // ** Replacing constants into variables to be set inside the method.\r\n    this.correct_statistic_increment = 0.01;\r\n    this.incorrect_statistic_increment = 0.03;\r\n    //console.log(\"Finished constructor\")\r\n  }\r\n  \r\n  /**\r\n   * Orders the input data according to balancing type and\r\n   * initializes the Sequencing object's variables.\r\n   *\r\n   */\r\n  prepare_experiment() {\r\n    //console.log(\"Entered prepare_experiment()\")\r\n    let dataset = this.raw_constants;\r\n    // it gets scrambled for some reason.  put it back in order, according to the hardcoded subcond numbers\r\n    \r\n    // Order the data set according to the latin square\r\n    this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length, dataset, \"block\", this.custom_subcondition_order);\r\n    console.log(\"Subcondition Order: \", this.sub_condition_order)\r\n\r\n    var ordered_dataset = [];\r\n\r\n    // Initialize adjusted_quantity_matrix size\r\n    for (let i=0; i < this.sub_condition_order.length; i++){\r\n      ordered_dataset[i] = dataset[this.sub_condition_order[i]];\r\n      this.adjusted_quantity_matrix[i] = [];\r\n      this.adjusted_quantity_matrix[i][0] = []; //below track\r\n      this.adjusted_quantity_matrix[i][1] = []; //above track\r\n    }\r\n\r\n    // Set experiment trials\r\n    this.sub_conditions_constants = ordered_dataset;\r\n    this.current_sub_condition_index = 0;\r\n    //console.log(\"Finished prepare_experiment()\")\r\n  }\r\n\r\n  /**\r\n   * Orders the input dataset by randomizing it, and initializes the practice variables.\r\n   *\r\n   */\r\n  prepare_practice() {\r\n\r\n    let dataset = this.raw_constants;\r\n\r\n    this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length, dataset, \"block\");\r\n    // console.log(\"Practice Subcondition Order: \")\r\n    // console.log(this.sub_condition_order)\r\n\r\n    var ordered_dataset = [];\r\n\r\n    // Order the data set according to the latin square\r\n    // Initialize adjusted_quantity_matrix size\r\n    for (let i=0; i < this.sub_condition_order.length; i++){\r\n      ordered_dataset[i] = dataset[this.sub_condition_order[i]];\r\n      this.adjusted_quantity_practice[i] = [];\r\n      this.adjusted_quantity_practice[i][0] = []; //below track\r\n      this.adjusted_quantity_practice[i][1] = []; //above track\r\n      if(ordered_dataset[i].direction == \"above and below\"){\r\n        this.practice_selection_matrix[i] = [];\r\n        generate_random_trial_array(this.practice_selection_matrix,this.MAX_TRIALS);\r\n      }\r\n    }\r\n\r\n    // Set Practice trials\r\n    this.practice_conditions_constants = ordered_dataset;\r\n    this.current_practice_condition_index = 0;\r\n    //console.log(\"Finished prepare_practice()\")\r\n  }\r\n\r\n  /**\r\n   * Generates a Sequencing trial object for use in the jsPsych timeline.\r\n   *\r\n   * @param  {string} type \"test\" or \"practice\"\r\n   * @return {object} trial \r\n   */\r\n  generate_trial(block_type) {\r\n    if ((block_type !== \"test\") && (block_type !== \"practice\")) {throw Error(block_type + \" is not supported.\")};\r\n\r\n    // Initialize a variable for this so it is usable inside trial functions\r\n    var sequencing_symbols_exp = this;\r\n    \r\n    // let participants know which number subcondition block they are about to perform\r\n    let subcond_num = this.generate_subcond_num_trial(sequencing_symbols_exp, block_type)\r\n\r\n    // \"Anchoring\" trial for Memory conditions\r\n    let anchoring = this.generate_anchoring_trial(sequencing_symbols_exp,block_type);\r\n\r\n    // \"First\" trial in the sequence. Contains the two side-by-side plots.\r\n    let first = this.generate_first_trial(sequencing_symbols_exp, block_type);\r\n\r\n    // Mask screen\r\n    let mask = this.generate_mask_trial(sequencing_symbols_exp,block_type);\r\n\r\n    // Blank screen where choice is made\r\n    let blank = this.generate_blank_trial(sequencing_symbols_exp,block_type);\r\n\r\n    // Assemble trial\r\n    let trial = [subcond_num, anchoring,first, mask, blank];\r\n    return trial;\r\n  };\r\n\r\n  /**\r\n   * Generates the subcondition number trial and wraps it in a conditional timeline\r\n   * @param {object} sequencing_symbols_exp \r\n   * @param {string} block_type \r\n   * @returns \r\n   */\r\n  generate_subcond_num_trial(sequencing_symbols_exp, block_type){\r\n    let subcond_num = {\r\n      stimulus: '',\r\n      type: 'html-keyboard-response',\r\n      choices: [' '],\r\n      on_start: function(subcond_num) {\r\n        // Subcondtion index and constants\r\n        let index = correlation_dependencies.get_subcondition_index(sequencing_symbols_exp, block_type);\r\n        subcond_num.stimulus = `<div align=\"center\" style=\"font-size:20px\"><p><b>Ready? Experiment block ${index + 1} of ${sequencing_symbols_exp.raw_constants.length} will now begin.</b></p><br><p>Press the spacebar to continue.</p></div>`;\r\n      }\r\n    }\r\n\r\n    let subcond_num_timeline = {\r\n      timeline: [subcond_num],\r\n      conditional_function: function() {\r\n        if (correlation_dependencies.is_start_of_subcondition(sequencing_symbols_exp, block_type) && block_type === \"test\" && sequencing_symbols_exp.auto_mode == false) { \r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    };\r\n    return subcond_num_timeline;\r\n  }\r\n\r\n  /**\r\n   * Generates the first trial of the timing condition. The first trial handles generating\r\n   * the adjusted correlation value, distribution, setting the d3 graph plotting information\r\n   * and the html style attributes for the d3 graph and mask images. The First trial also\r\n   * saves the appropiate correlation and graph information into the experiment object and the\r\n   * adjusted quantity matrix for use in other trials\r\n   * @param {object} sequencing_symbols_exp \r\n   * @param {string} block_type \"test\" or \"practice\"\r\n   * @returns {jsPsych trial}\r\n   */\r\n  generate_first_trial(sequencing_symbols_exp, block_type){\r\n    let first = {\r\n      type:'d3-plot-keyboard-response',\r\n      block_type: block_type,\r\n      choices: jsPsych.NO_KEYS,\r\n      order: 'first',\r\n      exp_obj: sequencing_symbols_exp,\r\n      plot_distributions: plot_distributions,\r\n      on_start: function(first){\r\n        // Subcondtion index and constants\r\n        let index = correlation_dependencies.get_subcondition_index(sequencing_symbols_exp, block_type);\r\n        let constants = correlation_dependencies.get_constants(sequencing_symbols_exp, block_type, index);\r\n        // Get parameters\r\n        first.trial_duration = constants.stimulus_duration;\r\n        // Calculate adjusted value and distribution\r\n        let adjusted_values = correlation_dependencies.calculate_adjusted_value(sequencing_symbols_exp, constants, block_type);\r\n        sequencing_symbols_exp.adjusted_values = adjusted_values;\r\n        // Get the individual constants for each graph in case they have specific distribution generation values\r\n        let graph_constants = sequencing_symbols_exp.get_individual_graph_constants(constants);\r\n        let randomized_positions = {};\r\n        let graph_properties;\r\n        let style_attributes;\r\n        switch(constants.direction){\r\n          case \"symmetric\":\r\n            \r\n            let adjusted_value_low = adjusted_values[0];\r\n            let adjusted_value_high = adjusted_values[1];\r\n            \r\n            // Randomize position of graph types (independent of adjustment)\r\n            graph_properties = randomize_graph_attributes_mixed();\r\n\r\n            // Generate adjusted values and distributions\r\n            let adjusted_coordinates_low;\r\n            let adjusted_coordinates_high;\r\n            let constants_a = graph_constants.constants_a;\r\n            let constants_b = graph_constants.constants_b;\r\n            // Handle graphs with different number of points (flagged as -1 in data)\r\n            // Randomize low-high point count independent of left - right randomization\r\n            // 0 = low  1 = high\r\n            // If graph a distribution values == graph b distribution values then it doesn't really matter\r\n            let random_high_low = randomize_graph_attributes_mixed();\r\n            sequencing_symbols_exp.randomized_high_low = random_high_low;\r\n            let constants_low;\r\n            let constants_high;\r\n            if(random_high_low[0] ===  \"graph_a_attributes\"){\r\n              constants_low = constants_a;\r\n              constants_high = constants_b;\r\n            }\r\n            else{\r\n              constants_low = constants_b;\r\n              constants_high = constants_a;\r\n            }\r\n            adjusted_coordinates_low = generate_adjusted_distribution(constants_low, adjusted_value_low);\r\n            adjusted_coordinates_high = generate_adjusted_distribution(constants_high, adjusted_value_high);\r\n\r\n\r\n            // Randomize position of the base and adjusted graphs\r\n            randomized_positions = randomize_position_symmetric(constants, adjusted_coordinates_high, adjusted_coordinates_low, adjusted_value_high, adjusted_value_low);\r\n            sequencing_symbols_exp.randomized_positions = randomized_positions\r\n\r\n            // Set up D3 variables for plotting\r\n            sequencing_symbols_exp.coordinates = [randomized_positions.left_coordinates, randomized_positions.right_coordinates];\r\n\r\n            //Set up D3 graph properties for plotting\r\n            sequencing_symbols_exp.graph_properties = graph_properties;\r\n            style_attributes = get_mixed_graph_styles(constants, graph_properties, MASK_PATHS);\r\n            break;\r\n          case \"memory\":\r\n            // 0 = low, 1 = high\r\n            let random_high_or_low = randomize_graph_attributes_mixed();\r\n            sequencing_symbols_exp.randomized_positions = random_high_or_low[0] == \"graph_a_attributes\" ? \"low\" : \"high\";\r\n            let adjusted_value = random_high_or_low[0] == \"graph_a_attributes\" ? adjusted_values[0] : adjusted_values[1];\r\n            sequencing_symbols_exp.adjusted_value = adjusted_value;\r\n            let adjusted_coordinates = generate_adjusted_distribution(constants, adjusted_value);\r\n            sequencing_symbols_exp.coordinates = [adjusted_coordinates];\r\n\r\n            // Randomize position of graph types (independent of adjustment)\r\n            graph_properties = randomize_graph_attributes_mixed();\r\n            sequencing_symbols_exp.graph_properties = graph_properties;\r\n            style_attributes = [get_single_graph_style(constants, constants[graph_properties[0]], SQUARE_MASK_PATH, RECTANGLE_MASK_PATH)];\r\n            \r\n            break; \r\n        }\r\n        sequencing_symbols_exp.style_attributes = style_attributes;\r\n\r\n        // Add z values to coordinates if the condition has z values\r\n        sequencing_symbols_exp.add_z_values(sequencing_symbols_exp, constants)\r\n\r\n        // Save data into matrix and jsPsych data object\r\n        sequencing_symbols_exp.handle_data_saving(first, block_type, adjusted_values, randomized_positions, graph_properties, style_attributes);\r\n\r\n        // Custom jsPsych type requirement\r\n        first.exp_obj = sequencing_symbols_exp;\r\n\r\n        // Console logs\r\n        console.log(\"Base Correlation: \" + constants.base_correlation);\r\n        if(constants.direction === \"symmetric\"){\r\n          console.log(\"Correlations: \" + first.data.left_correlation , first.data.right_correlation);\r\n          console.log(\"[LEFT] Graph type: \" + first.data.left_graph);\r\n          console.log(\"[RIGHT] Graph type: \" + first.data.right_graph);\r\n        }\r\n        if(constants.direction === \"memory\"){\r\n          console.log(\"Correlation: \", sequencing_symbols_exp.adjusted_value)\r\n          console.log(\"Current Average: \", sequencing_symbols_exp.average_correlation)\r\n        }\r\n        if(constants.num_points == -1){\r\n          console.log(\"Num Points: \" + first.data.left_num_points , first.data.right_num_points);\r\n        }\r\n      \r\n      },\r\n    };\r\n\r\n    return first;\r\n  }\r\n\r\n  /**\r\n   * Generates the mask trial, dynamically assigning the trial duration and stimulus\r\n   * @param {object} sequencing_symbols_exp \r\n   * @param {string} block_type \r\n   * @returns {jsPsych trial}\r\n   */\r\n  generate_mask_trial(sequencing_symbols_exp, block_type){\r\n    let mask = {\r\n      type: 'html-keyboard-response',\r\n      stimulus: `<div align = \"center\"></div>`,\r\n      choices: jsPsych.NO_KEYS,\r\n      //trial_duration: 200,\r\n      on_start: function(mask) {\r\n        let index = correlation_dependencies.get_subcondition_index(sequencing_symbols_exp, block_type);\r\n        let constants = correlation_dependencies.get_constants(sequencing_symbols_exp, block_type,index);\r\n        mask.trial_duration = constants.distractor_duration;\r\n        switch(constants.direction){\r\n          case \"symmetric\":\r\n            mask.stimulus = get_mixed_masks(sequencing_symbols_exp.style_attributes);\r\n            break;\r\n          case \"memory\":\r\n            mask.stimulus = get_single_mask(sequencing_symbols_exp.style_attributes[0]);\r\n            break;\r\n        }\r\n      }\r\n    };\r\n    return mask;\r\n  }\r\n\r\n  /**\r\n   * Generates the blank trial where the correlation selection is made.\r\n   * This trial can also be used to initiate debug modes\r\n   * q - ends the experiment\r\n   * w - skips the current subcondition\r\n   * t - starts automode to do an end-to-end test\r\n   * Saves the data response into jsPsych data\r\n   * @param {object} sequencing_symbols_exp \r\n   * @param {string} block_type \r\n   * @returns {jsPsych trial}\r\n   */\r\n  generate_blank_trial(sequencing_symbols_exp, block_type){\r\n    let blank = {\r\n      type:'sequencing-graph',\r\n      block_type: block_type,\r\n      order: 'blank',\r\n      stimulus: \"\",\r\n      plot_distributions: plot_distributions,\r\n      choices:['z', 'm', 'q', 't', 'w'], // q to exit, w to skip subcond, t for automode\r\n      on_start: function(blank){\r\n        sequencing_symbols_exp.coordinates = [];\r\n        if (sequencing_symbols_exp.auto_mode) {\r\n          blank.post_trial_gap = 12;\r\n          blank.trial_duration = 12;\r\n        }\r\n        let randomized_positions = sequencing_symbols_exp.randomized_positions;\r\n        let graph_properties = sequencing_symbols_exp.graph_properties;\r\n        let style_attributes = sequencing_symbols_exp.style_attributes;\r\n        let adjusted_values = sequencing_symbols_exp.adjusted_values\r\n        // Saves relevant trial data by initializing trial.data property before on_finish so that\r\n        // data.keypress is not overwritten\r\n        sequencing_symbols_exp.handle_data_saving(blank, block_type, adjusted_values, randomized_positions, graph_properties, style_attributes);\r\n        blank.exp_obj = sequencing_symbols_exp;\r\n       \r\n      },\r\n      on_finish: function(data){\r\n        // Set the constants to be used:\r\n        if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('t') || sequencing_symbols_exp.auto_mode) {\r\n          // Turn on automation\r\n          sequencing_symbols_exp.auto_mode = true;\r\n          if (Math.random() < 0.5) {\r\n            console.log(\"'z' pressed\");\r\n            data.key_press = jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z');\r\n          } else {\r\n            console.log(\"'m' pressed\");\r\n            data.key_press = jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m');\r\n          }\r\n        }\r\n        data.correct = sequencing_symbols_exp.check_response_sequencing(data, sequencing_symbols_exp);\r\n        if(data.direction === \"memory\"){\r\n          sequencing_symbols_exp.average_correlation = get_running_average(sequencing_symbols_exp.average_correlation, data.adjusted_value, sequencing_symbols_exp.adjusted_quantity_matrix[data.sub_condition][0].length);\r\n          console.log(\"New Average Correlation: \", sequencing_symbols_exp.average_correlation);\r\n          console.log(\"RESPONSE: \" + data.correct);  \r\n        }\r\n      },\r\n    };\r\n    return blank;\r\n  }\r\n\r\n  /**\r\n   * Generates the anchoring trial for memory conditions\r\n   * Displays the base correlation for 5000ms\r\n   * @param {object} sequencing_symbols_exp \r\n   * @param {string} block_type \r\n   */\r\n  generate_anchoring_trial(sequencing_symbols_exp, block_type){\r\n    let anchoring = {\r\n      type:'d3-plot-keyboard-response',\r\n      block_type: block_type,\r\n      choices: jsPsych.NO_KEYS,\r\n      order: 'anchoring',\r\n      exp_obj: sequencing_symbols_exp,\r\n      plot_distributions: plot_distributions,\r\n      on_start: function(anchoring){\r\n        // Subcondtion index and constants\r\n        let index = correlation_dependencies.get_subcondition_index(sequencing_symbols_exp, block_type);\r\n        let constants = correlation_dependencies.get_constants(sequencing_symbols_exp, block_type,index);\r\n        // Get parameters\r\n        anchoring.trial_duration = 5000;\r\n        // Calculate adjusted value and distribution\r\n        // Get the individual constants for each graph in case they have specific distribution generation values\r\n        let graph_constants = sequencing_symbols_exp.get_individual_graph_constants(constants);\r\n        let randomized_positions = {};\r\n        let graph_properties;     \r\n        let adjusted_value = constants.base_correlation;\r\n        sequencing_symbols_exp.adjusted_value = adjusted_value;\r\n        let adjusted_coordinates = generate_adjusted_distribution(constants, adjusted_value);\r\n        sequencing_symbols_exp.coordinates = [adjusted_coordinates];\r\n\r\n        // Randomize position of graph types (independent of adjustment)\r\n        graph_properties = randomize_graph_attributes_mixed();\r\n        sequencing_symbols_exp.graph_properties = graph_properties;\r\n        let style_attributes = [get_single_graph_style(constants, constants[graph_properties[0]], SQUARE_MASK_PATH, RECTANGLE_MASK_PATH)];\r\n        sequencing_symbols_exp.style_attributes = style_attributes;\r\n        sequencing_symbols_exp.average_correlation = adjusted_value\r\n        // Add z values to coordinates if the condition has z values\r\n        sequencing_symbols_exp.add_z_values(sequencing_symbols_exp, constants)\r\n\r\n        // Save data into matrix and jsPsych data object\r\n        sequencing_symbols_exp.handle_data_saving(anchoring, block_type, [adjusted_value, adjusted_value], randomized_positions, graph_properties, style_attributes);\r\n\r\n        // Custom jsPsych type requirement\r\n        anchoring.exp_obj = sequencing_symbols_exp;\r\n      },\r\n    }\r\n\r\n    let anchoring_mask = sequencing_symbols_exp.generate_mask_trial(sequencing_symbols_exp, block_type)\r\n\r\n    let anchoring_timeline = {\r\n      timeline: [anchoring, anchoring_mask],\r\n      conditional_function: function() {\r\n        let index = correlation_dependencies.get_subcondition_index(sequencing_symbols_exp, block_type);\r\n        let constants = correlation_dependencies.get_constants(sequencing_symbols_exp, block_type,index);\r\n        if (correlation_dependencies.is_start_of_subcondition(sequencing_symbols_exp, block_type)  && \r\n            sequencing_symbols_exp.auto_mode == false &&\r\n            constants.direction === \"memory\") { \r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n    };\r\n    return anchoring_timeline;\r\n  }\r\n\r\n\r\n   /**\r\n   * Initializes trial data and handles saving the relevant data on a given trial to include trial logic data as \r\n   * well as data to be exported to firebase. This function also handles the Adjusted Quantity Matrix updates, \r\n   * as well as experiment object data used in the Graphing Controller. Handles block specific saves (practice/test)\r\n   * and order specific saves (first, blank, likert). \r\n   * \r\n   * @param {trial}       trial \r\n   * @param {String}      block_type \r\n   * @param {array}       adjusted_values \r\n   * @param {assoc array}  randomized_positions \r\n   * @param {array}       graph_properties \r\n   * @param {assoc array}  style_attributes \r\n   */\r\n  handle_data_saving(trial, block_type, adjusted_values, randomized_positions, graph_properties, style_attributes) {\r\n    // Block type data\r\n    let sequencing_symbols_exp = this;\r\n    let index = correlation_dependencies.get_subcondition_index(sequencing_symbols_exp, block_type);\r\n    let constants = correlation_dependencies.get_constants(sequencing_symbols_exp, block_type, index);\r\n    trial.data = constants;    // Initialize data object with constants\r\n    trial.data.sub_condition = index;\r\n    trial.data.balanced_sub_condition = this.sub_condition_order[index];\r\n\r\n    // Trial object data\r\n    let order_type = trial.order;\r\n    trial.data.order = order_type;\r\n    let adjusted_value_low = adjusted_values[0];\r\n    let adjusted_value_high = adjusted_values[1];\r\n    trial.data.adjusted_value_high = adjusted_value_high;\r\n    trial.data.adjusted_value_low = adjusted_value_low;\r\n    trial.data.adjusted_value_type = \"correlation\";\r\n    trial.data.style_attributes = style_attributes;\r\n    // Randomized Positions Data\r\n    switch(constants.direction){\r\n      case \"symmetric\":\r\n        // Adjusted Values data\r\n        trial.data.left_correlation = randomized_positions.left_correlation;\r\n        trial.data.right_correlation = randomized_positions.right_correlation;\r\n        // Randomized Graph Attributes Data\r\n        trial.data.left_graph =   `${graph_properties[0]} ${constants[graph_properties[0]].graph_type}`;\r\n        trial.data.right_graph =  `${graph_properties[1]} ${constants[graph_properties[1]].graph_type}`;\r\n        \r\n        break;\r\n      case \"memory\":\r\n        trial.data.high_or_low = randomized_positions;\r\n        trial.data.adjusted_value = randomized_positions === \"high\" ? adjusted_value_high : adjusted_value_low;\r\n        trial.data.average_correlation = this.average_correlation;\r\n        break;\r\n    }\r\n\r\n    //Num Points for Density Conditions\r\n    if(constants.num_points == -1){\r\n      trial.data.left_num_points = constants[graph_properties[0]].num_points\r\n      trial.data.right_num_points = constants[graph_properties[1]].num_points\r\n    }\r\n\r\n    // Adding constants that required computation (not from excel)\r\n    trial.data.type = \"sequencing_symbols\";\r\n    trial.data.graph_type = this.graph_type;\r\n    \r\n    // Sequence Order specific saves\r\n    // We want the Adjusted Quantity Matrix to have values pushed into it only once\r\n    // \"likert\" are saved for likert data, treated as the last one of the subcondition\r\n    // Only \"blank\" trials are saved as they are the last one in the sequence\r\n    if(order_type === \"blank\" || order_type === \"likert\"){\r\n      trial.data.adjusted_value_type = \"correlation\";\r\n      trial.data.jnd = Math.abs(adjusted_value_high - adjusted_value_low);\r\n      // Block specific saves\r\n      trial.data.run_type = block_type;\r\n      if (block_type == \"test\"){\r\n        //console.log('Pushing data in AQM')\r\n        this.adjusted_quantity_matrix[index][0].push(adjusted_value_low);\r\n        this.adjusted_quantity_matrix[index][1].push(adjusted_value_high);\r\n      }\r\n      else{ // Practice\r\n        this.adjusted_quantity_practice[index][0].push(adjusted_value_low);\r\n        this.adjusted_quantity_practice[index][1].push(adjusted_value_high);\r\n      }\r\n    }\r\n    //Save jsPsych trial data\r\n    this.trial_data = trial.data;\r\n  }\r\n\r\n  /**\r\n   * Given a Sequencing trial data, determines whether response is\r\n   * correct or not.\r\n   *\r\n   * @param  {JsPsych.data}  data\r\n   * @param {object} sequencing experiment\r\n   * @return {boolean}\r\n   */\r\n  check_response_sequencing(data, sequencing_symbols_exp) {\r\n    // For debugging purposes:\r\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q')){\r\n      //data.correct = -1; // debug flag\r\n      return -1;\r\n    }\r\n    // Skip current subcondition\r\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('w')){\r\n      this.end_sub_condition_debug = true;\r\n      //data.correct = -1; \r\n      return -2; // skip subcondition flag\r\n    }\r\n    let alpha = 0.000001; // Alpha value to compare doubles\r\n    switch(data.direction){\r\n      case \"symmetric\":\r\n        let right_greater_clause = data.right_correlation > data.left_correlation;\r\n        let left_greater_clause = data.left_correlation > data.right_correlation;\r\n  \r\n        var are_equal = Math.abs(data.right_correlation - data.left_correlation) <= alpha;\r\n    \r\n        // Assuming that if base_correlation = adjusted_correlation, at this point\r\n        // any user choice is wrong.\r\n        if(are_equal){\r\n          // data.correct = false;\r\n          // data.jnd = 0;\r\n          return false;\r\n        }\r\n    \r\n        if (right_greater_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m')) ||\r\n            left_greater_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z'))){\r\n          //data.correct = true;\r\n          return true;\r\n        }\r\n        else{\r\n          //data.correct = false;\r\n          return false;\r\n        }\r\n        break;\r\n\r\n      case \"memory\":\r\n        let higher_than_average_clause = data.adjusted_value > sequencing_symbols_exp.average_correlation;\r\n        let lower_than_average_clause = data.adjusted_value < sequencing_symbols_exp.average_correlation;\r\n        let diff = data.adjusted_value - sequencing_symbols_exp.average_correlation;\r\n        \r\n        let are_equal_memory = Math.abs(diff) <= alpha;\r\n        if(are_equal_memory){\r\n          return false;\r\n        }\r\n        if (higher_than_average_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m')) ||\r\n            lower_than_average_clause && (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z'))){\r\n          return true;\r\n        }\r\n        else{\r\n          return false;\r\n        }\r\n\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * When called, will save summary data and individual trial data into firebase.\r\n   */\r\n  export_trial_data() {\r\n    //Get experiment's entire trial data \r\n    const trial_data = this.get_trial_data();\r\n\r\n    //console.log(\"trial data: \",trial_data.json());\r\n    //console.log(\"stringified trial data: \", JSON.stringify(JSON.parse(trial_data.json())));\r\n\r\n    // TODO: js converting key_string to use double quotes, needs to be single to pass into ignore() fxn\r\n    //\r\n    // for (var key in sequencing_exp.trial_variables){\r\n    //  var key_string = '${key}';\r\n    //  trial_data.ignore(key);\r\n    // }\r\n\r\n    if(this.is_local_save === \"true\"){\r\n      // Local save\r\n      var string = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_sequencing_trial_results.csv\";\r\n      trial_data.localSave('csv', string);\r\n    }\r\n    else{\r\n      // Get Summary Data for the 9 subconditions\r\n      let summary_data = this.get_summary_data()\r\n          \r\n      //Firebase upload\r\n      // Sends the data to the app.js listener\r\n      $.post(\"/api/experiment_data\",\r\n              {\r\n              trial_data: JSON.parse(trial_data.json()), \r\n              summary_data: summary_data, \r\n              experiment: \"sequencing_symbols\", \r\n              condition: params[\"condition\"], \r\n              prolific_pid: params[\"subject_id\"], \r\n              study_id: params[\"study_id\"], \r\n              session_id: params[\"session_id\"],\r\n              subject_initials: params[\"subject_initials\"]\r\n              },\r\n              function(data, status) {\r\n                console.log(\"Data: \" + data + \"\\nStatus: \" + status)\r\n              }\r\n            );\r\n    }\r\n    \r\n\r\n\r\n    \r\n  }\r\n\r\n  // Getters\r\n\r\n  /**\r\n   * Gets jsPsych trial with given filters. Only returns 'blank'\r\n   * type trials since those are the only ones that save data.\r\n   * \r\n   * @param   {assoc array} filters \r\n   * @returns {jsPsych data} entire jsPsych data object. Needs to be furtherly filtered later to be useful\r\n   */\r\n  get_jsPsych_data(filters){\r\n    return jsPsych.data.get().filter(filters)\r\n                             .filterCustom(function(x) {\r\n                                return (x.correct != -1\r\n                                     && x.order === \"blank\");\r\n                                    });\r\n  }\r\n\r\n  /**\r\n   * Returns releveant array of the experiment's trial data (in order from first to last)\r\n   * Non-relevant fields are ignored.\r\n   * \"Column order\" if downloaded to csv is \"randomized\" because trial data object is an unordered map\r\n   * \r\n   * @returns {array} [{trial_0},{trial_1},...,{trial_n}]\r\n   */\r\n  get_trial_data(){\r\n    return jsPsych.data.get().filter({type: 'sequencing_symbols', run_type: 'test'})\r\n                              .filterCustom(function(x){ //Don't include the exit trials\r\n                                return x.correct != -1;\r\n                              })\r\n                              .filterCustom(function(x){\r\n                                if (x.order === \"blank\" || x.order === \"likert\")  // filter for only blank and likert trials (\"first\" are not included)\r\n                                return x;\r\n                              })\r\n                              // Sequencing's trial variables\r\n                              .ignore('type')\r\n                              .ignore('run_type')\r\n                              .ignore('left_correlation')\r\n                              .ignore('right_correlation')\r\n                              // Experiment constants\r\n                              .ignore('style_attributes')\r\n                              .ignore('SD')\r\n                              .ignore('background_color')\r\n                              .ignore('feedback_background_color')\r\n                              .ignore('initial_difference')\r\n                              .ignore('mean')\r\n                              .ignore('num_SD')\r\n                              // These are variables forced on by jsPsych\r\n                              .ignore('stimulus')\r\n                              .ignore('key_press')\r\n                              .ignore('choices')\r\n                              .ignore('trial_type')\r\n                              .ignore('trial_index')\r\n                              .ignore('time_elapsed')\r\n                              .ignore('internal_node_id')\r\n                              .ignore('subcondition_instructions');\r\n  } \r\n\r\n  /**\r\n   * Get's experiment relevant summary data.\r\n   * Relevant summary data includes: independent variables, overall JND, convergance JND (last 24), convergance results, trial count\r\n   * \r\n   * @returns {assoc[]} array of summary data\r\n   */\r\n  get_summary_data(){\r\n    let summary_data = [];\r\n    let screening_json = jsPsych.data.get().filter({trial_type: 'survey-html-form'}).select('responses').values[0]\r\n    // Participant information\r\n    // indexing might need to be genralized better if there are previous trials before the start of the experiment\r\n    if(screening_json){\r\n      console.log('Saving Screening')\r\n      let screening_responses = JSON.parse(screening_json)\r\n      let screening_data = {};\r\n      screening_data.education = screening_responses[2].value\r\n      screening_data.stat_classes_take = screening_responses[3].value\r\n      screening_data.vision = screening_responses[4].value\r\n      screening_data.gender = screening_responses[5].value\r\n      screening_data.age = screening_responses[6].value\r\n      summary_data.push(screening_data);\r\n    }\r\n\r\n    // Subcondition Data\r\n    for (let i = 0; i<this.sub_conditions_constants.length; i++) {\r\n      let sub_data = {};\r\n\r\n      const constants = this.sub_conditions_constants[i];\r\n      //console.log(constants)\r\n      \r\n      const condition_data = jsPsych.data.get().filter({type: 'sequencing_symbols', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n                                                .filterCustom(function(x) {\r\n                                                  return (x.correct != -1\r\n                                                      && x.order === \"blank\");\r\n                                                    });\r\n\r\n      // const likert_data = jsPsych.data.get().filter({type: 'sequencing_symbols', run_type: 'test', balanced_sub_condition: this.sub_condition_order[i]})\r\n      //                                          .filterCustom(function(x) {\r\n      //                                           return (x.order === \"likert\");\r\n      //                                           });\r\n\r\n      //sub_data.jnd = condition_data.select('jnd').mean();\r\n      sub_data.convergance_jnd = condition_data.last(24).select('jnd').mean();\r\n      sub_data.average_response_time = condition_data.select('rt').mean();\r\n      sub_data.converged = condition_data.last().select('converged').values[0]\r\n      //sub_data.direction = constants.direction;\r\n      sub_data.base_correlation = constants.base_correlation;\r\n      //sub_data.stimulus_duration = constants.stimulus_duration;\r\n      sub_data.comparison_type = constants.block;\r\n      sub_data.trial_count = condition_data.count();\r\n      //sub_data.likert_data = JSON.stringify(likert_data.select('responses').values[0]);\r\n      //sub_data.subcondition_index = constants.subcondition_number\r\n\r\n\r\n      summary_data.push(sub_data);\r\n      console.log(\"index success \" + i);\r\n    }\r\n\r\n    return summary_data;\r\n  }\r\n\r\n  /**\r\n   * Get current subcondition index of block type for current index.\r\n   *\r\n   * @param   {String} block_type - Either \"test\" or \"practice\"\r\n   * @returns {int}     index - current subcondition index\r\n   */\r\n  get_subcondition_index(block_type){\r\n    // Error handling\r\n    if (block_type != \"test\" && block_type != \"practice\") {\r\n      throw Error(`Invalid experiment type of ${block_type}`);\r\n    }\r\n    var index;\r\n    if (block_type == \"test\"){\r\n      index = this.current_sub_condition_index;\r\n    } \r\n    else {\r\n      index = this.current_practice_condition_index;\r\n    }\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Get current trial index for above and below condition.\r\n   *\r\n   * @param {String} block_type - Either \"test\" or \"practice\"\r\n   * @param {int} index         - current subcondition index\r\n   * @returns {int} curr_index  - current trial index\r\n   */\r\n  get_above_below_curr_index(block_type, index){\r\n    // Error handling\r\n    if (block_type != \"test\" && block_type != \"practice\") {\r\n      throw Error(`Invalid experiment type of ${block_type}`);\r\n    }\r\n    let curr_index;\r\n    if (block_type == \"test\"){\r\n      curr_index = this.adjusted_quantity_matrix[index][0].length + this.adjusted_quantity_matrix[index][1].length;\r\n    } else {\r\n      curr_index = this.adjusted_quantity_practice[index][0].length + this.adjusted_quantity_practice[index][1].length\r\n    }\r\n    return curr_index;\r\n  }\r\n\r\n  /**\r\n   * Get the current direction \r\n   * @param {string} block_type \r\n   * @param {int} index \r\n   * @param {int} curr_trial_index \r\n   * @returns {string}\r\n   */\r\n  get_above_below_curr_direction(block_type, index, curr_trial_index){\r\n    if (block_type != \"test\" && block_type != \"practice\") {\r\n      throw Error(`Invalid experiment type of ${block_type}`);\r\n    }\r\n    let curr_direction;\r\n    if (block_type == \"test\"){\r\n      curr_direction = this.trial_selection_matrix[index][curr_trial_index];\r\n    } else {\r\n      curr_direction = this.practice_selection_matrix[index][curr_trial_index];\r\n    }\r\n    return curr_direction;\r\n  }\r\n\r\n  /**\r\n   * Returns the individual graph constants for graphs a and b\r\n   * Handles the case where the number of points is different in them\r\n   * @param {assoc array} constants \r\n   * @returns \r\n   */\r\n  get_individual_graph_constants(constants){\r\n    let constants_a = constants;\r\n    let constants_b = constants;\r\n    if(constants.num_points == -1){\r\n      constants_a = {error: constants.error,\r\n                        num_points: constants.graph_a_attributes.num_points,\r\n                        num_SD: constants.num_SD,\r\n                        mean:  constants.mean,\r\n                        SD:  constants.SD}\r\n      constants_b = {error: constants.error,\r\n                        num_points: constants.graph_b_attributes.num_points,\r\n                        num_SD: constants.num_SD,\r\n                        mean:  constants.mean,\r\n                        SD:  constants.SD}\r\n\r\n    }\r\n\r\n    return {constants_a: constants_a, constants_b:constants_b}\r\n  }\r\n\r\n  /**\r\n   * Addz the Z values to the experiment coordinates.\r\n   * \r\n   * @param {object} sequencing_symbols_exp \r\n   * @param {assoc} constants \r\n   */\r\n  add_z_values(sequencing_symbols_exp, constants){\r\n     switch(constants.z_value){\r\n       case \"random\":\r\n        for(let i = 0; i < sequencing_symbols_exp.coordinates.length; i++){\r\n          let z_values = generate_random_distribution(constants.num_points,'uniform');\r\n          sequencing_symbols_exp.coordinates[i] = bundle_z_values(sequencing_symbols_exp.coordinates[i], z_values)\r\n        }\r\n         break;\r\n       case \"y_value\":\r\n          for(let i = 0; i < sequencing_symbols_exp.coordinates.length; i++){\r\n            sequencing_symbols_exp.coordinates[i] = repeat_y_values(sequencing_symbols_exp.coordinates[i])\r\n          }\r\n          break;\r\n     }\r\n  \r\n }\r\n\r\n  /**\r\n     * Returns the data of the last trial on the jsPsych data object\r\n     * @param {string} experiment_name\r\n     * @returns {assoc array} last jsPsych trial data object\r\n     */\r\n  get_last_trial_data(){\r\n    return jsPsych.data.get().filter({type: \"sequencing_symbols\"}).last(1).values()[0];\r\n}\r\n\r\n  /**\r\n   * Sets the automode for end-to-end testing\r\n   * \r\n   * @param {boolean} mode \r\n   */\r\n  set_auto_mode(mode){\r\n    this.auto_mode = mode;\r\n  }\r\n\r\n}\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 936,
    "kind": "variable",
    "name": "ADDRESS",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~ADDRESS",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 937,
    "kind": "variable",
    "name": "RECNTANGLE_BLACK_BG_PATH",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~RECNTANGLE_BLACK_BG_PATH",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 938,
    "kind": "variable",
    "name": "MASK_PATHS",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~MASK_PATHS",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"square\": string, \"square_black\": string, \"rectangle\": string, \"rectangle_black\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 939,
    "kind": "class",
    "name": "Sequencing_Symbols",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "importStyle": "Sequencing_Symbols",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 940,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#constructor",
    "access": "public",
    "description": "Initializes a Sequencing experiment object.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "Parameters",
        "description": "passed from routing."
      }
    ]
  },
  {
    "__docId__": 941,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 942,
    "kind": "member",
    "name": "condition_group",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#condition_group",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 943,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 944,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 945,
    "kind": "member",
    "name": "auto_mode",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#auto_mode",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 946,
    "kind": "member",
    "name": "is_practice_trials",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#is_practice_trials",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 947,
    "kind": "member",
    "name": "is_screening",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#is_screening",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 948,
    "kind": "member",
    "name": "is_local_save",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#is_local_save",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 949,
    "kind": "member",
    "name": "manual_scaling_factor",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#manual_scaling_factor",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 950,
    "kind": "member",
    "name": "custom_subcondition_order",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#custom_subcondition_order",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 951,
    "kind": "member",
    "name": "MIN_CORRELATION",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#MIN_CORRELATION",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 952,
    "kind": "member",
    "name": "MAX_CORRELATION",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#MAX_CORRELATION",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 953,
    "kind": "member",
    "name": "MIN_TRIALS",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#MIN_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 954,
    "kind": "member",
    "name": "MAX_TRIALS",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#MAX_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 955,
    "kind": "member",
    "name": "WINDOW_SIZE",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#WINDOW_SIZE",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 956,
    "kind": "member",
    "name": "WINDOW_INTERVAL",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#WINDOW_INTERVAL",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 957,
    "kind": "member",
    "name": "CONVERGENCE_THRESHOLD",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#CONVERGENCE_THRESHOLD",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 958,
    "kind": "member",
    "name": "INCORRECT_MULTIPLIER",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#INCORRECT_MULTIPLIER",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 959,
    "kind": "member",
    "name": "MAX_REPETITIONS",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#MAX_REPETITIONS",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 960,
    "kind": "member",
    "name": "converged",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#converged",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 961,
    "kind": "member",
    "name": "MAX_PRACTICE_TRIALS",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#MAX_PRACTICE_TRIALS",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 962,
    "kind": "member",
    "name": "practice_selection_matrix",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#practice_selection_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 963,
    "kind": "member",
    "name": "adjusted_quantity_practice",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#adjusted_quantity_practice",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 964,
    "kind": "member",
    "name": "practice_condition_ended",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#practice_condition_ended",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 965,
    "kind": "member",
    "name": "adjusted_quantity_matrix",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#adjusted_quantity_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 966,
    "kind": "member",
    "name": "trial_selection_matrix",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#trial_selection_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 967,
    "kind": "member",
    "name": "end_sub_condition_debug",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#end_sub_condition_debug",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 968,
    "kind": "member",
    "name": "left_coordinates",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#left_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 969,
    "kind": "member",
    "name": "right_coordinates",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#right_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 970,
    "kind": "member",
    "name": "distractor_coordinates",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#distractor_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 971,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 972,
    "kind": "member",
    "name": "style_attributes",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#style_attributes",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 973,
    "kind": "member",
    "name": "raw_constants",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#raw_constants",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 974,
    "kind": "member",
    "name": "num_blocks",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#num_blocks",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 975,
    "kind": "member",
    "name": "block_size",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#block_size",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 976,
    "kind": "member",
    "name": "correct_statistic_increment",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#correct_statistic_increment",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 977,
    "kind": "member",
    "name": "incorrect_statistic_increment",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#incorrect_statistic_increment",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 978,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#prepare_experiment",
    "access": "public",
    "description": "Orders the input data according to balancing type and\ninitializes the Sequencing object's variables.",
    "lineNumber": 143,
    "params": [],
    "return": null
  },
  {
    "__docId__": 979,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 980,
    "kind": "member",
    "name": "sub_conditions_constants",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#sub_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 981,
    "kind": "member",
    "name": "current_sub_condition_index",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#current_sub_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 982,
    "kind": "method",
    "name": "prepare_practice",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#prepare_practice",
    "access": "public",
    "description": "Orders the input dataset by randomizing it, and initializes the practice variables.",
    "lineNumber": 172,
    "params": [],
    "return": null
  },
  {
    "__docId__": 984,
    "kind": "member",
    "name": "practice_conditions_constants",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#practice_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 985,
    "kind": "member",
    "name": "current_practice_condition_index",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#current_practice_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 986,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#generate_trial",
    "access": "public",
    "description": "Generates a Sequencing trial object for use in the jsPsych timeline.",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "\"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "trial"
    }
  },
  {
    "__docId__": 987,
    "kind": "method",
    "name": "generate_subcond_num_trial",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#generate_subcond_num_trial",
    "access": "public",
    "description": "Generates the subcondition number trial and wraps it in a conditional timeline",
    "lineNumber": 239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing_symbols_exp",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 988,
    "kind": "method",
    "name": "generate_first_trial",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#generate_first_trial",
    "access": "public",
    "description": "Generates the first trial of the timing condition. The first trial handles generating\nthe adjusted correlation value, distribution, setting the d3 graph plotting information\nand the html style attributes for the d3 graph and mask images. The First trial also\nsaves the appropiate correlation and graph information into the experiment object and the\nadjusted quantity matrix for use in other trials",
    "lineNumber": 274,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing_symbols_exp",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": "\"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 989,
    "kind": "method",
    "name": "generate_mask_trial",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#generate_mask_trial",
    "access": "public",
    "description": "Generates the mask trial, dynamically assigning the trial duration and stimulus",
    "lineNumber": 395,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing_symbols_exp",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 990,
    "kind": "method",
    "name": "generate_blank_trial",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#generate_blank_trial",
    "access": "public",
    "description": "Generates the blank trial where the correlation selection is made.\nThis trial can also be used to initiate debug modes\nq - ends the experiment\nw - skips the current subcondition\nt - starts automode to do an end-to-end test\nSaves the data response into jsPsych data",
    "lineNumber": 429,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing_symbols_exp",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 991,
    "kind": "method",
    "name": "generate_anchoring_trial",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#generate_anchoring_trial",
    "access": "public",
    "description": "Generates the anchoring trial for memory conditions\nDisplays the base correlation for 5000ms",
    "lineNumber": 483,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing_symbols_exp",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 992,
    "kind": "method",
    "name": "handle_data_saving",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#handle_data_saving",
    "access": "public",
    "description": "Initializes trial data and handles saving the relevant data on a given trial to include trial logic data as \nwell as data to be exported to firebase. This function also handles the Adjusted Quantity Matrix updates, \nas well as experiment object data used in the Graphing Controller. Handles block specific saves (practice/test)\nand order specific saves (first, blank, likert). ",
    "lineNumber": 557,
    "params": [
      {
        "nullable": null,
        "types": [
          "trial"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "adjusted_values",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "randomized_positions",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "graph_properties",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "style_attributes",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 994,
    "kind": "method",
    "name": "check_response_sequencing",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#check_response_sequencing",
    "access": "public",
    "description": "Given a Sequencing trial data, determines whether response is\ncorrect or not.",
    "lineNumber": 634,
    "params": [
      {
        "nullable": null,
        "types": [
          "JsPsych.data"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing",
        "description": "experiment"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 996,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#export_trial_data",
    "access": "public",
    "description": "When called, will save summary data and individual trial data into firebase.",
    "lineNumber": 698,
    "params": [],
    "return": null
  },
  {
    "__docId__": 997,
    "kind": "method",
    "name": "get_jsPsych_data",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#get_jsPsych_data",
    "access": "public",
    "description": "Gets jsPsych trial with given filters. Only returns 'blank'\ntype trials since those are the only ones that save data.",
    "lineNumber": 754,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych data} entire jsPsych data object. Needs to be furtherly filtered later to be useful"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "filters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych data"
      ],
      "spread": false,
      "description": "entire jsPsych data object. Needs to be furtherly filtered later to be useful"
    }
  },
  {
    "__docId__": 998,
    "kind": "method",
    "name": "get_trial_data",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#get_trial_data",
    "access": "public",
    "description": "Returns releveant array of the experiment's trial data (in order from first to last)\nNon-relevant fields are ignored.\n\"Column order\" if downloaded to csv is \"randomized\" because trial data object is an unordered map",
    "lineNumber": 769,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} [{trial_0},{trial_1},...,{trial_n}]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "[{trial_0},{trial_1},...,{trial_n}]"
    },
    "params": []
  },
  {
    "__docId__": 999,
    "kind": "method",
    "name": "get_summary_data",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#get_summary_data",
    "access": "public",
    "description": "Get's experiment relevant summary data.\nRelevant summary data includes: independent variables, overall JND, convergance JND (last 24), convergance results, trial count",
    "lineNumber": 808,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc[]} array of summary data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc[]"
      ],
      "spread": false,
      "description": "array of summary data"
    },
    "params": []
  },
  {
    "__docId__": 1000,
    "kind": "method",
    "name": "get_subcondition_index",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#get_subcondition_index",
    "access": "public",
    "description": "Get current subcondition index of block type for current index.",
    "lineNumber": 869,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{int}     index - current subcondition index"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": "Either \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "int"
      ],
      "spread": false,
      "description": "index - current subcondition index"
    }
  },
  {
    "__docId__": 1001,
    "kind": "method",
    "name": "get_above_below_curr_index",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#get_above_below_curr_index",
    "access": "public",
    "description": "Get current trial index for above and below condition.",
    "lineNumber": 891,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{int} curr_index  - current trial index"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": "Either \"test\" or \"practice\""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "current subcondition index"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "int"
      ],
      "spread": false,
      "description": "curr_index  - current trial index"
    }
  },
  {
    "__docId__": 1002,
    "kind": "method",
    "name": "get_above_below_curr_direction",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#get_above_below_curr_direction",
    "access": "public",
    "description": "Get the current direction ",
    "lineNumber": 912,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "curr_trial_index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1003,
    "kind": "method",
    "name": "get_individual_graph_constants",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#get_individual_graph_constants",
    "access": "public",
    "description": "Returns the individual graph constants for graphs a and b\nHandles the case where the number of points is different in them",
    "lineNumber": 931,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "assoc array"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"constants_a\": *, \"constants_b\": *}"
      ]
    }
  },
  {
    "__docId__": 1004,
    "kind": "method",
    "name": "add_z_values",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#add_z_values",
    "access": "public",
    "description": "Addz the Z values to the experiment coordinates.",
    "lineNumber": 957,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing_symbols_exp",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "assoc"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1005,
    "kind": "method",
    "name": "get_last_trial_data",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#get_last_trial_data",
    "access": "public",
    "description": "Returns the data of the last trial on the jsPsych data object",
    "lineNumber": 979,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc array} last jsPsych trial data object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment_name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc array"
      ],
      "spread": false,
      "description": "last jsPsych trial data object"
    }
  },
  {
    "__docId__": 1006,
    "kind": "method",
    "name": "set_auto_mode",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols#set_auto_mode",
    "access": "public",
    "description": "Sets the automode for end-to-end testing",
    "lineNumber": 988,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1008,
    "kind": "variable",
    "name": "SQUARE_MASK_PATH",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~SQUARE_MASK_PATH",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "importStyle": "{SQUARE_MASK_PATH}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1009,
    "kind": "variable",
    "name": "RECTANGLE_MASK_PATH",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols.js~RECTANGLE_MASK_PATH",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols.js",
    "importStyle": "{RECTANGLE_MASK_PATH}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1010,
    "kind": "file",
    "name": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "content": "import Sequencing_Symbols from \"/scripts/experiments/sequencing_symbols/sequencing_symbols.js\";\r\nimport {SQUARE_MASK_PATH,  RECTANGLE_MASK_PATH} from \"/scripts/experiments/sequencing_symbols/sequencing_symbols.js\";\r\nimport { resolution_scaling, manual_resolution_scaling } from '/scripts/experiment-timeline/resolution_scaling/resolution_scaling.js';\r\nimport {generate_welcome, generate_instructions, generate_ready_screen, generate_sitting_distance_screen} from '/scripts/experiment-timeline/instruction_screen/instruction_screen.js'\r\nimport {get_jspsych_instructions, generate_subcond_instruction_block } from \"/scripts/experiment-properties/instructions/instructions_controller.js\";\r\nimport * as screening from '/scripts/experiment-timeline/screening/screening.js';\r\nimport * as strip_plot_screening from '/scripts/experiment-timeline/screening/strip_plot_screening.js';\r\nimport * as pcp_screening from '/scripts/experiment-timeline/screening/pcp_screening.js';\r\nimport * as generate from '/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js'\r\n\r\nexport var sequencing_symbols_exp = new Sequencing_Symbols(params);\r\n\r\nvar timeline = [];\r\nvar address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\nconst isPractice = sequencing_symbols_exp.is_practice_trials;\r\nconst isScreening = sequencing_symbols_exp.is_screening;\r\nconst manual_scaling_factor = sequencing_symbols_exp.manual_scaling_factor;\r\n//let manual_scaling_factor = 0.785\r\nlet condition_name_words = sequencing_symbols_exp.condition_name.split('_');\r\n\r\nconsole.log(\"Practice and Screening\")\r\nconsole.log(isPractice, isScreening)\r\n\r\n// =========================================================\r\n// WELCOME TRIAL BLOCK\r\nlet welcome = generate_welcome(address,sequencing_symbols_exp);\r\ntimeline.push(welcome);\r\n\r\n\r\n// =========================================================\r\n// RESOLUTION SCALING\r\nif(manual_scaling_factor == \"none\"){\r\n  timeline.push(resolution_scaling);\r\n}\r\nelse{\r\n  console.log(\"Manual Scale Factor: \", manual_scaling_factor)\r\n  timeline.push(manual_resolution_scaling(manual_scaling_factor))\r\n}\r\n\r\n\r\n// CONDITIONAL: SKIP SCREENING IF FALSE\r\nif (isScreening == \"true\") {\r\n  // =========================================================\r\n  // SCREENING\r\n  timeline.push(\r\n    screening.screeningQuestions,\r\n    screening.screeningInstructions,\r\n    screening.screeningCorrelationSort,\r\n    //screening.screeningCorrelationSelect,\r\n    // screening.instructionsRegression,  \r\n    // screening.screeningRegressionSelect\r\n  );\r\n  console.log(condition_name_words)\r\n  // Orientation Strip\r\n  if(condition_name_words.includes(\"strip\") && condition_name_words.includes(\"orientation\")){\r\n    timeline.push(\r\n      strip_plot_screening.orientationScreeningInstructions,\r\n      strip_plot_screening.screenningStripOrientationSort\r\n    )\r\n  }\r\n\r\n  if(condition_name_words.includes(\"strip\") && condition_name_words.includes(\"luminance\")){\r\n    timeline.push(\r\n      strip_plot_screening.luminanceScreeningInstructions,\r\n      strip_plot_screening.screenningStripLuminanceSort\r\n    )\r\n  }\r\n\r\n  if(condition_name_words.includes(\"strip\") && condition_name_words.includes(\"luminance\") && condition_name_words.includes(\"orientation\")){\r\n    timeline.push(\r\n      strip_plot_screening.ignoreScreeningInstructions\r\n    )\r\n  }\r\n\r\n  if(condition_name_words.includes(\"parallel\")){\r\n    timeline.push(\r\n      pcp_screening.screeningInstructions,\r\n      pcp_screening.screeningPCPInverted\r\n    )\r\n  }\r\n\r\n  if(condition_name_words.includes(\"strip\") && condition_name_words.includes(\"color\")){\r\n    timeline.push(\r\n      strip_plot_screening.colorScreeningInstructions,\r\n      strip_plot_screening.screeningStripColorYellowBlue\r\n    )\r\n  }\r\n\r\n  let sitting_distance = generate_sitting_distance_screen();\r\n  timeline.push(sitting_distance)\r\n}\r\n\r\n//\r\n// =========================================================\r\n// INSTRUCTION TRIAL BLOCKS\r\n\r\nlet ready = generate_ready_screen()\r\nlet instructions = get_jspsych_instructions(sequencing_symbols_exp, \"sequencing_symbols\")\r\n\r\n\r\n// CONDITIONAL: Practice Instruction Trials shown only if isPractice == true\r\nvar instruction_trials;\r\nif (isPractice == \"true\") {\r\n  instruction_trials = {\r\n    timeline: [instructions, ready]\r\n  };\r\n} \r\nelse {\r\n  instruction_trials = {\r\n    timeline: [instructions]\r\n  };\r\n}\r\ntimeline.push(instruction_trials);\r\n\r\n// FEEDBACK Green check mark or red X for right/wrong answers\r\n// Used in both practice and test\r\nlet feedback = generate.generate_feedback_screen(sequencing_symbols_exp);\r\n//let feedback_wrapper = generate.generate_feedback_wrapper(feedback);\r\n\r\n\r\n// ---------------------------------------------------------\r\n// PRE-SUBCONDITION INSTRUCTION BLOCK\r\n\r\n// This is a conditional block that will execute only if\r\n// the subcondition has a subcondition_instructions attribute\r\n// and it is the start of the subcondition.\r\n\r\nlet subcond_instruction_block = generate_subcond_instruction_block(sequencing_symbols_exp, \"test\");\r\nlet subcond_practice_instruction_block = generate_subcond_instruction_block(sequencing_symbols_exp, \"practice\");\r\n\r\n// =========================================================\r\n// PRACTICE TRIAL BLOCKS\r\n\r\n// CONDITIONAL: DO NOT RUN PRACTICE BLOCK IF isPractice returns FALSE\r\nif (isPractice == \"true\") {\r\n  // ---------------------------------------------------------\r\n  // PRE-SUBCONDITION INSTRUCTION BLOCK\r\n  var practice_sequencing = sequencing_symbols_exp.generate_trial(\"practice\");\r\n\r\n  // let subcond_practice_instruction_block = generate.generate_practice_instruction_block(sequencing_symbols_exp);\r\n\r\n  // ---------------------------------------------------------\r\n  // PRACTICE BLOCK\r\n  let practice = generate.generate_practice_block(subcond_practice_instruction_block, sequencing_symbols_exp, practice_sequencing, feedback);\r\n\r\n  timeline.push(practice);\r\n\r\n  // PRACTICE STOP BLOCK\r\n  let stop_practice_trials = generate.generate_stop_practice_trials(sequencing_symbols_exp);\r\n  timeline.push(stop_practice_trials);\r\n\r\n}\r\n\r\n// ---------------------------------------------------------\r\n\r\n// =========================================================\r\n// EXPERIMENT TRIAL BLOCKS\r\n\r\nlet experiment_trials = sequencing_symbols_exp.generate_trial(\"test\");\r\n\r\n\r\n\r\n// ---------------------------------------------------------\r\n// EXPERIMENT BLOCK\r\n\r\nlet experiment = generate.generate_experiment(sequencing_symbols_exp, subcond_instruction_block, experiment_trials, feedback);\r\n\r\ntimeline.push(experiment);\r\n\r\nconsole.log(\"======================\");\r\n\r\n// =========================================================\r\n// DATA DOWNLOADING\r\n\r\n// Try to save likert scale data\r\n// var likert_data = jsPsych.data.get().filter({trial_type: 'survey-likert'});\r\n// var likert_data_name = \"S_likert_results.csv\";\r\n// likert_data.localSave('csv', likert_data_name);\r\n\r\nlet experiment_end = generate.generate_experiment_end(sequencing_symbols_exp);\r\ntimeline.push(experiment_end);\r\n\r\n// =========================================================\r\n// START JSPSYCH\r\n\r\n// preload images so they aren't delayed online\r\nvar noisemask = [SQUARE_MASK_PATH,  RECTANGLE_MASK_PATH];\r\n\r\njsPsych.init({\r\n    timeline: timeline,\r\n    preload_images: noisemask,\r\n    // on_finish: function(){\r\n    //     jsPsych.data.displayData();\r\n    // }\r\n});\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1011,
    "kind": "variable",
    "name": "sequencing_symbols_exp",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~sequencing_symbols_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": "{sequencing_symbols_exp}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/sequencing_symbols/sequencing_symbols.js~Sequencing_Symbols"
      ]
    }
  },
  {
    "__docId__": 1012,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1013,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1014,
    "kind": "variable",
    "name": "isPractice",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~isPractice",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1015,
    "kind": "variable",
    "name": "isScreening",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~isScreening",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1016,
    "kind": "variable",
    "name": "manual_scaling_factor",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~manual_scaling_factor",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1017,
    "kind": "variable",
    "name": "condition_name_words",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~condition_name_words",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1018,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1019,
    "kind": "variable",
    "name": "ready",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~ready",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1020,
    "kind": "variable",
    "name": "instructions",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1021,
    "kind": "variable",
    "name": "feedback",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~feedback",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1022,
    "kind": "variable",
    "name": "subcond_instruction_block",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~subcond_instruction_block",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1023,
    "kind": "variable",
    "name": "subcond_practice_instruction_block",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~subcond_practice_instruction_block",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1024,
    "kind": "variable",
    "name": "experiment_trials",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~experiment_trials",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1025,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1026,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1027,
    "kind": "variable",
    "name": "noisemask",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js~noisemask",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1028,
    "kind": "file",
    "name": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "content": "import {correlation_dependencies} from '/scripts/helpers/correlation_dependencies.js'\r\n//export const correlation_dependencies = new Correlation_Dependencies();\r\n\r\n\r\n/**\r\n * FEEDBACK Green check mark or red X for right/wrong answers\r\n * @param {experiment} sequencing_symbols_exp \r\n * @returns {trial}\r\n */\r\nexport function generate_feedback_screen(sequencing_symbols_exp){\r\n    let feedback = {\r\n        type: 'html-keyboard-response',\r\n        choices: ['q'],\r\n        post_trial_gap: 300,\r\n        data: {type: 'feedback'},\r\n        trial_duration: 500,\r\n        on_start: function(feedback) {\r\n          if (sequencing_symbols_exp.auto_mode) {\r\n            feedback.trial_duration = 0;\r\n          }\r\n        },\r\n        stimulus: function(){\r\n      \r\n          document.body.style.backgroundColor = sequencing_symbols_exp.trial_data.feedback_background_color;\r\n      \r\n          var last_trial_data = correlation_dependencies.get_last_trial_data(sequencing_symbols_exp.experiment_name)\r\n          //console.log(last_trial_data)\r\n          var last_trial_correct = last_trial_data.correct\r\n      \r\n          // For debugging purposes:\r\n          if (last_trial_correct == -1){\r\n            return '<p>' +\r\n                   '<font style=\"font-size:50px; color:blue\">Exiting from experiment.<p></font>'\r\n          }\r\n          else if (last_trial_correct == -2){\r\n            return '<p>' +\r\n                   '<font style=\"font-size:50px; color:blue\">Skipping from subcondtion.<p></font>'\r\n          }\r\n      \r\n          else if (last_trial_correct){\r\n            return `<div align = \"center\">\r\n                    <p>\r\n                      <i class=\"fa fa-check-circle\" style=\"font-size:50px; color:green; margin-right: 10px;\"></i>\r\n                      <font style=\"font-size:50px; color:green\">\r\n                      Correct!\r\n                      </font>\r\n                    <p>\r\n                    <br>\r\n                    </div>`\r\n          }\r\n          else{\r\n            return `<div align = \"center\">\r\n                    <p>\r\n                      <i class=\"fa fa-close\" style=\"font-size:50px; color:red; margin-right: 10px;\"></i>\r\n                      <font style=\"font-size:50px; color:red;\"\">\r\n                      Incorrect!\r\n                      </font>\r\n                    <p>\r\n                    <br>\r\n                    </div>`\r\n          }\r\n        }\r\n      };\r\n    return feedback;\r\n}\r\n\r\n\r\n/**\r\n * Wrapper for feedback in case feedback shouldn't be shown at the end of the subcondition\r\n * @param {trial} feedback \r\n * @returns \r\n */\r\nexport function generate_feedback_wrapper(feedback){\r\n    let feedback_wrapper = {\r\n        timeline: [feedback],\r\n        conditional_function: function() {\r\n          if (correlation_dependencies.is_end_of_sub_condition(experiment, block_type)) {\r\n            return false;\r\n          } else {\r\n            return true;\r\n          }\r\n        },\r\n      };\r\n    return feedback_wrapper;\r\n}\r\n\r\n/**\r\n * Trial screen showing \"end of practice\" message\r\n * @param {experiment} sequencing_symbols_exp \r\n * @returns {trial}\r\n */\r\nexport function generate_stop_practice_trials(sequencing_symbols_exp){\r\n    let stop = {\r\n        type: 'html-keyboard-response',\r\n        stimulus: \"<div align = 'center'> <font size = 20><p>This concludes the practice trials.<p>\" + \"<br><br><p><b>Any questions?</b></p></font></div>\",\r\n        data: {type: 'instruction'},\r\n        on_start: function(stop){\r\n          // Reset background color to feedback\r\n          document.body.style.backgroundColor = sequencing_symbols_exp.trial_data.feedback_background_color;\r\n          // skip if automation mode is turned on\r\n          if (sequencing_symbols_exp.auto_mode) {\r\n            stop.trial_duration = 0;\r\n          }\r\n        }\r\n      };\r\n      \r\n    let stop_trials = {\r\n        timeline: [stop]\r\n    };\r\n    return stop_trials;\r\n}  \r\n\r\n/**\r\n * This is a conditional block that will execute only if\r\n * the subcondition has a subcondition_instructions attribute\r\n * and it is the start of the subcondition.\r\n * @param {experiment} sequencing_symbols_exp \r\n * @returns {trial}\r\n */\r\nexport function generate_practice_instruction_block(sequencing_symbols_exp){\r\n  let block_type = \"practice\";\r\n  let subcond_practice_instruction = {\r\n    type: 'html-keyboard-response',\r\n    stimulus: function(){\r\n\r\n      let index = correlation_dependencies.get_subcondition_index(sequencing_symbols_exp, block_type);\r\n      let constants = correlation_dependencies.get_constants(sequencing_symbols_exp, block_type, index);\r\n\r\n      return constants.subcondition_instructions;\r\n    }\r\n  }\r\n\r\n  let subcond_practice_instruction_block = {\r\n    timeline: [subcond_practice_instruction],\r\n    conditional_function: function() {\r\n      let index = correlation_dependencies.get_subcondition_index(sequencing_symbols_exp, block_type);\r\n      let constants = correlation_dependencies.get_constants(sequencing_symbols_exp, block_type, index);\r\n      if (constants.subcondition_instructions && \r\n          correlation_dependencies.get_adjusted_quantity_matrix(sequencing_symbols_exp,block_type)[0].length == 0 && \r\n          correlation_dependencies.is_start_of_block(sequencing_symbols_exp, block_type)){\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return subcond_practice_instruction_block;\r\n}\r\n\r\n/**\r\n * Conditional looping logic timeline for experiment practice\r\n * Uses similar logic to normal experiment loop.\r\n * Sets and resets subcondition index flags in the experiment\r\n * @param {trial} subcond_practice_instruction_block \r\n * @param {experiment} sequencing_symbols_exp \r\n * @param {trial} practice_sequencing \r\n * @param {trial} feedback \r\n * @returns {trial}\r\n */\r\nexport function generate_practice_block(subcond_practice_instruction_block, sequencing_symbols_exp, practice_sequencing, feedback){\r\n  let block_type = \"practice\";  \r\n  let practice = {\r\n        timeline: [subcond_practice_instruction_block, ...practice_sequencing, feedback], // We use same feedback block as that used in practice\r\n        loop_function: function(data){ // Return true if timeline should continue\r\n                                      // Return false if timeline should end\r\n          let key_presses = [];\r\n          data.values().forEach(function(elem){\r\n                                key_presses.push(elem.key_press);\r\n                                });\r\n    \r\n          // For debugging, if you want to exit out of experiment, press q:\r\n          if (key_presses.includes(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q'))){\r\n            // Turn flag on\r\n            //sequencing_symbols_exp.first_trial_of_sub_condition = true;\r\n            sequencing_symbols_exp.converged = false;\r\n            sequencing_symbols_exp.end_sub_condition_debug = false;\r\n            sequencing_symbols_exp.practice_condition_ended = true;\r\n            return false;\r\n          }\r\n    \r\n          if(correlation_dependencies.is_end_of_sub_condition(sequencing_symbols_exp,block_type)){\r\n            // End practice\r\n            //sequencing_symbols_exp.first_trial_of_sub_condition = true;\r\n            sequencing_symbols_exp.converged = false;\r\n            sequencing_symbols_exp.end_sub_condition_debug = false;\r\n    \r\n            // If there are still more subconditions, increment current index\r\n            if (sequencing_symbols_exp.current_practice_condition_index < (sequencing_symbols_exp.sub_conditions_constants.length-1)){\r\n              sequencing_symbols_exp.current_practice_condition_index++;\r\n              console.log(\"!!!!!!!!!! Moved to new sub condition at index \" + correlation_dependencies.get_subcondition_index(sequencing_symbols_exp, block_type));\r\n              return true;\r\n            }\r\n            // Else end experiment\r\n            else {\r\n              sequencing_symbols_exp.practice_condition_ended = true;\r\n              return false;\r\n            }\r\n          }\r\n          // Else continue w/ current subcondition:\r\n          else {\r\n            return true;\r\n          }\r\n        }\r\n    };\r\n    return practice;\r\n}\r\n\r\n\r\n/**\r\n * Generates the main experiment timline that handles looping logic that determines\r\n * subcondition start and ends, subcondition index, as well as if the experiment should conclude or not\r\n * Sets the relevant experiment flags in the given experiment for subconditon index logic\r\n * \r\n * @param {experiment} sequencing_symbols_exp \r\n * @param {trial} subcond_instruction_block \r\n * @param {trial} experiment_trials trials generated by experiment's generate_trial function\r\n * @param {trial} feedback \r\n * @returns {trial} \r\n */\r\nexport function generate_experiment(sequencing_symbols_exp, subcond_instruction_block, experiment_trials, feedback){\r\n  let block_type = \"test\";\r\n  let experiment = {\r\n    timeline: [subcond_instruction_block, ...experiment_trials, feedback],\r\n    loop_function: function(data){ // Return true if timeline should continue\r\n                                   // Return false if timeline should end\r\n  \r\n      let key_presses = [];\r\n      data.values().forEach(function(elem){\r\n                            key_presses.push(elem.key_press);\r\n                            });\r\n                            \r\n      // For debugging, if you want to exit out of experiment, press q:\r\n      // TODO rework this flag\r\n      if (key_presses.includes(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q'))){\r\n        return false;\r\n      }\r\n      // If subcondition should end:\r\n      if(correlation_dependencies.is_end_of_sub_condition(sequencing_symbols_exp, block_type)){\r\n        //sequencing_symbols_exp.first_trial_of_sub_condition = true;\r\n        sequencing_symbols_exp.converged = false;\r\n        sequencing_symbols_exp.end_sub_condition_debug = false;\r\n  \r\n        // If there are still more subconditions, increment current index\r\n        if (sequencing_symbols_exp.current_sub_condition_index < (sequencing_symbols_exp.sub_conditions_constants.length-1)){\r\n          sequencing_symbols_exp.current_sub_condition_index++;\r\n          console.log(\"!!!!!!!!!! Moved to new sub condition at index \" + sequencing_symbols_exp.current_sub_condition_index);\r\n          return true;\r\n        }\r\n        // Else end experiment\r\n        else {\r\n          return false;\r\n        }\r\n      }\r\n      // Else continue w/ current subcondition:\r\n      else {\r\n        return true;\r\n      }\r\n    },\r\n    on_finish: function(data) {\r\n      sequencing_symbols_exp.trial_data = data;\r\n    }\r\n  };\r\n  return experiment;\r\n};\r\n\r\n\r\n/**\r\n * Generates the ending screen for the experiment and calls the\r\n * export_trial_data function to upload the data to firebase\r\n * @param {experiment} sequencing_symbols_exp \r\n * @returns {trial}\r\n */\r\nexport function generate_experiment_end(sequencing_symbols_exp){\r\n    let experiment_end = {\r\n        type: 'html-keyboard-response',\r\n        stimulus: '<div align = \"center\">' +\r\n                  '<p><font size = 10>You have completed the experiment!<p></font>' +\r\n                  '</div>' ,\r\n        on_start: function(){\r\n      \r\n          sequencing_symbols_exp.export_trial_data();\r\n          //sequencing_symbols_exp.export_summary_data();\r\n      \r\n          // Reset background color to feedback\r\n          document.body.style.backgroundColor = sequencing_symbols_exp.trial_data.feedback_background_color;\r\n        }\r\n      };\r\n    return experiment_end;\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1029,
    "kind": "function",
    "name": "generate_feedback_screen",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js~generate_feedback_screen",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "importStyle": "{generate_feedback_screen}",
    "description": "FEEDBACK Green check mark or red X for right/wrong answers",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "experiment"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing_symbols_exp",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1030,
    "kind": "function",
    "name": "generate_feedback_wrapper",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js~generate_feedback_wrapper",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "importStyle": "{generate_feedback_wrapper}",
    "description": "Wrapper for feedback in case feedback shouldn't be shown at the end of the subcondition",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "trial"
        ],
        "spread": false,
        "optional": false,
        "name": "feedback",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1031,
    "kind": "function",
    "name": "generate_stop_practice_trials",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js~generate_stop_practice_trials",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "importStyle": "{generate_stop_practice_trials}",
    "description": "Trial screen showing \"end of practice\" message",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "experiment"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing_symbols_exp",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1032,
    "kind": "function",
    "name": "generate_practice_instruction_block",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js~generate_practice_instruction_block",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "importStyle": "{generate_practice_instruction_block}",
    "description": "This is a conditional block that will execute only if\nthe subcondition has a subcondition_instructions attribute\nand it is the start of the subcondition.",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "experiment"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing_symbols_exp",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1033,
    "kind": "function",
    "name": "generate_practice_block",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js~generate_practice_block",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "importStyle": "{generate_practice_block}",
    "description": "Conditional looping logic timeline for experiment practice\nUses similar logic to normal experiment loop.\nSets and resets subcondition index flags in the experiment",
    "lineNumber": 160,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "trial"
        ],
        "spread": false,
        "optional": false,
        "name": "subcond_practice_instruction_block",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "experiment"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing_symbols_exp",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "trial"
        ],
        "spread": false,
        "optional": false,
        "name": "practice_sequencing",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "trial"
        ],
        "spread": false,
        "optional": false,
        "name": "feedback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1034,
    "kind": "function",
    "name": "generate_experiment",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js~generate_experiment",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "importStyle": "{generate_experiment}",
    "description": "Generates the main experiment timline that handles looping logic that determines\nsubcondition start and ends, subcondition index, as well as if the experiment should conclude or not\nSets the relevant experiment flags in the given experiment for subconditon index logic",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{trial} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "experiment"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing_symbols_exp",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "trial"
        ],
        "spread": false,
        "optional": false,
        "name": "subcond_instruction_block",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "trial"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment_trials",
        "description": "trials generated by experiment's generate_trial function"
      },
      {
        "nullable": null,
        "types": [
          "trial"
        ],
        "spread": false,
        "optional": false,
        "name": "feedback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1035,
    "kind": "function",
    "name": "generate_experiment_end",
    "memberof": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js~generate_experiment_end",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/sequencing_symbols/sequencing_symbols_timeline_generators.js",
    "importStyle": "{generate_experiment_end}",
    "description": "Generates the ending screen for the experiment and calls the\nexport_trial_data function to upload the data to firebase",
    "lineNumber": 273,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "experiment"
        ],
        "spread": false,
        "optional": false,
        "name": "sequencing_symbols_exp",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1036,
    "kind": "file",
    "name": "scripts/experiments/stevens/stevens.js",
    "content": "import { balance_subconditions } from '/scripts/experiment-properties/balancing/balancing_controller.js'\r\nimport { plot_distributions } from \"/scripts/experiment-properties/graphing/graphing_controller.js\";\r\nimport { print_curr_trial } from \"/scripts/experiment-properties/counter/counter_controller.js\";\r\nimport { initialize_latin_square } from '/scripts/experiment-properties/balancing/generators/latin_square_generator.js'\r\nimport { initialize_random_order } from '/scripts/experiment-properties/balancing/generators/random_generator.js'\r\nimport { get_data } from '/scripts/experiment-properties/data/data_controller.js'\r\nimport { generateDistribution } from '/scripts/experiment-properties/distribution/gaussian_distribution_generator.js'\r\nimport { generate_adjusted_distribution, generate_initial_distribution, generate_random_distribution} from '/scripts/experiment-properties/distribution/distribution_controller.js'\r\nimport { randomize_position, shuffleArray } from '/scripts/helpers/experiment_helpers.js'\r\nimport { EXPERIMENTS } from \"/config/experiments-config.js\";\r\n\r\nconst ADDRESS_BASE = `${location.protocol}//${location.hostname}:${location.port}`;\r\n\r\n\r\nexport default class Stevens {\r\n\r\n  /**\r\n   * Initializes a Stevens experiment object. \r\n   *\r\n   * @param  params {assoc array}  Parameters passed from routing.\r\n   */\r\n  constructor(params) {\r\n\r\n    console.log(\"stevens.js log\", params)\r\n\r\n    let trial_structure = params[\"trial_structure\"];\r\n    let condition_name = params[\"condition\"];\r\n    let graph_type = params[\"graph_type\"];\r\n    let balancing_type = params[\"balancing\"];\r\n    let conversion_factor = params[\"conversion_factor\"];\r\n\r\n    this.condition_name = condition_name; \r\n    this.condition_group = this.condition_name.split('_')[0]; // Mostly to handle \"distractor\" conditions.\r\n                                                              // TODO: Should have a better flag for it.\r\n    this.subject_id = params[\"subject_id\"];\r\n    this.subject_initials = params[\"subject_initials\"];\r\n\r\n    this.estimated_mid_values = [];\r\n    this.is_practice = params[\"is_practice_trials\"];\r\n    this.is_screening = params[\"is_screening\"];\r\n    this.custom_subcondition_order = params[\"custom_subcondition_order\"];\r\n\r\n    this.is_hybrid = false; // whether this is a part of hybrid experiment\r\n    this.hybrid_2nd_practice = false;\r\n\r\n    // ========================================\r\n    // PARAMETER CHECKING\r\n\r\n    // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\r\n    if (!EXPERIMENTS[\"stevens\"][\"trial_structure\"].includes(trial_structure)) {\r\n      throw Error(trial_structure + \" is not supported.\");}\r\n    else {\r\n      this.trial_structure = trial_structure;\r\n    }\r\n\r\n    if (!EXPERIMENTS[\"stevens\"][\"graph_type\"].includes(graph_type)){\r\n      throw Error(graph_type + \" is not supported.\")} \r\n    else { \r\n      this.graph_type = graph_type;\r\n    };  \r\n\r\n    if (!EXPERIMENTS[\"stevens\"][\"balancing_type\"].includes(balancing_type)) {\r\n      throw Error(balancing_type + \" is not supported.\") }\r\n    else {\r\n      this.balancing_type = balancing_type;\r\n    }  \r\n\r\n    // ========================================\r\n    // EXPERIMENT CONSTANTS\r\n\r\n    this.PIXELS_PER_CM = conversion_factor; // DEPRECATED do not use\r\n    this.MAX_STEP_INTERVAL = 10;\r\n\r\n    // ========================================\r\n    // EXPERIMENT VARIABLES\r\n    this.EXPERIMENT_NAME = \"Stevens\";\r\n    this.input_count_array; // Array of length trials_per_round, each index representing num inputs per round \r\n                            // for a given sub condition\r\n    this.sub_conditions_constants;\r\n    this.current_sub_condition_index;\r\n    this.round_end = false;\r\n    this.num_trial_complete = 0;\r\n\r\n    // ========================================\r\n    // PRACTICE EXPERIMENT VARIABLES\r\n\r\n    this.practice_conditions_constants;\r\n    this.curr_practice_condition_index\r\n    this.adjusted_midpoint_matrix = {}; \r\n    this.practice_trial_data = [];\r\n    this.practice_end = !this.is_practice;;\r\n\r\n    // ========================================\r\n    // TEST EXPERIMENT VARIABLES\r\n\r\n    this.experiment_conditions_constants;\r\n    this.sub_condition_order = [];\r\n\r\n    // ========================================\r\n    // CURRENT TRIAL DATA\r\n\r\n    // Plotting-related vars\r\n    this.left_coordinates = \"\";\r\n    this.right_coordinates = \"\";\r\n    this.middle_coordinates = \"\";\r\n    this.distractor_coordinates = \"\";\r\n\r\n    // JsPsych trial_data for the current trial\r\n    this.trial_data = \"\";\r\n\r\n    // ========================================\r\n    // PREPARE EXPERIMENT\r\n\r\n    // Extract raw constants\r\n    this.raw_constants = get_data(this);\r\n    \r\n    // Prepare experiment + practice data\r\n    this.prepare_experiment();\r\n    this.prepare_practice();  \r\n\r\n  }\r\n\r\n  /**\r\n   * Orders the input data according to balancing type and\r\n   * initializes the Stevens object's variables.  \r\n   *\r\n   * @param  balancing_type {string}                           Type of balancing. Currently only latin_square\r\n   *                                                           is supported.\r\n   *         dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered. \r\n   */\r\n  prepare_experiment() {\r\n\r\n    let dataset = this.raw_constants;\r\n    var ordered_dataset = [];\r\n    console.log(this.raw_constants)\r\n    console.log(this.trial_structure)\r\n    switch (this.trial_structure) {\r\n\r\n      case \"foundational\":\r\n        this.set_foundational_dataset_order(dataset);\r\n        break;\r\n\r\n      case \"design\":\r\n        this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length, dataset, \"block\", this.custom_subcondition_order);\r\n        break;\r\n\r\n      case \"custom\":\r\n        ordered_dataset = dataset;\r\n        break;\r\n    }\r\n    // Order the data set according to the latin square\r\n    for (let i = 0; i < this.sub_condition_order.length; i++){\r\n      ordered_dataset[i] = dataset[this.sub_condition_order[i]];\r\n      // Alternate the start ref to be low or high for each subcondition\r\n      if (i % 2 === 0) {\r\n        ordered_dataset[i][\"start_ref\"] = ordered_dataset[i][\"starting_low_ref\"] ? ordered_dataset[i][\"starting_low_ref\"] : ordered_dataset[i][\"low_ref\"];\r\n      } else {\r\n        ordered_dataset[i][\"start_ref\"] = ordered_dataset[i][\"starting_high_ref\"] ? ordered_dataset[i][\"starting_high_ref\"] : ordered_dataset[i][\"high_ref\"];\r\n      }\r\n    \r\n    }\r\n\r\n    // Set experiment trials\r\n    this.sub_conditions_constants = ordered_dataset;\r\n    this.current_sub_condition_index = 0;\r\n    this.input_count_array = new Array(this.sub_conditions_constants[0].trials_per_round).fill(0);\r\n    \r\n    for (let i=0; i < this.sub_conditions_constants.length; i++){\r\n      this.estimated_mid_values[i] = [];\r\n    } \r\n  }\r\n\r\n  /**\r\n   * Creates the practice dataset by taking the first FOUR subconditions.\r\n   *\r\n   * @param  dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered. \r\n   */\r\n  prepare_practice() {\r\n    let practice_dataset = [];\r\n    let practice_index = 0;\r\n    if (this.sub_conditions_constants[practice_index].num_points <= 12) {\r\n      practice_index = 2\r\n    } else {\r\n      practice_index = 0\r\n    }\r\n    practice_dataset.push(this.sub_conditions_constants[practice_index]);\r\n    practice_dataset.push(this.sub_conditions_constants[practice_index]);\r\n    // Alternate the start ref to be low or high for each subcondition\r\n    for(let i = 0; i < practice_dataset.length; i++){\r\n      this.practice_trial_data.push([])\r\n      if (i % 2 === 0) {\r\n        practice_dataset[i][\"start_ref\"] = this.sub_conditions_constants[practice_index][\"starting_low_ref\"] ? this.sub_conditions_constants[i][\"starting_low_ref\"] : this.sub_conditions_constants[i][\"low_ref\"];\r\n      } else {\r\n        practice_dataset[i][\"start_ref\"] = this.sub_conditions_constants[practice_index][\"starting_high_ref\"] ? this.sub_conditions_constants[i][\"starting_high_ref\"] : this.sub_conditions_constants[i][\"high_ref\"];\r\n      }\r\n    }\r\n    \r\n    this.practice_conditions_constants = practice_dataset;\r\n    this.curr_practice_condition_index = 0;\r\n    this.practice_input_count_array = new Array(this.practice_conditions_constants[0].trials_per_round).fill(0);\r\n  }\r\n\r\n  prepare_sample_trials(){\r\n    let stevens_sample_graps = []\r\n    let mid_correlations = [0.5,0.6,0.7,0.8,0.9]\r\n    for(let i = 0; i < 5; i++){\r\n      let mid_correlation = mid_correlations[i];\r\n      let sample_trial = this.generate_sample_trial(mid_correlation);\r\n      stevens_sample_graps.push(sample_trial)\r\n    }\r\n    shuffleArray(stevens_sample_graps)\r\n    return stevens_sample_graps;\r\n  }\r\n\r\n  generate_sample_trial(mid_correlation){\r\n    let stevens_exp = this;\r\n    let address = stevens_exp.is_hybrid ? ADDRESS_BASE + \"/hybrid_trial\" : ADDRESS_BASE + \"/stevens_trial\";\r\n    this.display_mode = \"sample\";\r\n    let sample_trial = {\r\n      type:'d3-plot-keyboard-response',\r\n      block_type: \"sample\",\r\n      url: address,\r\n      trial_duration: 5000,  \r\n      choices: jsPsych.NO_KEYS,\r\n      execute_script: true,\r\n      response_ends_trial: true,\r\n      plot_distributions: plot_distributions,\r\n      print_curr_trial: print_curr_trial,\r\n      order: \"stevens\",\r\n      exp_obj: stevens_exp, \r\n      data: {},\r\n      on_start: function(trial){ \r\n        stevens_exp.display_mode = \"sample\";\r\n        stevens_exp.sample_mid_correlation = mid_correlation;\r\n        let block_type = \"test\";\r\n        let index = stevens_exp.getIndex(block_type); \r\n        let constants = stevens_exp.getConstants(block_type,index);\r\n\r\n        trial.data = Object.assign({}, trial.data, constants);\r\n        trial.data.constants = constants;\r\n        trial.data.sub_condition = index;\r\n        \r\n        var high_coordinates = generate_adjusted_distribution(constants, constants.high_ref)\r\n        \r\n        var low_coordinates = generate_adjusted_distribution(constants, constants.low_ref)\r\n        \r\n        var estimated_coordinates = generate_adjusted_distribution(constants, mid_correlation)\r\n        \r\n      \r\n        var result = randomize_position(trial, \r\n                                        high_coordinates,\r\n                                        low_coordinates, \r\n                                        constants.high_ref, \r\n                                        constants.low_ref);\r\n        trial.data.high_ref_is_right = result.base_is_right;\r\n\r\n        if (trial.data.high_ref_is_right){\r\n          stevens_exp.right_coordinates = high_coordinates;\r\n          stevens_exp.left_coordinates = low_coordinates;\r\n          stevens_exp.coordinates = [low_coordinates, estimated_coordinates, high_coordinates];\r\n        }\r\n        else{\r\n          stevens_exp.right_coordinates = low_coordinates;\r\n          stevens_exp.left_coordinates = high_coordinates;\r\n          stevens_exp.coordinates = [high_coordinates, estimated_coordinates, low_coordinates];\r\n        }\r\n        \r\n        console.log(\"[RIGHT] Correlation: \" + trial.data.right_correlation);\r\n        console.log(\"[MIDPOINT] Correlation: \" + trial.data.estimated_mid);\r\n        console.log(\"[LEFT] Correlation: \" + trial.data.left_correlation);\r\n        stevens_exp.trial_data = trial.data; \r\n        trial.exp_obj = stevens_exp;\r\n\r\n      },\r\n    };\r\n    return sample_trial;\r\n  }\r\n\r\n  /**\r\n   * Sets the subcondition order for foundational range.\r\n   * Needs to balance INDIVIDUALLY the round and test type conditions,\r\n   * then maintain that order (e.g. all test goes first, then consistency)\r\n   *\r\n   * @param  dataset {[{assoc array}, {assoc array}, ... ]}   The data used to be ordered. \r\n   */\r\n  set_foundational_dataset_order(dataset) {\r\n\r\n    // To hold individual data sets according to round type\r\n    var test_dataset = [];\r\n    var consistency_dataset = [];\r\n\r\n    // To hold balanced indexes\r\n    var test_order = []; \r\n    var consistency_order = [];\r\n\r\n    // Extract dataset according to test or consistency round type\r\n    for (let subcondition of dataset) {\r\n\r\n      if (subcondition[\"round_type\"] === \"test\") {\r\n        test_dataset.push(subcondition);\r\n      } else {\r\n        consistency_dataset.push(subcondition);\r\n      }\r\n    }\r\n\r\n    // Get balancing order for EACH round type dataset individually\r\n    switch(this.balancing_type) {\r\n\r\n      case 'latin_square':\r\n        test_order = initialize_latin_square(test_dataset.length);\r\n        consistency_order = initialize_latin_square(consistency_dataset.length);\r\n        break;\r\n\r\n      case 'random':\r\n        test_order = initialize_random_order(test_dataset.length);\r\n        consistency_order = initialize_random_order(consistency_dataset.length);\r\n        break;\r\n\r\n      default:\r\n        throw Error(this.balancing_type + \" balancing type is not supported.\");\r\n    }\r\n\r\n    // Since test dataset will run first, add index length of it to consistency order\r\n    for (let i = 0; i < consistency_order.length; i++) {\r\n      consistency_order[i] += test_dataset.length;\r\n    }\r\n\r\n    //  Merge the two orders \r\n    this.sub_condition_order = test_order.concat(consistency_order);\r\n  }\r\n\r\n  /**\r\n   * Resets all relevant variables to now use the test version.\r\n   * (input_count_array, sub_conditions_constants, and current_sub_condition_index\r\n   * are shared variables between the practice and test trials).\r\n   *\r\n   * This function is called once all the practice trials have run. \r\n   */\r\n  end_practice_experiment() {\r\n    //this.sub_conditions_constants = this.experiment_conditions_constants;\r\n    this.input_count_array = new Array(this.sub_conditions_constants[0].trials_per_round).fill(0);\r\n    this.current_sub_condition_index = 0;\r\n  }\r\n\r\n  /**\r\n   * Calculates exclusion criteria using standard deviation and variance.\r\n   * Subcondition is flagged if:\r\n   * - Standard deviation > 0.2\r\n   * - Anchoring > 0.6\r\n   *\r\n   * @ return     HTML of subcondition data to print onto screen\r\n   */\r\n  calculate_exclusion_criteria() {\r\n    console.log(this.practice_trial_data)\r\n    let string = \"\";\r\n\r\n    for (let i = 0; i < Object.keys(this.practice_trial_data).length; i++){\r\n\r\n      let subcondition_data = this.practice_trial_data[i];\r\n      let range = this.calculate_exclusion_criteria_for_subcondition(subcondition_data);\r\n\r\n      string += `\r\n                <div align = \"center\" style = \"text-align: left; float:left;\"> <font size = 6>\r\n                Range: ${range}\r\n                <br>\r\n                </font>\r\n                </div>\r\n                `\r\n    }\r\n\r\n    return string;\r\n  }\r\n\r\n  calculate_exclusion_criteria_for_subcondition(subcondition_data){\r\n    let mids = this.get_estimated_mids(subcondition_data);\r\n    let std_dev = this.get_standard_deviation(mids);\r\n    let anchoring_value = this.get_anchoring_value(mids);\r\n\r\n    let rounded_mids = [];\r\n    for (let mid of mids) {\r\n      rounded_mids.push(mid.toFixed(3));\r\n    }\r\n\r\n    let anchoring_color = \"BLACK\";\r\n    if (anchoring_value > 0.5) {\r\n      anchoring_color = \"RED\";\r\n    }\r\n\r\n    let std_dev_color = \"BLACK\";\r\n    if (std_dev > 0.2) {\r\n      std_dev_color = \"RED\";\r\n    }\r\n    \r\n    //console.log(rounded_mids);\r\n\r\n    var mid_values = [];\r\n    length = rounded_mids.length;\r\n    \r\n    for (var x = 0; x < length; x++) {\r\n      mid_values.push(Number(rounded_mids[x]));\r\n\r\n    }\r\n\r\n    //console.log(mid_values);\r\n    let range = Math.max.apply(null, mid_values) - Math.min.apply(null, mid_values);\r\n    console.log(range)\r\n    \r\n    console.log(Math.max.apply(null, mid_values));\r\n    console.log(Math.min.apply(null, mid_values));\r\n    return range;\r\n  }\r\n\r\n  /**\r\n   * Calculates the standard deviation for the specified subcondition.\r\n   * @ param  {array}   array of estimated mids for that trial\r\n   *\r\n   * @ return {double}  standard deviation\r\n   */\r\n  get_standard_deviation(estimated_mids) {\r\n\r\n    let values = [];\r\n\r\n    // Calculate mean:\r\n    let mean = 0;\r\n    for (let mid of estimated_mids) {\r\n      mean += mid;\r\n    }\r\n    mean = mean / estimated_mids.length;\r\n\r\n    // Calculate variance:\r\n    let variance = 0;\r\n    for (let mid of estimated_mids) {\r\n      variance += Math.pow(mid - mean, 2);\r\n    }\r\n    variance = variance / (estimated_mids.length - 1);\r\n\r\n    return Math.sqrt(variance).toFixed(3);\r\n  }\r\n\r\n  /**\r\n   * Calculates the anchoring value for the specified subcondition.\r\n   * @ param  {array}   array of estimated mids for that trial\r\n   *\r\n   * @ return {double} anchoring value\r\n   */\r\n  get_anchoring_value(estimated_mids) {\r\n\r\n    let high_ref_trial_sum = 0;\r\n    let low_ref_trial_sum = 0;\r\n\r\n    // Iterate through each estimated mid (trial) of a given subcondition\r\n    for (let i = 0; i < estimated_mids.length; i++) {\r\n      // Evens have the low ref as their starter \r\n      if (i % 2 === 0) {\r\n        low_ref_trial_sum += estimated_mids[i];\r\n      } else {\r\n        high_ref_trial_sum += estimated_mids[i];\r\n      }\r\n    }\r\n\r\n    return Math.abs(high_ref_trial_sum - low_ref_trial_sum).toFixed(3);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the estimated midpoints of each trial for the subcondition.\r\n   *\r\n   * @ return {array}  of estimated mids \r\n   */\r\n  get_estimated_mids(subcondition_data) {\r\n\r\n    let estimated_mids = [];\r\n\r\n    for (let trial of subcondition_data) {\r\n      estimated_mids.push(trial.estimated_mid);\r\n    }\r\n\r\n    return estimated_mids;\r\n  }\r\n\r\n  /**\r\n   * Generates a Stevens object for use in the JsPsych timeline.\r\n   *\r\n   * @param  type {string}                             \"test\" or \"practice\"\r\n   * @return trial {object}\r\n   */   \r\n  generate_trial(block_type) {\r\n\r\n    if ((block_type !== \"test\") && (block_type !== \"practice\")) {throw Error(block_type + \" is not supported.\")};\r\n    // Initialize a variable for this so it is usable inside on_start\r\n    var stevens_exp = this; \r\n    // conditional address for hybrid conditions called from Hybrid Experiment\r\n    let address = stevens_exp.is_hybrid ? ADDRESS_BASE + \"/hybrid_trial\" : ADDRESS_BASE + \"/stevens_trial\";\r\n\r\n    var trial = {\r\n      type:'d3-plot-keyboard-response',\r\n      block_type: block_type,\r\n      url: address,\r\n      choices: [77, 90, 32, 81],  // m = 77 (up), z = 90 (down), 32 = spacebar, 81 = q (exit button for debugging)\r\n      execute_script: true,\r\n      response_ends_trial: true,\r\n      plot_distributions: plot_distributions,\r\n      print_curr_trial: print_curr_trial,\r\n      order: \"stevens\",\r\n      exp_obj: stevens_exp, \r\n      data: {},\r\n      on_start: function(trial){ // NOTE: on_start takes in trial var\r\n        stevens_exp.display_mode = \"trial\"; \r\n        // Set the constants to be used:\r\n        let index = stevens_exp.getIndex(block_type); \r\n        let constants = stevens_exp.getConstants(block_type,index);\r\n        trial.trial_duration = constants.regen_rate;\r\n        //console.log(constants)\r\n        if (block_type == \"test\"){\r\n          stevens_exp.practice_end = true;\r\n        }\r\n        // Retrieve data from last trial:\r\n        var last_stevens_trial = stevens_exp.get_last_trial(trial, block_type, index);\r\n        // Handling saving the data: \r\n        stevens_exp.handle_data_saving(trial, block_type, constants, estimated_correlation, last_stevens_trial, index);\r\n        // Set the estimated correlation\r\n        var estimated_correlation = stevens_exp.update_estimated_correlation(trial, constants, last_stevens_trial, block_type);\r\n        console.log(\"round refreshes: \" + trial.data.round_refreshes);\r\n        console.log(\"trial/round num: \" + trial.data.trial_num);\r\n        console.log(\"num adjustments: \" + trial.data.num_adjustments);\r\n        if(block_type === \"test\"){\r\n          console.log(\"input count per trial: \" + stevens_exp.input_count_array);\r\n        }\r\n        else{\r\n          console.log(\"Practice input count per trial: \" + stevens_exp.practice_input_count_array);\r\n        }\r\n        \r\n        stevens_exp.num_trial_complete = trial.data.trial_num;\r\n        // Generate distributions\r\n                var high_coordinates = generate_adjusted_distribution(constants, constants.high_ref)\r\n        \r\n        var low_coordinates = generate_adjusted_distribution(constants, constants.low_ref)\r\n        \r\n        var estimated_coordinates = generate_adjusted_distribution(constants, estimated_correlation)\r\n        \r\n        // If there is a distractor population, generate it:\r\n        if (stevens_exp.condition_group === \"distractor\") {\r\n          stevens_exp.generate_distractor_coordinates(constants);\r\n        }\r\n\r\n        // Randomize position of the high and low correlated graphs for a given round\r\n        if (trial.data.round_refreshes == 1){\r\n          console.log(\"Randomizing Position\")\r\n          var result = randomize_position(trial, \r\n                                          high_coordinates,\r\n                                          low_coordinates, \r\n                                          constants.high_ref, \r\n                                          constants.low_ref);\r\n          trial.data.high_ref_is_right = result.base_is_right;\r\n        }\r\n\r\n        if (trial.data.high_ref_is_right){\r\n          stevens_exp.right_coordinates = high_coordinates;\r\n          stevens_exp.left_coordinates = low_coordinates;\r\n          stevens_exp.coordinates = [low_coordinates, estimated_coordinates, high_coordinates];\r\n        }\r\n        else{\r\n          stevens_exp.right_coordinates = low_coordinates;\r\n          stevens_exp.left_coordinates = high_coordinates;\r\n          stevens_exp.coordinates = [high_coordinates, estimated_coordinates, low_coordinates];\r\n        }\r\n\r\n        stevens_exp.trial_data = trial.data; \r\n        trial.exp_obj = stevens_exp;\r\n\r\n        console.log(\"[RIGHT] Correlation: \" + trial.data.right_correlation);\r\n        console.log(\"[MIDPOINT] Correlation: \" + trial.data.estimated_mid);\r\n        console.log(\"[LEFT] Correlation: \" + trial.data.left_correlation);\r\n      },\r\n      on_finish: function(data){\r\n        // Set Trial End to 1 here for correct summary data\r\n        if (stevens_exp.end_round()){\r\n          data.type = \"stevens\";\r\n          data.trial_end = 1;\r\n        }\r\n      }\r\n    };\r\n  \r\n\r\n    return trial; \r\n  }\r\n\r\n    /**\r\n * Generates conditional timeline instruction for JND and Stevens hybrid conditions.\r\n * @returns {jsPsych trial}\r\n */\r\n genereate_hybrid_instruction(){\r\n  let stevens_exp = this;\r\n  let number_of_subconditions = stevens_exp.sub_conditions_constants;\r\n  let instructions = `<div align = 'center'>\r\n                        <p> Please exit full screen mode and switch to the JND Task.\r\n                          <br> Do not close this window. You will return to it when the JND Task is completed.\r\n                          <br> Enter full screen mode again and press any key to continue when you return.\r\n                        </p>\r\n                      </div>`\r\n\r\n  let instruction_trial = {\r\n    type: 'html-keyboard-response',\r\n    stimulus: instructions,\r\n    on_finish: function (data){\r\n      if (stevens_exp.current_sub_condition_index < (stevens_exp.sub_conditions_constants.length - 1)) {\r\n        stevens_exp.input_count_array = new Array(stevens_exp.sub_conditions_constants[stevens_exp.current_sub_condition_index].trials_per_round).fill(0);\r\n\r\n        stevens_exp.current_sub_condition_index++;\r\n        console.log(\"!!!!!!!!!! Moved to new sub condition at index \" + stevens_exp.current_sub_condition_index);\r\n      }\r\n      else{\r\n        stevens_exp.end_experiment = true;\r\n      } \r\n    }\r\n  };\r\n\r\n  // conditional timeline wrapper\r\n  let block_size = 1;\r\n  var hybrid_timeline = {\r\n    timeline: [instruction_trial],\r\n    conditional_function: function() {\r\n      \r\n      // if it is the end of the Sub Condition and the end of a block (assumes block size is 3 for hybrid tasks)\r\n      if (stevens_exp.end_round() && stevens_exp.end_sub_condition(\"test\", stevens_exp.current_sub_condition_index) \r\n      && (stevens_exp.current_sub_condition_index + 1) % block_size == 0 && (stevens_exp.current_sub_condition_index + 1) % 2 != 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  };\r\n\r\n  return hybrid_timeline\r\n}\r\n\r\n\r\n  /**\r\n   * Will generate the distractor coordinates and save them to the instance.\r\n   *\r\n   * @param  {object}  constants (for the given trial)       \r\n   */\r\n  generate_distractor_coordinates(constants) {\r\n    let dist_attributes = constants.dist_attributes;\r\n    let dist_correlation = constants.dist_attributes.correlation;\r\n    let left_dist_coordinates = generate_adjusted_distribution(dist_attributes, dist_correlation);\r\n    let middle_dist_coordinates = generate_adjusted_distribution(dist_attributes, dist_correlation);\r\n    let right_dist_coordinates = generate_adjusted_distribution(dist_attributes, dist_correlation);\r\n    this.distractor_coordinates = [left_dist_coordinates, middle_dist_coordinates, right_dist_coordinates];\r\n  }\r\n\r\n  /**\r\n   * Retrieves the last stevens trial depending on block_type for a\r\n   * given sub condition index. \r\n   * If this is the first trial of a given block_type, returns null. \r\n   *\r\n   * @param  trial {object}   \r\n   *         block_type {string}          \"test\" or \"practice\"         \r\n   *         index {integer}\r\n   * @return last_stevens_trial {object}           \r\n   */\r\n  get_last_trial(trial, block_type, index) {\r\n\r\n    var last_stevens_trial; \r\n    trial.data.type = \"stevens\";\r\n    \r\n    // Set trial run_type depending on block type\r\n    // (we need to set trial's run_type so we can do the filter in the\r\n    // next if block)\r\n    if (block_type == \"test\"){\r\n      trial.data.run_type = \"test\";\r\n    }\r\n    else{\r\n      trial.data.run_type = \"practice\";\r\n    }\r\n\r\n    // Retrieve previous stevens trial if it exists\r\n    if (block_type == \"practice\" && jsPsych.data.get().filter({type: \"stevens\", run_type: \"practice\", sub_condition: index}).last(1).values()[0]){\r\n      last_stevens_trial = jsPsych.data.get().filter({type: \"stevens\", run_type: \"practice\", sub_condition: index}).last(1).values()[0];\r\n    }\r\n    else if (block_type == \"test\" && jsPsych.data.get().filter({type: \"stevens\", run_type: \"test\", sub_condition: index}).last(1).values()[0]){\r\n      last_stevens_trial = jsPsych.data.get().filter({type: \"stevens\", run_type: \"test\", sub_condition: index}).last(1).values()[0];\r\n    }\r\n    else{\r\n      last_stevens_trial = null;\r\n    }\r\n\r\n    return last_stevens_trial; \r\n  }\r\n\r\n  /**\r\n   * Handles saving the relevant data on a given trial.\r\n   *\r\n   * For reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\r\n   * this.trial_variables =         \r\n   *       {type: 'stevens',\r\n   *       run_type: '',\r\n   *       left_correlation: '',\r\n   *       right_correlation: '',\r\n   *       round_refreshes: 0,      // Number of times there is a refresh for a given round \r\n   *       high_ref_is_right: false\r\n   *       start_ref: ''\r\n   *       };\r\n   *\r\n   * These are variables created WITHIN the trial logic that were not present in excel (but need to be\r\n   * outputted to results).         \r\n   * this.export_variables = \r\n   *       {trial_num: 0,                // Round index trial is currently on (aka trial_num from excel)\r\n   *        sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\r\n   *        balanced_sub_condition: '',  // Index of sub_condition according to balancing order\r\n   *        estimated_mid: '',\r\n   *        num_adjustments: 0,          // Number of inputs for a given round (aka num_adjustments from excel)\r\n   *        trials_per_round: '',\r\n   *       };\r\n   *\r\n   * @param trial {object}\r\n   *        block_type {string}               \"test\" or \"practice\"\r\n   *        constants {assoc array}\r\n   *        estimated_correlation {double}\r\n   *        last_stevens_trial {object}\r\n   *        index {integer}\r\n   */\r\n  handle_data_saving(trial, block_type, constants, estimated_correlation, last_stevens_trial, index) {\r\n\r\n    trial.data = Object.assign({}, trial.data, constants);\r\n    trial.data.constants = constants;\r\n    trial.data.sub_condition = index;\r\n    trial.data.balanced_sub_condition = this.sub_condition_order[index];\r\n\r\n    //trial.trial_duration = trial.data.regen_rate;\r\n    \r\n    // If trial is still part of same sub-condition, carry over constants from\r\n    // the previous trial\r\n    //if (last_stevens_trial && !this.hybrid_2nd_practice){\r\n    if (last_stevens_trial){ // commenting out old hybrid logic (pre combined hybrid timeline)\r\n      trial.data.step_size = last_stevens_trial.step_size;\r\n      trial.data.right_correlation = last_stevens_trial.right_correlation;\r\n      trial.data.left_correlation = last_stevens_trial.left_correlation;\r\n      trial.data.high_ref_is_right = last_stevens_trial.high_ref_is_right;\r\n      // Else trial_num, num_adjustments and start_ref is the same, but round_refresh ++\r\n      //console.log(\"Round End: \", this.round_end)\r\n      if (this.round_end){\r\n        trial.data.type = \"stevens\";\r\n        last_stevens_trial.trial_end = 1;\r\n        trial.data.trial_num = last_stevens_trial.trial_num + 1;\r\n        trial.data.num_adjustments = 0;\r\n        trial.data.round_refreshes = 1;\r\n        console.log(\"Start Ref: \", last_stevens_trial.start_ref)\r\n        if (last_stevens_trial.start_ref === (constants.starting_high_ref ? constants.starting_high_ref : constants.high_ref)) {\r\n          trial.data.start_ref = constants.starting_low_ref ? constants.starting_low_ref : constants.low_ref;\r\n        } else {\r\n          trial.data.start_ref = constants.starting_high_ref ? constants.starting_high_ref : constants.high_ref;\r\n        }\r\n        this.round_end = false; //Reset flag\r\n      } \r\n      else{\r\n        trial.data.trial_end = 0;\r\n        trial.data.trial_num = last_stevens_trial.trial_num;\r\n        trial.data.num_adjustments = last_stevens_trial.num_adjustments;\r\n        trial.data.start_ref = last_stevens_trial.start_ref;\r\n        trial.data.round_refreshes = last_stevens_trial.round_refreshes + 1;\r\n      }\r\n    }\r\n    // Else this is the first refresh of a given trial \r\n    else{\r\n      trial.data.trial_end = 0;\r\n      trial.data.trial_num = 0;\r\n      trial.data.num_adjustments = 0;\r\n      trial.data.round_refreshes = 1;\r\n      this.hybrid_2nd_practice = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the estimated correlation.\r\n   * If  : \r\n   *    Is the first trial, will initialize the correlation and step size.\r\n   * Else:\r\n   *    If there was a key press in previous trial, will calculate the\r\n   *    the estimated correlation (depending on whether it was an inc or dec).\r\n   *    Else if no key press in previous trial, will set estimated correlation\r\n   *    to the previous trial's. \r\n   *\r\n   * @param  trial {object}   \r\n   *         constants {object}         \r\n   *         last_trial {object}\r\n   * @return estimated_correlation {double}           \r\n   */\r\n  update_estimated_correlation(trial, constants, last_trial, block_type) {\r\n\r\n    var estimated_correlation;\r\n    var index = this.current_sub_condition_index;\r\n\r\n    // If first trial (estimated_correlation is null), so initialize\r\n    // estimated midpoint and set step size:\r\n    if (trial.data.round_refreshes == 1){\r\n  \r\n      //Initialize the estimated midpoint correlation:\r\n      //estimated_correlation = Math.random() < 0.5 ? constants.low_ref : constants.high_ref;\r\n      estimated_correlation = trial.data.start_ref;\r\n      console.log(estimated_correlation)\r\n      trial.data.estimated_mid = estimated_correlation;\r\n      trial.data.step_size = (constants.high_ref - constants.low_ref) / this.MAX_STEP_INTERVAL;\r\n\r\n    }\r\n    // If there is input on PREVIOUS trial, change the midpoint + increment trial number\r\n    // (Since we are plotting the new middle graph based on PREVIOUS input, we look\r\n    // at the last_trials's estimated_correlation and step size.)\r\n    else if (last_trial.key_press && (last_trial.key_press == trial.choices[0] || last_trial.key_press == trial.choices[1])){\r\n\r\n      // Need to check that if hits either high or low ref, it DOESN'T count as a num_adjustment\r\n      let is_unchanged = false;\r\n\r\n      switch (last_trial.key_press){\r\n\r\n        case trial.choices[0]: // up\r\n\r\n          estimated_correlation = Math.min(constants.high_ref, last_trial.estimated_mid + (Math.random() * last_trial.step_size));\r\n          \r\n          // If they've hit the max (high_ref)\r\n          if (estimated_correlation === constants.high_ref) {\r\n            is_unchanged = true;\r\n          }\r\n          break;\r\n\r\n        case trial.choices[1]: // down\r\n\r\n          estimated_correlation = Math.max(constants.low_ref, last_trial.estimated_mid - (Math.random() * last_trial.step_size));\r\n          \r\n          // If they've hit the min (low_ref)\r\n          if (estimated_correlation === constants.low_ref) {\r\n            is_unchanged = true;\r\n          }\r\n          break;\r\n      }\r\n\r\n      // For valid changes (i.e not going beyond max or below min), can then \r\n      // increment num_adjustments\r\n      if (!is_unchanged){\r\n        trial.data.num_adjustments = last_trial.num_adjustments + 1;\r\n        if(block_type === \"test\"){\r\n          this.input_count_array[trial.data.trial_num]++;\r\n        }\r\n        else{\r\n          this.practice_input_count_array[trial.data.trial_num]++;\r\n        }\r\n      }  \r\n\r\n    }\r\n\r\n    // Else use the previous trial's midpoint\r\n    else{\r\n\r\n      // QUESTION: If there is user input, on the next viz, the graph will display \r\n      // that estimated correlation. However, AFTER that, we are changing the \r\n      // estimated correlation??\r\n\r\n      // Based on StevensTrial.java (line 75), the estimated midpoint gets updated this way:\r\n      // var prev_constants = this.sub_conditions_constants[current_sub_condition_index-1];\r\n      // if (last_trial.estimated_correlation == prev_constants.high_ref){\r\n      //   estimated_midpoint = constants.low_ref;\r\n      // }\r\n      // else{\r\n      //   estimated_midpoint = constants.high_ref;\r\n      // }\r\n\r\n      estimated_correlation = last_trial.estimated_mid;\r\n    }\r\n\r\n    // Update the trial's estimated_mid\r\n    trial.data.estimated_mid = estimated_correlation;\r\n\r\n    return estimated_correlation;\r\n  }\r\n\r\n  /**\r\n   * Determines whether the round can end or not. A round can end ONLY if\r\n   * there has been at least 1 input from the user on the given round \r\n   *\r\n   * @return {boolean}            True if sub condition should end.\r\n   */\r\n  end_round() {\r\n    let last_trial = jsPsych.data.get().last(1).values()[0];\r\n    let space_bar_pressed = 32 == last_trial.key_press;\r\n    return (space_bar_pressed && last_trial.num_adjustments > 0);\r\n  }\r\n\r\n  /**\r\n   * Determines whether the current sub condition can end or not.\r\n   * \r\n   * @return {boolean}            True if sub condition should end.\r\n   */\r\n  end_sub_condition(block_type,index) {\r\n    let trials_per_round;\r\n    switch(block_type){\r\n      case \"test\":\r\n        trials_per_round = this.sub_conditions_constants[index].trials_per_round;\r\n        if (this.input_count_array[trials_per_round - 1] == 0){ \r\n          return false;\r\n        }\r\n        return true;\r\n        break;\r\n      case \"practice\":\r\n        trials_per_round = this.practice_conditions_constants[index].trials_per_round;\r\n        if (this.practice_input_count_array[trials_per_round - 1] == 0){ \r\n          return false;\r\n        }\r\n        console.log(\"RESETTING ARRAY !!!!!!!!!!\")\r\n        // Reset array\r\n        this.practice_input_count_array = new Array(this.practice_conditions_constants[index].trials_per_round).fill(0);\r\n        return true;\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * When called, will save individual trial data into a CSV.     \r\n   */\r\n  export_trial_data() {\r\n    var summary_data = [];\r\n\r\n    let screening_json = jsPsych.data.get().filter({trial_type: 'survey-html-form'}).select('responses').values[0]\r\n    // Participant information\r\n    // indexing might need to be genralized better if there are previous trials before the start of the experiment\r\n    if(screening_json){\r\n      console.log('Saving Screening')\r\n      let screening_responses = JSON.parse(screening_json)\r\n      let screening_data = {};\r\n      screening_data.education = screening_responses[2].value\r\n      screening_data.stat_classes_take = screening_responses[3].value\r\n      screening_data.vision = screening_responses[4].value\r\n      screening_data.gender = screening_responses[5].value\r\n      screening_data.age = screening_responses[6].value\r\n      summary_data.push(screening_data);\r\n    }\r\n\r\n\r\n    summary_data = summary_data.concat(this.get_summary_data())\r\n\r\n\r\n    var trial_data = jsPsych.data.get().filter(this.is_hybrid?{type: 'stevens'}:{type: 'stevens', run_type: 'test'})\r\n                                       .filterCustom(function(x){ //Don't include the exit trials\r\n                                         return x.correct != -1;\r\n                                       })\r\n                                       .filterCustom(function(x){ //Don't include trials with no user input\r\n                                        return x.rt != null;\r\n                                        })\r\n                                       .filterCustom(function(x){ //Don't include trivial trials \r\n                                        return x.trial_end != 0;\r\n                                        })\r\n                                        .filterCustom(function(x){ //Don't include trivial trials \r\n                                          return x.num_adjustments != 0;\r\n                                          })\r\n                                         // Steven's trial variables\r\n                                       .ignore('type')\r\n                                       .ignore('run_type')\r\n                                       .ignore('left_correlation')\r\n                                       .ignore('right_correlation')\r\n                                       .ignore('round_refreshes')\r\n                                       .ignore('high_ref_is_right')\r\n                                       .ignore('constants')\r\n                                       .ignore('last_stevens_trial')\r\n                                       // These are variables forced on by jsPsych\r\n                                       .ignore('stimulus')\r\n                                       .ignore('key_press')\r\n                                       .ignore('choices')\r\n                                       .ignore('trial_end')\r\n                                       .ignore('trial_type')\r\n                                       .ignore('trial_index')\r\n                                       .ignore('time_elapsed')\r\n                                       .ignore('internal_node_id');\r\n                                       \r\n\r\n    if(this.is_local_save === \"true\"){\r\n      // TEMPORARY: test file save locally \r\n      var string = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_stevens_trial_results.csv\";\r\n      trial_data.localSave('csv', string); \r\n    }\r\n    else{\r\n      trial_data = JSON.parse(trial_data.json());\r\n      var data = summary_data.concat(trial_data);\r\n      data = JSON.stringify(data);\r\n  \r\n      //Firebase upload\r\n      $.post(\"/api/experiment_data\",\r\n              {trial_data: trial_data, summary_data: summary_data, experiment: \"Stevens\", condition: params[\"condition\"], prolific_pid: params[\"subject_id\"], study_id: params[\"study_id\"], session_id: params[\"session_id\"]},\r\n              function(data, status) {\r\n                console.log(\"Data: \" + data + \"\\nStatus: \" + status)\r\n              }\r\n            );\r\n    }                                      \r\n  }\r\n\r\n  get_summary_data(){\r\n    let summary_data = []\r\n    const condition_num = this.sub_conditions_constants.length;\r\n    for (let i = 0; i<condition_num ; i++){\r\n      let summary_data_sub = this.get_summary_data_sub(i);\r\n      console.log(summary_data_sub)\r\n      summary_data.push(summary_data_sub);\r\n    }\r\n    return summary_data;\r\n  }\r\n\r\n  get_summary_data_sub(i){\r\n    var constants = this.sub_conditions_constants[i];   \r\n    var mean_estimated_mid_values = this.compute_mean(this.estimated_mid_values[i]);\r\n    console.log(this.estimated_mid_values[i])\r\n\r\n    var summary_data_sub = {\"high_ref\":constants.high_ref,\"low_ref\":constants.low_ref,\r\n                            \"estimated_midpoint\":mean_estimated_mid_values,\"trials\":constants.trials_per_round};\r\n    if(constants.block){\r\n      summary_data_sub.block = constants.block\r\n    }\r\n    return summary_data_sub;\r\n  }\r\n\r\n  /**\r\n   * When called, will save aggregated trial data into a CSV.     \r\n   */\r\n  export_summary_data() {\r\n    var is_save = confirm(\"Would you like to save the test summary?\");\r\n    if (is_save == false){\r\n        return;\r\n    }\r\n\r\n    var csv = 'SUBJECT_ID,SUBJECT_INITIALS,ROUND_TYPE,NUM_TRIALS,HIGH_REF,ESTIMATED_MIDPOINT,LOW_REF\\n';\r\n\r\n    var data = [];\r\n    \r\n    // Organize each row of the csv\r\n    for (let i = 0; i<this.sub_conditions_constants.length; i++){\r\n      var row = [];\r\n      var constants = this.sub_conditions_constants[i];\r\n      var mean_estimated_mid_values = this.compute_mean(this.estimated_mid_values[i]);\r\n\r\n      row.push(this.subject_id);\r\n      row.push(this.subject_initials);\r\n      row.push(constants.round_type);\r\n      row.push(constants.trials_per_round);\r\n      row.push(constants.high_ref);\r\n      row.push(mean_estimated_mid_values);\r\n      row.push(constants.low_ref);  \r\n\r\n      data.push(row);\r\n    }\r\n\r\n    // Append each row\r\n    data.forEach(function(row){\r\n      csv += row.join(',');\r\n      csv += \"\\n\";\r\n    });\r\n\r\n    var hiddenElement = document.createElement('a');\r\n    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\r\n    hiddenElement.target = '_blank';\r\n    hiddenElement.download = \"S\" + this.subject_id + \"_\" + this.condition_name + \"_stevens_summary_results.csv\";\r\n    hiddenElement.click();\r\n  }\r\n\r\n   /**\r\n   * Determines the mean or average of a given array input.\r\n   * \r\n   * @param {object} inputArray \r\n   * @return {integer} mean value\r\n   */\r\n  compute_mean(inputArray){\r\n    var sum = 0;\r\n    var length = inputArray.length;\r\n    for (var i = 0; i < inputArray.length; i++){\r\n      sum += inputArray[i];\r\n    }\r\n    return sum / length;\r\n  }\r\n\r\n  /**\r\n   * Returns the block type's constants.\r\n   * @param {string} block_type \r\n   * @param {int} index \r\n   * @returns \r\n   */\r\n  getConstants(block_type,index){\r\n    if(block_type === \"practice\"){\r\n      return this.practice_conditions_constants[index]\r\n    }\r\n    if(block_type === \"test\"){\r\n      return this.sub_conditions_constants[index]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {string} block_type \r\n   * @returns \r\n   */\r\n  getIndex(block_type){\r\n    if(block_type === \"practice\"){\r\n      return this.curr_practice_condition_index;\r\n    }\r\n    if(block_type === \"test\"){\r\n      return this.current_sub_condition_index;\r\n    }\r\n  }\r\n\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/stevens/stevens.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1037,
    "kind": "variable",
    "name": "ADDRESS_BASE",
    "memberof": "scripts/experiments/stevens/stevens.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens.js~ADDRESS_BASE",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1038,
    "kind": "class",
    "name": "Stevens",
    "memberof": "scripts/experiments/stevens/stevens.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens.js",
    "importStyle": "Stevens",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 1039,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#constructor",
    "access": "public",
    "description": "Initializes a Stevens experiment object. ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "{assoc array}  Parameters passed from routing."
      }
    ]
  },
  {
    "__docId__": 1040,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1041,
    "kind": "member",
    "name": "condition_group",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#condition_group",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1042,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1043,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1044,
    "kind": "member",
    "name": "estimated_mid_values",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#estimated_mid_values",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1045,
    "kind": "member",
    "name": "is_practice",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#is_practice",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1046,
    "kind": "member",
    "name": "is_screening",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#is_screening",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1047,
    "kind": "member",
    "name": "custom_subcondition_order",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#custom_subcondition_order",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1048,
    "kind": "member",
    "name": "is_hybrid",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#is_hybrid",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1049,
    "kind": "member",
    "name": "hybrid_2nd_practice",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#hybrid_2nd_practice",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1050,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1051,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1052,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1053,
    "kind": "member",
    "name": "PIXELS_PER_CM",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#PIXELS_PER_CM",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1054,
    "kind": "member",
    "name": "MAX_STEP_INTERVAL",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#MAX_STEP_INTERVAL",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 1055,
    "kind": "member",
    "name": "EXPERIMENT_NAME",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#EXPERIMENT_NAME",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1056,
    "kind": "member",
    "name": "round_end",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#round_end",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1057,
    "kind": "member",
    "name": "num_trial_complete",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#num_trial_complete",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 1058,
    "kind": "member",
    "name": "adjusted_midpoint_matrix",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#adjusted_midpoint_matrix",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1059,
    "kind": "member",
    "name": "practice_trial_data",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#practice_trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1060,
    "kind": "member",
    "name": "practice_end",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#practice_end",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1061,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1062,
    "kind": "member",
    "name": "left_coordinates",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#left_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1063,
    "kind": "member",
    "name": "right_coordinates",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#right_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1064,
    "kind": "member",
    "name": "middle_coordinates",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#middle_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1065,
    "kind": "member",
    "name": "distractor_coordinates",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#distractor_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1066,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1067,
    "kind": "member",
    "name": "raw_constants",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#raw_constants",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1068,
    "kind": "method",
    "name": "prepare_experiment",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#prepare_experiment",
    "access": "public",
    "description": "Orders the input data according to balancing type and\ninitializes the Stevens object's variables.  ",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "balancing_type",
        "description": "{string}                           Type of balancing. Currently only latin_square\n                                                          is supported.\n        dataset {[{assoc array}, {assoc array}, ... ]}   The data to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 1070,
    "kind": "member",
    "name": "sub_conditions_constants",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#sub_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1071,
    "kind": "member",
    "name": "current_sub_condition_index",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#current_sub_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 1072,
    "kind": "member",
    "name": "input_count_array",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#input_count_array",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1073,
    "kind": "method",
    "name": "prepare_practice",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#prepare_practice",
    "access": "public",
    "description": "Creates the practice dataset by taking the first FOUR subconditions.",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "{[{assoc array}, {assoc array}, ... ]}   The data to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 1074,
    "kind": "member",
    "name": "practice_conditions_constants",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#practice_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1075,
    "kind": "member",
    "name": "curr_practice_condition_index",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#curr_practice_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 1076,
    "kind": "member",
    "name": "practice_input_count_array",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#practice_input_count_array",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1077,
    "kind": "method",
    "name": "prepare_sample_trials",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#prepare_sample_trials",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1078,
    "kind": "method",
    "name": "generate_sample_trial",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#generate_sample_trial",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "params": [
      {
        "name": "mid_correlation",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1079,
    "kind": "member",
    "name": "display_mode",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#display_mode",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1080,
    "kind": "method",
    "name": "set_foundational_dataset_order",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#set_foundational_dataset_order",
    "access": "public",
    "description": "Sets the subcondition order for foundational range.\nNeeds to balance INDIVIDUALLY the round and test type conditions,\nthen maintain that order (e.g. all test goes first, then consistency)",
    "lineNumber": 286,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "{[{assoc array}, {assoc array}, ... ]}   The data used to be ordered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 1082,
    "kind": "method",
    "name": "end_practice_experiment",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#end_practice_experiment",
    "access": "public",
    "description": "Resets all relevant variables to now use the test version.\n(input_count_array, sub_conditions_constants, and current_sub_condition_index\nare shared variables between the practice and test trials).\n\nThis function is called once all the practice trials have run. ",
    "lineNumber": 339,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1085,
    "kind": "method",
    "name": "calculate_exclusion_criteria",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#calculate_exclusion_criteria",
    "access": "public",
    "description": "Calculates exclusion criteria using standard deviation and variance.\nSubcondition is flagged if:\n- Standard deviation > 0.2\n- Anchoring > 0.6\n\n@ return     HTML of subcondition data to print onto screen",
    "lineNumber": 353,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1086,
    "kind": "method",
    "name": "calculate_exclusion_criteria_for_subcondition",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#calculate_exclusion_criteria_for_subcondition",
    "access": "public",
    "description": null,
    "lineNumber": 374,
    "undocument": true,
    "params": [
      {
        "name": "subcondition_data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1087,
    "kind": "method",
    "name": "get_standard_deviation",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#get_standard_deviation",
    "access": "public",
    "description": "Calculates the standard deviation for the specified subcondition.\n@ param  {array}   array of estimated mids for that trial\n\n@ return {double}  standard deviation",
    "lineNumber": 419,
    "params": [
      {
        "name": "estimated_mids",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1088,
    "kind": "method",
    "name": "get_anchoring_value",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#get_anchoring_value",
    "access": "public",
    "description": "Calculates the anchoring value for the specified subcondition.\n@ param  {array}   array of estimated mids for that trial\n\n@ return {double} anchoring value",
    "lineNumber": 446,
    "params": [
      {
        "name": "estimated_mids",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1089,
    "kind": "method",
    "name": "get_estimated_mids",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#get_estimated_mids",
    "access": "public",
    "description": "Retrieves the estimated midpoints of each trial for the subcondition.\n\n@ return {array}  of estimated mids ",
    "lineNumber": 469,
    "params": [
      {
        "name": "subcondition_data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1090,
    "kind": "method",
    "name": "generate_trial",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#generate_trial",
    "access": "public",
    "description": "Generates a Stevens object for use in the JsPsych timeline.",
    "lineNumber": 486,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "{string}                             \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "trial {object}"
    }
  },
  {
    "__docId__": 1091,
    "kind": "method",
    "name": "genereate_hybrid_instruction",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#genereate_hybrid_instruction",
    "access": "public",
    "description": "Generates conditional timeline instruction for JND and Stevens hybrid conditions.",
    "lineNumber": 591,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych trial}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1092,
    "kind": "method",
    "name": "generate_distractor_coordinates",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#generate_distractor_coordinates",
    "access": "public",
    "description": "Will generate the distractor coordinates and save them to the instance.",
    "lineNumber": 642,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": "(for the given trial)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1094,
    "kind": "method",
    "name": "get_last_trial",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#get_last_trial",
    "access": "public",
    "description": "Retrieves the last stevens trial depending on block_type for a\ngiven sub condition index. \nIf this is the first trial of a given block_type, returns null. ",
    "lineNumber": 661,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}   \n        block_type {string}          \"test\" or \"practice\"         \n        index {integer}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "last_stevens_trial {object}"
    }
  },
  {
    "__docId__": 1095,
    "kind": "method",
    "name": "handle_data_saving",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#handle_data_saving",
    "access": "public",
    "description": "Handles saving the relevant data on a given trial.\n\nFor reference, these are the helper variables created to assist in trial logic (i.e not present in excel)\nthis.trial_variables =         \n      {type: 'stevens',\n      run_type: '',\n      left_correlation: '',\n      right_correlation: '',\n      round_refreshes: 0,      // Number of times there is a refresh for a given round \n      high_ref_is_right: false\n      start_ref: ''\n      };\n\nThese are variables created WITHIN the trial logic that were not present in excel (but need to be\noutputted to results).         \nthis.export_variables = \n      {trial_num: 0,                // Round index trial is currently on (aka trial_num from excel)\n       sub_condition: '',           // Chronological ordering of sub_condition [1, 2, 3 ... ]\n       balanced_sub_condition: '',  // Index of sub_condition according to balancing order\n       estimated_mid: '',\n       num_adjustments: 0,          // Number of inputs for a given round (aka num_adjustments from excel)\n       trials_per_round: '',\n      };",
    "lineNumber": 722,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}\n       block_type {string}               \"test\" or \"practice\"\n       constants {assoc array}\n       estimated_correlation {double}\n       last_stevens_trial {object}\n       index {integer}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1098,
    "kind": "method",
    "name": "update_estimated_correlation",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#update_estimated_correlation",
    "access": "public",
    "description": "Updates the estimated correlation.\nIf  : \n   Is the first trial, will initialize the correlation and step size.\nElse:\n   If there was a key press in previous trial, will calculate the\n   the estimated correlation (depending on whether it was an inc or dec).\n   Else if no key press in previous trial, will set estimated correlation\n   to the previous trial's. ",
    "lineNumber": 788,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": "{object}   \n        constants {object}         \n        last_trial {object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "estimated_correlation {double}"
    }
  },
  {
    "__docId__": 1099,
    "kind": "method",
    "name": "end_round",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#end_round",
    "access": "public",
    "description": "Determines whether the round can end or not. A round can end ONLY if\nthere has been at least 1 input from the user on the given round ",
    "lineNumber": 881,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition should end."
    },
    "params": []
  },
  {
    "__docId__": 1100,
    "kind": "method",
    "name": "end_sub_condition",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#end_sub_condition",
    "access": "public",
    "description": "Determines whether the current sub condition can end or not.",
    "lineNumber": 892,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition should end."
    },
    "params": [
      {
        "name": "block_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 1102,
    "kind": "method",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#export_trial_data",
    "access": "public",
    "description": "When called, will save individual trial data into a CSV.     ",
    "lineNumber": 919,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1103,
    "kind": "method",
    "name": "get_summary_data",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#get_summary_data",
    "access": "public",
    "description": null,
    "lineNumber": 994,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1104,
    "kind": "method",
    "name": "get_summary_data_sub",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#get_summary_data_sub",
    "access": "public",
    "description": null,
    "lineNumber": 1005,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1105,
    "kind": "method",
    "name": "export_summary_data",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#export_summary_data",
    "access": "public",
    "description": "When called, will save aggregated trial data into a CSV.     ",
    "lineNumber": 1021,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1106,
    "kind": "method",
    "name": "compute_mean",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#compute_mean",
    "access": "public",
    "description": "Determines the mean or average of a given array input.",
    "lineNumber": 1067,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "inputArray",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": "mean value"
    }
  },
  {
    "__docId__": 1107,
    "kind": "method",
    "name": "getConstants",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#getConstants",
    "access": "public",
    "description": "Returns the block type's constants.",
    "lineNumber": 1082,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1108,
    "kind": "method",
    "name": "getIndex",
    "memberof": "scripts/experiments/stevens/stevens.js~Stevens",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/stevens/stevens.js~Stevens#getIndex",
    "access": "public",
    "description": "",
    "lineNumber": 1096,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1109,
    "kind": "file",
    "name": "scripts/experiments/stevens/stevens_timeline.js",
    "content": "import JND from \"/scripts/experiments/jnd/jnd.js\";\r\nimport Stevens from \"/scripts/experiments/stevens/stevens.js\";\r\nimport { get_instructions, get_jspsych_instructions } from \"/scripts/experiment-properties/instructions/instructions_controller.js\";\r\nimport { resolution_scaling } from \"/scripts/experiment-timeline/resolution_scaling/resolution_scaling.js\";\r\nimport * as screening from '/scripts/experiment-timeline/screening/screening.js';\r\n\r\nexport var jnd_exp_hybrid;\r\nexport var stevens_exp  = new Stevens(params);\r\nif (params[\"condition\"]=='test_hybrid_scatter') {\r\n  jnd_exp_hybrid = new JND(params);\r\n}\r\nconsole.log('stevens_exp', stevens_exp)\r\n\r\nvar timeline = [];\r\nvar address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\nconst isPractice = stevens_exp.is_practice; \r\nconst isScreening = stevens_exp.is_screening;\r\n// =========================================================\r\n// WELCOME TRIAL BLOCK\r\n\r\nvar welcome = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: `<div align = \"center\">` + `<img src=\"${address}/img/VCL_lab_logo.png\"></img><br><br>` +\r\n    `<b>Base:</b> stevens` + '<br>' +\r\n    `<b>Trial Type:</b> ${stevens_exp.trial_structure}` + '<br>' +\r\n    `<b>Graph Type:</b> ${stevens_exp.graph_type}` + '<br>' +\r\n    `<b>Condition:</b> ${stevens_exp.condition_name}` +\r\n    '<br><br><br><p><font size = 15>Press any key to begin.<p></font>' +\r\n    '</div>',\r\n  data: { type: 'instruction' }\r\n};\r\ntimeline.push(welcome);\r\n\r\n// =========================================================\r\n// RESOLUTION SCALING\r\n\r\ntimeline.push(resolution_scaling);\r\n\r\n\r\n// CONDITIONAL: SKIP SCREENING IF FALSE\r\nif (isScreening == \"true\") {\r\n  // =========================================================\r\n  // SCREENING\r\n  timeline.push(\r\n    screening.screeningQuestions,\r\n    // screening.screeningInstructions,\r\n    // screening.screeningCorrelationSort,\r\n    // screening.screeningCorrelationSelect,\r\n    // screening.instructionsRegression,\r\n    // screening.screeningRegressionSelect\r\n  );\r\n  }\r\n\r\n// =========================================================\r\n// INSTRUCTION TRIAL BLOCKS\r\n\r\nvar ready = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: \"<div align = 'center'> <font size = 20><p>Ready? We will first do some practice trials. <p>\" + \"<br> <br> <p><b>Press any key to begin.</b></p></font></div>\",\r\n  data: { type: 'instruction' }\r\n}\r\n\r\n// var instructions = {\r\n//   type: \"html-keyboard-response\",\r\n//   stimulus: function () {\r\n//     return get_instructions(stevens_exp);\r\n//   }\r\n// };\r\n\r\nlet instructions = get_jspsych_instructions(stevens_exp);\r\n\r\n// CONDITIONAL: different timelines\r\nvar instruction_trials;\r\nif (isPractice == \"true\") {\r\n  instruction_trials = {\r\n    timeline: [instructions, ready]\r\n  };\r\n} else {\r\n  instruction_trials = {\r\n    timeline: [instructions]\r\n  };\r\n}\r\n\r\ntimeline.push(instruction_trials);\r\n\r\n// =========================================================\r\n// PRACTICE TRIAL BLOCKS\r\n\r\n// ---------------------------------------------------------\r\n// PRACTICE TIMELINE\r\n\r\nif(isPractice == \"true\") {\r\n  var practice_trial = stevens_exp.generate_trial(\"practice\");\r\n\r\n  var practice = {\r\n    timeline: [practice_trial],\r\n    loop_function: function(data) { \r\n      // For debugging, if you want to exit out of experiment, press q:\r\n      if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press) {\r\n        stevens_exp.end_practice_experiment();\r\n        stevens_exp.round_end = false;\r\n        console.log(\"!!!!!!!!!! Practice trials finished \");\r\n        return false;\r\n      }\r\n    \r\n      // If spacebar is pressed and we can end the round (there was at least 1 input)\r\n      if (stevens_exp.end_round()) {\r\n    \r\n        // Save the midpoint for exclusion criteria calculations later\r\n        let curr_index = stevens_exp.curr_practice_condition_index;\r\n        stevens_exp.practice_trial_data[curr_index].push(stevens_exp.trial_data);\r\n        console.log(\"!!!!!!!!!!!!!!PRACTICE TRIAL DATA\")\r\n        console.log(stevens_exp.practice_trial_data[curr_index])\r\n    \r\n        // If there are still more rounds for this sub condition\r\n        if (!stevens_exp.end_sub_condition(\"practice\",curr_index)) {\r\n          console.log(\"!!!!!!!! GO TO NEXT ROUND \");\r\n          stevens_exp.round_end = true;\r\n          return true;\r\n        }\r\n        // If there are still more subconditions, increment current index\r\n        else if (stevens_exp.curr_practice_condition_index < (stevens_exp.practice_conditions_constants.length - 1)) {\r\n          stevens_exp.curr_practice_condition_index++;\r\n          console.log(\"!!!!!!!!!! Moved to new sub condition at index \" + stevens_exp.curr_practice_condition_index);\r\n          return false;\r\n        }\r\n        // Else end experiment\r\n        else {\r\n          console.log(\"!!!!!!!!!! Practice trials finished \");\r\n          stevens_exp.end_practice_experiment();\r\n          stevens_exp.round_end = false;\r\n    \r\n          return false;\r\n        }\r\n      }\r\n      // Else continue w/ current subcondition:\r\n      else {\r\n        return true;\r\n      }\r\n    \r\n    } \r\n  };\r\n  timeline.push(practice);\r\n\r\n}\r\n\r\n// additional practice for hybrid experiments\r\nif (params[\"condition\"]=='test_hybrid_scatter') {\r\n  jnd_exp_hybrid.is_hybrid = true;\r\n  var jnd_practice_trial = jnd_exp_hybrid.generate_trial(\"practice\");\r\n  var feedback = {\r\n    type: 'html-keyboard-response',\r\n    choices: ['q', 32],\r\n    post_trial_gap: 300,\r\n    // trial_duration: 500,\r\n    data: { type: 'feedback' },\r\n    stimulus: function () {\r\n  \r\n      document.body.style.backgroundColor = jnd_exp_hybrid.trial_data.feedback_background_color;\r\n  \r\n      var last_trial = JSON.parse(jsPsych.data.getLastTrialData().json());\r\n      var last_trial_correct = last_trial[0][\"correct\"];\r\n  \r\n      // For debugging purposes:\r\n      if (last_trial_correct == -1) {\r\n        return '<p>' +\r\n          '<font style=\"font-size:50px; color:blue\">Exiting from experiment.<p></font>'\r\n      }\r\n  \r\n      else if (last_trial_correct) {\r\n        return `<div align = \"center\">\r\n                <p>\r\n                  <i class=\"fa fa-check-circle\" style=\"font-size:50px; color:green; margin-right: 10px;\"></i> \r\n                  <font style=\"font-size:50px; color:green\">\r\n                  Correct!\r\n                  </font>\r\n                <p>\r\n                <br>\r\n                Press spacebar to continue.\r\n                </div>`\r\n      }\r\n      else {\r\n        return `<div align = \"center\">\r\n                <p>\r\n                  <i class=\"fa fa-close\" style=\"font-size:50px; color:red; margin-right: 10px;\"></i>\r\n                  <font style=\"font-size:50px; color:red;\"\">\r\n                  Incorrect!\r\n                  </font>\r\n                <p>\r\n                <br>\r\n                Press spacebar to continue.\r\n                </div>`\r\n      }\r\n    }\r\n  };\r\n  var jnd_practice = {\r\n    timeline: [jnd_practice_trial,feedback],\r\n    loop_function: function (data) { // Return true if timeline should continue\r\n      // Return false if timeline should end\r\n    \r\n      // Flag is always true for each trial since we display one trial for \r\n      // each condition on the practice                           \r\n      jnd_exp_hybrid.first_trial_of_sub_condition = true;\r\n    \r\n      let key_presses = [];\r\n      data.values().forEach(function (elem) {\r\n        key_presses.push(elem.key_press);\r\n      });\r\n    \r\n      // For debugging, if you want to exit out of experiment, press q:\r\n      if (key_presses.includes(jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q'))) {\r\n        // Turn flag on \r\n        jnd_exp_hybrid.first_trial_of_sub_condition = true;\r\n        stevens_exp.prepare_practice();\r\n        stevens_exp.hybrid_2nd_practice = true;\r\n        return false;\r\n      }\r\n    \r\n      // If there are still more practice conditions, increment current index\r\n      if (jnd_exp_hybrid.current_practice_condition_index < (jnd_exp_hybrid.practice_conditions_constants.length - 1)) {\r\n        jnd_exp_hybrid.current_practice_condition_index++;\r\n        console.log(\"!!!!!!!!!! Moved to new practice condition at index \"\r\n          + jnd_exp_hybrid.current_practice_condition_index);\r\n        return true;\r\n      }\r\n      // Else end experiment\r\n      else {\r\n        // Turn flag on \r\n        jnd_exp_hybrid.first_trial_of_sub_condition = true;\r\n        stevens_exp.prepare_practice();\r\n        stevens_exp.hybrid_2nd_practice = true;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  var second_stevens_practice = {\r\n    timeline: [practice_trial],\r\n    loop_function: stevens_practice_loop_funtion\r\n  }\r\n  timeline.push(jnd_practice);\r\n  timeline.push(second_stevens_practice);\r\n}\r\n\r\n// ---------------------------------------------------------\r\n// STOP BLOCK\r\n\r\nvar stop = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: function() {\r\n    let range = stevens_exp.calculate_exclusion_criteria();\r\n\r\n    let results = `<div align = \"center\" style = \"text-align: left; float:left;\"> <font size = 6>\r\n                  Range: ${range}\r\n                  <br>\r\n                  </font>\r\n                  </div>`\r\n\r\n    return \"<div align = 'center'>\" + results + \"</div>\" + \r\n    \"<div align = 'center'> <font size = 6><br><br><p> This concludes the practice trials.</p>\" +\r\n      \"<br><br><p><b>Any questions?</b></p></font></div>\";\r\n  },\r\n  data: { type: 'instruction' },\r\n  on_start: function (stop) {\r\n    // Reset background color to feedback\r\n    document.body.style.backgroundColor = 'WHITE';\r\n  }\r\n}\r\n\r\nvar ready_experiment = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: \"<div align = 'center'> <font size = 20><p>Ready?<p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\r\n  data: { type: 'instruction' }\r\n}\r\n\r\nvar stop_trials;\r\nif (isPractice == \"true\") {\r\n  stop_trials = {\r\n    timeline: [stop, ready_experiment]\r\n  };\r\n} else {\r\n  stop_trials = {\r\n    timeline: [ready_experiment]\r\n  }\r\n}\r\n\r\ntimeline.push(stop_trials);\r\n\r\n\r\n// =========================================================\r\n// EXPERIMENT TRIAL BLOCKS\r\n\r\nvar trial = stevens_exp.generate_trial(\"test\");\r\n\r\nlet hybrid_instruction = stevens_exp.genereate_hybrid_instruction();\r\n \r\n\r\nvar experiment = {\r\n  timeline: [trial],\r\n  loop_function: function (data) { // Return true if timeline should continue\r\n    // Return false if timeline should end\r\n    if(stevens_exp.end_experiment == true){\r\n      return false\r\n    }\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press) {\r\n      return false;\r\n    }\r\n    let curr_index = stevens_exp.current_sub_condition_index;\r\n    // If spacebar is pressed and we can end the round (there was at least 1 input)\r\n    console.log(\"End Round? \", stevens_exp.end_round())\r\n    if (stevens_exp.end_round()) {\r\n      // Save the midpoint data\r\n      console.log(stevens_exp.estimated_mid_values)\r\n      stevens_exp.estimated_mid_values[curr_index].push(stevens_exp.trial_data.estimated_mid)\r\n      // If it is also the end of the subcondition move on to the next subcconditon \r\n      // or end the experiment if no more subconditions are left\r\n      if(stevens_exp.end_sub_condition(\"test\",curr_index)){\r\n        console.log(\"Is end of subconditon\")\r\n        if (stevens_exp.current_sub_condition_index < (stevens_exp.sub_conditions_constants.length - 1)) {\r\n          stevens_exp.input_count_array = new Array(stevens_exp.sub_conditions_constants[stevens_exp.current_sub_condition_index].trials_per_round).fill(0);\r\n  \r\n          stevens_exp.current_sub_condition_index++;\r\n          console.log(\"!!!!!!!!!! Moved to new sub condition at index \" + stevens_exp.current_sub_condition_index);\r\n          return true;\r\n        }\r\n        else{\r\n          return false;\r\n        }\r\n      }\r\n      else{\r\n        console.log(\"!!!!!!!! GO TO NEXT ROUND \");\r\n        stevens_exp.round_end = true;\r\n        return true;\r\n      }\r\n    }\r\n    // Else continue with current Round:\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n\r\ntimeline.push(experiment);\r\n\r\n\r\n// =========================================================\r\n// DATA DOWNLOADING \r\n\r\nvar experiment_end = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: '<div align = \"center\">' +\r\n    '<p><font size = 10>You have completed the experiment!<p></font>' +\r\n    '</div>',\r\n  on_start: function () {\r\n\r\n    stevens_exp.export_trial_data();\r\n    //stevens_exp.export_summary_data();\r\n\r\n    // Reset background color to feedback\r\n    document.body.style.backgroundColor = stevens_exp.trial_data.feedback_background_color; \r\n    // document.body.style.backgroundColor = 'WHITE';\r\n  }\r\n};\r\ntimeline.push(experiment_end);\r\n\r\n// =========================================================\r\n// START JSPSYCH\r\n\r\njsPsych.init({\r\n  timeline: timeline,\r\n  on_finish: function () {\r\n    jsPsych.data.displayData();\r\n    //window.location.replace(\"https://app.prolific.co/submissions/complete?cc=702E33AF\");\r\n  }\r\n});\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/stevens/stevens_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1110,
    "kind": "variable",
    "name": "stevens_exp",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~stevens_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": "{stevens_exp}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/stevens/stevens.js~Stevens"
      ]
    }
  },
  {
    "__docId__": 1111,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1112,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1113,
    "kind": "variable",
    "name": "isPractice",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~isPractice",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1114,
    "kind": "variable",
    "name": "isScreening",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~isScreening",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1115,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1116,
    "kind": "variable",
    "name": "ready",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~ready",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1117,
    "kind": "variable",
    "name": "instructions",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1118,
    "kind": "variable",
    "name": "stop",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~stop",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1119,
    "kind": "variable",
    "name": "ready_experiment",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~ready_experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1120,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1121,
    "kind": "variable",
    "name": "hybrid_instruction",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~hybrid_instruction",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1122,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1123,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/stevens/stevens_timeline.js",
    "static": true,
    "longname": "scripts/experiments/stevens/stevens_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/stevens/stevens_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1124,
    "kind": "file",
    "name": "scripts/experiments/visual_search/visual_search.js",
    "content": "export {hex_to_color, get_color_paths};\r\n\r\nvar ADDRESS = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\nconst DIMENSIONS = [\"LUM\", \"CHR\", \"HUE\"];\r\nconst OPPOSITE_COLORS = {\"BLUE\":\"YELLOW\", \"YELLOW\":\"BLUE\", \"GREEN\":\"RED\", \"RED\":\"GREEN\"};\r\nconst HEX_TO_COLOR = {\"007ebc\":\"BLUE\", \"20874a\":\"GREEN\", \"cd4c32\":\"RED\", \"dbc667\":\"YELLOW\"};\r\nconst DISTANCES = [\"-2\", \"-1\", \"+1\", \"+2\"];\r\nconst COLORS = [\"BLUE\", \"GREEN\", \"RED\", \"YELLOW\"];\r\n\r\n/*\r\n * Maps input hex to a color string\r\n * @ param color_hex       {string} \"0007ebc\" etc\r\n * @return                 {string} \"BLUE\"\r\n*/ \r\nfunction hex_to_color(color_hex) {\r\n    // if (!HEX_TO_COLOR.includes(color_hex)) {\r\n    //     throw Error(color + \" is not supported.\");\r\n    // }\r\n    return HEX_TO_COLOR[color_hex];\r\n}\r\n\r\n/* Constructs all possible color paths for a given color.\r\n * Should give 13 (1 opposite + 12 on same color gradient)\r\n *  \r\n * @ param color            {string} \"BLUE\", \"GREEN\", \"RED\", \"YELLOW\"\r\n *\r\n * @ return                 [string, string...]  array containing paths to each color\r\n */\r\nfunction get_color_paths(color) {\r\n    let color_paths = [];\r\n\r\n    if (!COLORS.includes(color)){\r\n        throw Error(color + \" is not supported.\");\r\n    } \r\n\r\n    // Get opposite color w/ same dimension\r\n    color_paths.push(get_opposite_target(color, \"CHR\")); // Force CHR, all target hex same anyway\r\n\r\n    // Get the other colors\r\n    for (let distance of DISTANCES){\r\n      for (let dimension of DIMENSIONS) {\r\n        let distractor_path = construct_path(color, dimension, distance);\r\n        color_paths.push(distractor_path);\r\n      }\r\n    }  \r\n\r\n    return color_paths;\r\n}\r\n\r\n/* Constructs path of opposite color but same dimension.\r\n *  \r\n * @ param color            {string} \"BLUE\", \"GREEN\", \"RED\", \"YELLOW\"\r\n * @ param dimension        {string} \"LUM\", \"CHR\", \"HUE\"\r\n *\r\n * @ return                 {string}  path to opposite color of same dimension\r\n */\r\nfunction get_opposite_target(color, dimension){\r\n\r\n    let opposite_color = OPPOSITE_COLORS[color];\r\n\r\n    return construct_path(opposite_color, dimension, null);\r\n}\r\n\r\n/* Constructs path to the svg.\r\n *  \r\n * @ param color            {string} \"BLUE\", \"GREEN\", \"RED\", \"YELLOW\"\r\n * @ param dimension        {string} \"LUM\", \"CHR\", \"HUE\"\r\n * @ param distance         {string} \"-2\", \"-1\", \"+1\", \"+2\"\r\n *\r\n * @ return                 {string}  path to the svg\r\n */\r\nfunction construct_path(color, dimension, distance) {\r\n    let path = ADDRESS + \"/img/instructions/visual_search/distractor_stimuli/\" + color + \"/\" + color + \"_\" + dimension;\r\n    if (distance){\r\n        return path + distance + \".svg\";\r\n    }\r\n    return path + \".svg\";\r\n}\r\n\r\n/* Constructs name of the color.\r\n *  \r\n * @ param color            {string} \"BLUE\", \"GREEN\", \"RED\", \"YELLOW\"\r\n * @ param dimension        {string} \"LUM\", \"CHR\", \"HUE\"\r\n * @ param distance         {string} \"-2\", \"-1\", \"+1\", \"+2\"\r\n *\r\n * @ return                 {string} Name of the color\r\n */\r\nfunction construct_name(color, dimension, distance){\r\n\r\n    let name = color + \"_\" + dimension;\r\n\r\n    if (distance){\r\n        return name + distance;\r\n    }\r\n    \r\n    return name;\r\n}",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/visual_search/visual_search.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1125,
    "kind": "variable",
    "name": "ADDRESS",
    "memberof": "scripts/experiments/visual_search/visual_search.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search.js~ADDRESS",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1126,
    "kind": "variable",
    "name": "DIMENSIONS",
    "memberof": "scripts/experiments/visual_search/visual_search.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search.js~DIMENSIONS",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1127,
    "kind": "variable",
    "name": "OPPOSITE_COLORS",
    "memberof": "scripts/experiments/visual_search/visual_search.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search.js~OPPOSITE_COLORS",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{\"BLUE\": string, \"YELLOW\": string, \"GREEN\": string, \"RED\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1128,
    "kind": "variable",
    "name": "HEX_TO_COLOR",
    "memberof": "scripts/experiments/visual_search/visual_search.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search.js~HEX_TO_COLOR",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"007ebc\": string, \"20874a\": string, \"cd4c32\": string, \"dbc667\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1129,
    "kind": "variable",
    "name": "DISTANCES",
    "memberof": "scripts/experiments/visual_search/visual_search.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search.js~DISTANCES",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1130,
    "kind": "variable",
    "name": "COLORS",
    "memberof": "scripts/experiments/visual_search/visual_search.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search.js~COLORS",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1131,
    "kind": "function",
    "name": "get_opposite_target",
    "memberof": "scripts/experiments/visual_search/visual_search.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search.js~get_opposite_target",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "dimension",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1132,
    "kind": "function",
    "name": "construct_path",
    "memberof": "scripts/experiments/visual_search/visual_search.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search.js~construct_path",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "dimension",
        "types": [
          "*"
        ]
      },
      {
        "name": "distance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1133,
    "kind": "function",
    "name": "construct_name",
    "memberof": "scripts/experiments/visual_search/visual_search.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search.js~construct_name",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "dimension",
        "types": [
          "*"
        ]
      },
      {
        "name": "distance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1134,
    "kind": "function",
    "name": "hex_to_color",
    "memberof": "scripts/experiments/visual_search/visual_search.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search.js~hex_to_color",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search.js",
    "importStyle": "{hex_to_color}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "color_hex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1135,
    "kind": "function",
    "name": "get_color_paths",
    "memberof": "scripts/experiments/visual_search/visual_search.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search.js~get_color_paths",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search.js",
    "importStyle": "{get_color_paths}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1136,
    "kind": "file",
    "name": "scripts/experiments/visual_search/visual_search_timeline.js",
    "content": "import { generateRandomDistribution } from \"/scripts/experiment-properties/distribution/random_distribution_generator.js\";\r\nimport { balance_subconditions } from \"/scripts/experiment-properties/balancing/balancing_controller.js\";\r\nimport { get_data } from \"/scripts/experiment-properties/data/data_controller.js\";\r\nimport { get_color_paths, hex_to_color } from \"/scripts/experiments/visual_search/visual_search.js\";\r\nimport { scaling_input } from \"/scripts/experiment-properties/resolution_scaling/resolution_scaling.js\";\r\n\r\n//=============================================\r\n// EXPERIMENT CONSTRUCTOR\r\nclass Visual_Search {\r\n  /**\r\n   * Initializes a Visual_Search experiment object.\r\n   *\r\n   * @param  params          {object}    Parameters passed in from routing\r\n   */\r\n  constructor(params) {\r\n    let trial_structure = params[\"trial_structure\"];\r\n    let condition_name = params[\"condition\"];\r\n    let graph_type = params[\"graph_type\"];\r\n    let balancing_type = params[\"balancing\"];\r\n    this.condition_name = condition_name;\r\n    this.condition_group = this.condition_name.split('_')[0];\r\n\r\n    // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\r\n    if (!EXPERIMENTS[\"visual_search\"][\"trial_structure\"].includes(trial_structure)) {\r\n      throw Error(trial_structure + \" is not supported.\");\r\n    }\r\n    else {\r\n      this.trial_structure = trial_structure;\r\n    }\r\n\r\n    if (!EXPERIMENTS[\"visual_search\"][\"graph_type\"].includes(graph_type)) {\r\n      throw Error(graph_type + \" is not supported.\")\r\n    }\r\n    else {\r\n      this.graph_type = graph_type;\r\n    };\r\n\r\n    if (!EXPERIMENTS[\"visual_search\"][\"balancing_type\"].includes(balancing_type)) {\r\n      throw Error(balancing_type + \" is not supported.\")\r\n    }\r\n    else {\r\n      this.balancing_type = balancing_type;\r\n    }\r\n\r\n    this.condition_name = condition_name;\r\n    this.subject_id = params[\"subject_id\"];\r\n    this.subject_initials = params[\"subject_initials\"];\r\n\r\n    // ========================================\r\n    // EXPERIMENT VARIABLES \r\n    this.raw_sub_conds; // subconditions in visual_search_data.js\r\n    this.target_color = \"#dbc667\";\r\n\r\n    // ========================================\r\n    // TEST EXPERIMENT VARIABLES\r\n    this.sub_condition_order;\r\n    this.experiment_conditions_constants = [];\r\n    this.current_sub_condition_index;\r\n\r\n    /// ========================================\r\n    // CURRENT TRIAL DATA\r\n\r\n    // Plotting-related vars\r\n    this.target_coordinates = \"\";\r\n    this.distractor_coordinates = \"\";\r\n\r\n    // JsPsych trial_data for the current trial\r\n    this.trial_data = \"\";\r\n    // ========================================\r\n    // PREPARE EXPERIMENT\r\n\r\n    // Extract raw constants\r\n    this.raw_sub_conds = get_data(this);\r\n    // Prepare experiment\r\n    let dataset = this.raw_sub_conds;\r\n\r\n    this.sub_condition_order = balance_subconditions(this.balancing_type, this.constructor.name.toLowerCase(), dataset.length);\r\n\r\n    let ordered_dataset = [];\r\n    // Order the data set according to the randomly ordered array\r\n    for (let i = 0; i < this.sub_condition_order.length; i++) {\r\n      ordered_dataset[i] = dataset[this.sub_condition_order[i]];\r\n    }\r\n    // Set experiment trials\r\n    this.experiment_conditions_constants = ordered_dataset;\r\n    this.current_sub_condition_index = 0;\r\n  }\r\n}\r\n\r\n\r\n\r\n//================================================\r\n// TIMELINE\r\n\r\nimport { get_instructions } from \"/scripts/experiment-properties/instructions/instructions_controller.js\";\r\nexport var visual_search_exp = new Visual_Search(params);\r\n\r\nvar timeline = [];\r\nvar address = location.protocol + \"//\" + location.hostname + \":\" + location.port;\r\n\r\n// Firefox check for formatting\r\nif (typeof InstallTrigger !== 'undefined') {\r\n  var isFirefox = true;\r\n} else {\r\n  var isFirefox = false;\r\n}\r\n\r\n// =========================================================\r\n// WELCOME TRIAL BLOCK\r\n\r\nlet welcome = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: '<div align = \"center\">' + `<img src=\"${address}/img/VCL_lab_logo.png\"></img> <br>` +\r\n    'Welcome to the <b>Visual Search Task</b> Experiment.' +\r\n    '<br><br><p><font size = 15>Press any key to begin.<p></font>' +\r\n    '</div>',\r\n  data: { type: 'instruction' }\r\n};\r\ntimeline.push(welcome);\r\n\r\n// =========================================================\r\n// RESOLUTION SCALING\r\ntimeline.push(scaling_input);\r\n\r\n// =========================================================\r\n// INSTRUCTION TRIAL BLOCKS\r\nvar instructions = {\r\n  type: \"html-keyboard-response\",\r\n  stimulus: function () {\r\n    return get_instructions(visual_search_exp);\r\n  }\r\n};\r\n\r\ntimeline.push(instructions);\r\n\r\nlet ready = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: \"<div align = 'center'> <font size = 20><p>Ready? We will now begin the experiment. <p>\" + \"<br><br><p><b>Press any key to begin.</b></p></font></div>\",\r\n  data: { type: 'instruction' }\r\n}\r\ntimeline.push(ready);\r\n\r\n\r\n// =====================================================================\r\n// FIXATION\r\n\r\nlet fixation = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: '<div style=\"font-size:60px;\">+</div>',\r\n  choices: jsPsych.NO_KEYS,\r\n  trial_duration: 1000,\r\n  data: { type: 'fixation' }\r\n};\r\n\r\n// =====================================================================\r\n// STIMULUS\r\n\r\nvar trial = {\r\n  type: 'external-html-keyboard-response',\r\n  url: address + \"/visual_search_trial\",\r\n  choices: ['z', 'm', 'q'],\r\n  execute_script: true,\r\n  on_start: function (trial) { // NOTE: on_start takes in trial var\r\n    var index = visual_search_exp.current_sub_condition_index;\r\n    var constants = visual_search_exp.experiment_conditions_constants[index];\r\n\r\n    trial.data = constants;\r\n    handle_data_saving(trial, \"test\", constants, index);\r\n\r\n    var base_coordinates = generateRandomDistribution(constants.row, constants.col, constants.num_points, null);\r\n\r\n    visual_search_exp.coordinates = [base_coordinates];\r\n    visual_search_exp.trial_data = trial.data;\r\n  },\r\n  on_finish: function (data) {\r\n    var index = visual_search_exp.current_sub_condition_index;\r\n    var constants = visual_search_exp.experiment_conditions_constants[index];\r\n    if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('z') && constants.target_present) {\r\n      data.correct = true;\r\n    } else if (data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode('m') && !constants.target_present) {\r\n      data.correct = true;\r\n    } else {\r\n      data.correct = false;\r\n    }\r\n  }\r\n};\r\n\r\n// ========================================================\r\n// FEEDBACK\r\n\r\nvar feedback = {\r\n  type: 'html-keyboard-response',\r\n  trial_duration: null,\r\n  response_ends_trial: true,\r\n  data: { type: 'feedback' },\r\n  stimulus: function () {\r\n\r\n    var last_trial = JSON.parse(jsPsych.data.getLastTrialData().json());\r\n    var last_trial_correct = last_trial[0][\"correct\"];\r\n\r\n    // For debugging purposes:\r\n    if (last_trial_correct == -1) {\r\n      return '<p>' +\r\n        '<font style=\"font-size:50px; color:blue\">Exiting from experiment.<p></font>'\r\n    }\r\n\r\n    else if (last_trial_correct) {\r\n      return '<p><i class=\"fa fa-check-circle\" style=\"font-size:50px; color:green; margin-right: 10px;\"></i>' +\r\n        '<font style=\"font-size:50px; color:green\">Correct!<p></font>'\r\n    }\r\n    else {\r\n      return '<p><i class=\"fa fa-close\" style=\"font-size:50px; color:red; margin-right: 10px;\"></i>' +\r\n        '<font style=\"font-size:50px; color:red;\"\">Incorrect!<p></font>'\r\n    }\r\n  }\r\n};\r\n\r\n// =========================================================\r\n// EXPERIMENT TRIAL BLOCKS\r\n\r\nvar experiment = {\r\n  timeline: [fixation, trial, feedback],\r\n  loop_function: function (data) { // Return true if timeline should continue\r\n    // Return false if timeline should end\r\n\r\n    // For debugging, if you want to exit out of experiment, press q:\r\n    if (jsPsych.pluginAPI.convertKeyCharacterToKeyCode('q') == data.values()[0].key_press) {\r\n      return false;\r\n    }\r\n    if (visual_search_exp.current_sub_condition_index < (visual_search_exp.experiment_conditions_constants.length - 1)) {\r\n      visual_search_exp.current_sub_condition_index++;\r\n      console.log(\"!!!!!!!!!! Moved to new sub condition at index \"\r\n        + visual_search_exp.current_sub_condition_index);\r\n      return true;\r\n    }\r\n    // Else end experiment\r\n    else {\r\n      return false;\r\n    }\r\n  },\r\n  on_finish: function (data) {\r\n    visual_search_exp.trial_data = data;\r\n  }\r\n};\r\n\r\ntimeline.push(experiment);\r\n\r\nconsole.log(\"======================\");\r\n\r\n\r\n// ---------------------------------------------------------------------\r\n// TARGET ID INSTRUCTIONS\r\n\r\nlet instructions2 = {\r\n  type: \"html-keyboard-response\",\r\n  stimulus: \"<div align = 'center'>\" +\r\n    \"<p>Now, you will be shown all of the colours you have interacted with thus far. \" +\r\n    \"From the colours shown,<br>\" +\r\n    \"<strong>choose the colour that you have been searching for in this task.</strong></p>\" +\r\n    \"<p>Please press the <b>letter key</b> it is associated with to indicate your choice.</p>\" +\r\n    \"</div>\"\r\n};\r\ntimeline.push(instructions2);\r\n\r\n// ---------------------------------------------------------------------\r\n// RATING WHEEL\r\n\r\nvar target_point_color = visual_search_exp.experiment_conditions_constants[0].target_color;\r\nconst LETTERS = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\"];\r\nconst PATHS = get_color_paths(target_point_color).sort(() => Math.random() - 0.5);\r\nlet mapping = {};\r\n\r\n// Map the letters to the paths\r\nfor (let letter of LETTERS) {\r\n  mapping[letter] = PATHS.pop();\r\n}\r\n\r\nlet rating_wheel = {\r\n  type: 'multiple-ensembles-vizsearch-rating',\r\n  letter_mapping: mapping,\r\n  choices: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\r\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\"],\r\n  trial_duration: null,\r\n  response_ends_trial: true,\r\n  data: {\r\n    run_type: 'test',\r\n    type: 'visual_search'\r\n  },\r\n  on_finish: function (data) {\r\n\r\n    let letter = jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(data.key_press);\r\n    letter = letter.toUpperCase();\r\n\r\n    let path = mapping[letter];\r\n    let color = path.split(\"/\")[8]; // getting color from url\r\n    color = color.split(\".\")[0];\r\n\r\n    data.rating_color = color;\r\n  }\r\n};\r\n\r\ntimeline.push(rating_wheel);\r\n\r\n// ---------------------------------------------------------------------\r\n// CONFIDENCE RATING\r\n\r\nlet rating = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: \"<div align = 'center'> <p>Rate how confident you are in your choice</p><p>on a scale of 1 to 7, with 7 being the most confident. </p>\" + \"<p><b>Please press the number key that corresponds to your choice:</b></p>\" +\r\n    \"<br><p><font size = 15><i>Least confident</i> <---1--2--3--4--5--6--7---> <i>Most confident</i></font></p></div>\",\r\n  choices: ['1', '2', '3', '4', '5', '6', '7'],\r\n  data: {\r\n    run_type: 'test',\r\n    type: 'visual_search'\r\n  },\r\n  on_finish: function (data) {\r\n    data.confidence_rating = jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(data.key_press);\r\n  }\r\n};\r\ntimeline.push(rating);\r\n\r\n// =========================================================\r\n// DATA DOWNLOADING \r\n\r\nvar experiment_end = {\r\n  type: 'html-keyboard-response',\r\n  stimulus: '<div align = \"center\">' +\r\n    '<p><font size = 10>You have completed the experiment!<p></font>' +\r\n    '<br>' +\r\n    'Trial and summary data files will now automatically download locally.' +\r\n    '</div>',\r\n  on_start: function () {\r\n\r\n    export_trial_data();\r\n    export_summary_data();\r\n\r\n    // Reset background color to feedback\r\n    document.body.style.backgroundColor = visual_search_exp.trial_data.feedback_background_color;\r\n  }\r\n};\r\ntimeline.push(experiment_end);\r\n\r\n// =========================================================\r\n// START JSPSYCH\r\n\r\njsPsych.init({\r\n  timeline: timeline,\r\n  on_finish: function () {\r\n    jsPsych.data.displayData();\r\n  }\r\n});\r\n\r\n// =========================================================\r\n// HELPERS\r\n\r\n/**\r\n * Handles saving the relevant data on a given trial.\r\n *\r\n */\r\nfunction handle_data_saving(trial, block_type, constants, index) {\r\n\r\n  // Add all constants from excel\r\n  trial.data = constants;\r\n\r\n  // Adding constants that required computation (not from excel)\r\n  trial.data.type = \"visual_search\";\r\n\r\n  trial.data.sub_condition = index;\r\n\r\n  // Block specific saves \r\n  if (block_type == \"test\") {\r\n    trial.data.run_type = \"test\";\r\n  }\r\n  else {\r\n    trial.data.run_type = \"practice\";\r\n  }\r\n}\r\n\r\n/*\r\n  * Saves experiment data as csv\r\n  * */\r\nfunction export_trial_data() {\r\n  var trial_data = jsPsych.data.get().filter({ type: 'visual_search', run_type: 'test' })\r\n    .ignore('type')\r\n    .ignore('run_type')\r\n    .ignore('left_correlation')\r\n    .ignore('right_correlation')\r\n    // These are variables forced on by jsPsych\r\n    .ignore('stimulus')\r\n    .ignore('key_press')\r\n    .ignore('choices')\r\n    .ignore('trial_type')\r\n    .ignore('trial_index')\r\n    .ignore('time_elapsed')\r\n    .ignore('internal_node_id');\r\n\r\n  var string = \"S\" + visual_search_exp.subject_id + \"_\" + visual_search_exp.condition_name + \"_visual_search_trial_results.csv\";\r\n\r\n  trial_data.localSave('csv', string);\r\n}\r\n\r\n/**\r\n* When called, will save aggregated trial data into a CSV.     \r\n*/\r\nfunction export_summary_data() {\r\n  var csv = 'SUBJECT_ID,SUBJECT_INITIALS,CONDITION_NAME,NUM_POINTS,ROW,COL,TARGET_PRESENT,TRIALS\\n';\r\n\r\n  var data = [];\r\n\r\n  // Organize each row of the csv\r\n  for (let i = 0; i < visual_search_exp.experiment_conditions_constants.length; i++) {\r\n    var row = [visual_search_exp.subject_id, visual_search_exp.subject_initials, visual_search_exp.condition_name];\r\n    var constants = visual_search_exp.experiment_conditions_constants[i];\r\n    var condition_data = jsPsych.data.get();\r\n    row.push(constants.num_points);\r\n    row.push(constants.row);\r\n    row.push(constants.col);\r\n    row.push(constants.target_present);\r\n    row.push(condition_data.count());\r\n\r\n    data.push(row);\r\n  }\r\n\r\n  // Append each row\r\n  data.forEach(function (row) {\r\n    csv += row.join(',');\r\n    csv += \"\\n\";\r\n  });\r\n\r\n  var hiddenElement = document.createElement('a');\r\n  hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\r\n  hiddenElement.target = '_blank';\r\n  hiddenElement.download = \"S\" + visual_search_exp.subject_id + \"_\" + visual_search_exp.condition_name + \"_visual_search_summary_results.csv\";\r\n  hiddenElement.click();\r\n}\r\n\r\n\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/experiments/visual_search/visual_search_timeline.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1137,
    "kind": "variable",
    "name": "visual_search_exp",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~visual_search_exp",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": "{visual_search_exp}",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search"
      ]
    }
  },
  {
    "__docId__": 1138,
    "kind": "variable",
    "name": "timeline",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~timeline",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1139,
    "kind": "variable",
    "name": "address",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~address",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1140,
    "kind": "variable",
    "name": "welcome",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~welcome",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1141,
    "kind": "variable",
    "name": "instructions",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~instructions",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1142,
    "kind": "variable",
    "name": "ready",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~ready",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1143,
    "kind": "variable",
    "name": "fixation",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~fixation",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": string, \"choices\": *, \"trial_duration\": number, \"data\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1144,
    "kind": "variable",
    "name": "trial",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~trial",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"url\": *, \"choices\": *, \"execute_script\": boolean, \"on_start\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1145,
    "kind": "variable",
    "name": "feedback",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~feedback",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"trial_duration\": *, \"response_ends_trial\": boolean, \"data\": *, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1146,
    "kind": "variable",
    "name": "experiment",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~experiment",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "type": {
      "types": [
        "{\"timeline\": *, \"loop_function\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1147,
    "kind": "variable",
    "name": "instructions2",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~instructions2",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1148,
    "kind": "variable",
    "name": "target_point_color",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~target_point_color",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1149,
    "kind": "variable",
    "name": "LETTERS",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~LETTERS",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1150,
    "kind": "variable",
    "name": "PATHS",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~PATHS",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1151,
    "kind": "variable",
    "name": "mapping",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~mapping",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1152,
    "kind": "variable",
    "name": "rating_wheel",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~rating_wheel",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 278,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"letter_mapping\": *, \"choices\": *, \"trial_duration\": *, \"response_ends_trial\": boolean, \"data\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1153,
    "kind": "variable",
    "name": "rating",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~rating",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"choices\": *, \"data\": *, \"on_finish\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1154,
    "kind": "variable",
    "name": "experiment_end",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~experiment_end",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 325,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"stimulus\": *, \"on_start\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1155,
    "kind": "function",
    "name": "handle_data_saving",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~handle_data_saving",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": "Handles saving the relevant data on a given trial.",
    "lineNumber": 360,
    "params": [
      {
        "name": "trial",
        "types": [
          "*"
        ]
      },
      {
        "name": "block_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "constants",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1156,
    "kind": "function",
    "name": "export_trial_data",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~export_trial_data",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 382,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1157,
    "kind": "function",
    "name": "export_summary_data",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~export_summary_data",
    "access": "public",
    "export": false,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": "When called, will save aggregated trial data into a CSV.     ",
    "lineNumber": 405,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1158,
    "kind": "class",
    "name": "Visual_Search",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js",
    "static": true,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/experiments/visual_search/visual_search_timeline.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 1159,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#constructor",
    "access": "public",
    "description": "Initializes a Visual_Search experiment object.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "{object}    Parameters passed in from routing"
      }
    ]
  },
  {
    "__docId__": 1160,
    "kind": "member",
    "name": "condition_name",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#condition_name",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1161,
    "kind": "member",
    "name": "condition_group",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#condition_group",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1162,
    "kind": "member",
    "name": "trial_structure",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#trial_structure",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1163,
    "kind": "member",
    "name": "graph_type",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#graph_type",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1164,
    "kind": "member",
    "name": "balancing_type",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#balancing_type",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1166,
    "kind": "member",
    "name": "subject_id",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#subject_id",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1167,
    "kind": "member",
    "name": "subject_initials",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#subject_initials",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1168,
    "kind": "member",
    "name": "target_color",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#target_color",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1169,
    "kind": "member",
    "name": "experiment_conditions_constants",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#experiment_conditions_constants",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1170,
    "kind": "member",
    "name": "target_coordinates",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#target_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1171,
    "kind": "member",
    "name": "distractor_coordinates",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#distractor_coordinates",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1172,
    "kind": "member",
    "name": "trial_data",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#trial_data",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1173,
    "kind": "member",
    "name": "raw_sub_conds",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#raw_sub_conds",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1174,
    "kind": "member",
    "name": "sub_condition_order",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#sub_condition_order",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1176,
    "kind": "member",
    "name": "current_sub_condition_index",
    "memberof": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search",
    "static": false,
    "longname": "scripts/experiments/visual_search/visual_search_timeline.js~Visual_Search#current_sub_condition_index",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 1177,
    "kind": "file",
    "name": "scripts/helpers/correlation_dependencies.js",
    "content": "/**\r\n * Dependencies for Correlation-type experiments such as JND, Sequencing Symbols, and Hybrid.\r\n * These dependencies handle common behaviors in these experiments related to working with correlation\r\n * and jnd-tasks.\r\n * For future expansion/implementation of new features, consider if that feature is unique to the experiment\r\n * it is being developed for, or if multiple experiments (current or not) could benefit from it.\r\n *\r\n * Correlation experiments that use these dependencies need the following attributes (depending on which functions it will use):\r\n *\r\n * EXPERIMENT PROPERTIES:\r\n * - base correlation\r\n * - initial difference\r\n * - max_step_size\r\n * - direction\r\n *\r\n * EXPERIMENT OBJECT ATTRIBUTES\r\n * - converged\r\n * - adjusted_quantity_matrix\r\n * - adjusted_quantity_practice\r\n *\r\n */\r\n\r\n\r\nexport default class Correlation_Dependencies{\r\n\r\n    constructor(){\r\n    }\r\n\r\n  /**\r\n   * Generates the subcondition number trial and wraps it in a conditional timeline\r\n   * @param {object} experiment\r\n   * @param {string} block_type\r\n   * @returns {jsPsych trial}\r\n   */\r\n  generate_subcond_num_trial(experiment, block_type) {\r\n    let subcond_num = {\r\n      stimulus: \"\",\r\n      type: \"html-keyboard-response\",\r\n      choices: [\" \"],\r\n      on_start: function (subcond_num) {\r\n        // Subcondtion index and constants\r\n        let index = this.get_subcondition_index(experiment, block_type);\r\n        subcond_num.stimulus = `<div align=\"center\" style=\"font-size:20px\"><p><b>Ready? Experiment block ${\r\n          index + 1\r\n        } of ${\r\n          experiment.raw_constants.length\r\n        } will now begin.</b></p><br><p>Press the spacebar to continue.</p></div>`;\r\n      },\r\n    };\r\n\r\n    let subcond_num_timeline = {\r\n      timeline: [subcond_num],\r\n      conditional_function: function () {\r\n        return (\r\n          this.is_start_of_subcondition(experiment, block_type) &&\r\n          block_type === \"test\" &&\r\n          experiment.auto_mode == false\r\n        );\r\n      },\r\n    };\r\n    return subcond_num_timeline;\r\n  }\r\n\r\n    /**\r\n     * Checks whether we have just started a subcondition.\r\n     * @param {object} experiment\r\n     * @param {string} block_type \r\n     * @return {boolean} True if sub condition has just started.\r\n     */\r\n    is_start_of_subcondition(experiment, block_type) {\r\n        let curr_index = this.get_subcondition_index(experiment, block_type);\r\n        let constants = this.get_constants(experiment, block_type, curr_index);\r\n        switch(constants.direction){\r\n            case \"above\":\r\n            case \"below\":\r\n                let res_above_below = this.get_adjusted_quantity_matrix(experiment, block_type)[curr_index];\r\n                if (!res_above_below) {\r\n                  return true;\r\n                }\r\n                return res_above_below.length == 0;\r\n            case \"memory\":\r\n            case \"symmetric\":\r\n                let res_memory_symmetric = this.get_adjusted_quantity_matrix(experiment, block_type)[curr_index][0];\r\n                if (!res_memory_symmetric) {\r\n                  return true;\r\n                }\r\n                return res_memory_symmetric.length == 0;\r\n            default:\r\n                throw Error(`Adjusted Quantity Matrix structure has not been defined for direction ${constants.direction}.`)\r\n        }\r\n    }\r\n\r\n  /**\r\n   * Determines whether the current sub condition can end or not.\r\n   * Only valid for \"test\" experiment trials and not used for practice trials\r\n   * @param {object} experiment\r\n   * @param {string} block_type\r\n   * @return {boolean} True if sub condition should end.\r\n   */\r\n  is_end_of_sub_condition(experiment, block_type) {\r\n    //console.log(\"Current Subcondition Index: \" + experiment.current_sub_condition_index);\r\n    if (experiment.end_sub_condition_debug) {\r\n      console.log(\"Skiping Sub Condition\");\r\n      return true;\r\n    }\r\n    let curr_index = this.get_subcondition_index(experiment, block_type);\r\n    let constants = this.get_constants(experiment, block_type, curr_index);\r\n    let subcondition_adjusted_quantities;\r\n    switch (constants.direction) {\r\n      case \"above\":\r\n      case \"below\":\r\n        subcondition_adjusted_quantities = this.get_adjusted_quantity_matrix(\r\n          experiment,\r\n          block_type\r\n        )[curr_index];\r\n        break;\r\n      case \"memory\":\r\n      case \"symmetric\":\r\n        subcondition_adjusted_quantities = this.get_adjusted_quantity_matrix(\r\n          experiment,\r\n          block_type\r\n        )[curr_index][0];\r\n        break;\r\n      default:\r\n        throw Error(\r\n          `Adjusted Quantity Matrix structure has not been defined for direction ${constants.direction}.`\r\n        );\r\n    }\r\n\r\n    experiment.converged = this.is_converged_in_window(\r\n      subcondition_adjusted_quantities,\r\n      experiment.MIN_TRIALS,\r\n      experiment.WINDOW_SIZE,\r\n      experiment.WINDOW_INTERVAL,\r\n      experiment.CONVERGENCE_THRESHOLD\r\n    );\r\n    let last_trial_data = this.get_last_trial_data(experiment.experiment_name); // \"last trial\" is \"current trial\", just the last one in the jsPsych array\r\n    last_trial_data.converged = experiment.converged;\r\n    let matrix_length = subcondition_adjusted_quantities.length;\r\n    if (matrix_length >= experiment.MIN_TRIALS && experiment.converged) {\r\n      console.log(\r\n        \"Subcondtion Converged \" + subcondition_adjusted_quantities.length\r\n      );\r\n      return true;\r\n    }\r\n\r\n    if (matrix_length >= experiment.MAX_TRIALS) {\r\n      console.log(\r\n        \"end_sub_condition MAX_TRIALS reached \" +\r\n          subcondition_adjusted_quantities.length\r\n      );\r\n      return true;\r\n    }\r\n    //console.log(\"Practice subcondition index: \" + experiment.current_practice_condition_index)\r\n    if (\r\n      block_type === \"practice\" &&\r\n      matrix_length >= experiment.MAX_PRACTICE_TRIALS &&\r\n      !experiment.practice_condition_ended\r\n    ) {\r\n      console.log(\"Max number of practice trials reached\");\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks if it is the start of the current block.\r\n   * Requires the attributes current_sub_condition_index, current_practice_condition_index, and block_size to be defined\r\n   * in the experiment.\r\n   * @param {object} experiment experiment object.\r\n   * @param {string} block_type\r\n   * @returns {boolean}\r\n   */\r\n  is_start_of_block(experiment, block_type) {\r\n    let curr_index = this.get_subcondition_index(experiment, block_type);\r\n    return curr_index % experiment.block_size == 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the block size of the current condition if it uses the block property\r\n   * @param {object} constants\r\n   * @param {string} blocking_attribute\r\n   * @returns {number}\r\n   */\r\n  get_num_blocks(constants, blocking_attribute = \"block\") {\r\n    let block_size = 0;\r\n    let prev_block;\r\n    for (let i = 0; i < constants.length; i++) {\r\n      let curr_block = constants[i][blocking_attribute];\r\n      if (prev_block != curr_block) {\r\n        block_size++;\r\n      }\r\n      prev_block = curr_block;\r\n    }\r\n    return block_size;\r\n  }\r\n\r\n  /**\r\n   * Calculates the adjusted value depending on whether experiment is the\r\n   * first trial of the sub condition or not.\r\n   * Returns number or array of numbers depending on task and direction.\r\n   * Type handling is done outside the function\r\n   * @param  {object} experiment experiment object\r\n   * @param {object} constants experiment current subcondition constants\r\n   * @param {string} block_type\r\n   * @return {number|number[]}\r\n   */\r\n  calculate_adjusted_value(experiment, constants, block_type) {\r\n    // For the first trial, we need to initialize the adjusted correlation:\r\n    if (this.is_start_of_subcondition(experiment, block_type)) {\r\n      var adjusted_value = this.initialize_adjusted_statistic(\r\n        experiment,\r\n        constants\r\n      );\r\n      // Set flag to false\r\n      experiment.first_trial_of_sub_condition = false;\r\n    } else {\r\n      var adjusted_value = this.get_next_adjusted_statistic(\r\n        experiment,\r\n        constants\r\n      );\r\n    }\r\n    return adjusted_value;\r\n  }\r\n\r\n  /**\r\n   * Initializes the adjusted value for the first time.\r\n   * @param {object} experiment\r\n   * @param  {object}  constants\r\n   * @return {number|number[]}  adjusted_value\r\n   */\r\n  initialize_adjusted_statistic(experiment, constants) {\r\n    switch (constants.direction) {\r\n      case \"above\":\r\n        return Math.min(\r\n          experiment.MAX_CORRELATION,\r\n          constants.base_correlation + constants.initial_difference\r\n        );\r\n      case \"below\":\r\n        return Math.max(\r\n          experiment.MIN_CORRELATION,\r\n          constants.base_correlation - constants.initial_difference\r\n        );\r\n      case \"memory\":\r\n      case \"symmetric\":\r\n        let symmetric_innitial_difference = constants.initial_difference / 2;\r\n        let adjusted_high = Math.min(\r\n          experiment.MAX_CORRELATION,\r\n          constants.base_correlation + symmetric_innitial_difference\r\n        );\r\n        let adjusted_low = Math.max(\r\n          experiment.MIN_CORRELATION,\r\n          constants.base_correlation - symmetric_innitial_difference\r\n        );\r\n        return [adjusted_low, adjusted_high];\r\n      default:\r\n        throw Error(\r\n          \"Calculations for jnd has not been handled for direction: \" +\r\n            constants.direction\r\n        );\r\n    }\r\n  }\r\n\r\n    /**\r\n     * Calculates the next adjusted value.\r\n     *\r\n     * @param  {object} experiment\r\n     * @return {number|number[]} next_adjusted_statistic\r\n     */\r\n    get_next_adjusted_statistic(experiment, constants){\r\n        let next_adjusted_statistic;\r\n        let experiment_name = experiment.experiment_name;\r\n        var last_trial_data = this.get_last_trial_data(experiment_name);\r\n\r\n        switch(constants.direction){\r\n            case \"above\":\r\n                if (last_trial_data.correct) {\r\n                    return Math.max(constants.initial_difference, last_trial_data.adjusted_value - constants.max_step_size);\r\n                } \r\n                else {\r\n                    return Math.min(experiment.MAX_CORRELATION, last_trial_data.adjusted_value + constants.max_step_size * experiment.INCORRECT_MULTIPLIER);\r\n                }\r\n            case \"below\":\r\n                if (last_trial_data.correct) {\r\n                    return Math.min(constants.initial_difference, last_trial_data.adjusted_value + constants.max_step_size);\r\n                } \r\n                else {\r\n                    return Math.max(experiment.MIN_CORRELATION, last_trial_data.adjusted_value - constants.max_step_size * experiment.INCORRECT_MULTIPLIER);\r\n                }\r\n            case \"memory\":\r\n            case \"symmetric\":\r\n                const SYMMETRIC_CORRECT = experiment.correct_statistic_increment/2;\r\n                const SYMMETRIC_INCORRECT = experiment.incorrect_statistic_increment/2;\r\n                let next_adjusted_statistic_high;\r\n                let next_adjusted_statistic_low;                \r\n                if (last_trial_data.correct) {\r\n                    next_adjusted_statistic_high = last_trial_data.adjusted_value_high - SYMMETRIC_CORRECT;\r\n                    next_adjusted_statistic_low = last_trial_data.adjusted_value_low + SYMMETRIC_CORRECT;\r\n                } \r\n                else {\r\n                    next_adjusted_statistic_high = last_trial_data.adjusted_value_high + SYMMETRIC_INCORRECT;\r\n                    next_adjusted_statistic_low = last_trial_data.adjusted_value_low - SYMMETRIC_INCORRECT;\r\n                }\r\n                if (next_adjusted_statistic_high > 1.0 || next_adjusted_statistic_low < 0){\r\n                    next_adjusted_statistic_high = Math.max(last_trial_data.adjusted_value_high, last_trial_data.adjusted_value_high - SYMMETRIC_INCORRECT)\r\n                    next_adjusted_statistic_low = Math.min(last_trial_data.adjusted_value_low, last_trial_data.adjusted_value_low + SYMMETRIC_INCORRECT)\r\n                }\r\n            \r\n                return [next_adjusted_statistic_low, next_adjusted_statistic_high];\r\n            default:\r\n                // Old behavior for backwards compatibility with certain conditions\r\n                // For num_corr conditions, guard to force adjusted stat to be use experiment.calculation instead of the\r\n                // traditional min/max AKA what is in get_next_adjusted_correlation\r\n                if (experiment.condition_name.split(\"_\").includes(\"num\") && experiment.condition_name.split(\"_\").includes(\"corr\")) {\r\n                    if (last_trial_data.correct) {\r\n                    experiment.correct_statistic_increment = 0.01;\r\n                    next_adjusted_statistic = last_trial_data.adjusted_value + experiment.correct_statistic_increment;\r\n                        if (next_adjusted_statistic >= constants.reference_start + 0.1) {\r\n                            next_adjusted_statistic = constants.reference_start + 0.1;\r\n                            }\r\n                    } \r\n                    else {\r\n                        experiment.incorrect_statistic_increment = 0.03;\r\n                        next_adjusted_statistic = last_trial_data.adjusted_value - experiment.incorrect_statistic_increment;\r\n                            if (next_adjusted_statistic <= 0.00) {\r\n                                next_adjusted_statistic = 0.00;\r\n                            }\r\n                    }\r\n                }\r\n                // Checks if the condition under correlation is symmetric\r\n                else if (experiment.condition_name.includes(\"symmetric\")){\r\n                    if (last_trial_data.correct){\r\n                        correct_statistic_increment = 0.1;\r\n                        next_adjusted_statistic = last_trial_data.adjusted_value + correct_statistic_increment;\r\n                    } \r\n                    else {\r\n                        incorrect_statistic_increment = 0.05;\r\n                        next_adjusted_statistic = last_trial_data.adjusted_value - incorrect_statistic_increment;\r\n                    }\r\n                }\r\n                else {\r\n                    next_adjusted_statistic = experiment.get_next_adjusted_correlation(last_trial_data, constants);\r\n                }\r\n                break;\r\n        }\r\n            \r\n    }\r\n\r\n  /**\r\n   * Tests for convergange in a subcondition's adjusted quantity array with sliding window\r\n   * @param {number[]} subcondition_adjusted_quantities the adjusted quantities to check for convergance\r\n   * @param {number}   min_trials minimum number of trials needed before convergance is chekced\r\n   * @param {number}   window_size for sliding window\r\n   * @param {number}   window_interval\r\n   * @param {number} convergance_threshold\r\n   * @returns {boolean}   True if converged.\r\n   */\r\n  is_converged_in_window(\r\n    subcondition_adjusted_quantities,\r\n    min_trials,\r\n    window_size,\r\n    window_interval,\r\n    convergance_threshold\r\n  ) {\r\n    var converged = false;\r\n    var num_completed_trials = subcondition_adjusted_quantities.length;\r\n\r\n    // Check if we have completed the minimum number of trials\r\n    // and if the number of completed trials is greater than the window size\r\n    if (\r\n      num_completed_trials >= min_trials &&\r\n      num_completed_trials >= window_size\r\n    ) {\r\n      // 2D Matrix of windows of adjusted quantities\r\n      var adjusted_quantity_windows = [];\r\n\r\n      // The index of the last trial\r\n      var last_trial = num_completed_trials - 1;\r\n\r\n      // Compute the interval size and remainder\r\n      // The remainder is computed in case the window size isn't divisible by the # intervals\r\n      var interval_size = window_size / window_interval;\r\n      var interval_remainder = window_size % window_interval;\r\n\r\n      // experiment.is the first trial in the window\r\n      // For example:\r\n      // numCompletedTrials = 5\r\n      // windowSize = 3\r\n      // [ 0 1 2 3 4 5 6 7 8 9 ]\r\n      // windowStart would be at index: 5 - 3 = 2\r\n      var window_start = num_completed_trials - window_size;\r\n      console.log(\"num completed: \" + num_completed_trials);\r\n      console.log(\"window start: \" + window_start);\r\n\r\n      // Iterate over all of the trials from the start of the window to the last trial\r\n      // and organize them into the 2D adjustedQuantityWindows matrix\r\n      while (window_start < last_trial) {\r\n        // While we have extra elements that don't fit into an interval\r\n        // add one extra to each window interval\r\n        var current_interval_size =\r\n          interval_remainder > 0 ? interval_size + 1 : interval_size;\r\n        if (interval_remainder > 0) {\r\n          interval_remainder--;\r\n        }\r\n\r\n        // Collect the adjusted quantity values from the trials into the double[]\r\n        var adjusted_quantities = [];\r\n        for (let i = 0; i < current_interval_size; ++i) {\r\n          var adjusted_quantity =\r\n            subcondition_adjusted_quantities[i + window_start];\r\n          adjusted_quantities.push(adjusted_quantity);\r\n        }\r\n\r\n        // Set the window start to the next interval\r\n        window_start += current_interval_size;\r\n        adjusted_quantity_windows.push(adjusted_quantities);\r\n      }\r\n\r\n      //console.log(adjusted_quantity_windows);\r\n\r\n      var variance = [];\r\n      var mean = [];\r\n      for (let i = 0; i < adjusted_quantity_windows.length; i++) {\r\n        variance.push(math.variance(adjusted_quantity_windows[i]));\r\n        mean.push(math.mean(adjusted_quantity_windows[i]));\r\n      }\r\n\r\n      var mean_of_variances = math.mean(variance);\r\n      var variance_of_means = math.variance(mean);\r\n      var F = variance_of_means / mean_of_variances;\r\n      console.log(\"F: \" + F);\r\n      // Convergence if the F value is < 1 - convergenceThreshold\r\n      // if the F is greater than 0.25, then converge\r\n      converged = F < 1 - convergance_threshold;\r\n    }\r\n\r\n    if (converged) {\r\n      console.log(\"CONVERGED!!!!\");\r\n    }\r\n\r\n    return converged;\r\n  }\r\n\r\n  // Getters\r\n\r\n  /**\r\n   * Returns the data of the last trial on the jsPsych data object\r\n   * @param {string} experiment_name\r\n   * @returns {assoc array} last jsPsych trial data object\r\n   */\r\n  get_last_trial_data(experiment_name) {\r\n    return jsPsych.data\r\n      .get()\r\n      .filter({ type: experiment_name })\r\n      .last(1)\r\n      .values()[0];\r\n  }\r\n\r\n  /**\r\n   * Get current subcondition index of block type for current index.\r\n   *\r\n   * @param   {String} block_type - Either \"test\" or \"practice\"\r\n   * @returns {number}     index - current subcondition index\r\n   */\r\n  get_subcondition_index(experiment, block_type) {\r\n    // Error handling\r\n    if (block_type != \"test\" && block_type != \"practice\") {\r\n      throw Error(`Invalid experiment type of ${block_type}`);\r\n    }\r\n    return block_type == \"test\" ? experiment.current_sub_condition_index : experiment.current_practice_condition_index;\r\n  }\r\n\r\n  /**\r\n   * Get constants of block type for current index.\r\n   * @param {object} experiment\r\n   * @param   {String}  block_type - Either \"test\" or \"practice\"\r\n   * @param   {number}     index Subcondition index\r\n   * @returns {String}  constants - Ex) {SD: 0.2, adjusted_value: 0.8, dist_base: 0.3, error: 0.0001, num_points: 100, type: \"jnd\", ...}\r\n   */\r\n  get_constants(experiment, block_type, index) {\r\n    // Error handling\r\n    if (block_type != \"test\" && block_type != \"practice\") {\r\n      throw Error(`Invalid block type of ${block_type}`);\r\n    }\r\n    return block_type == \"test\" ? experiment.sub_conditions_constants[index] : experiment.practice_conditions_constants[index];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} experiment\r\n   * @param {string} block_type\r\n   * @returns {number[]}\r\n   */\r\n  get_adjusted_quantity_matrix(experiment, block_type) {\r\n    // Error handling\r\n    if (block_type != \"test\" && block_type != \"practice\") {\r\n      throw Error(`Invalid block type of ${block_type}`);\r\n    }\r\n    return block_type == \"test\" ? experiment.adjusted_quantity_matrix : experiment.adjusted_quantity_practice;\r\n  }\r\n}\r\nexport const correlation_dependencies = new Correlation_Dependencies();\r\n\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/helpers/correlation_dependencies.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1178,
    "kind": "class",
    "name": "Correlation_Dependencies",
    "memberof": "scripts/helpers/correlation_dependencies.js",
    "static": true,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/correlation_dependencies.js",
    "importStyle": "Correlation_Dependencies",
    "description": "Dependencies for Correlation-type experiments such as JND, Sequencing Symbols, and Hybrid.\nThese dependencies handle common behaviors in these experiments related to working with correlation\nand jnd-tasks.\nFor future expansion/implementation of new features, consider if that feature is unique to the experiment\nit is being developed for, or if multiple experiments (current or not) could benefit from it.\n\nCorrelation experiments that use these dependencies need the following attributes (depending on which functions it will use):\n\nEXPERIMENT PROPERTIES:\n- base correlation\n- initial difference\n- max_step_size\n- direction\n\nEXPERIMENT OBJECT ATTRIBUTES\n- converged\n- adjusted_quantity_matrix\n- adjusted_quantity_practice",
    "lineNumber": 24,
    "interface": false
  },
  {
    "__docId__": 1179,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 1180,
    "kind": "method",
    "name": "generate_subcond_num_trial",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#generate_subcond_num_trial",
    "access": "public",
    "description": "Generates the subcondition number trial and wraps it in a conditional timeline",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1181,
    "kind": "method",
    "name": "is_start_of_subcondition",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#is_start_of_subcondition",
    "access": "public",
    "description": "Checks whether we have just started a subcondition.",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition has just started."
    }
  },
  {
    "__docId__": 1182,
    "kind": "method",
    "name": "is_end_of_sub_condition",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#is_end_of_sub_condition",
    "access": "public",
    "description": "Determines whether the current sub condition can end or not.\nOnly valid for \"test\" experiment trials and not used for practice trials",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if sub condition should end."
    }
  },
  {
    "__docId__": 1183,
    "kind": "method",
    "name": "is_start_of_block",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#is_start_of_block",
    "access": "public",
    "description": "Checks if it is the start of the current block.\nRequires the attributes current_sub_condition_index, current_practice_condition_index, and block_size to be defined\nin the experiment.",
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "experiment object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1184,
    "kind": "method",
    "name": "get_num_blocks",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#get_num_blocks",
    "access": "public",
    "description": "Returns the block size of the current condition if it uses the block property",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "blocking_attribute",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1185,
    "kind": "method",
    "name": "calculate_adjusted_value",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#calculate_adjusted_value",
    "access": "public",
    "description": "Calculates the adjusted value depending on whether experiment is the\nfirst trial of the sub condition or not.\nReturns number or array of numbers depending on task and direction.\nType handling is done outside the function",
    "lineNumber": 209,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "experiment object"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": "experiment current subcondition constants"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "number[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1186,
    "kind": "method",
    "name": "initialize_adjusted_statistic",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#initialize_adjusted_statistic",
    "access": "public",
    "description": "Initializes the adjusted value for the first time.",
    "lineNumber": 233,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "number[]"
      ],
      "spread": false,
      "description": "adjusted_value"
    }
  },
  {
    "__docId__": 1187,
    "kind": "method",
    "name": "get_next_adjusted_statistic",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#get_next_adjusted_statistic",
    "access": "public",
    "description": "Calculates the next adjusted value.",
    "lineNumber": 271,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "number[]"
      ],
      "spread": false,
      "description": "next_adjusted_statistic"
    }
  },
  {
    "__docId__": 1188,
    "kind": "method",
    "name": "is_converged_in_window",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#is_converged_in_window",
    "access": "public",
    "description": "Tests for convergange in a subcondition's adjusted quantity array with sliding window",
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}   True if converged."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "subcondition_adjusted_quantities",
        "description": "the adjusted quantities to check for convergance"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min_trials",
        "description": "minimum number of trials needed before convergance is chekced"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "window_size",
        "description": "for sliding window"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "window_interval",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "convergance_threshold",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if converged."
    }
  },
  {
    "__docId__": 1189,
    "kind": "method",
    "name": "get_last_trial_data",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#get_last_trial_data",
    "access": "public",
    "description": "Returns the data of the last trial on the jsPsych data object",
    "lineNumber": 452,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{assoc array} last jsPsych trial data object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment_name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "assoc array"
      ],
      "spread": false,
      "description": "last jsPsych trial data object"
    }
  },
  {
    "__docId__": 1190,
    "kind": "method",
    "name": "get_subcondition_index",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#get_subcondition_index",
    "access": "public",
    "description": "Get current subcondition index of block type for current index.",
    "lineNumber": 466,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}     index - current subcondition index"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": "Either \"test\" or \"practice\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "index - current subcondition index"
    }
  },
  {
    "__docId__": 1191,
    "kind": "method",
    "name": "get_constants",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#get_constants",
    "access": "public",
    "description": "Get constants of block type for current index.",
    "lineNumber": 481,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}  constants - Ex) {SD: 0.2, adjusted_value: 0.8, dist_base: 0.3, error: 0.0001, num_points: 100, type: \"jnd\", ...}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": "Either \"test\" or \"practice\""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Subcondition index"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "constants - Ex) {SD: 0.2, adjusted_value: 0.8, dist_base: 0.3, error: 0.0001, num_points: 100, type: \"jnd\", ...}"
    }
  },
  {
    "__docId__": 1192,
    "kind": "method",
    "name": "get_adjusted_quantity_matrix",
    "memberof": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies#get_adjusted_quantity_matrix",
    "access": "public",
    "description": "",
    "lineNumber": 495,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "block_type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1193,
    "kind": "variable",
    "name": "correlation_dependencies",
    "memberof": "scripts/helpers/correlation_dependencies.js",
    "static": true,
    "longname": "scripts/helpers/correlation_dependencies.js~correlation_dependencies",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/correlation_dependencies.js",
    "importStyle": "{correlation_dependencies}",
    "description": null,
    "lineNumber": 503,
    "undocument": true,
    "type": {
      "types": [
        "scripts/helpers/correlation_dependencies.js~Correlation_Dependencies"
      ]
    }
  },
  {
    "__docId__": 1194,
    "kind": "file",
    "name": "scripts/helpers/experiment_helpers.js",
    "content": "import { EXPERIMENTS } from \"/config/experiments-config.js\";\r\n\r\n/**\r\n * Helper function to generate generic timeline object\r\n * @param {string} type - the type of timeline object\r\n * @param {number} duration - time in ms for screen duration\r\n * @param {string[]} choices - key choices - either a number array of valid ascii keys OR no keys\r\n *\r\n * @returns {Object} a timeline object with stimulus set to empty ''\r\n */\r\nexport function generate_timeline_screen(duration, choices, type = \"html-keyboard-response\") {\r\n  return {\r\n    type: type,\r\n    stimulus: '',\r\n    choices: choices,\r\n    trial_duration: duration\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the number of blocks in a condition with the block\r\n * property\r\n * \r\n * @param {Object} constants \r\n * @param {Object} blocking_attribute \r\n * @returns {number}\r\n */\r\nexport function get_num_blocks(constants, blocking_attribute){\r\n  let block_size = 0;\r\n  let prev_block;\r\n  for(let i = 0; i < constants.length; i++){\r\n    let curr_block = constants[i][blocking_attribute];\r\n    if(prev_block != curr_block){\r\n      block_size++\r\n    }\r\n    prev_block = curr_block;\r\n  }\r\n  return block_size;\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} experiment \r\n * @param {string} experiment_name \r\n * @param {string} trial_structure \r\n * @param {string} graph_type \r\n * @param {string} balancing_type \r\n * @throws {Error}\r\n */\r\nexport function check_params(experiment, experiment_name, trial_structure, graph_type, balancing_type){\r\n  // **NOTE: EXPERIMENTS variable comes from /public/config/experiments-config.js\r\n  if(!EXPERIMENTS[experiment_name]){\r\n    throw Error(`${experiment_name} is not supported.`)\r\n  }\r\n  experiment.experiment_name = experiment_name;\r\n  if (!EXPERIMENTS[experiment_name][\"trial_structure\"].includes(trial_structure)) {\r\n    throw Error(trial_structure + \" is not supported.\");}\r\n  else {\r\n    experiment.trial_structure = trial_structure;\r\n  }\r\n\r\n  if (!EXPERIMENTS[experiment_name][\"graph_type\"].includes(graph_type)){\r\n    throw Error(graph_type + \" is not supported.\")}\r\n  else {\r\n    experiment.graph_type = graph_type;\r\n  };\r\n\r\n  if (!EXPERIMENTS[experiment_name][\"balancing_type\"].includes(balancing_type)) {\r\n    throw Error(balancing_type + \" is not supported.\") }\r\n  else {\r\n    experiment.balancing_type = balancing_type;\r\n  }\r\n}\r\n  \r\n/**\r\n * Tests for convergange in a subcondition's adjusted quantity array with sliding window\r\n * \r\n * @param {number[]} subcondition_adjusted_quantities - the adjusted quantities to check for convergance\r\n * @param {number}   min_trials - minimum number of trials needed before convergance is chekced\r\n * @param {number}   window_size - for sliding window\r\n * @param {number}   window_interval \r\n * @param {number} convergance_threshold \r\n * @returns {boolean}   True if converged.\r\n */\r\nexport function is_converged_in_window(subcondition_adjusted_quantities, min_trials, window_size, window_interval, convergance_threshold) {\r\n\r\n  var converged = false;\r\n  var num_completed_trials = subcondition_adjusted_quantities.length;\r\n\r\n  // Check if we have completed the minimum number of trials\r\n  // and if the number of completed trials is greater than the window size\r\n  if (num_completed_trials >= min_trials && num_completed_trials >= window_size) {\r\n\r\n    // 2D Matrix of windows of adjusted quantities\r\n    var adjusted_quantity_windows = [];\r\n\r\n    // The index of the last trial\r\n    var last_trial = num_completed_trials - 1;\r\n\r\n    // Compute the interval size and remainder\r\n    // The remainder is computed in case the window size isn't divisible by the # intervals\r\n    var interval_size = window_size / window_interval;\r\n    var interval_remainder = window_size % window_interval;\r\n\r\n    // This is the first trial in the window\r\n    // For example:\r\n    // numCompletedTrials = 5\r\n    // windowSize = 3\r\n    // [ 0 1 2 3 4 5 6 7 8 9 ]\r\n    // windowStart would be at index: 5 - 3 = 2\r\n    var window_start = num_completed_trials - window_size;\r\n    console.log(\"num completed: \" + num_completed_trials);\r\n    console.log(\"window start: \" + window_start);\r\n\r\n    // Iterate over all of the trials from the start of the window to the last trial\r\n    // and organize them into the 2D adjustedQuantityWindows matrix\r\n    while (window_start < last_trial) {\r\n\r\n      // While we have extra elements that don't fit into an interval\r\n      // add one extra to each window interval\r\n      var current_interval_size = interval_remainder > 0 ? interval_size + 1 : interval_size;\r\n      if (interval_remainder > 0) {\r\n        interval_remainder--;\r\n      }\r\n\r\n      // Collect the adjusted quantity values from the trials into the double[]\r\n      var adjusted_quantities = [];\r\n      for (let i = 0; i < current_interval_size; ++i) {\r\n        var adjusted_quantity = subcondition_adjusted_quantities[i + window_start];\r\n        adjusted_quantities.push(adjusted_quantity);\r\n      }\r\n\r\n      // Set the window start to the next interval\r\n      window_start += current_interval_size;\r\n      adjusted_quantity_windows.push(adjusted_quantities);\r\n    }\r\n\r\n    //console.log(adjusted_quantity_windows);\r\n\r\n    var variance = [];\r\n    var mean = [];\r\n    for (let i = 0; i < adjusted_quantity_windows.length; i++){\r\n      variance.push(math.variance(adjusted_quantity_windows[i]));\r\n      mean.push(math.mean(adjusted_quantity_windows[i]));\r\n    }\r\n\r\n    var mean_of_variances = math.mean(variance);\r\n    var variance_of_means = math.variance(mean);\r\n    var F = variance_of_means/mean_of_variances;\r\n    console.log(\"F: \" + F);\r\n    // Convergence if the F value is < 1 - convergenceThreshold\r\n    // if the F is greater than 0.25, then converge\r\n    converged = F < (1 - convergance_threshold);\r\n  }\r\n\r\n  if (converged) {console.log(\"CONVERGED!!!!\")};\r\n\r\n  return converged;\r\n}\r\n\r\n/** \r\n * Randomizes the position of the base and adjusted coordinates\r\n * being displayed on the left or right graphs, and returns\r\n * the coordinates for the graphs.\r\n * @param  {Object}                       trial \r\n * @param  {{x_values: number[], y_values: number[]}} base_coordinates   \r\n * @param  {{x_values: number[], y_values: number[]}} adjusted_coordinates \r\n * @param  {Object}                       constants \r\n * @param  {number}                        adjusted_value \r\n * @returns{{left: number[number[]], right: number[number[]]}}          \r\n */\r\nexport function randomize_position(trial, base_coordinates, adjusted_coordinates, constants, adjusted_value) {\r\n\r\n  // Handle for numerosity\r\n  var result = { left: [], right: [], base_is_right: true };\r\n\r\n  // Right is adjusted\r\n  if (Math.random() < 0.5) {\r\n\r\n    if (!constants.task || (constants.task && constants.task === \"correlation\")) {\r\n      result.left = base_coordinates;\r\n      result.base_is_right = false;\r\n      trial.data.left_correlation = constants.base_correlation;\r\n      trial.data.left_num_points = constants.num_points;\r\n\r\n      result.right = adjusted_coordinates;\r\n      trial.data.right_correlation = adjusted_value;\r\n      trial.data.right_num_points = constants.num_points;\r\n    }\r\n    else if (constants.task === \"numerosity\") {\r\n      result.left = base_coordinates;\r\n      result.base_is_right = false;\r\n      trial.data.left_correlation = constants.base_correlation;\r\n      trial.data.left_num_points = constants.num_points;\r\n\r\n      result.right = adjusted_coordinates;\r\n      trial.data.right_correlation = constants.base_correlation;\r\n      trial.data.right_num_points = adjusted_value;\r\n    } else {\r\n      throw Error(\"Position randomization has not been handled for task: \" + constants.task);\r\n    }\r\n  }\r\n  // Left is adjusted\r\n  else {\r\n\r\n    if (!constants.task || (constants.task && constants.task === \"correlation\")) {\r\n      result.left = adjusted_coordinates;\r\n      trial.data.left_correlation = adjusted_value;\r\n      trial.data.left_num_points = constants.num_points;\r\n\r\n      result.right = base_coordinates;\r\n      trial.data.right_correlation = constants.base_correlation;\r\n      trial.data.right_num_points = constants.num_points;\r\n    }\r\n    else if (constants.task === \"numerosity\") {\r\n      result.left = adjusted_coordinates;\r\n      trial.data.left_correlation = constants.base_correlation;\r\n      trial.data.left_num_points = adjusted_value;\r\n\r\n      result.right = base_coordinates;\r\n      trial.data.right_correlation = constants.base_correlation;\r\n      trial.data.right_num_points = constants.num_points;\r\n    } else {\r\n      throw Error(\"Position randomization has not been handled for task: \" + constants.task);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/** \r\n * Randomizes the position of the base and adjusted coordinates for side-by-side displays\r\n * and returns the coordinates for the left/top graph first and right/bottom graph second.\r\n * @param  {Object}                        constants \r\n * @param  {{x_values: [], y_values: []} } adjusted_coordinates_high  \r\n * @param  {{x_values: [], y_values: []} } adjusted_coordinates_low       \r\n * @param  {Object}                        constants \r\n * @param  {number}                         adjusted_value \r\n * @param  {number}                         adjusted_value_low \r\n * @returns {{left: [coordinates], right: [coordinates]}}            \r\n */\r\nexport function randomize_position_symmetric(constants, adjusted_coordinates_high, adjusted_coordinates_low, adjusted_value_high, adjusted_value_low) {\r\n\r\n  var randomized_positions = { left_coordinates: [], right_coordinates: [], left_correlation: 0, right_correlation: 0};\r\n\r\n  // Left High Right Low\r\n  if (Math.random() < 0.5) {\r\n\r\n    if (!constants.task || (constants.task && constants.task === \"correlation\")) {\r\n      randomized_positions.left_coordinates = adjusted_coordinates_high;\r\n      randomized_positions.left_correlation = adjusted_value_high;\r\n      // trial.data.left_correlation = adjusted_value_high;\r\n      // trial.data.left_num_points = constants.num_points;\r\n      randomized_positions.right_coordinates = adjusted_coordinates_low;\r\n      randomized_positions.right_correlation = adjusted_value_low;\r\n      //trial.data.right_correlation = adjusted_value_low;\r\n    }\r\n    else {\r\n      throw Error(\"Position randomization has not been handled for task: \" + constants.task);\r\n    }\r\n  }\r\n  // Left High Right Low\r\n  else {\r\n\r\n    if (!constants.task || (constants.task && constants.task === \"correlation\")) {\r\n      randomized_positions.left_coordinates = adjusted_coordinates_low;\r\n      randomized_positions.left_correlation = adjusted_value_low;\r\n      // trial.data.left_correlation = adjusted_value_low;\r\n      // trial.data.left_num_points = constants.num_points;\r\n      randomized_positions.right_coordinates = adjusted_coordinates_high;\r\n      randomized_positions.right_correlation = adjusted_value_high;\r\n      // trial.data.right_correlation = adjusted_value_high;\r\n      // trial.data.right_num_points = constants.num_points;\r\n    }\r\n    else {\r\n      throw Error(\"Position randomization has not been handled for task: \" + constants.task);\r\n    }\r\n  }\r\n\r\n  return randomized_positions;\r\n}\r\n\r\n/**\r\n * Adds an extra dimension to an n-dimensional collection of coordinates\r\n * \r\n * @param {number[number[]]} coordinates - [[x0,y0],...,[xn,yn]]\r\n * @param {number[]} z_values - [z0,...,zn]\r\n * @returns {number[number[]]} - bundled z_values [[x0,y0,z0],...,[xn,yn,zn]]\r\n */\r\nexport function bundle_z_values(coordinates, z_values){\r\n  if (coordinates.length == z_values.length){ \r\n    for(let i = 0; i < coordinates.length; i++){\r\n      coordinates[i].push(z_values[i])\r\n    }\r\n    return coordinates;\r\n  }\r\n  else{\r\n    throw Error(\"Different size coordinates. Expected \" + coordinates + ' got ' + z_values.length );\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {number[number[]]} coordinates [[x0,y0],...,[xn,yn]]\r\n * @returns {number[number[]]} bundled z_values equal to y values [[x0,y0,y0],...,[xn,yn,yn]]\r\n */\r\nexport function repeat_y_values(coordinates){\r\n  for(let i = 0; i < coordinates.length; i++){\r\n    let curr_coord = coordinates[i];\r\n    curr_coord.push(curr_coord[1])\r\n  }\r\n  return coordinates;\r\n}\r\n\r\n\r\n\r\n/** \r\n * Randomizes the attribute location of the mixed graph type\r\n * In comparisons where one graph is on top of the other, left = above, right = below\r\n * Return object is an array so it can be used in graphing controller\r\n * @returns {string[]}           \r\n */\r\nexport function randomize_graph_attributes_mixed() {\r\n  var result = []\r\n  if (Math.random() < 0.5) {\r\n    // trial.data.left_graph = \"graph_a\";\r\n    // trial.data.right_graph = \"graph_b\";\r\n    result.push(\"graph_a_attributes\");\r\n    result.push(\"graph_b_attributes\");\r\n  } \r\n  else{\r\n    result.push(\"graph_b_attributes\");\r\n    result.push(\"graph_a_attributes\");\r\n    // trial.data.left_graph = \"graph_b\";\r\n    // trial.data.right_graph = \"graph_a\";\r\n  } \r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Adds a new value onto a running average\r\n * @param {number} previous_average \r\n * @param {number} new_value \r\n * @param {number} total_n \r\n * @returns {number}\r\n */\r\nexport function get_running_average(previous_average, new_value, total_n){\r\n  let prev_sum = previous_average * (total_n - 1);\r\n  let new_sum = prev_sum + new_value;\r\n  let new_average = new_sum / total_n;\r\n  return new_average;\r\n}\r\n\r\n\r\n\r\nexport function randomize_radius_position(trial, base_radius, adjusted_radius) {\r\n\r\n  var result = { left: 0, right: 0, base_is_right: true };\r\n\r\n  if (Math.random() < 0.5) {\r\n    result.left = base_radius;\r\n    result.base_is_right = false;\r\n    trial.data.left_radius = base_radius;\r\n\r\n    result.right = adjusted_radius;\r\n    trial.data.right_radius = adjusted_radius;\r\n  }\r\n  else {\r\n    result.left = adjusted_radius;\r\n    trial.data.left_radius = adjusted_radius;\r\n\r\n    result.right = base_radius;\r\n    trial.data.right_radius = base_radius;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/** \r\n * Forces the right graph to always have the greater correlation.\r\n * Used for testing purposes.\r\n * \r\n * @param {trial} trial \r\n * @param {number[number[]]} base_coordinates \r\n * @param {number[number[]]} adjusted_coordinates \r\n * @param {number} base_correlation \r\n * @param {number} adjusted_correlation \r\n * @returns {{left: number[number[]], right: number[number[]]}}\r\n */\r\nexport function force_greater_right_position(trial, base_coordinates, adjusted_coordinates, base_correlation, adjusted_correlation) {\r\n  var result = { left: [], right: [] };\r\n\r\n  if (base_correlation > adjusted_correlation) {\r\n    result.right = base_coordinates;\r\n    trial.data.right_correlation = base_correlation;\r\n\r\n    result.left = adjusted_coordinates;\r\n    trial.data.left_correlation = adjusted_correlation;\r\n  }\r\n  else {\r\n    result.right = adjusted_coordinates;\r\n    trial.data.right_correlation = adjusted_correlation;\r\n\r\n    result.left = base_coordinates;\r\n    trial.data.left_correlation = base_correlation;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n\r\n\r\n/****************************************************************************************************\r\n  \r\n\r\n  nova_variables(n, proportion_data); <- returns array of objects\r\n\r\n  ***************************************************************************************************\r\n  *Parameters: \r\n\r\n    n (int): input for desired number of elements for the output array\r\n\r\n    proportion_data (object): {\r\n      corner: {\r\n        valid: 0.0 - 1.0,\r\n        invalid: 0.0 - 1.0, (OPTIONAL)\r\n      },\r\n\r\n      symbol: {\r\n        present: 0.0 - 1.0,\r\n        absent: 0.0 - 1.0, (OPTIONAL)\r\n      },\r\n\r\n      symbol_direction: {\r\n        toward: 0.0 - 1.0,\r\n        away: 0.0 - 1.0,\r\n        neutral: 0.0 - 1.0, (OPTIONAL)\r\n      },\r\n\r\n      letter: {\r\n        A: 0.0 - 1.0,\r\n        E: 0.0 - 1.0, (OPTIONAL)\r\n      },\r\n    }\r\n\r\n    The proportion values range from 0 to 1 and the values for mutually exclusive variables should add to 1.\r\n  ***************************************************************************************************\r\n  *Return:\r\n\r\n    example output array: [{  corner: \"valid\", \r\n                              letter: \"A\",\r\n                              symbol: \"present\",\r\n                              symbol_direction: \"away\",\r\n                            },\r\n                            \r\n                            {\r\n                              corner: \"invalid\", \r\n                              letter: \"E\",\r\n                              symbol: \"absent\",\r\n                              symbol_direction: null,\r\n                            },\r\n\r\n                            {\r\n                              corner: \"valid\", \r\n                              letter: \"E\",\r\n                              symbol: \"present\",\r\n                              symbol_direction: \"toward\",\r\n                            }, ...]\r\n\r\n  ******** NOTE ********\r\n  The output array will be of length n if the proportion values multiplied by n return an integer.\r\n  If it doesn't multiply to an integer, the number will be floored, and as a result the array length will become n-1.\r\n*/\r\n\r\n/**\r\n * Generates experiment variables array for NOVA condition where the number of each variable is exacty\r\n * n times the proportion inputted. Array elements are randomized.\r\n * \r\n * @param {number} n - input for desired number of elements for the output array\r\n * @param {{corner: Object, symbol: Object, symbol_direction: Object, letter: Object}} proportion_data - input for desired number of elements for the output array\r\n * @returns {Object}\r\n */\r\nexport function nova_variables(n, proportion_data) {\r\n  let arr = [];\r\n\r\n  //create the number of instances for each variable\r\n  //note that the number is rounded down if the value is not an integer\r\n  let num_valid = Math.floor(proportion_data.corner.valid * n);\r\n  let num_invalid = Math.floor(proportion_data.corner.invalid * n) || n - num_valid;\r\n\r\n  let num_A = Math.floor(proportion_data.letter.A * n);\r\n  let num_E = Math.floor(proportion_data.letter.E * n) || n - num_A;\r\n\r\n  let num_present = Math.floor(proportion_data.symbol.present * n);\r\n  let num_absent = Math.floor(proportion_data.symbol.absent * n) || n - num_present;\r\n\r\n  let num_toward = Math.floor(proportion_data.symbol_direction.toward * num_present);\r\n  let num_away = Math.floor(proportion_data.symbol_direction.away * num_present);\r\n\r\n  /*\r\n  console.log(\"valid \" + num_valid);\r\n  console.log(\"invalid \" + num_invalid);\r\n  console.log(\"A \" + num_A);\r\n  console.log(\"E \" + num_E);\r\n  console.log(\"present \" + num_present);\r\n  console.log(\"absent \" + num_absent);\r\n  console.log(\"toward \" + num_toward);\r\n  */\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    let obj = {}\r\n\r\n    //generate valid or invalid for corner key \r\n    if (num_valid > 0) {\r\n      obj.corner = \"valid\"\r\n      num_valid--;\r\n    }\r\n    else if (num_invalid > 0) {\r\n      obj.corner = \"invalid\"\r\n      num_invalid--;\r\n    }\r\n\r\n    //generate A or E for letter key, but also randomize which is selected in this pass\r\n    if (Math.random() < 0.5) {\r\n      if (num_A > 0) {\r\n        obj.letter = \"A\"\r\n        num_A--;\r\n      }\r\n      else if (num_E > 0) {\r\n        obj.letter = \"E\";\r\n        num_E--;\r\n      }\r\n    }\r\n    else {\r\n      if (num_E > 0) {\r\n        obj.letter = \"E\"\r\n        num_E--;\r\n      }\r\n      else if (num_A > 0) {\r\n        obj.letter = \"A\";\r\n        num_A--;\r\n      }\r\n    }\r\n\r\n    //generate present or absent for symbol key, randomize which is selected on this passby, and also generate toward or away if present\r\n    if (Math.random() < 0.5) {\r\n      if (num_present > 0) {\r\n        obj.symbol = \"present\";\r\n        num_present--;\r\n\r\n        if (num_toward > 0) {\r\n          obj.symbol_direction = \"toward\";\r\n          num_toward--;\r\n        }\r\n        else if (num_away > 0) {\r\n          obj.symbol_direction = \"away\";\r\n          num_away--;\r\n        }\r\n        else {\r\n          obj.symbol_direction = \"neutral\";\r\n        }\r\n      }\r\n      else if (num_absent > 0) {\r\n        obj.symbol = \"absent\";\r\n        obj.symbol_direction = null;\r\n        num_absent--;\r\n      }\r\n    }\r\n    else {\r\n      if (num_absent > 0) {\r\n        obj.symbol = \"absent\";\r\n        obj.symbol_direction = null;\r\n        num_absent--;\r\n      }\r\n      else if (num_present > 0) {\r\n        obj.symbol = \"present\";\r\n        num_present--;\r\n\r\n        if (num_toward > 0) {\r\n          obj.symbol_direction = \"toward\";\r\n          num_toward--;\r\n        }\r\n        else if (num_away > 0) {\r\n          obj.symbol_direction = \"away\";\r\n          num_away--;\r\n        }\r\n        else {\r\n          obj.symbol_direction = \"neutral\";\r\n        }\r\n      }\r\n    }\r\n\r\n    arr.push(obj);\r\n  }\r\n\r\n  //Durstenfeld shuffle\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n\r\n  //Remove empty objects\r\n  let out = arr.filter(element => Object.keys(element).length > 0);\r\n\r\n  return out;\r\n}\r\n\r\n\r\n\r\n/**\r\n * The trial properties array generation function for the feature search task.\r\n * Developed 2021-02-21\r\n * \r\n * The specifications of the required array of trial parameters can be found in \"Condition 1\" here: \r\n * https://docs.google.com/document/d/1fTKn6hmgGXiHuWM8iZmhekhLRqKLHRqa2RCvUj-77Z8/edit?usp=sharing\r\n * \r\n * @param {number} n - (Number of trials per supersubcondition of the feature search task)\r\n * \r\n * @returns {object[]} Sample of output:\r\n *         [\r\n *          {\r\n *            target_color: null,\r\n *            distractor_color: '#20874a',\r\n *            correlation: 0.6,\r\n *            set_size: 50,\r\n *            num_trials: 5\r\n *          },\r\n *          {\r\n *            target_color: '#007ebc',\r\n *            distractor_color: '#dbc667',\r\n *            correlation: 0.9,\r\n *            set_size: 50,\r\n *            num_trials: 5\r\n *          },\r\n *            ...\r\n *         ]\r\n */\r\nexport function generate_feature_search_trials(n) {\r\n  // Properties are distractor colors, and the values are the associated target colors\r\n  const color_properties = {\r\n    \"#e45f43\": \"#cd4c32\",\r\n    \"#20874a\": \"#cd4c32\",\r\n    \"#2391d1\": \"#007ebc\",\r\n    \"#dbc667\": \"#007ebc\",\r\n  };\r\n\r\n  // Define constants for correlation values and set sizes\r\n  const correlations_per_distractor = [0.3, 0.6, 0.9];\r\n  const set_sizes = [20, 50];\r\n\r\n  // Define output array\r\n  let output_arrays = {\r\n    \"#cd4c32\": [],\r\n    \"#007ebc\": []\r\n  };\r\n\r\n  // 4 total distractor colors each associated with 1 of 2 target colors\r\n  for (let distractor_color in color_properties) {\r\n    // 12 total supersubconditions per distractor color\r\n    for (let i = 0; i < 12; i++) {\r\n      // Every distractor value has 4 associated supersubconditions\r\n      let correlation = correlations_per_distractor[Math.floor(i / 4)];\r\n\r\n      // Set size property alternates for every supersubcondition\r\n      let set_size = set_sizes[i % 2];\r\n\r\n      // Every 2 supersubconditions has 2 absent target colors\r\n      let target_color;\r\n      if (Math.floor(i / 2) % 2 === 0) {\r\n        target_color = color_properties[distractor_color];\r\n      }\r\n      else {\r\n        target_color = null\r\n      }\r\n\r\n      // Append object to unsorted array depending on the target color because each array needs to be shuffled individually\r\n      output_arrays[color_properties[distractor_color]].push({\r\n        target_color: target_color,\r\n        distractor_color: distractor_color,\r\n        correlation: correlation,\r\n        set_size: set_size,\r\n        num_trials: n,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Durstenfeld shuffle for each array seperately\r\n  for (let target_color in output_arrays) {\r\n    for (let i = output_arrays[target_color].length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [output_arrays[target_color][i], output_arrays[target_color][j]] = [output_arrays[target_color][j], output_arrays[target_color][i]];\r\n    }\r\n  };\r\n\r\n  // Concat both array sections and return final array\r\n  return output_arrays[\"#cd4c32\"].concat(output_arrays[\"#007ebc\"]);\r\n}\r\n\r\n/**\r\n * Create randomized array of each track type, above or below, such that there\r\n * is not more than MAX_REPETITIONS of the same track in a row\r\n * \r\n * @param {array} array \r\n * @param {number} max_length \r\n */\r\nexport function above_and_below_generate_random_trial_array(array, max_length){\r\n  while(array.length < 2 * max_length){\r\n\r\n    // remaining_trials will always be even: 2*this.MAX_TRIALS is even,\r\n    // this.trial_selection_matrix[index].length grows in 2s in the push(above/blow) lines so its also even\r\n    // 2k - 2m = 2(k-m) where k and m are interger, k-m = j where j is an integer\r\n    // remaining_trials / 2 = 2j / 2 = j\r\n    var remaining_trials = 2 * max_length - array.length;\r\n\r\n    // Base case when remaining number of trials is less than sub_block size\r\n    // eg with MAX_TRIALS = 52 and MAX_REPETITIONS = 5, the 11th iteration of the while loop will\r\n    // have 4 \"spots\" remaining in the trial_selection_matrix[index] array (52 * 2 = 104) so, you\r\n    // can't fill it with 2 * MAX_REPETITIONS = 10 trials\r\n    if( remaining_trials  < 2 * this.MAX_REPETITIONS){\r\n      var sub_block = [];\r\n      for (var i = 0; i < remaining_trials / 2; i++){\r\n        sub_block.push(\"above\");\r\n        sub_block.push(\"below\");\r\n      }\r\n      this.shuffleArray(sub_block);\r\n      array.push(...sub_block);\r\n    }\r\n    // Normal case, above/below trial added at the same time, sub_block will be of size 2 * MAX_REPETITIONS\r\n    else{\r\n      var sub_block = [];\r\n      for(var i = 0; i < this.MAX_REPETITIONS; i++){\r\n        sub_block.push(\"above\");\r\n        sub_block.push(\"below\");\r\n      }\r\n      this.shuffleArray(sub_block);\r\n      array.push(...sub_block);\r\n    }\r\n  }\r\n  console.log(array);\r\n}\r\n  \r\n/**\r\n * Generates formated css display element for margins and alignment for a particular stimulus mask\r\n * to be used in an experiment.js function. Graph_attrributes are generated by the get_mixed_graph_styles function below,\r\n * intended to be used with the Mixed Graph type.\r\n *\r\n * @param  {Object} graph_attributes\r\n * @returns {string} css style element stimulus source with correct margins on left, right, top and bottom\r\n * @author Jose Navarro\r\n*/\r\nexport function get_mixed_masks(attributes){\r\n  \r\n  let graph_attributes = {}\r\n  graph_attributes.left = attributes[0];\r\n  graph_attributes.right = attributes[1];\r\n  \r\n  //console.log(graph_attributes)\r\n  let style_left =  `style=\"display:${graph_attributes.left.display}; margin: ${graph_attributes.left.top} ${graph_attributes.left.right} ${graph_attributes.left.bot} ${graph_attributes.left.left};\"`\r\n  let style_right = `style=\"display:${graph_attributes.right.display}; margin: ${graph_attributes.right.top} ${graph_attributes.right.right} ${graph_attributes.right.bot} ${graph_attributes.right.left};\"`\r\n  \r\n  let left_graph_stimulus =   `<img src=\"${graph_attributes.left.image_path}\" width=\"${graph_attributes.left.width}\" height=\"${graph_attributes.left.height}\" ${style_left}</img>`\r\n  let right_graph_stimulus =  `<img src=\"${graph_attributes.right.image_path}\" width=\"${graph_attributes.right.width}\" height=\"${graph_attributes.right.height}\" ${style_right}</img>`\r\n\r\n  let mixed_mask = `<div align = \"center\"> ${left_graph_stimulus} ${right_graph_stimulus}</div>`;\r\n  //console.log(ret)\r\n  return mixed_mask;\r\n\r\n}\r\n\r\n/**\r\n * Geretes the Mask stimulus for a single graph\r\n * @param {Object} graph_attributes \r\n * @returns {string}\r\n */\r\nexport function get_single_mask(graph_attributes){\r\n  let style = `style=\"display:${graph_attributes.display}; margin: ${graph_attributes.top} ${graph_attributes.right} ${graph_attributes.bot} ${graph_attributes.left};\"`\r\n  let graph_stimulus = `<img src=\"${graph_attributes.image_path}\" width=\"${graph_attributes.width}\" height=\"${graph_attributes.height}\" ${style}</img>`\r\n  let mask = `<div align = \"center\"> ${graph_stimulus}</div>`;\r\n  return mask;\r\n}\r\n\r\n\r\n/**\r\n * Generates the correct mask image path and margins for left and right graphs and mask based on graph type.\r\n * Used with Mixed-type graphs but can support any graph type if needed. \r\n * This returns the CSS style properties for mixed graphs. Top, right, bot, and left refer to the margin properties\r\n * \r\n * This function and functions depending on it such as prepare_mixed_plot in the graphing controller are not generalized for more than \r\n * two graphs (left and right / top and bottom, etc...). \r\n * \r\n * TODO: figure out a better way to set out separations rather than hard coding them in this function.\r\n * Note: If graph is aligning but not the mask, add 'px' to the end of the margin values\r\n * @param  {Object} constants\r\n * @param  {array} graph_properties left and right graph properties\r\n * @param  {string} rectangle_mask_path \r\n * @param  {string} square_mask_path \r\n* @returns  {{ left:{}, right:{}}} margins assoc array that has the left and right margins and image path.\r\n*                       margins = { left:{}, right:{}}\r\n* @author Jose Navarro\r\n*/\r\nexport function get_mixed_graph_styles(constants, graph_properties, MASK_PATHS){\r\n  let square_mask_path = constants.background_color === \"WHITE\" ? MASK_PATHS.square : MASK_PATHS.square_black;\r\n  let rectangle_mask_path = constants.background_color === \"WHITE\" ? MASK_PATHS.rectangle: MASK_PATHS.rectangle_black;\r\n  let attributes = {\r\n    left: {image_path: \"\", height: \"\", width: \"\", top: \"\", right: \"\", bot: \"\", left: \"\", display: \"\"}, \r\n    right:{image_path: \"\", height: \"\", width: \"\", top: \"\", right: \"\", bot: \"\", left: \"\", display: \"\"}\r\n  };\r\n\r\n  let left_graph_data;\r\n  let right_graph_data;\r\n\r\n  if(constants.graph_a_attributes && constants.graph_b_attributes){\r\n    left_graph_data = constants[graph_properties[0]];\r\n    right_graph_data = constants[graph_properties[1]];\r\n  }\r\n  else{\r\n    left_graph_data = constants;\r\n    right_graph_data = constants;\r\n  }\r\n\r\n  let left_graph_type = left_graph_data.graph_type;\r\n  let right_graph_type = right_graph_data.graph_type;\r\n\r\n  const zero_px = '0px';\r\n  const strip_plot_distance = 450/2; // 45 mm\r\n  const horizontal_scatter_strip_separation = 150/2; // 15 mm\r\n  const vertical_strip_margin = 450/2 - 300/2 // 15 mm Scatter height + buffer - strip plot line height\r\n  const strip_strip_vertical_spacing = 75/2\r\n  const scatter_strip_separation = 150/2; // 15 mm\r\n  const scatter_spacing = 50/2; // 5 mm\r\n  const pcp_separation = 250/2; // 25 mm\r\n  const scatter_pcp_separation = 200/2; // 20 mm\r\n\r\n  switch(left_graph_type){\r\n    case \"scatter\":\r\n      attributes.left.image_path = square_mask_path;\r\n      attributes.left.width = left_graph_data.axis_length + left_graph_data.buffer;\r\n      attributes.left.height = attributes.left.width;\r\n      switch(right_graph_type){\r\n        case \"scatter\":\r\n          attributes.left.top    = zero_px;\r\n          attributes.left.right  = attributes.left.width/4 + 'px';\r\n          attributes.left.bot    = zero_px;\r\n          attributes.left.left   = zero_px;\r\n          \r\n          attributes.right.image_path = square_mask_path;\r\n          attributes.right.width   = right_graph_data.axis_length + right_graph_data.buffer;\r\n          attributes.right.height  = attributes.right.width;\r\n          attributes.right.top   = zero_px;\r\n          attributes.right.right = zero_px;\r\n          attributes.right.bot   = zero_px;\r\n          attributes.right.left  = attributes.right.width/4 + 'px'; \r\n          break;\r\n        case \"strip\":\r\n          console.log(\"Strip\")\r\n          //scatter atributes\r\n          //attributes.left.display  = \"inline-block\"; // needed to center scatter without margins:auto when the graph is above another graph\r\n          attributes.left.top      = zero_px;\r\n          attributes.left.right    = scatter_spacing +  100/2 + 'px'\r\n          attributes.left.bot      = zero_px;\r\n          attributes.left.left     = scatter_spacing + 'px'\r\n\r\n          //strip atributes\r\n          attributes.right.image_path = rectangle_mask_path;\r\n          attributes.right.width      = right_graph_data.axis_length + right_graph_data.buffer;\r\n          attributes.right.height     = right_graph_data.line_height;\r\n          //attributes.right.display  = \"block\" // uncomment to do top and bottom displays\r\n          //attributes.right.top      = (strip_plot_distance - right_graph_data.line_height) + 'px';\r\n          attributes.right.top        = vertical_strip_margin/2 + 'px';\r\n          attributes.right.right      = zero_px;\r\n          attributes.right.bot        = vertical_strip_margin/2 + 'px';\r\n          attributes.right.left       = zero_px\r\n          break;\r\n        case \"parallel\":\r\n          const scatter_height_centering = (right_graph_data.axis_height + 2*right_graph_data.axis_buffer) - attributes.left.height;\r\n\r\n          attributes.left.top    = scatter_height_centering + 'px';\r\n          attributes.left.right  = scatter_pcp_separation/2 + 'px'\r\n          attributes.left.bot    = scatter_height_centering + 'px';\r\n          attributes.left.left   = zero_px;\r\n\r\n          attributes.right.image_path = square_mask_path;\r\n          attributes.right.width = right_graph_data.axis_separation;\r\n          attributes.right.height = (right_graph_data.axis_height + 2*right_graph_data.axis_buffer) + 'px';\r\n          attributes.right.top   = zero_px;\r\n          attributes.right.right = zero_px;\r\n          attributes.right.bot   = zero_px;\r\n          attributes.right.left  = scatter_pcp_separation/2 + 'px'; \r\n          break;\r\n      }\r\n      break;\r\n    case \"strip\":\r\n      attributes.left.image_path  = rectangle_mask_path;\r\n      attributes.left.width       = left_graph_data.axis_length + left_graph_data.buffer;\r\n      attributes.left.height      = left_graph_data.line_height;\r\n      //attributes.left.display = \"block\";\r\n      attributes.left.top         = zero_px;\r\n      //attributes.left.right   = zero_px; // set in each case\r\n      attributes.left.left        = zero_px;\r\n      attributes.left.bot         = zero_px;\r\n\r\n      switch(right_graph_type){\r\n        case \"scatter\":\r\n          attributes.left.top         = vertical_strip_margin/2 + 'px';\r\n          attributes.left.bot         = vertical_strip_margin/2 + 'px'; \r\n          //attributes.left.bot       =  (strip_plot_distance- left_graph_data.line_height) + 'px';\r\n          attributes.left.right       = zero_px\r\n          \r\n          // scatter attributes \r\n          attributes.right.width      = right_graph_data.axis_length + right_graph_data.buffer;\r\n          attributes.right.height     = attributes.right.width;\r\n          attributes.right.image_path = square_mask_path;\r\n          attributes.right.top        = zero_px;\r\n          attributes.right.right      = scatter_spacing + 'px'\r\n          attributes.right.bot        = zero_px;\r\n          attributes.right.left       = scatter_spacing + 100 + 'px'\r\n          //attributes.right.display = \"inline-block\"; \r\n          break;\r\n        case \"strip\":\r\n          //attributes.left.bot = (strip_plot_distance - left_graph_data.line_height) + 'px';\r\n          attributes.left.right        = horizontal_scatter_strip_separation/2 + 'px';\r\n\r\n          attributes.right.image_path  = rectangle_mask_path;\r\n          attributes.right.width       = right_graph_data.axis_length + right_graph_data.buffer;\r\n          attributes.right.height      = right_graph_data.line_height;\r\n          //attributes.right.top       = (strip_plot_distance - right_graph_data.line_height) + 'px';\r\n          attributes.right.top         = zero_px;\r\n          attributes.right.right       = zero_px;\r\n          attributes.right.bot         = zero_px;\r\n          attributes.right.left        = horizontal_scatter_strip_separation/2 + 'px';\r\n          // To big for a single horizontal line at 8cm or so\r\n          if(attributes.left.width > 400 || attributes.right.width > 400){\r\n            attributes.right.display     = \"block\";\r\n            attributes.left.display      = \"block\";\r\n            attributes.right.left        = zero_px;\r\n            attributes.left.right        = zero_px;\r\n            attributes.right.top         = strip_strip_vertical_spacing + 'px';\r\n            attributes.right.bot         = strip_strip_vertical_spacing + 'px';\r\n          }\r\n          break;\r\n      }\r\n      \r\n      break;\r\n    case \"parallel\":\r\n      attributes.left.image_path = square_mask_path;\r\n      attributes.left.width = left_graph_data.axis_separation + 'px';\r\n      attributes.left.height = (left_graph_data.axis_height + 2*left_graph_data.axis_buffer) + 'px';\r\n      switch(right_graph_type){\r\n        case \"scatter\":\r\n          attributes.left.top    = zero_px;\r\n          attributes.left.right  = scatter_pcp_separation/2 + 'px'\r\n          attributes.left.bot    = zero_px;\r\n          attributes.left.left   = zero_px;\r\n\r\n          attributes.right.image_path = square_mask_path;\r\n          attributes.right.width   = right_graph_data.axis_length + right_graph_data.buffer;\r\n          attributes.right.height  = attributes.right.width;\r\n          const scatter_height_centering = (left_graph_data.axis_height + 2*left_graph_data.axis_buffer) - attributes.right.height;\r\n          attributes.right.top   = scatter_height_centering + 'px';\r\n          attributes.right.right = zero_px;\r\n          attributes.right.bot   = scatter_height_centering + 'px';\r\n          attributes.right.left  = scatter_pcp_separation/2 + 'px'\r\n          break;\r\n        case \"strip\":\r\n          break;\r\n        case \"parallel\":\r\n          attributes.left.top    = zero_px;\r\n          attributes.left.right  = pcp_separation/2 + 'px'\r\n          attributes.left.bot    = zero_px;\r\n          attributes.left.left   = zero_px;\r\n\r\n          attributes.right.image_path = square_mask_path;\r\n          attributes.right.width = right_graph_data.axis_separation + 'px';\r\n          attributes.right.height = (right_graph_data.axis_height + 2*right_graph_data.axis_buffer); \r\n          attributes.right.top   = zero_px;\r\n          attributes.right.right = zero_px;\r\n          attributes.right.bot   = zero_px;\r\n          attributes.right.left  = pcp_separation/2 + 'px'; \r\n          break;\r\n      }\r\n      break;\r\n  }\r\n  return [attributes.left, attributes.right];\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} constants \r\n * @param {Object} graph_properties \r\n * @param {string} square_mask_path \r\n * @param {string} rectangle_mask_path \r\n * @returns {Object}\r\n */\r\nexport function get_single_graph_style(constants, graph_properties, square_mask_path, rectangle_mask_path){\r\n  let graph_style = {image_path: \"\", height: \"\", width: \"\", top: \"\", right: \"\", bot: \"\", left: \"\", display: \"\"};\r\n  const zero_px = '0px';\r\n\r\n  switch(graph_properties.graph_type){\r\n    case \"scatter\":\r\n      graph_style.image_path = square_mask_path;\r\n      graph_style.width     = graph_properties.axis_length + graph_properties.buffer;\r\n      graph_style.height    = graph_style.width;\r\n      graph_style.top       = zero_px;\r\n      graph_style.right     = zero_px;\r\n      graph_style.bot       = zero_px;\r\n      graph_style.left      = zero_px;\r\n      break;\r\n\r\n  }\r\n  return graph_style;\r\n}\r\n\r\n /**\r\n  * Randomize array in-place using Durstenfeld shuffle algorithm\r\n  * Kindly taken from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n  * \r\n  * @param {number[]} array \r\n  */\r\n export function shuffleArray(array) {\r\n  for (var i = array.length - 1; i > 0; i--) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      var temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n  }\r\n}\r\n\r\n/**\r\n * Generates conditional timeline instruction for JND and Stevens hybrid conditions.\r\n * @param {Object} experiment experiment object either JND or Stevens\r\n * @returns {jsPsych trial}\r\n */\r\nexport function genereate_hybrid_instruction(experiment){\r\n  \r\n  let other_task_name;\r\n  switch(experiment.EXPERIMENT_NAME){\r\n    case \"JND\":\r\n      other_task_name = \"Stevens\";\r\n      break;\r\n    case \"Stevens\":\r\n      other_task_name = \"JND\"\r\n      break\r\n  }\r\n\r\n  let instructions = \r\n  `<div align = 'center'>\r\n    <p> Please exit full screen mode and switch to the ${other_task_name} Task.\r\n      <br> Do not close this window. You will return to it when the ${other_task_name} Task is completed.\r\n      <br> Enter full screen mode again and press any key to continue when you return.\r\n    </p>\r\n  </div>`\r\n\r\n  let instruction_trial = {\r\n    type: 'html-keyboard-response',\r\n    stimulus: instructions\r\n  };\r\n  // conditional timeline wrapper\r\n\r\n  let block_size = experiment.EXPERIMENT_NAME === \"JND\" ? 3 : 1\r\n\r\n  var hybrid_timeline = {\r\n    timeline: [instruction_trial],\r\n    conditional_function: function() {\r\n      console.log(\"Testing hybrid?!!!!!!!!!!\")\r\n      console.log(experiment.end_sub_condition(\"test\", experiment.current_sub_condition_index) && (experiment.current_sub_condition_index + 1) % block_size == 0)\r\n      \r\n      // if it is the end of the Sub Condition and the end of a block (assumes block size is 3 for hybrid tasks)\r\n      if (experiment.end_sub_condition(\"test\", experiment.current_sub_condition_index) && (experiment.current_sub_condition_index + 1) % block_size == 0) {\r\n        console.log(\"Hybrid case!\")\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  };\r\n\r\n  return hybrid_timeline\r\n}\r\n\r\n\r\n/* Get the height of the screen\r\n* Kindly taken from https://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code\r\n*/\r\nexport function getScreenHeight() {\r\n  return screen.height\r\n\r\n}\r\n\r\n",
    "static": true,
    "longname": "E:/VCL/new_sequencing/VCLWebFramework/public/scripts/helpers/experiment_helpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1195,
    "kind": "function",
    "name": "generate_timeline_screen",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~generate_timeline_screen",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{generate_timeline_screen}",
    "description": "Helper function to generate generic timeline object",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} a timeline object with stimulus set to empty ''"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "the type of timeline object"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "time in ms for screen duration"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "choices",
        "description": "key choices - either a number array of valid ascii keys OR no keys"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a timeline object with stimulus set to empty ''"
    }
  },
  {
    "__docId__": 1196,
    "kind": "function",
    "name": "get_num_blocks",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~get_num_blocks",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{get_num_blocks}",
    "description": "Returns the number of blocks in a condition with the block\nproperty",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "blocking_attribute",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1197,
    "kind": "function",
    "name": "check_params",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~check_params",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{check_params}",
    "description": "",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment_name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "trial_structure",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "graph_type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "balancing_type",
        "description": ""
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1198,
    "kind": "function",
    "name": "is_converged_in_window",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~is_converged_in_window",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{is_converged_in_window}",
    "description": "Tests for convergange in a subcondition's adjusted quantity array with sliding window",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}   True if converged."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "subcondition_adjusted_quantities",
        "description": "the adjusted quantities to check for convergance"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min_trials",
        "description": "minimum number of trials needed before convergance is chekced"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "window_size",
        "description": "for sliding window"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "window_interval",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "convergance_threshold",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if converged."
    }
  },
  {
    "__docId__": 1199,
    "kind": "function",
    "name": "randomize_position",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~randomize_position",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{randomize_position}",
    "description": "Randomizes the position of the base and adjusted coordinates\nbeing displayed on the left or right graphs, and returns\nthe coordinates for the graphs.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{x_values: number[], y_values: number[]}"
        ],
        "spread": false,
        "optional": false,
        "name": "base_coordinates",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{x_values: number[], y_values: number[]}"
        ],
        "spread": false,
        "optional": false,
        "name": "adjusted_coordinates",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "adjusted_value",
        "description": "@returns{{left: number[number[]], right: number[number[]]}}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1200,
    "kind": "function",
    "name": "randomize_position_symmetric",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~randomize_position_symmetric",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{randomize_position_symmetric}",
    "description": "Randomizes the position of the base and adjusted coordinates for side-by-side displays\nand returns the coordinates for the left/top graph first and right/bottom graph second.",
    "lineNumber": 242,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{left: [coordinates], right: [coordinates]}}            "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{x_values: [], y_values: []"
        ],
        "spread": false,
        "optional": false,
        "name": "}",
        "description": "adjusted_coordinates_high"
      },
      {
        "nullable": null,
        "types": [
          "{x_values: [], y_values: []"
        ],
        "spread": false,
        "optional": false,
        "name": "}",
        "description": "adjusted_coordinates_low"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "adjusted_value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "adjusted_value_low",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{left: [coordinates], right: [coordinates]}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1201,
    "kind": "function",
    "name": "bundle_z_values",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~bundle_z_values",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{bundle_z_values}",
    "description": "Adds an extra dimension to an n-dimensional collection of coordinates",
    "lineNumber": 290,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[number[]]} - bundled z_values [[x0,y0,z0],...,[xn,yn,zn]]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[number[]]"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": "[[x0,y0],...,[xn,yn]]"
      },
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "z_values",
        "description": "[z0,...,zn]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[number[]]"
      ],
      "spread": false,
      "description": "bundled z_values [[x0,y0,z0],...,[xn,yn,zn]]"
    }
  },
  {
    "__docId__": 1202,
    "kind": "function",
    "name": "repeat_y_values",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~repeat_y_values",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{repeat_y_values}",
    "description": "",
    "lineNumber": 307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[number[]]} bundled z_values equal to y values [[x0,y0,y0],...,[xn,yn,yn]]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[number[]]"
        ],
        "spread": false,
        "optional": false,
        "name": "coordinates",
        "description": "[[x0,y0],...,[xn,yn]]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[number[]]"
      ],
      "spread": false,
      "description": "bundled z_values equal to y values [[x0,y0,y0],...,[xn,yn,yn]]"
    }
  },
  {
    "__docId__": 1203,
    "kind": "function",
    "name": "randomize_graph_attributes_mixed",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~randomize_graph_attributes_mixed",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{randomize_graph_attributes_mixed}",
    "description": "Randomizes the attribute location of the mixed graph type\nIn comparisons where one graph is on top of the other, left = above, right = below\nReturn object is an array so it can be used in graphing controller",
    "lineNumber": 323,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string[]}           "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1204,
    "kind": "function",
    "name": "get_running_average",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~get_running_average",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{get_running_average}",
    "description": "Adds a new value onto a running average",
    "lineNumber": 348,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "previous_average",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "new_value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "total_n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1205,
    "kind": "function",
    "name": "randomize_radius_position",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~randomize_radius_position",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{randomize_radius_position}",
    "description": null,
    "lineNumber": 357,
    "undocument": true,
    "params": [
      {
        "name": "trial",
        "types": [
          "*"
        ]
      },
      {
        "name": "base_radius",
        "types": [
          "*"
        ]
      },
      {
        "name": "adjusted_radius",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1206,
    "kind": "function",
    "name": "force_greater_right_position",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~force_greater_right_position",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{force_greater_right_position}",
    "description": "Forces the right graph to always have the greater correlation.\nUsed for testing purposes.",
    "lineNumber": 391,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{left: number[number[]], right: number[number[]]}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "trial"
        ],
        "spread": false,
        "optional": false,
        "name": "trial",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number[number[]]"
        ],
        "spread": false,
        "optional": false,
        "name": "base_coordinates",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number[number[]]"
        ],
        "spread": false,
        "optional": false,
        "name": "adjusted_coordinates",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "base_correlation",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "adjusted_correlation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{left: number[number[]], right: number[number[]]}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1207,
    "kind": "function",
    "name": "nova_variables",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~nova_variables",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{nova_variables}",
    "description": "Generates experiment variables array for NOVA condition where the number of each variable is exacty\nn times the proportion inputted. Array elements are randomized.",
    "lineNumber": 484,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "input for desired number of elements for the output array"
      },
      {
        "nullable": null,
        "types": [
          "{corner: Object, symbol: Object, symbol_direction: Object, letter: Object}"
        ],
        "spread": false,
        "optional": false,
        "name": "proportion_data",
        "description": "input for desired number of elements for the output array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1208,
    "kind": "function",
    "name": "generate_feature_search_trials",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~generate_feature_search_trials",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{generate_feature_search_trials}",
    "description": "The trial properties array generation function for the feature search task.\nDeveloped 2021-02-21\n\nThe specifications of the required array of trial parameters can be found in \"Condition 1\" here: \nhttps://docs.google.com/document/d/1fTKn6hmgGXiHuWM8iZmhekhLRqKLHRqa2RCvUj-77Z8/edit?usp=sharing",
    "lineNumber": 639,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object[]} Sample of output:\n        [\n         {\n           target_color: null,\n           distractor_color: '#20874a',\n           correlation: 0.6,\n           set_size: 50,\n           num_trials: 5\n         },\n         {\n           target_color: '#007ebc',\n           distractor_color: '#dbc667',\n           correlation: 0.9,\n           set_size: 50,\n           num_trials: 5\n         },\n           ...\n        ]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "(Number of trials per supersubcondition of the feature search task)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": "Sample of output:\n        [\n         {\n           target_color: null,\n           distractor_color: '#20874a',\n           correlation: 0.6,\n           set_size: 50,\n           num_trials: 5\n         },\n         {\n           target_color: '#007ebc',\n           distractor_color: '#dbc667',\n           correlation: 0.9,\n           set_size: 50,\n           num_trials: 5\n         },\n           ...\n        ]"
    }
  },
  {
    "__docId__": 1209,
    "kind": "function",
    "name": "above_and_below_generate_random_trial_array",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~above_and_below_generate_random_trial_array",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{above_and_below_generate_random_trial_array}",
    "description": "Create randomized array of each track type, above or below, such that there\nis not more than MAX_REPETITIONS of the same track in a row",
    "lineNumber": 707,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max_length",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1210,
    "kind": "function",
    "name": "get_mixed_masks",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~get_mixed_masks",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{get_mixed_masks}",
    "description": "Generates formated css display element for margins and alignment for a particular stimulus mask\nto be used in an experiment.js function. Graph_attrributes are generated by the get_mixed_graph_styles function below,\nintended to be used with the Mixed Graph type.",
    "lineNumber": 752,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} css style element stimulus source with correct margins on left, right, top and bottom"
      },
      {
        "tagName": "@author",
        "tagValue": "Jose Navarro"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "graph_attributes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "css style element stimulus source with correct margins on left, right, top and bottom"
    }
  },
  {
    "__docId__": 1211,
    "kind": "function",
    "name": "get_single_mask",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~get_single_mask",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{get_single_mask}",
    "description": "Geretes the Mask stimulus for a single graph",
    "lineNumber": 776,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "graph_attributes",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1212,
    "kind": "function",
    "name": "get_mixed_graph_styles",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~get_mixed_graph_styles",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{get_mixed_graph_styles}",
    "description": "Generates the correct mask image path and margins for left and right graphs and mask based on graph type.\nUsed with Mixed-type graphs but can support any graph type if needed. \nThis returns the CSS style properties for mixed graphs. Top, right, bot, and left refer to the margin properties\n\nThis function and functions depending on it such as prepare_mixed_plot in the graphing controller are not generalized for more than \ntwo graphs (left and right / top and bottom, etc...). \n\nTODO: figure out a better way to set out separations rather than hard coding them in this function.\nNote: If graph is aligning but not the mask, add 'px' to the end of the margin values",
    "lineNumber": 802,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": " {{ left:{}, right:{}}} margins assoc array that has the left and right margins and image path.\n                      margins = { left:{}, right:{}}"
      },
      {
        "tagName": "@author",
        "tagValue": "Jose Navarro"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "graph_properties",
        "description": "left and right graph properties"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rectangle_mask_path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "square_mask_path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{ left:{}, right:{}}"
      ],
      "spread": false,
      "description": "margins assoc array that has the left and right margins and image path.\n                      margins = { left:{}, right:{}}"
    }
  },
  {
    "__docId__": 1213,
    "kind": "function",
    "name": "get_single_graph_style",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~get_single_graph_style",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{get_single_graph_style}",
    "description": "",
    "lineNumber": 995,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "constants",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "graph_properties",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "square_mask_path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rectangle_mask_path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1214,
    "kind": "function",
    "name": "shuffleArray",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~shuffleArray",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{shuffleArray}",
    "description": "Randomize array in-place using Durstenfeld shuffle algorithm\nKindly taken from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array",
    "lineNumber": 1020,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1215,
    "kind": "function",
    "name": "genereate_hybrid_instruction",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~genereate_hybrid_instruction",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{genereate_hybrid_instruction}",
    "description": "Generates conditional timeline instruction for JND and Stevens hybrid conditions.",
    "lineNumber": 1034,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{jsPsych trial}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "experiment",
        "description": "experiment object either JND or Stevens"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "jsPsych trial"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1216,
    "kind": "function",
    "name": "getScreenHeight",
    "memberof": "scripts/helpers/experiment_helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scripts/helpers/experiment_helpers.js~getScreenHeight",
    "access": "public",
    "export": true,
    "importPath": "vcl-web-framework/scripts/helpers/experiment_helpers.js",
    "importStyle": "{getScreenHeight}",
    "description": null,
    "lineNumber": 1085,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# VCL Web Framework\r\n\r\nThis is a Node.js application that runs correlation-related experiments of the VCL Lab.\r\n\r\nDocumentation for the framework is on the git pages [here.](https://ubc-vcl.github.io/VCLWebFramework/)\r\n\r\n## Set Up\r\n\r\n#### (1) Git clone the repository\r\n#### (2) Install Node\r\n\r\nVisit the following link to download Node: [here.](https://nodejs.org/en/)\r\n\r\n#### (3) Install Dependencies\r\n\r\nNavigate into the folder:\r\n```\r\ncd VCLWebFramework\r\n```\r\nThen run:\r\n```\r\nnpm install\r\n```\r\n\r\n### (4) Set Up the Environment Variables\r\n\r\nContact your Project Leader or an available teammember to obtain the environment variables. \r\n\r\nCreate a file named\r\n\r\n```\r\n.env\r\n```\r\n\r\nPaste the environment variables into the .env file and save\r\n\r\n#### (5) Run the Application\r\n\r\n```\r\nnode app.js\r\n```\r\n\r\nOr alternatively, with nodemon:\r\n\r\n```\r\nnodemon app.js\r\n```\r\n\r\nThe app is available at [localhost:8080](localhost:8080). If you want to access it at a different port, change the port number in app.js (line 57).\r\n\r\n## Codebase Primers\r\n\r\n### Overview\r\nhttps://docs.google.com/presentation/d/1PMx1mmkiOtk_3nz9Ud58A2pk7Q5Inadwpw4vgKMSTsM/edit?usp=sharing\r\n\r\n### Practice Condition\r\nhttps://drive.google.com/open?id=1AWqYALW9iogxvZk3D1-PzxgOS-yWMcio\r\nRefer to Developing New Conditions tab on wiki\r\n\r\n\r\n\r\n",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"vcl-web-framework\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"This is a Node.js application that runs correlation-related experiments of the VCL Lab.\",\r\n  \"main\": \"app.js\",\r\n  \"directories\": {\r\n    \"doc\": \"docs\"\r\n  },\r\n  \"dependencies\": {\r\n    \"body-parser\": \"^1.18.3\",\r\n    \"canvg\": \"^4.0.2\",\r\n    \"d3\": \"^7.8.5\",\r\n    \"dotenv\": \"^16.3.1\",\r\n    \"ejs\": \"^2.6.1\",\r\n    \"esdoc-inject-script-plugin\": \"^1.0.0\",\r\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\r\n    \"esdoc-integrate-manual-plugin\": \"^1.0.0\",\r\n    \"express\": \"^4.18.2\",\r\n    \"firebase-admin\": \"^9.3.0\",\r\n    \"json2csv\": \"^6.0.0-alpha.2\",\r\n    \"mathjs\": \"^11.8.2\",\r\n    \"nodemon\": \"^1.19.0\",\r\n    \"sortablejs\": \"^1.12.0\"\r\n  },\r\n  \"scripts\": {\r\n    \"start\": \"node app.js\",\r\n    \"test\": \"jest\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/UBC-VCL/VCLWebFramework.git\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/UBC-VCL/VCLWebFramework/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/UBC-VCL/VCLWebFramework#readme\",\r\n  \"type\": \"module\",\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.22.5\",\r\n    \"@babel/plugin-transform-modules-commonjs\": \"^7.22.5\",\r\n    \"@babel/preset-env\": \"^7.22.5\",\r\n    \"babel-jest\": \"^29.5.0\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"jest\": \"^29.7.0\",\r\n    \"jest-environment-jsdom\": \"^29.5.0\"\r\n  }\r\n}\r\n",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# VCL Web Framework\r\n\r\nThis is a Node.js application that runs correlation-related experiments of the VCL Lab.\r\n\r\nDocumentation for the framework is on the git pages [here.](https://ubc-vcl.github.io/VCLWebFramework/)\r\n\r\n## Set Up\r\n\r\n#### (1) Git clone the repository\r\n#### (2) Install Node\r\n\r\nVisit the following link to download Node: [here.](https://nodejs.org/en/)\r\n\r\n#### (3) Install Dependencies\r\n\r\nNavigate into the folder:\r\n```\r\ncd VCLWebFramework\r\n```\r\nThen run:\r\n```\r\nnpm install\r\n```\r\n\r\n### (4) Set Up the Environment Variables\r\n\r\nContact your Project Leader or an available teammember to obtain the environment variables. \r\n\r\nCreate a file named\r\n\r\n```\r\n.env\r\n```\r\n\r\nPaste the environment variables into the .env file and save\r\n\r\n#### (5) Run the Application\r\n\r\n```\r\nnode app.js\r\n```\r\n\r\nOr alternatively, with nodemon:\r\n\r\n```\r\nnodemon app.js\r\n```\r\n\r\nThe app is available at [localhost:8080](localhost:8080). If you want to access it at a different port, change the port number in app.js (line 57).\r\n\r\n## Codebase Primers\r\n\r\n### Overview\r\nhttps://docs.google.com/presentation/d/1PMx1mmkiOtk_3nz9Ud58A2pk7Q5Inadwpw4vgKMSTsM/edit?usp=sharing\r\n\r\n### Practice Condition\r\nhttps://drive.google.com/open?id=1AWqYALW9iogxvZk3D1-PzxgOS-yWMcio\r\nRefer to Developing New Conditions tab on wiki\r\n\r\n\r\n\r\n",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\README.md",
    "name": "README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\README.md",
    "name": "README.md",
    "content": "# VCL Web Framework\r\n\r\nThis is a Node.js application that runs correlation-related experiments of the VCL Lab.\r\n\r\nDocumentation for the framework is on the git pages [here.](https://ubc-vcl.github.io/VCLWebFramework/)\r\n\r\n## Set Up\r\n\r\n#### (1) Git clone the repository\r\n#### (2) Install Node\r\n\r\nVisit the following link to download Node: [here.](https://nodejs.org/en/)\r\n\r\n#### (3) Install Dependencies\r\n\r\nNavigate into the folder:\r\n```\r\ncd VCLWebFramework\r\n```\r\nThen run:\r\n```\r\nnpm install\r\n```\r\n\r\n### (4) Set Up the Environment Variables\r\n\r\nContact your Project Leader or an available teammember to obtain the environment variables. \r\n\r\nCreate a file named\r\n\r\n```\r\n.env\r\n```\r\n\r\nPaste the environment variables into the .env file and save\r\n\r\n#### (5) Run the Application\r\n\r\n```\r\nnode app.js\r\n```\r\n\r\nOr alternatively, with nodemon:\r\n\r\n```\r\nnodemon app.js\r\n```\r\n\r\nThe app is available at [localhost:8080](localhost:8080). If you want to access it at a different port, change the port number in app.js (line 57).\r\n\r\n## Codebase Primers\r\n\r\n### Overview\r\nhttps://docs.google.com/presentation/d/1PMx1mmkiOtk_3nz9Ud58A2pk7Q5Inadwpw4vgKMSTsM/edit?usp=sharing\r\n\r\n### Practice Condition\r\nhttps://drive.google.com/open?id=1AWqYALW9iogxvZk3D1-PzxgOS-yWMcio\r\nRefer to Developing New Conditions tab on wiki\r\n\r\n\r\n\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\terminology.md",
    "name": "./docs/manual/pages/terminology.md",
    "content": "# Terminology\r\n\r\nBelow is common terminology the lab uses when describing experiments.\r\n\r\n## Describing an Experiment\r\n\r\nEvery experiment has the following:\r\n\r\n- **Experiment** : the type of task to be performed.\r\n- **Condition** : dictated by the task, the method(s) used, and the stimuli type.\r\n- **Subcondition** : a set of stable constants.\r\n- **Trial** : marked by the user making a meaningful response/input that is purposely recorded.\r\n  - E.g. I am trying to adjust the correlation of a specific plot to be the midpoint between a plot with a high correlation, and a plot with a lower correlation. The final correlation that I have adjusted marks the relevant trial data to be saved.\r\n- **Action** : the actions a user can make within a trial.\r\n  - E.g. In the above trial example, I can be taking actions to increase or decrease my correlation.\r\n\r\n### **Task**\r\nThe decision task defined in terms of the stimuli and question posed.\r\n- **Detection** : \"there may be any number of alternative stimuli, but one is blank, and the observer is asked only to distinguish between the blank and the other stimuli.\"\r\n- **Discrimination** : \"there are any number of alternative stimuli, but one of the stimuli (which need not be blank), is designated as the reference, and the observer is asked only to distinguish between the reference and other stimuli.\"\r\n\r\n### **Method** \r\n- **Forced Choice** : \"traditionally characterized by two separate stimulus presentations, one blank and one nonblank, in random order. The two stimuli may be presented successively or side by side. The observer is asked whether the nonblank stimulus was first or second (or on the left or right).\"\r\n- **Matching** : \"two stimuli are presented, and the observer is asked to adjust one to match the other.\"\r\n- **Staircase** : \"for difference thresholds, a variable stimulus is adjusted to increase its absolute difference from a standard stimulus whenever the difference is not discriminated or is adjusted to decrease its absolute difference from the standard stimulus whenever the difference is discriminated.\"\r\n   - _**E.g.**_ We have two scatter plots side by side. Let us say plot A has r = 0.5 and plot B has r = 0.8. The task is to pick the plot with the higher correlation.\r\n     - _You correctly pick plot B:_ So the next trial will be harder, in that the correlations of the two plots are now closer together. For example, plot A would have r = 0.5 and plot B would have r = 0.7.  \r\n     - _You incorrectly pick plot A:_ So the next trial will be easier, in that the correlations of the two plots are now wider apart. For example, plot A would have r = 0.5 and plot B would have r = 0.9.\r\n\r\n### **Properties** \r\n- **Balancing** : the ways in which the subconditions for a given condition are ordered.\r\n   - Random\r\n   - Latin-Square\r\n- **Graph Type** : e.g. scatter plots, ring plots, strip plots, shapes \r\n- **Graphical Manipulation**: \r\n  - May be on how the points are plotted e.g. for strip plots, a y coordinate defines the horizontal translation of the \"strip\" and x coordinate defines the height of the \"strip\".\r\n  - May be in terms of how many distributions are plotted on the same graph e.g. on the same axes, we can have TWO scatter plots with different correlations.\r\n\r\n\r\n---\r\nDefinitions adapted from:\r\n\r\n_D. G., & Farell, B. (lOlD). Psychophysical methods. In M. Bass, C. DeCusatis. J. Enoch, V. Lakshmit1arayanan. G. U, C. MacDonald, V. Mahajan & E. V. Stryland (Eds,), Handbook 01 Optics. Third Edition, VDlume III: Visioo and Vision Optics (w. 3.1-3.12). New Yori<: McGraw+liR. http:// psych.nyu,edu/pelilpubslpelIi20 IOpsychophysical-methods,pdt_\r\n\r\n\r\n## Condition Identifiers\r\n\r\nEach condition is uniquely defined by 4 properties.\r\n\r\n### **Base Experiment**\r\n\r\nDefines the underlying procedural logic of the experiment.\r\n\r\n- JND\r\n- Stevens\r\n- Equalizer\r\n- Estimation\r\n\r\n### **Trial Structure**\r\n\r\nThe trial structure represents the range or pattern of correlation values, and defines a set of constants for each subcondition. Each condition can follow these pattern of values, or use it's own custom structure.\r\n\r\nThe two main types of patterns are Design or Foundational.\r\n\r\n- Foundational : 17 subconditions, base correlation is in the range of [0.0, 0.9] in 0.1 increments.\r\n- Design       : 15 subconditions, grouped into five sets with base correlation values set at 0.3, 0.6, 0.9.\r\n- Estimation\r\n- Custom       : used when a condition does not follow any of the above structures.\r\n\r\n### **Balancing**\r\n\r\nHow subconditions in a given condition get ordered.\r\n\r\n- Randomized\r\n- Latin Square\r\n\r\n### **Graph Types**\r\n\r\nThe type of graph used in the visualization.\r\n\r\n- Scatter\r\n- Strip\r\n- Ring\r\n- Shapes\r\n\r\n### **Attributes**\r\n\r\nAny given condition will always have a base, trial structure, balancing and graph type. However, they will also have a set of variables that manipulate different aspects of the distribution, graphical properties of the visualization, and non-graphical properties such as having a custom instruction set. \r\n\r\nHere is a non-comprehensive list of properties that could be manipulated by a condition.\r\n\r\n* Experimental attributes:\r\n  * Distribution type\r\n  * Base correlation of the reference plot\r\n  * Whether the correlation converges from above or below\r\n  * Complete list of experimental attributes [here](/VCLWebFramework/manual/supported_properties.html#experimental-attributes)\r\n* Graphical attributes: \r\n   * Some examples if `plot type = scatter`:\r\n      * Point shape\r\n      * Point color\r\n      * Point size\r\n   * Some examples if `plot type = strip`:\r\n      * Line length\r\n      * Line width\r\n   * Complete list of graphical attributes [here](/VCLWebFramework/manual/supported_properties.html#experimental-attributes)   \r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\architecture.md",
    "name": "./docs/manual/pages/architecture.md",
    "content": "# Architecture\r\n\r\nThe framework runs on a web-based stack, using JsPsych for experimental logic support and D3 for visualization.\r\n\r\n## Stack\r\n\r\n- Javascript\r\n- Node.js\r\n- Express.js\r\n- JsPsych\r\n- D3.js\r\n- ESDoc (for documentation)\r\n\r\n## Structure\r\n\r\nBelow is a very high-level overview of the entire structure. Basically:\r\n\r\n1. `conditions.js` feeds into the index to generate the UI, and send the correct identifiers for that condition.\r\n2. Upon user input on UI, we do a GET request to obtain the correct HTML based on `base experiment`. \r\n3. The experiment HTML is linked to an **experiment timeline** and **model singleton class**. \r\n  - The timeline uses JsPsych, which helps order the presentation of what is displayed to the user.\r\n  - The singleton class extracts the right data, balances subconditions, does any calculations necessary on a trial-by-trial basis, and sends what needs to be presented to the timeline and to the `trial HTML`, which displays all trial presentations.\r\n4. Experimental properties, such as graphing, constants used, balancing, or the type of distribution, are fed into the singleton or into the trial HTML (since it is doing the displaying).\r\n\r\n![image of architecture](/VCLWebFramework/manual/img/architecture.png)\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\experiments.md",
    "name": "./docs/manual/pages/experiments.md",
    "content": "# Experiments\r\n\r\nThese are the following experiments supported by our framework. The table lists the values for the different identifiers used.\r\n\r\nFor the Madison's multiple ensemble experiments from December 2018, it is in the repo [here](https://github.com/Wongelawit/Correlation_MultipleEnsemble) - you need to pull the `Numerosity-Task` and `visualSearch` branches independently. (So the experiments are **NOT** on master.)\r\n\r\nLook [here](/VCLWebFramework/manual/terminology.html#condition-identifiers) to understand what identifiers are.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\code_review.md",
    "name": "./docs/manual/pages/code_review.md",
    "content": "# Code Review Process\r\n\r\nBelow is the process the lab's developers use when reviewing new coded features and conditions to ensure correct functionality and coding standards\r\n\r\n## Primary Code Reviewers\r\n\r\nBelow are the people listed as code reviewers for major/critical new features and conditions. Their task is to ensure the code written fits the lab's coding standards and does not introduce new bugs into the framework\r\n\r\n- **Madison**\r\n- **Kevin**\r\n- **Kyle**\r\n\r\n## Peer Code Reviewers\r\n\r\nFor simpler features and conditions that are not time-sensitive and critical to the functionality of the lab. Peer developers will be done in pairs consisting of a senior and junior lab developer.\r\n\r\n### Senior Peers\r\n\r\nThose who have implemented one or more new conditions or features within the framework\r\n\r\n### Junior Peers\r\n\r\nThose who have just started out in the lab\r\n\r\n## Stakeholders\r\n\r\nStakeholders are the lab members who requested the new feature/condition. Once the developer is done coding the requested feature/condition, they should confirm with the stakeholder that the code fits their requirements before requesting a code review.\r\n\r\nPossible stakeholders are listed below\r\n- **Prof. Ronald Rensink**\r\n- **Madison**\r\n- **Jessica**\r\n- **Any researcher at the lab**\r\n\r\n## Code Review Format\r\n\r\n### Environment\r\n- For non-critical features/conditions, code reviews can be conducted through Google Hangouts and screen shares due to differing schedules \r\n- For critical features relevant to current research, in-person code reviews are recommended\r\n\r\n### Before the Review\r\n\r\nDevelopers must be able to test the new feature/condition and ensure it's working to stakeholder requirements\r\n\r\n#### For Conditions\r\n- Are all subcondition variable combinations tested?\r\n- Does the data properly save to the csv?\r\n- Are all attributes needed by researchers printed out?\r\n- Did the developer run the esdoc bin update command?\r\n\r\n#### For Features/Changes to Back-End Code\r\n\r\n- Does the feature actually work without bugs?\r\n- Were there compromises that were made?\r\n- Is the workflow of the application disrupted in some way?\r\n- Does it do what we want it to do?\r\n\r\n#### The Stakeholder Review\r\n\r\nDevelopers should meet with the stakeholder online/in-person and show the new condition/feature in action.\r\nOnce the stakeholder gives the approval, the developer can make a pull request and request a code review.\r\n\r\n### The Code Review Itself\r\n\r\nThe code review is a meeting between a code-reviewer and a developer. The developer shows the feature in action and the code reviewer and developer look at the actual code to ensure quality.\r\n\r\n#### For the Reviewer:\r\n- Are variables/functions properly named/documented?\r\n- Is there code being repeated? Lots of if cases or functions that seem to do the same thing with only minor differences?\r\n- Are functions too long? If so, make them into helper functions\r\n- Does the new features actually work?\r\n- Potential edge cases?\r\n\r\nIf additional fixes are needed, the code reviewer **must document the requested changes on the created pull request.**\r\n\r\nOnce developer makes additional changes, they must schedule another code review (This one can be shorter or done with image sharing).\r\n\r\nOnce the code review is complete, the issue can be closed and the pull request merged in.\r\n\r\n## Practices to Enforce\r\n\r\nTo ensure consistency and ease of reference for future lab members, it's important to make sure code and documentation follows the same format.\r\n\r\n### Logistical Practices\r\n\r\n#### Github Issues\r\nThis will be primary place to document and assign wanted features/conditions/bugs/experiment types etc\r\nALL requirements, feedback, complications, related issues must be documented in Github Issues\r\n\r\n#### Branch naming\r\nMUST HAVE CONSISTENT NAMING: `<issue name>_<developer>`\r\n\r\n#### Branch merging\r\n- This requires a pipeline to know which features are ready in the same time frame.\r\n- Group issues together by completion date (Github milestones)\r\n- Constant git pulls. If features take more than a week to implement, **must remind them to git pull or rebase from master to update their working copy** so they don’t try to merge in outdated code.\r\n\r\n\r\n### Coding Practices\r\n\r\n#### Quick code\r\n- Reduce nested for-loops if possible\r\n- Ensure performance doesn't take a hit\r\n\r\n#### Readable code\r\n- If a function is too bloated move parts into separate helper functions\r\n- If code is repeated across different cases with minimal differences, try combining them into one function\r\n\r\n#### Self-documenting Code\r\n- Variables and functions properly named (no *var x = 0;*)\r\n- Comments if needed\r\n##### All new functions need a description in the preamble\r\n- Describe what the function does\r\n- Describe arguments taken in\r\n- Describe in what format the function outputs\r\n- Example input/output if necessary\r\n\r\n#### Documented Mark-Down Files\r\n- Refer to wiki for how-to\r\n- For new experiments or properties\r\n- E.g. since we have new dot types (outlines) these properties need to be documented.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\jnd.md",
    "name": "./docs/manual/pages/jnd.md",
    "content": "# >> JND\r\n\r\n- **Task**: Discrimination\r\n- **Method**: Forced choice with Staircase\r\n\r\n## Specifications\r\n\r\n**_**Note that all CAPPED variables are constants taken from the excel sheets/data file.**_**\r\n\r\n- For a given subcondition, there are at minimum 24 trials and at maximum 52. Once a user has reached the 24th trial, we start computing for convergence by calculating an F-value to see if it is lower than the threshold. \r\n  - If the F-value is < `(1-CONVERGENCE_THRESHOLD)`, then the current subcondition ends, and proceeds to the next subcondition.\r\n  - If the F-value is >= `(1-CONVERGENCE_THRESHOLD)`, then the trials continue.\r\n\r\n### Practice Procedure\r\n\r\n- We choose 4 subconditions randomly, and let the participant run through those. It otherwise follows the same procedure like the test detailed below.\r\n\r\n### Test Procedure\r\n- For a given subcondition's trial:\r\n  - The BASE_CORRELATION for that subcondition will be used to calculate the distribution of one plot, but we need to calculate the adjusted correlation on a trial-by-trial basis.\r\n    - _At the first presentation of a trial_, there is a need to compute the adjusted correlation. \r\n      - If converging from above, we calculate it by: `Math.min(MAX_CORRELATION, BASE_CORRELATION + INITIAL_DIFFERENCE)`\r\n      - If converging from below, we calculate it by: `Math.max(MAX_CORRELATION, BASE_CORRELATION - INITIAL_DIFFERENCE)`\r\n    - _If this is NOT the first presentation of a trial_, then use the **staircase method** to calculate the adjusted correlation. \r\n      - If converging from above:\r\n        - If the **previous** trial was correct, adjusted correlation = `Math.max(INITIAL_DIFFERENCE, previous adjusted correlation - MAX_STEP_SIZE)`\r\n        - If the **previous** trial was incorrect, adjusted correlation = `Math.min(MAX_CORRELATION, previous adjusted correlation + MAX_STEP_SIZE * INCORRECT_MULTIPLIER)`\r\n      - If converging from below:\r\n        - If the **previous** trial was correct, adjusted correlation = `Math.min(INITIAL_DIFFERENCE, previous adjusted correlation + MAX_STEP_SIZE)`\r\n        - If the **previous** trial was incorrect, adjusted correlation = `Math.max(MIN_CORRELATION, previous adjusted correlation - MAX_STEP_SIZE * INCORRECT_MULTIPLIER)`\r\n   - Generate a gaussian distribution using the BASE_CORRELATION and adjusted correlation.\r\n   - Plot each distribution onto a separate plot, and randomize whether the right/left plots get the base or adjusted correlation. The manner in which the distribution is plotted varies depending on the type of plot. For example:\r\n       - For a conventional strip, the x coordinate defines the horizontal translation while the y coordinate determines the height of the \"strip\".\r\n       - For a conventional ring, the x coordinate defines the horizontal translation while the y coordinate determines the radius of the \"ring\".\r\n   - A user can make keyboard inputs with the \"z\" or \"m\" keys. \"z\" corresponds to the left graph, \"m\" corresponds to the right graph.\r\n\r\n## JsPsych Timeline\r\n### General Timeline\r\n\r\n```\r\n- Display instructions\r\n- Ready screen\r\n- Display JND practice trials {\r\n    For a given JND experiment, continue to display trials if: \r\n    - There are still more practice subconditions\r\n  }  \r\n- Stop screen\r\n- Ready screen\r\n- Display JND test trials {\r\n    For a given JND experiment, continue to display trials if: \r\n    - There are still more test subconditions\r\n  }  \r\n- Stop screen with data download options\r\n```\r\n\r\n### Trial Logic\r\n\r\nWithin the trial object, all computations for distributions and constants are performed in the `on_start()` function. This means that prior to a trial executing, we perform ALL operations detailed in this function. This trial object can be found on line 120 in `scripts/experiments/jnd.js`. \r\n\r\nIn general, this is what is executed:\r\n```javascript\r\non_start: function(){\r\n\r\n  // Retrieve the constants (i.e variables listed in the section below) for the given subcondition index i\r\n  var constants = get_constants_for_subcondition(i); \r\n  \r\n  // Calculate adjusted correlation\r\n  // (Refer to next section for pseudocode of this function)\r\n  var adjusted_correlation = calculate_adjusted_correlation(constants);\r\n\r\n  // Save all relevant constants of this trial to the JsPsych data object\r\n  handle_data_saving(constants); \r\n\r\n  var base_coordinates = generate_distribution(constants.BASE_CORRELATION, \r\n                                               constants.ERROR, \r\n                                               constants.NUM_POINTS, \r\n                                               constants.NUM_SD, \r\n                                               constants.MEAN,\r\n                                               constants.SD);\r\n\r\n  var adjusted_coordinates = generate_distribution(adjusted_correlation, \r\n                                               constants.ERROR, \r\n                                               constants.NUM_POINTS, \r\n                                               constants.NUM_SD, \r\n                                               constants.MEAN,\r\n                                               constants.SD);\r\n\r\n  // Randomize position of the base/adjusted correlations to be either left/right\r\n  // and keep these positions constant for a given subcondition\r\n  var result = randomize_position(base_coordinates, adjusted_coordinates);\r\n  \r\n  // Set these correlations to the global D3 variables used for plotting\r\n  left_coordinates = result.left;\r\n  right_coordinates = result.right; \r\n\r\n} \r\n```\r\n\r\n### Adjusted Correlation\r\nBelow is the pseudocode for how the adjusted correlation value is generated for a given trial. \r\n\r\n```javascript\r\n\r\nvar MIN_CORRELATION = 0.0;\r\nvar MAX_CORRELATION = 1.0;\r\nvar INCORRECT_MULTIPLIER = 3;\r\n\r\nfunction calculate_adjusted_correlation(constants){\r\n  \r\n   // If first trial, compute solely using constants:\r\n   if (this_is_the_first_trial()){\r\n      var adjusted_correlation = initialize_adjusted_statistic(constants.CONVERGE_FROM_ABOVE,\r\n                                                               constants.BASE_CORRELATION, \r\n                                                               constants.INITIAL_DIFFERENCE);\r\n   }\r\n   // If not first trial, data from previous trial is needed:\r\n   else{\r\n     var last_JND_trial = get_data_from_last_trial();\r\n\r\n     var adjusted_correlation = get_next_adjusted_statistic(last_JND_trial.correct,\r\n                                                            constants.CONVERGE_FROM_ABOVE,\r\n                                                            last_JND_trial.adjusted_correlation,\r\n                                                            constants.BASE_CORRELATION,\r\n                                                            constants.MAX_STEP_SIZE);\r\n   }\r\n   return adjusted_correlation;\r\n}\r\n\r\nfunction initialize_adjusted_statistic(converge_from_above, base_correlation, initial_difference){\r\n\r\n  var adjusted_correlation;\r\n\r\n  if (converge_from_above){\r\n    adjusted_correlation = Math.min(MAX_CORRELATION, base_correlation + initial_difference); }\r\n  else{\r\n    adjusted_correlation = Math.max(MIN_CORRELATION, base_correlation - initial_difference);\r\n  };\r\n\r\n  return adjusted_correlation;\r\n}\r\n\r\nfunction get_next_adjusted_statistic(correct, converge_from_above, adjusted_quantity, base_correlation, max_step_size){\r\n\r\n  var next_adjusted_statistic;\r\n\r\n  var initial_difference = base_correlation;\r\n\r\n  if (converge_from_above) {\r\n    if (correct) {\r\n      next_adjusted_statistic = Math.max(initial_difference, adjusted_quantity - max_step_size);\r\n    } else {\r\n      next_adjusted_statistic = Math.min(MAX_CORRELATION, adjusted_quantity + max_step_size\r\n                                * INCORRECT_MULTIPLIER);\r\n    }\r\n  } else {\r\n    if (correct) {\r\n      next_adjusted_statistic = Math.min(initial_difference, adjusted_quantity + max_step_size);\r\n    } else {\r\n      next_adjusted_statistic = Math.max(MIN_CORRELATION, adjusted_quantity - max_step_size\r\n                                * INCORRECT_MULTIPLIER);\r\n    }\r\n  }\r\n\r\n  return next_adjusted_statistic;\r\n}\r\n```\r\n\r\n### Constants\r\nThese are the constants extracted from the input excel sheets. The values of these constants differ for each sub condition.\r\n\r\n- BASE_CORRELATION\r\n- ERROR\r\n- MAX_STEP_SIZE\r\n- CONVERGE_FROM_ABOVE\r\n- INITIAL_DIFFERENCE\r\n- NUM_POINTS\r\n- MEAN\r\n- SD\r\n- NUM_SD\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\jnd_radius.md",
    "name": "./docs/manual/pages/jnd_radius.md",
    "content": "# >> JND Radius\r\n\r\n- **Task**: Discrimination\r\n- **Method**: Forced choice with Staircase\r\n\r\n## Specifications\r\n\r\n**_**Note that all CAPPED variables are constants taken from the excel sheets/data file.**_**\r\n\r\n- For a given subcondition, there are at minimum 24 trials and at maximum 52. Once a user has reached the 24th trial, we start computing for convergence by calculating an F-value to see if it is lower than the threshold. \r\n  - If the F-value is < `(1-CONVERGENCE_THRESHOLD)`, then the current subcondition ends, and proceeds to the next subcondition.\r\n  - If the F-value is >= `(1-CONVERGENCE_THRESHOLD)`, then the trials continue.\r\n\r\n### Test Procedure\r\n- For a given subcondition's trial:\r\n  - The BASE_RADIUS for that subcondition will be used to calculate the distribution of one plot, but we need to calculate the adjusted radius on a trial-by-trial basis.\r\n    - _At the first presentation of a trial_, there is a need to compute the adjusted radius. \r\n      - If converging from above, we calculate it by: `BASE_RADIUS + INITIAL_DIFFERENCE`\r\n      - If converging from below, we calculate it by: `BASE_RADIUS - INITIAL_DIFFERENCE`\r\n    - _If this is NOT the first presentation of a trial_, then use the **staircase method** to calculate the adjusted radius. \r\n      - If converging from above:\r\n        - If the **previous** trial was correct, adjusted radius = `previous adjusted radius - 0.002`\r\n        - If the **previous** trial was incorrect, adjusted correlation = `previous adjusted radius + 0.006`\r\n      - If converging from below:\r\n        - If the **previous** trial was correct, adjusted correlation = `previous adjusted radius + 0.002`\r\n        - If the **previous** trial was incorrect, adjusted correlation = `previous adjusted radius - 0.006`\r\n   - Generate the shape using the BASE_RADIUS and adjusted radius.\r\n   - Plot each shape side by side, and randomize whether the right/left areas get the base or adjusted shapes.\r\n   - A user can make keyboard inputs with the \"z\" or \"m\" keys. \"z\" corresponds to the left graph, \"m\" corresponds to the right graph.\r\n\r\n### Constants\r\nThese are the constants extracted from the input excel sheets. The values of these constants differ for each sub condition.\r\n\r\n- BASE_RADIUS\r\n- CONVERGE_FROM_ABOVE\r\n- INITIAL_DIFFERENCE\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\stevens.md",
    "name": "./docs/manual/pages/stevens.md",
    "content": "# >> Stevens\r\n\r\n- **Task**: Discrimination\r\n- **Method**: Estimation w/ Bisection\r\n\r\n## Specifications\r\n\r\n**_**Note that all CAPPED variables are constants taken from the excel sheets/data file.**_**\r\n\r\n### Practice Procedure\r\n\r\n- We choose the first **4** subconditions of the data constants (prior to any balancing being done on the subconditions). It otherwise follows the same procedure like the test detailed below.\r\n- Exclusion criteria is calculated during the practice procedure. 2 values are calculated at the end of every subcondition, then stored to be displayed to the researcher who will then determine whether the participant should be excluded or not. \r\n  - We calculate standard deviation using the estimated correlations at the end of a trial (e.g. the value when the user hits space bar).\r\n  - To calculate anchoring, summate the final estimated correlation values for when the trial started with the LOW_REF for the middle plot, and the values for when the trial started with the HIGH_REF for the middle plot. So there would be 2 values for when the user started on LOW_REF, and 2 values for when the user started on HIGH_REF. Then take the absolute difference between these 2 sums.\r\n    - `anchoring_value = Math.abs(high_ref_trial_sum - low_ref_trial_sum)`\r\n  - So essentially, there will be 4 sets of anchoring and standard deviation values. \r\n  - A subcondition is flagged if the anchoring value > 0.5 or if the standard deviation is > 0.2. \r\n\r\n### Test Procedure\r\n- A subcondition's structure is \"nested\" in a sense, in which the user has **4** tries (TRIALS_PER_ROUND) to set the middle graph to be the midpoint between the two other plots. \r\n  - For example: let us say a subcondition is defined to have a high correlation (HIGH_REF) of 1.0 and a low correlation (LOW_REF) of 0. These are the R values for the two comparison plots. However, the starting value for the middle plot (the one that participants adjust) will alternate between starting off as the HIGH_REF or LOW_REF.\r\n     - Trial 1: middle graph's starting correlation = LOW_REF\r\n     - Trial 2: middle graph's starting correlation = HIGH_REF\r\n     - Trial 3: middle graph's starting correlation = LOW_REF\r\n     - Trial 4: middle graph's starting correlation = HIGH_REF\r\n  - A trial is defined as a series of presentations using the HIGH_REF and LOW_REF values, in which the position of the HIGH_REF and LOW_REF distributions are constant (e.g. in Round 1: right graph = HIGH_REF, left graph = LOW_REF). The positioning of whether the left/right plots get which distribution is random **across** trials, but **consistent** within a trial. So Round 2 might have the right graph = LOW_REF and left graph = HIGH_REF instead.\r\n     - Within a given trial, the user can use the \"z\" or \"m\" keys to decrease or increase respectively the correlation of the middle graph. Once the user believes that their middle correlation is a midpoint between the two straddling graphs, they hit _spacebar_ to lock in their answer. So this process happens 4 times, with (a) the middle graph alternating between taking the LOW or HIGH_REF, and (b) the straddling graphs randomizing in position in terms of whether the left or right get the HIGH and LOW_REF correlations.\r\n   - To calculate the estimated correlation with respect to the key press (e.g. they want to increase or decrease the correlation), the following formulas apply:\r\n     - `step_size = (HIGH_REF - LOW_REF) / MAX_STEP_INTERVAL`\r\n     - If increasing the correlation, `estimated_correlation = Math.min(HIGH_REF, last trial's estimated correlation + (Math.random() * step_size)`\r\n     - If decreasing the correlation, `estimated_correlation = Math.max(LOW_REF, last trial's estimated correlation - (Math.random() * step_size)`\r\n   - Within a given trial, all the distributions will **refresh** (e.g. new distributions will be generated using the HIGH_REF, LOW_REF and estimated correlation values) with a refresh rate defined by REGEN_RATE. \r\n- Distributions used are gaussian. The manner in which the distribution is plotted varies depending on the type of plot. For example:\r\n   - For a conventional strip, the x coordinate defines the horizontal translation while the y coordinate determines the height of the \"strip\".\r\n   - For a conventional ring, the x coordinate defines the horizontal translation while the y coordinate determines the radius of the \"ring\".\r\n\r\n## JsPsych Timeline\r\n```\r\n- Display instructions\r\n- Ready screen\r\n- Display Stevens practice trials {\r\n    For a given Stevens experiment, continue to display trials if: \r\n    - The person has inputted less than the value of TRIALS_PER_ROUND for a given subcondition, or, \r\n    - There are still more subconditions to show, or\r\n    - The person's performance has not passed the exclusion criteria\r\n  }  \r\n- Stop screen\r\n- Ready screen\r\n- Display Stevens test trials {\r\n    For a given Stevens experiment, continue to display trials if: \r\n    - The person has inputted less than the value of TRIALS_PER_ROUND for a given subcondition, or, \r\n    - There are still more subconditions to show\r\n  }  \r\n- Stop screen with data download options\r\n```\r\n\r\n### Trial Logic\r\n\r\nWithin the trial object, all computations for distributions and constants are performed in the `on_start()` function. This means that prior to a trial executing, we perform ALL operations detailed in this function. This trial object can be found on line 123 in `scripts/experiments/stevens.js`. \r\n\r\nIn general, this is what is executed:\r\n```javascript\r\non_start: function(){\r\n\r\n  // Retrieve the constants (i.e variables listed in the section below) for the given subcondition index i\r\n  var constants = get_constants_for_subcondition(i); \r\n  \r\n  // Save all relevant constants of this trial to the JsPsych data object\r\n  handle_data_saving(constants); \r\n\r\n  // Update the estimated correlation\r\n  // (Refer to next section for pseudocode of this function)\r\n  var estimated_correlation = update_estimated_correlation(this.trial, constants, last_trial); \r\n\r\n  // Generate the gaussian distributions\r\n  var high_coordinates = generate_distribution(constants.HIGH_REF, \r\n                                               constants.ERROR, \r\n                                               constants.NUM_POINTS, \r\n                                               constants.NUM_SD, \r\n                                               constants.MEAN,\r\n                                               constants.SD);\r\n\r\n  var high_coordinates = generate_distribution(constants.LOW_REF, \r\n                                               constants.ERROR, \r\n                                               constants.NUM_POINTS, \r\n                                               constants.NUM_SD, \r\n                                               constants.MEAN,\r\n                                               constants.SD);\r\n\r\n  var estimated_coordinates = generate_distribution(estimated_correlation, \r\n                                               constants.ERROR, \r\n                                               constants.NUM_POINTS, \r\n                                               constants.NUM_SD, \r\n                                               constants.MEAN,\r\n                                               constants.SD);\r\n\r\n  // Randomize position of the low/high correlations to be either left/right\r\n  // and keep these positions constant for a given subcondition\r\n  if (is_last_trial_of_subcondition(i)){\r\n    var result = randomize_position(high_coordinates, low_coordinates);\r\n  }\r\n  \r\n  // Set these correlations to the global D3 variables used for plotting\r\n  left_coordinates = result.left;\r\n  right_coordinates = result.right; \r\n  middle_coordinates = estimated_coordinates;\r\n\r\n} \r\n```\r\n\r\n### Estimated Correlation\r\nBelow is the pseudocode for how the estimated correlation value is generated for a given trial. \r\n\r\n```javascript\r\nvar MAX_STEP_INTERVAL = 10;\r\n\r\nfunction update_estimated_correlation(trial, constants, last_trial){\r\n\r\n  var estimated_correlation;\r\n\r\n  // If this is the first trial, we need to initialize the middle correlation value\r\n  if (this_is_the_first_trial()){\r\n    estimated_correlation = Math.random() < 0.5 ? constants.LOW_REF : constants.HIGH_REF;\r\n    trial.data.step_size = (constants.HIGH_REF - constants.LOW_REF) / MAX_STEP_INTERVAL;\r\n  }\r\n\r\n  // If there was a key press in the last value, we set this current trial's middle correlation value\r\n  // to be based on that input\r\n  else if (last_trial.key_press != null && last_trial.key_press.is_valid_value){\r\n    if (last_trial.key_press == UP_VALUE){\r\n      estimated_correlation = Math.min(constants.HIGH_REF, last_trial.estimated_correlation + (Math.random() * \r\n      last_trial.step_size));\r\n    }\r\n    else if (last_trial.key_press == DOWN_VALUE){\r\n      estimated_correlation = Math.max(constants.LOW_REF, last_trial.estimated_correlation - (Math.random() * \r\n      last_trial.step_size));\r\n    }\r\n  }\r\n\r\n  // If there was no input in the last trial\r\n  else {\r\n    estimated_correlation = last_trial.estimated_correlation;\r\n  }\r\n\r\n  return estimated_correlation;\r\n}\r\n```\r\n\r\n### Constants\r\nThese are the constants extracted from the input excel sheets. The values of these constants differ for each sub condition.\r\n\r\n- DISTRIBUTION_TYPE\r\n- ROUND_TYPE\r\n- TRIALS_PER_ROUND\r\n- HIGH_REF\r\n- LOW_REF\r\n- ERROR\r\n- NUM_POINTS\r\n- POINT_SIZE\r\n- POINT_COLOR\r\n- BACKGROUND_COLOR\r\n- TEXT_COLOR\r\n- AXIS_COLOR\r\n- REGEN_RATE\r\n- MEAN\r\n- SD\r\n- NUM_SD",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\estimation.md",
    "name": "./docs/manual/pages/estimation.md",
    "content": "# >> Estimation\r\n\r\n- **Task**: Discrimination\r\n- **Method**: Estimation w/ Bisection\r\n\r\n## Specifications\r\n\r\n* This task presents 2 shapes side by side. One shape is the reference shape, while the other is the modifiable shape, in which the user can increase or decrease the size of the shape (by pressing the M or Z keys). The goal is that the user will adjust the size of the modifiable shape so that it is as equal as possible to the reference shape's area. \r\n* Subconditions:\r\n  * 3 types of shapes - circle, square, or triangle\r\n    * So there are 3 x 3 = 9 different permutations of paired shapes (e.g. circle-circle, circle-square, circle-triangle etc.) - duplicates (3) = 6 permutations\r\n  * 3 sizes that the reference shape can start on - 2cm, 4cm or 6 cm\r\n  * 2 ways the modifiable shape can \"start\" on e.g. they can be either _smaller_ or _larger_ in size than the reference shape\r\n    * For 2cm reference shape, low = 1.2, high = 3\r\n    * For 4cm reference shape, low = 3.1, high = 5.3\r\n    * For 6cm reference shape, low = 5.0, high = 6.5\r\n  * **Total number of subconditions** = 6 [permutation of pairs] x 3 [possible reference sizes] = 18 subconditions\r\n* Randomize the order of the 18 subconditions.\r\n* On a given subcondition:\r\n  * The reference and modifiable shape positions can be either left or right (randomized). So before a subcondition starts, there will be text like \"Adjust the shape on the _left/right_ so that its size equals that of the other shape.\"\r\n  * For a given subcondition, there are 4 trials. In each trial, the user basically has to make the modifiable shape the same as the reference shape. On a given trial:\r\n     * For trials 1 and 3, the modifiable shape's size will start on the low value as specified above (e.g. if 2cm is the reference shape, then modifiable shape's size is 1.2)\r\n     * For trials 2 and 4, the modifiable shape's size will start on the high value as specified above.\r\n     * The y position of the shapes relative to each other should be slightly jittered (e.g. if have a circle and square, the circle is not completely aligned with the square, so could be a few pixels higher or lower etc.) - the degree of jitter can be randomized.\r\n     * The user can press the z [make shape bigger] or m [make shape smaller] keys.\r\n        * The step size of the adjustment will be randomized (so not constant).\r\n     * They can adjust for an unlimited amount of times.\r\n     * Once satisfied, they hit space bar, which then records the size of their modified shape.\r\n     * This happens 3 more times (for the same subcondition).\r\n  * After the 4 trials for a given subcondition, experiment then moves to the next subcondition.\r\n\r\n  ## Summer 2019 Updates\r\n\r\n  We implemented a series of new estimation conditions to do with measuring area ratios. Tina's pdf spec is [here](/VCLWebFramework/manual/files/Estimation-Interference-Spec.pdf).\r\n\r\n  - List of new conditions:\r\n    - Square, Circle Interference\r\n    - Circle Interference\r\n    - Multi Square Interference\r\n    - Multi Shape Interference\r\n    - Multi Fan Interference\r\n    - Absolute Area Ratio\r\n    - Absolute Area Ratio Bisection (Variant A)\r\n    - Absolute Area Ratio Bisection (Variant B)\r\n    - Multi Fan Interference (Part B)\r\n    - Multi Square Cutout Interference\r\n    - Absolute Area Ratio Flicker\r\n    - Absolute Area Ratio Bisection (Variant A) Flicker\r\n    - Multi Fan Interference (Part B) Flicker\r\n    - Multi Square Cutout Interference Flicker \r\n  - ** All the flicker conditions are identical to the original condition of the same name, except there is 1000 ms on and 1000 off duration on the ref shapes.\r\n\r\n  ### Code Updates\r\n\r\n  - There are 4 different kinds of configurations:\r\n    - **Single-single** : one shape on ref side and one on mod side (e.g. anything done before the interference conditions)\r\n    - **Multi-multi** : 2 shapes on ref side and 2 shapes on mod side. On mod side, ONE shape is the one getting modified (e.g. Multi Square Interference, Multi Fan Interference etc.)\r\n       - Attributes `mod_side_alignment` and `ref_side_alignment` define the types of alignment on mod/ref side, as sometimes alignment is not the same for both.\r\n       - Attributes `mod_side_shapes` and `ref_side_shapes` need to be defined to tell framework what kinds of shapes are on each side.\r\n       - Attributes `mod_ratio` and `ref_ratio` need to be defined so the framework knows what area ratio needs to be maintained on each side.\r\n    - **Bisection** : the modi shape is in the center, straddled by 2 ref shapes on left and right. Acts similarly to stevens (e.g. Absolute Area Ratio Bisection)\r\n       - Attribute `ref_size` now takes in array of TWO numbers (since there are 2 ref shapes)\r\n    - **Interference** : one shape on ref side and one on mod side - but the shape on the mod side is a compound shape (e.g. Circle, Square Interference) (AKA a triangle is embedded inside a circle, and the whole thing scales with user input)\r\n  - All the graphical code previously in model level AKA `estimation.js` now lives inside the graphing component as a custom script (`estimation_plot.js`).\r\n  - All computations for shape properties like size, x_pos, y_pos etc. is done at model level due to complexity.\r\n  - New shapes are the fan and cutout-square shapes, otherwise everything else uses Zoe's D3 code.\r\n  - Flicker capability is added on reference shapes - can control duration of how long shapes show, and how long shapes don't show. This essentially then loops e.g. if `duration_on` = 1000ms and `duration_off` = 1500ms, flicker will be: show shapes for 1000ms, then off for 1500ms, then on for 1000ms etc. \r\n  - Initially all the subconditions were programmatically generated as per Zoe's original code. It was becoming tricky to extend because new conditions did not necessarily generate subconditions in the same way, so to make it easier for Tina to customize her values, I refactored  `estimation_data.js` to be similar to `jnd_data.js` where every subcondition attribute is defined (so no longer generated programmatically).\r\n\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\supported_properties.md",
    "name": "./docs/manual/pages/supported_properties.md",
    "content": "# Supported Properties\r\n\r\n## Identifiers\r\n\r\nBelow are all the supported values for each of the four identifiers. \r\n\r\n### Base Experiment\r\n\r\n### Trial Structure\r\n\r\n### \r\n\r\n### Graph Types\r\n\r\n## Subcondition Attributes\r\n\r\nBelow are each of the attributes used to define a subcondition. For experimental attributes, some attributes \r\nMUST be defined depending on the experiment. Usually, if you are adding a new condition that uses a pre-existing trial structure, the base subconditions from the trial structure already define all these attributes.\r\n\r\nDepending on the graph type of the condition, certain graphical attributes can be customized. They will default \r\nto a specific value if they are not defined in your new condition.\r\n\r\n### Experimental Attributes\r\n\r\n### Graphical Attributes\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\conditions.md",
    "name": "./docs/manual/pages/conditions.md",
    "content": "# Conditions\r\n\r\nBelow is a list of all supported conditions in the framework organized by experiment.\r\n\r\n** 1/2/2019 - Madison's Visual Search + Numerosity experiments from December 2018 can be found [here.](https://github.com/Wongelawit/Correlation_MultipleEnsemble/tree/Numerosity-Task)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\developing_new_conditions.md",
    "name": "./docs/manual/pages/developing_new_conditions.md",
    "content": "# Developing New Conditions\r\n\r\n## For Researchers\r\n\r\nIf you are planning to add a new condition that uses the base experiments already supported, please provide the following information.\r\n\r\nTo see what identifiers are supported, refer to the page [here](/VCLWebFramework/manual/supported_properties.html).\r\n\r\n- **Condition Name**\r\n- **High-Level Description of Condition**\r\n- **Identifiers**\r\n  - **Base Experiment**\r\n  - **Trial Structure**\r\n  - **Balancing**\r\n  - **Graph Type**\r\n- **Subconditions**\r\n  - **How many subconditions?**\r\n  - **What is changing on each subcondition? List all variables.**\r\n  - **How are each of the variables being changed? List all equations/computations needed if changing on a trial-by-trial basis.**\r\n\r\n### Example\r\n\r\nLet us say you want to make a new condition for a JND Design experiment that changes point size on each grouping of the Design trial structure. This is what your information would look like:\r\n\r\n- **Condition Name**: small_point_sizes\r\n- **High-Level Description of Condition**: Standard JND scatter plot condition, except point sizes vary between 5 - 13 pixels for each 0.3, 0.6, 0.9 base correlation grouping.\r\n- **Identifiers**\r\n  - **Base Experiment**: JND\r\n  - **Trial Structure**: Design\r\n  - **Balancing**: Latin Square\r\n  - **Graph Type**: Scatter\r\n- **Subconditions**\r\n  - **How many subconditions?**: 15\r\n  - **What is changing on each subcondition? List all variables.**: Point size\r\n  - **How are each of the variables being changed on each subcondition? List all equations/computations needed if changing on trial-by-trial basis.**: The design trial structure has 5 groupings of the base_correlation = 0.3, 0.6, 0.9, making 15 total subconditions. For each group, point size is different.\r\n     - Group 1 point size = 5 px\r\n     - Group 2 point size = 7 px\r\n     - Group 3 point size = 9 px\r\n     - Group 4 point size = 11 px\r\n     - Group 5 point size = 13 px\r\n\r\n## For Developers\r\n\r\n### (1) Add to config\r\n\r\n- Under `public/config/conditions-config`, add a new key and javascript object at the bottom. The object should something like below.\r\n  - Refer [here](/VCLWebFramework/manual/supported_properties.html#identifiers) for what is supported on each identifier (experiment, graph type, trial structure, balancing).\r\n\r\n```\r\nname_of_new_condition: {\r\n\texperiment: [],\r\n\tgraph_type: [],\r\n\ttrial_structure: [],\r\n\tbalancing: \"\",\r\n\tdisplay_name: \"New condition name\",\r\n\tdisplay_info: {\r\n\t\tdescription: \"\",\r\n\t\tresearcher: \"\",\r\n\t\tdeveloper: \"\"\r\n\t}\r\n}\t\r\n```\r\n  - Check that when you load the UI, your condition is visible with the identifiers specified.\r\n  - Note that `experiment`, `graph_type` and `trial_structure` can take multiple strings (in an array). So you can have the SAME condition name, with the same kind of subcondition-level manipulation, but different underlying base experiment, different graph type, or different trial structure. Good examples of these are the base experiments that run across JND and Stevens.\r\n\r\nIf we use the example from above, the JS object looks like this:\r\n```\r\nsmall_point_sizes: {\r\n\texperiment: [\"jnd\"],\r\n\tgraph_type: [\"scatter\"],\r\n\ttrial_structure: [\"design\"],\r\n\tbalancing: \"latin_square\",\r\n\tdisplay_name: \"Small Point Sizes\",\r\n\tdisplay_info: {\r\n\t\tdescription: \"Standard JND scatter plot condition, except point sizes vary between\" +  \r\n\t\t\t\t\t \"5 - 13 pixels for each 0.3, 0.6, 0.9 base correlation grouping.\",\r\n\t\tresearcher: \"Caitlin Coyiuto\",\r\n\t\tdeveloper: \"Caitlin Coyiuto\"\r\n\t}\r\n}\r\n```\r\n\r\n### (2) Add subconditions\r\n\r\n- Open the right data file for the experiment - they are under `public/scripts/experiment-properties/data/constants`.\r\n  - How the subconditions work is that for a given trial structure, the application **MERGES** all attributes defined in the `BASE` object with all attributes defined in the `CONDITIONS` object. From the example, `small_point_sizes` is a JND condition using a design trial structure. So the app generates the subconditions for `small_point_sizes` by merging the attributes from `JND_BASE[\"design\"]` and `JND_CONDITIONS[\"small_point_sizes\"]`.\r\n- If the trial structure is already supported, you would only need to add all subconditions in a `key: []` structure to the `CONDITIONS` object.\r\n  - Add a new key-value pair into the object for `CONDITIONS`, with key being the `condition_name` and the value being an array of associative arrays. \r\n    - Each associative array = one subcondition. \r\n  - The keys for each associative array are any of the attributes found [here](/VCLWebFramework/manual/supported_properties.html#subcondition-attributes).\r\n  - Some notes:\r\n    - The number of entries in the array **must match** the number of entries in the trial structure array. (E.g. if the design trial structure has 15 subconditions/rows, then the new array under `CONDITIONS` must also have 15 rows).\r\n    - You can **OVERRIDE** any of the attributes found in the base subconditions. E.g. you can redefine \"point_size\" in your subcondition if you are changing it on a subcondition-basis.\r\n\r\nAn example of a new object holding all subconditions should look something like this:\r\n\r\n```\r\nname_of_new_condition:\r\n[\r\n\t{attribute1: ___, attribute2: ____}, //first subcondition\r\n\r\n\t{attribute1: ___, attribute2: ____}, //second subcondition\r\n\r\n\t{attribute1: ___, attribute2: ____}, //third...\r\n\r\n\t{attribute1: ___, attribute2: ____},\r\n\r\n\t.....                                //Number of rows = number of rows or subconditions in trial structure\r\n]\r\n```\r\n\r\nUsing the example from above, we are just changing `point_size`, so we need to define each of the sizes on every subcondition.\r\nNote that the subconditions for a JND Design already has `point_size` (look at `JND_BASE[\"design\"]`). By re-defining the `point_size`\r\nattribute here, you are **OVERRIDING** the `point_size` variable in the base. Also note that the number of rows below are equal to the number of rows in `JND_BASE[\"design\"]`.\r\n\r\n```\r\nsmall_point_sizes:\r\n    [\r\n    {point_size: 5},\r\n\r\n    {point_size: 5},\r\n\r\n    {point_size: 5},\r\n\r\n    {point_size: 7},\r\n\r\n    {point_size: 7},\r\n\r\n    {point_size: 7},\r\n\r\n    {point_size: 9},\r\n\r\n    {point_size: 9},\r\n\r\n    {point_size: 9},\r\n\r\n    {point_size: 11},\r\n\r\n    {point_size: 11},\r\n\r\n    {point_size: 11},\r\n\r\n    {point_size: 13},\r\n\r\n    {point_size: 13},\r\n\r\n    {point_size: 13},\r\n    ]\r\n ```\r\n\r\nAgain, depending on your trial structure, the application will merge the constants you define in `CONDITIONS` with any that are defined in the `BASE` to get all attributes for the subconditions. So for this example, all the subconditions for `small_point_sizes` is whatever is listed in the `JND_BASE[\"design\"]`, plus whatever is defined in the `CONDITIONS` variable. \r\n\r\n```\r\n[\r\n    {distribution_type: \"gaussian\", base_correlation: 0.3, error: 0.0001, max_step_size: 0.01, \r\n    converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, \r\n    num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', \r\n    feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 5}, // <-- point_size is now   \r\n                                                                                   // overriden (usually for JND \r\n                                                                                   // design, point_size = 6)\r\n\r\n    {distribution_type: \"gaussian\", base_correlation: 0.6, error: 0.0001, max_step_size: 0.01, \r\n    converge_from_above: true, initial_difference: 0.1, num_points: 100, mean: 0.5, SD: 0.2, \r\n    num_SD: 2.5, point_color: 'BLACK', axis_color: 'BLACK', text_color: 'BLACK', \r\n    feedback_background_color: 'WHITE', background_color: 'WHITE', point_size: 5},\r\n    .....\r\n]\r\n```\r\n\r\n ### (3) Update instructions\r\n\r\nAutomatically, the application will use the default instructions specified for each experiment in `experiments-config.js` if no instructions are specified for the condition. For example, for JND:\r\n\r\n```\r\n  jnd : {\r\n    .....\r\n    instructions: {\r\n      default_images: [\"scatter_1.png\", \"scatter_2.png\"],\r\n      default_html: `\r\n        <div align = 'center' style='display: block' > \r\n          <p>In this experiment, two graphs will appear side-by-side.\r\n                <br> Indicate which graph is more correlated by pressing the Z or M key. \r\n                <br> Press any key to continue.\r\n                </p>\r\n                <div style='float: left; margin-right: 5vw'>\r\n                  <img style= 'width: 20vw' src='${ADDRESS}/img/instructions/jnd/image1.png'></img>\r\n                  <p class='small'><strong>Press the Z key</strong></p>\r\n                </div>\r\n                <div style='float:right; margin-left: 5vw'>\r\n                  <img style= 'width: 20vw' src='${ADDRESS}/img/instructions/jnd/image2.png'></img>\r\n                  <p class='small'><strong>Press the M key</strong></p>\r\n                </div>\r\n              </div> \r\n            `    \r\n    },\r\n    ......\r\n\r\n```\r\nThe default images are `scatter_1.png` and `scatter_2.png`, which replace `image1.png` and `image2.png`.\r\n\r\nIf you do not want to use the default images or default html, you will need to tack on an additional `instructions` key to the conditions object in `conditions-config.js`.\r\n\r\n```\r\nname_of_new_condition: {\r\n  experiment: [],\r\n  graph_type: [],\r\n  trial_structure: [],\r\n  balancing: \"\",\r\n  display_name: \"New condition name\",\r\n  display_info: {\r\n    description: \"\",\r\n    researcher: \"\",\r\n    developer: \"\"\r\n  },\r\n  instructions: {\r\n    name_of_experiment: {\r\n      custom_html: ``\r\n      // OR \r\n      custom_images: ['image1.png', 'image2.png' ... ]\r\n    }\r\n  }\r\n} \r\n```\r\nInside the `instructions` object, you must supply either: \r\n- (a) `custom_html`, which takes in raw HTML, and will override the `default_html` and `default_images` inside `experiments-config.js`, OR\r\n- (b) `custom_images`, which allows you to replace ONLY the `default_images` specified in the `experiments-config.js`. \r\n   - All instruction images are inside `public/img/instructions`. Add your images into the **corresponding experiment folder.**\r\n   - Make sure that the number of `custom_images` supplied equals the number of `default_images` listed inside `experiments-config.js`. E.g. if the default uses 2, then you need to supply 2 custom images.\r\n\r\nUsing the `small_point_sizes` example:\r\n```\r\nsmall_point_sizes: {\r\n  experiment: [\"jnd\"],\r\n  graph_type: [\"scatter\"],\r\n  trial_structure: [\"design\"],\r\n  balancing: \"latin_square\",\r\n  display_name: \"Small Point Sizes\",\r\n  display_info: {\r\n    description: \"Standard JND scatter plot condition, except point sizes vary between\" +  \r\n           \"5 - 13 pixels for each 0.3, 0.6, 0.9 base correlation grouping.\",\r\n    researcher: \"Caitlin Coyiuto\",\r\n    developer: \"Caitlin Coyiuto\"\r\n  },\r\n  instructions: {\r\n    jnd: {\r\n      custom_images: ['small_point_1.png', 'small_point_2.png']\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n ### (4) Update docs\r\n\r\n The docs dynamically gets all the condition data specified in the config files. However, it needs to be compiled to be re-updated.\r\n\r\n Run this in the command line:\r\n\r\n `./node_modules/.bin/esdoc`\r\n\r\n And check that your condition exists in the [Conditions tab](/VCLWebFramework/manual/conditions.html).\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\developing_new_properties.md",
    "name": "./docs/manual/pages/developing_new_properties.md",
    "content": "# Developing New Properties\r\n\r\nSometimes, new conditions require new properties to be added to the framework. This section goes through how to add new properties for each identifier.\r\n\r\n## Trial Structures\r\n\r\nTo add a new trial structure to an **existing** experiment:\r\n\r\n1. In `public/config/trial-structure-config.js`, add a new key-object pair. Add the relevant doc information like the pre-existing trial structures.\r\n2. Make sure that the base experiment supports the new structure:\r\n- In `public/config/experiments-config.js`, add the name of the new trial structure under the `trial_structure` key for the correct base experiment.\r\n- Navigate to the right `public/scripts/data/constants/___data.js` file for the base experiment. Determine how many subconditions the structure will support, and add the new key-array object under the `<experiment_name>_BASE` object. For example:\r\n```\r\nconst JND_BASE = {\r\n\t....\r\n\r\n\tnew_trial_structure: // <--\r\n\t[\r\n\t\t{ ... }\r\n\t\t{ ... }\r\n\t\tetc. \r\n\t]\r\n}\r\n```\r\nWhen adding the attributes, make sure you add **all attributes that the experiment needs to run**. Look at the attributes required for each experiment [here](/VCLWebFramework/manual/supported_properties.html#experimental-attributes).\r\n3. In `public/scripts/data/custom_subcondition_generator.js`, add a new key-object pair under `CUSTOM_TRIAL_STRUCTURE_CONDITIONS`. \r\n```\r\nvar CUSTOM_TRIAL_STRUCTURE_CONDITIONS = {\r\n\tfoundational : [],\r\n\t...\r\n\r\n    new_structure: [] // <-- \r\n}\r\n```\r\n\r\n## Balancing Types\r\n\r\nIf you want to add a new way to balance subconditions:\r\n\r\n1. In `public/config/balancing-config.js`, add a new key-object pair. Add the relevant doc information like the pre-existing balancing types.\r\n2. Create a new generator file inside `scripts/experiment-properties/balancing/generators`. It should take **the length of the dataset array, and return the ordered indices of the subconditions.** E.g., if the dataset has 4 subconditions, the random generator will give back [2, 0, 1, 3] AKA randomize the order of the indices.\r\n3. Make sure the balancing controller supports the new type. In `scripts/experiment-properties/balancing/balancing_controllers.js`, import the function from your generator js, then add another case in the switch statement.\r\n4. Make sure that the base experiment supports the new structure. In `public/config/experiments-config.js`, add the name of the new balancing type under the `balancing_type` key for the correct base experiment.\r\n\r\n## Graph-Related\r\n\r\nIn terms of graph-related properties, you could either be adding attributes to an **already existing graph type**, or adding an entire new type of **plot or graph type**. \r\n\r\n### Graphical Attributes\r\n\r\nThis assumes that you are adding to a **pre-existing graph type**. E.g. if you want to add `stroke_width` to the `scatter` graph type.\r\n\r\n1. In `public/config/graphing-config.js` add a key-object pair under the `attributes` of the graph type. Fill in the doc information, and what the default value is. If the attribute only takes in a **fixed** set of inputs, add a key called `valid_inputs: [input1, input2 .... ]`.\r\n2. Add d3 code to handle the new attribute. Open the right js file corresponding to the graph type in `public/scripts/graphing/d3-base-plots`. \r\n\r\n### Graph Types\r\n\r\nIf you want to add a **completely new graph type** (AKA plot):\r\n\r\n1. In `public/config/graphing-config.js`, add a new key-object pair for the graph type. Add the doc information, and all the attributes that can be manipulatable by subconditions.\r\n2. In `public/config/experiments-config.js`, add the name of the graph type under the experiment that it will support.\r\n3. In `public/scripts/experiment-properties/graphing/graphing_controller.js`:\r\n - Add a new switch case in `plot_distributions`. \r\n - Add a new \"prepare\" function - it can be modelled after `prepare_scatter_plot`, but in the event that you need to pass additional params which are dependent on the trial data, you can add those in your `attributes` object too (look at `prepare_shapes_plot`). Basically, the prepare function sets up all the data and attributes needed for a **single** plot, and passes it into the d3 script that will actually generate the plot.\r\n4. Now you need to write the d3 code, which will take in the the `attributes` object created in your `prepare` function.\r\n - Create a new js file named after the graph type inside `d3-base-plots`. \r\n - Write your d3 code. You will be appending the chart to a div with id = `graph`. So you would be doing something like:\r\n```\r\nlet chart = d3.select(\"#graph\")\r\n\t\t\t  .append(\"svg\")\r\n\t\t\t     ......\r\n```\r\n\r\n### Point/Shape Types\r\n\r\nFor some conditions, there may be a need to simply add a new kind of `point_type` (belonging to `scatter` graph type) or a new type of shape taken inside the `shapes` array (belonging to `shapes` graph type).\r\n\r\n1. In `public/config/graphing-config.js`, add the name of the new kind of point or shape type, either under the `valid_inputs` key of scatter's `point_type`, or shapes' `shapes`. \r\n2. Add the relevant d3 code in the `public/scripts/experiment-properties/graphing/d3-base-plots`. \r\n- If adding a new `point-type`, open `scatter_plot.js`, and add a switch case with the d3 code in `plot_scatter_points`. \r\n- If adding a new shape type for `shapes`, open `shape_plot.js`, and add a switch case inside `create_shape_plot`. Write the d3 function to handle that case.\r\n\r\n## Adding Experiments\r\n\r\nIn the case you are building an entirely new experiment, you will have to do all of the above, plus build the jsPsych timeline and model object to support the timeline. If you haven't read up on [JsPsych](https://www.jspsych.org/), I would suggest you do that first, and at least do the [reaction time tutorial](https://www.jspsych.org/tutorials/rt-task/).\r\n\r\n1. In `public/config/experiments-config.js`, add a new key-object inside `EXPERIMENTS`. You need to provide the `trial_structure`, `graph_type`, `balancing_type`, `docs`, and all `attributes` the experiment supports. Refer to the above ^^ instructions if you are adding any new properties for the identifiers.\r\n2. Create the **relevant html files** that (a) holds the jsPsych timeline, and (b) displays the trials. E.g. look under `public/views/jnd` - there is an HTML for jnd_experiment.html and jnd_trial_display.html.\r\n  - Create a new folder with the same name as your experiment under `public/views` for your experiment.\r\n  - Add an HTML file called `<experiment_name>_experiment.html` and `<experiment_name>_trial_display.html`. \r\n  - Inside the experiment HTML, you will pass the routing params from the server side. Literally copy and paste below and change all the `<Experiment Name>` tags to the new experiment.\r\n  ```\r\n  <!DOCTYPE html>\r\n\t<html>\r\n\t  <head>\r\n\r\n\t    <title>VCL: <Experiment Name> Experiment</title>\r\n\r\n\t    <%- include('../header'); %>\r\n\r\n\t    <script type=\"text/javascript\">\r\n\r\n\t      // Routing params from EJS:\r\n\t      var params = {\"trial_structure\": \"<%= trial_structure %>\",\r\n\t                    \"condition\": \"<%= condition %>\",\r\n\t                    \"graph_type\": \"<%= graph_type %>\",\r\n\t                    \"balancing\": \"<%= balancing %>\",\r\n\t                    \"subject_id\": \"<%= subject_id %>\",\r\n\t                    \"subject_initials\": \"<%= subject_initials %>\"};\r\n\r\n\t    </script>\r\n\r\n\t    <script type=\"module\" src=\"/scripts/experiments/<experiment_name>/<experiment_name>_timeline.js\" ></script>\r\n\r\n\t  </head>\r\n\r\n\t  <body>\r\n\t  </body>\r\n\r\n\t</html>\r\n  ```\r\n  - Inside the trial display HTML, we need to call the function to plot the graphs. Copy and paste below, and change the `<experiment name>` tags.\r\n  ```\r\n  <!DOCTYPE html>\r\n\t<html>\r\n\t<head>\r\n\t    <link rel=\"icon\" href=\"./img/VCL_favicon.png\">\r\n\r\n\t    <!-- Scripts: -->\r\n\r\n\t    <!-- D3: -->\r\n\t    <script src = \"https://d3js.org/d3.v4.min.js\"></script>\r\n\t    <script src=\"https://d3js.org/d3-selection-multi.v0.4.min.js\"></script>\r\n\r\n\t</head>\r\n\t<body>\r\n\t  <div align = \"center\">\r\n\t    \r\n\t    <!-- D3 graph goes here: -->\r\n\t    <div id=\"graph\">\r\n\t    </div>\r\n\t    \r\n\t    <script type=\"module\">\r\n\t    \r\n\t        import { <experiment_name>_exp } from \"/scripts/experiments/<experiment_name>/<experiment_name>_timeline.js\";\r\n\t        import { plot_distributions } from \"/scripts/experiment-properties/graphing/graphing_controller.js\";\r\n\t        \r\n\t        plot_distributions(<experiment_name>_exp);\r\n\r\n\t    </script>\r\n\t  </div>\r\n\t</body>\r\n\t</html>\r\n  ```\t\r\n3. Add your **data** for the experiment. \r\n  - In `/scripts/data/constants` add a new js file called `<experiment_name>_data.js`. \r\n  - Add all your subcondition data for the trial structure it supports, and any new conditions. Refer [here](/VCLWebFramework/manual/developing_new_properties.html#trial-structures) if you're making a new trial structure, and [part 2 of here](/VCLWebFramework/manual/developing_new_conditions.html) for the new conditions.\r\n  - In `/scripts/data/data_controller.js`, import your `BASE` and `CONDITIONS` variables your data js file. \r\n    - Add the new base experiment to `EXPERIMENT_BASES` and `EXPERIMENT_CONDITIONS`.\r\n4. Update **server-side routing**. Open `app.js` under root, and add another `else if` statement. Make the response render the `<experiment_name>_experiment.html` that you recently created. \r\n5. Add the **experimental logic**. You need to build: **(a) the JsPsych timeline,** and **(b) a model class to support the timeline.** You **MAY** not need a new model class, especially if your experiment is simple enough and doesn't have a lot trial-by-trial dependencies (e.g. look at the visualSearch branch from [here](https://github.com/Wongelawit/Correlation_MultipleEnsemble)). I would suggest using `JND_Radius` as a base, it is the simplest among the experiments.\r\n  - Add a new folder under `public/scripts/experiments`.\r\n  - Add two js files, (or one if you don't need the model class), called `<experiment_name>.js` and `<experiment_name>_timeline.js`. \r\n  - For the timeline, there should be blocks for:\r\n    - The welcome page\r\n    - Instructions\r\n    - Feedback (if any after a trial)\r\n    - Experimental trial\r\n    - The end page\r\n  - For the model class, you need to be able to:\r\n    - Retrieve the right data from the /constants folder\r\n    - Balance the data\r\n    - Make the trial block (e.g. `generate_trial` jsPsych object)\r\n    - Save any variables that the researchers want saved on a trial-by-trial basis\r\n    - Determine what is a correct/incorrect response, and change the next trial's presentation (if the experiment demands it)\r\n    - Export the data once the experiment ends\r\n  - There is no template for the model class, though there are some functions that you can probably re-use from `JND_Radius` (aka `prepare_experiment`), but a lot of the constants are subject to whatever the experiment needs, and the `generate_trial` object is task-dependent.   \r\n\r\n## Overriding\r\n\r\nThere are instances where new conditions or plots cannot be supported naturally by the framework. These usually are **unconventional** instances. A good example are all the conditions prefixed with `distractor_<color>_shades`. These conditions plot **TWO** distributions onto a scatter graph, and additionally do not follow any of the supported trial structures. There is therefore a way to **NOT USE** the base plots (e.g. anything in `d3-base-plots`) and to not be dependent on any of the trial structures, so you can create your subconditions dynamically instead of declaring them inside `/data/constants`. \r\n\r\n### Custom Plots\r\n\r\nAssuming that you have a plot that can be categorized under one of the main graph types, but there is some **unconventional** set-up involved that may likely break or cause the main base plot code to become messy, create a custom d3 script. \r\n\r\nFor example, the `distractor` conditions plot two distributions onto a single scatter plot, and also have a very specific way of plotting points to allow equal occlusion between the distributions. Adding this into this functionality into the `d3-base-plots/scatter_plot.js` will likely make things very messy. So we created a custom D3 script for it instead (`d3-custom-plots/distractor_scatter_plot.js`).\r\n\r\n1. Inside `/scripts/experiment-properties/graphing/custom_graphing_controller.js`. \r\n   - Add an if-else clause inside the function `is_custom_plot`. Basically should return true for your condition.\r\n   - Add an if-else clause inside `prepare_custom_plot`, and create a new function that sets up the attributes to be sent to your d3 function.\r\n   - Import that function at the top of this script.\r\n2. Create the d3 script. Add a new custom plot script inside `/d3-custom-plots`.\r\n3. Lastly, although the d3 code is customized for your condition, the framework still assumes that your condition uses one of the base plots (e.g scatter, strip etc.). If the new plot doesn't fit \"naturally\" into these types, then you might as well create a [new graph type](/VCLWebFramework/manual/developing_new_properties.html#graph-types).\r\n\r\n### Subcondition Generation\r\n\r\nThere are two instances where you can have custom code for your subconditions: (1) you want to write code that programmatically generates the subconditions instead of writing your data manually inside `/data/constants` (so this **still means you are following a certain trial structure**), or (2) you are **NOT following any trial structure** altogether, so the **trial structure is `custom`**. \r\n\r\nInside `/scripts/data/custom_subcondition_generator.js`:\r\n- For (1): Add your condition name inside `CUSTOM_TRIAL_STRUCTURE_CONDITIONS`, under `custom` key.\r\n- For (2): Add your condition name inside `CUSTOM_TRIAL_STRUCTURE_CONDITIONS`, under the trial structure it follows.\r\n- Then:\r\n  1. Add an if-else inside `get_subconditions` to route it to your custom generator function.\r\n  2. Write the function below to generate the subconditions.\r\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "E:\\VCL\\new_sequencing\\VCLWebFramework\\docs\\manual\\pages\\updating_documentation.md",
    "name": "./docs/manual/pages/updating_documentation.md",
    "content": "# Updating Documentation\r\n\r\nThis documentation is generated using [ESDoc](https://esdoc.org/), which automatically detects and generates documentation for methods, constants, functions etc. in the framework. This is under tabs **Reference** and **Source** at the top.\r\n\r\nThis manual also has custom pages (AKA under tab **Home** and what is on the left sidebar). These pages are generated using ESDoc's markdown -> HTML conversion feature, but some pages also use javascript to draw from config files in the framework in order to display all conditions, attributes etc. \r\n\r\nThese sections will describe how these custom pages work, and how to create new pages.\r\n\r\n## Project Structure of the Docs\r\n\r\n- At root level:\r\n  - `docs` folder - this is basically where everything documentation-related goes.\r\n  - `.esdoc.json` - this is the config file for ESDoc. This file must be updated whenever you're adding new pages or new scripts.\r\n     - There are three plugins:\r\n       - `esdoc-standard-plugin` - adding the address of the md file into the `files` array will let ESDoc convert the md file into html.\r\n       - `esdoc-inject-script-plugin` - adding the address of any scripts into the `scripts` array will let ESDoc run these scripts across ALL html files. \r\n       - `esdoc-inject-style-plugin` - adding the address of any style scripts into the `styles` array will make the CSS available across ALL html files.\r\n- Inside `docs` folder:\r\n  - `manual` folder - this is where we add any new css, images, pages, or scripts.\r\n  - You can IGNORE everything else, we are only touching the `manual` folder as everything else is automatically generated by ESDoc.\r\n\r\n### Dynamic Sections \r\n\r\nSome creative hacking was involved to get ESDoc to draw from the data from the `config` files in the framework. This means that as devs add new conditions, attributes etc. into the config files, the documentation will also get automatically updated. \r\n\r\n1. The main .md files that draw from `config` are `conditions.md`, `experiments.md` and `supported_properties.md` inside `docs/manual/pages`. These files just have the skeleton text (e.g. no tables).\r\n2. The `docs/manual/scripts/view-controller.js` script:\r\n   - Forcibly injects CDN JQuery + Bootstrap (which ESDoc could not do naturally)\r\n   - Calls the renderer scripts depending on HTML id tag \r\n3. Anything ending in `-renderer.js` inside `docs/manual/scripts` draws from the `config` files, creates all HTML tables and appends them to the page.\r\n4. Note that in `.esdoc.json`, under the `esdoc-inject-script-plugin`, we include the config AND renderer scripts so they can be run throughout the docs. \r\n\r\n## Creating New Pages\r\n\r\n1. Inside `docs/manual/pages` create a new markdown file. Write all your content using markdown syntax.\r\n2. In `.esdoc.json`, add the page address into the array of `files` under the object with plugin name `esdoc-standard-plugin`. \r\n3. ESDoc can now convert the markdown file into HTML. Run: `./node_modules/.bin/esdoc`.\r\n\r\n## Updating Pages or Scripts\r\n\r\nIf you are changing ANY of the content inside `docs/manual`, or the `config` files from the framework have been updated, **you must run this script so the documentation updates**:\r\n\r\n`./node_modules/.bin/esdoc`",
    "static": true,
    "access": "public"
  }
]